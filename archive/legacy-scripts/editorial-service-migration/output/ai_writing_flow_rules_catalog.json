{
  "files": [
    {
      "file": "/Users/hretheum/dev/bezrobocie/vector-wave/kolegium/ai_writing_flow/src/ai_writing_flow/platform_optimizer.py",
      "exists": true,
      "hits": [
        {
          "type": "directive_line",
          "start_line": 307,
          "end_line": 307,
          "snippet": "The prompt should be ready for AI presentation generation services.\"\"\"",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        }
      ],
      "integration_points": [
        {
          "line": 321,
          "text": "\"editorial_recommendations\": prompt,"
        },
        {
          "line": 379,
          "text": "\"editorial_recommendations\": f\"Create {platform_config.get('focus', 'engaging')} content for {platform}. {topic.description}\","
        }
      ]
    },
    {
      "file": "/Users/hretheum/dev/bezrobocie/vector-wave/kolegium/ai_writing_flow/src/ai_writing_flow/listen_chain.py",
      "exists": true,
      "hits": [
        {
          "type": "directive_line",
          "start_line": 167,
          "end_line": 167,
          "snippet": "# Check if step should be executed",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 325,
          "end_line": 325,
          "snippet": "Determine if chain should continue after step failure - Task 15.3",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 332,
          "end_line": 332,
          "snippet": "True if chain should continue despite failure",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 337,
          "end_line": 337,
          "snippet": "# Critical steps that must succeed",
          "values_preview": [],
          "priority_guess": "high",
          "category_guess": "required"
        }
      ],
      "integration_points": []
    },
    {
      "file": "/Users/hretheum/dev/bezrobocie/vector-wave/kolegium/ai_writing_flow/src/ai_writing_flow/draft_linear.py",
      "exists": true,
      "hits": [
        {
          "type": "directive_line",
          "start_line": 17,
          "end_line": 17,
          "snippet": "# Moved StandardContentFlow import to function level to avoid circular import",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "forbidden"
        },
        {
          "type": "directive_line",
          "start_line": 74,
          "end_line": 74,
          "snippet": "Determine if draft generation should be executed",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 80,
          "end_line": 80,
          "snippet": "True if draft generation should be executed",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 266,
          "end_line": 266,
          "snippet": "draft += f\"• Leaders should consider strategic adoption\\n\\n\"",
          "values_preview": [
            "• Leaders should consider strategic adoption\\n\\n"
          ],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 301,
          "end_line": 301,
          "snippet": "draft += f\"Business impact: Organizations should evaluate how {writing_state.topic_title} fits into their strategic roadmap.\\n\\n\"",
          "values_preview": [
            "Business impact: Organizations should evaluate how {writing_state.topic_title} fits into their strategic roadmap.\\n\\n"
          ],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 399,
          "end_line": 399,
          "snippet": "# Import here to avoid circular dependency",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "forbidden"
        },
        {
          "type": "directive_line",
          "start_line": 523,
          "end_line": 523,
          "snippet": "# Always require review if configured",
          "values_preview": [],
          "priority_guess": "low",
          "category_guess": "required"
        }
      ],
      "integration_points": [
        {
          "line": 414,
          "text": "'editorial_recommendations': f\"Process existing source content: {source_content[:200]}...\","
        },
        {
          "line": 501,
          "text": "editorial_recommendations=getattr(writing_state, 'editorial_recommendations', 'Transform source content maintaining all key points')"
        }
      ]
    },
    {
      "file": "/Users/hretheum/dev/bezrobocie/vector-wave/kolegium/ai_writing_flow/src/ai_writing_flow/models.py",
      "exists": true,
      "hits": [],
      "integration_points": [
        {
          "line": 21,
          "text": "editorial_recommendations: str = Field(default=\"\", description=\"Editorial guidance from Kolegium\")"
        }
      ]
    },
    {
      "file": "/Users/hretheum/dev/bezrobocie/vector-wave/kolegium/ai_writing_flow/src/ai_writing_flow/enhanced_api.py",
      "exists": true,
      "hits": [],
      "integration_points": [
        {
          "line": 18,
          "text": "from fastapi import FastAPI, HTTPException, BackgroundTasks, Request"
        },
        {
          "line": 99,
          "text": "raise HTTPException("
        },
        {
          "line": 186,
          "text": "raise HTTPException("
        },
        {
          "line": 208,
          "text": "raise HTTPException("
        },
        {
          "line": 253,
          "text": "raise HTTPException("
        },
        {
          "line": 436,
          "text": "@app.exception_handler(HTTPException)"
        },
        {
          "line": 437,
          "text": "async def http_exception_handler(request: Request, exc: HTTPException):"
        },
        {
          "line": 441,
          "text": "\"error\": \"HTTP Error\","
        }
      ]
    },
    {
      "file": "/Users/hretheum/dev/bezrobocie/vector-wave/kolegium/ai_writing_flow/src/ai_writing_flow/research_linear.py",
      "exists": true,
      "hits": [
        {
          "type": "directive_line",
          "start_line": 59,
          "end_line": 59,
          "snippet": "Determine if research should be executed based on state and config",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 65,
          "end_line": 65,
          "snippet": "True if research should be executed",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        }
      ],
      "integration_points": [
        {
          "line": 177,
          "text": "\"url\": \"https://example.com/source1\","
        }
      ]
    },
    {
      "file": "/Users/hretheum/dev/bezrobocie/vector-wave/kolegium/ai_writing_flow/src/ai_writing_flow/linear_flow.py",
      "exists": true,
      "hits": [
        {
          "type": "directive_line",
          "start_line": 84,
          "end_line": 84,
          "snippet": "\"\"\"Determine if research phase should be executed\"\"\"",
          "values_preview": [
            "Determine if research phase should be executed"
          ],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 115,
          "end_line": 115,
          "snippet": "\"\"\"Determine if stage should be retried based on error type\"\"\"",
          "values_preview": [
            "Determine if stage should be retried based on error type"
          ],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 376,
          "end_line": 376,
          "snippet": "raise ValueError(f\"Viral score must be between 0.0 and 10.0, got: {inputs.viral_score}\")",
          "values_preview": [
            "Viral score must be between 0.0 and 10.0, got: {inputs.viral_score}"
          ],
          "priority_guess": "high",
          "category_guess": "required"
        },
        {
          "type": "directive_line",
          "start_line": 561,
          "end_line": 561,
          "snippet": "\"\"\"Determine if stage execution should be retried\"\"\"",
          "values_preview": [
            "Determine if stage execution should be retried"
          ],
          "priority_guess": "medium",
          "category_guess": "style"
        }
      ],
      "integration_points": [
        {
          "line": 72,
          "text": "editorial_recommendations: str = Field(default=\"\", description=\"Editorial guidance\")"
        },
        {
          "line": 395,
          "text": "self.writing_state.editorial_recommendations = inputs.editorial_recommendations"
        }
      ]
    },
    {
      "file": "/Users/hretheum/dev/bezrobocie/vector-wave/kolegium/ai_writing_flow/src/ai_writing_flow/__init__.py",
      "exists": true,
      "hits": [],
      "integration_points": []
    },
    {
      "file": "/Users/hretheum/dev/bezrobocie/vector-wave/kolegium/ai_writing_flow/src/ai_writing_flow/execution_guards.py",
      "exists": true,
      "hits": [],
      "integration_points": []
    },
    {
      "file": "/Users/hretheum/dev/bezrobocie/vector-wave/kolegium/ai_writing_flow/src/ai_writing_flow/quality_linear.py",
      "exists": true,
      "hits": [
        {
          "type": "directive_line",
          "start_line": 79,
          "end_line": 79,
          "snippet": "Determine if quality assessment should be executed",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 85,
          "end_line": 85,
          "snippet": "True if quality assessment should be executed",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 152,
          "end_line": 152,
          "snippet": "# Quality check failed - determine if we should retry - Task 17.2",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        }
      ],
      "integration_points": []
    },
    {
      "file": "/Users/hretheum/dev/bezrobocie/vector-wave/kolegium/ai_writing_flow/src/ai_writing_flow/main.py",
      "exists": true,
      "hits": [],
      "integration_points": [
        {
          "line": 151,
          "text": "\"editorial_recommendations\": \"Focus on V2 production features and monitoring capabilities\""
        }
      ]
    },
    {
      "file": "/Users/hretheum/dev/bezrobocie/vector-wave/kolegium/ai_writing_flow/src/ai_writing_flow/audience_linear.py",
      "exists": true,
      "hits": [
        {
          "type": "directive_line",
          "start_line": 59,
          "end_line": 59,
          "snippet": "Determine if audience alignment should be executed",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 65,
          "end_line": 65,
          "snippet": "True if audience alignment should be executed",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 246,
          "end_line": 246,
          "snippet": "adjustments.append(\"Keep explanations simple and avoid technical jargon\")",
          "values_preview": [
            "Keep explanations simple and avoid technical jargon"
          ],
          "priority_guess": "medium",
          "category_guess": "forbidden"
        }
      ],
      "integration_points": []
    },
    {
      "file": "/Users/hretheum/dev/bezrobocie/vector-wave/kolegium/ai_writing_flow/src/ai_writing_flow/flow_inputs.py",
      "exists": true,
      "hits": [
        {
          "type": "directive_line",
          "start_line": 66,
          "end_line": 66,
          "snippet": "validation_results[\"critical_errors\"].append(f\"Viral score must be 0-10, got {inputs.viral_score}\")",
          "values_preview": [
            "critical_errors",
            "Viral score must be 0-10, got {inputs.viral_score}"
          ],
          "priority_guess": "high",
          "category_guess": "required"
        },
        {
          "type": "directive_line",
          "start_line": 71,
          "end_line": 71,
          "snippet": "validation_results[\"critical_errors\"].append(f\"Invalid content type. Must be one of: {valid_content_types}\")",
          "values_preview": [
            "critical_errors",
            "Invalid content type. Must be one of: {valid_content_types}"
          ],
          "priority_guess": "high",
          "category_guess": "required"
        },
        {
          "type": "directive_line",
          "start_line": 76,
          "end_line": 76,
          "snippet": "validation_results[\"critical_errors\"].append(f\"Invalid content ownership. Must be one of: {valid_ownership}\")",
          "values_preview": [
            "critical_errors",
            "Invalid content ownership. Must be one of: {valid_ownership}"
          ],
          "priority_guess": "high",
          "category_guess": "required"
        },
        {
          "type": "directive_line",
          "start_line": 158,
          "end_line": 158,
          "snippet": "raise ValueError(f\"Viral score must be between 0.0 and 10.0, got: {inputs.viral_score}\")",
          "values_preview": [
            "Viral score must be between 0.0 and 10.0, got: {inputs.viral_score}"
          ],
          "priority_guess": "high",
          "category_guess": "required"
        },
        {
          "type": "directive_line",
          "start_line": 348,
          "end_line": 348,
          "snippet": "issues.append(\"Cannot require human approval with 0 feedback iterations\")",
          "values_preview": [
            "Cannot require human approval with 0 feedback iterations"
          ],
          "priority_guess": "low",
          "category_guess": "required"
        }
      ],
      "integration_points": [
        {
          "line": 22,
          "text": "editorial_recommendations: str = Field(default=\"\", description=\"Editorial guidance\")"
        },
        {
          "line": 100,
          "text": "# Editorial recommendations validation"
        },
        {
          "line": 101,
          "text": "if inputs.editorial_recommendations and len(inputs.editorial_recommendations) > 2000:"
        },
        {
          "line": 102,
          "text": "validation_results[\"warnings\"].append(\"Editorial recommendations very long (>2000 chars)\")"
        }
      ]
    },
    {
      "file": "/Users/hretheum/dev/bezrobocie/vector-wave/kolegium/ai_writing_flow/src/ai_writing_flow/ai_writing_flow_v2.py",
      "exists": true,
      "hits": [],
      "integration_points": [
        {
          "line": 355,
          "text": "\"editorial_recommendations\": inputs.get(\"editorial_recommendations\", \"\"),"
        },
        {
          "line": 630,
          "text": "\"editorial_recommendations\": \"Focus on production-ready features and monitoring capabilities\""
        }
      ]
    },
    {
      "file": "/Users/hretheum/dev/bezrobocie/vector-wave/kolegium/ai_writing_flow/src/ai_writing_flow/style_linear.py",
      "exists": true,
      "hits": [
        {
          "type": "directive_line",
          "start_line": 72,
          "end_line": 72,
          "snippet": "Determine if style validation should be executed",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 78,
          "end_line": 78,
          "snippet": "True if style validation should be executed",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 143,
          "end_line": 143,
          "snippet": "# Validation failed - check if we should retry - Task 16.2",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "forbidden_phrases",
          "start_line": 206,
          "end_line": 206,
          "snippet": "        forbidden_phrases = []",
          "values_preview": [],
          "priority_guess": "low",
          "category_guess": "forbidden"
        },
        {
          "type": "directive_line",
          "start_line": 214,
          "end_line": 214,
          "snippet": "\"message\": \"LinkedIn posts should be under 3000 characters\",",
          "values_preview": [
            "message",
            "LinkedIn posts should be under 3000 characters"
          ],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 237,
          "end_line": 237,
          "snippet": "\"message\": \"Individual tweets should be under 280 characters\",",
          "values_preview": [
            "message",
            "Individual tweets should be under 280 characters"
          ],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 260,
          "end_line": 260,
          "snippet": "\"message\": \"Blog posts should be at least 300 words for SEO\",",
          "values_preview": [
            "message",
            "Blog posts should be at least 300 words for SEO"
          ],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 282,
          "end_line": 282,
          "snippet": "\"message\": \"Avoid excessive exclamation marks\",",
          "values_preview": [
            "message",
            "Avoid excessive exclamation marks"
          ],
          "priority_guess": "medium",
          "category_guess": "forbidden"
        },
        {
          "type": "forbidden_phrases",
          "start_line": 450,
          "end_line": 450,
          "snippet": "        result.forbidden_phrases = []",
          "values_preview": [],
          "priority_guess": "low",
          "category_guess": "forbidden"
        }
      ],
      "integration_points": []
    },
    {
      "file": "/Users/hretheum/dev/bezrobocie/vector-wave/kolegium/ai_writing_flow/src/ai_writing_flow/clients/__init__.py",
      "exists": true,
      "hits": [],
      "integration_points": [
        {
          "line": 2,
          "text": "Vector Wave AI Writing Flow Clients"
        },
        {
          "line": 3,
          "text": "HTTP clients for inter-service communication"
        },
        {
          "line": 6,
          "text": "from .editorial_client import EditorialServiceClient"
        },
        {
          "line": 7,
          "text": "from .topic_manager_client import TopicManagerClient"
        },
        {
          "line": 9,
          "text": "__all__ = [\"EditorialServiceClient\", \"TopicManagerClient\"]"
        }
      ]
    },
    {
      "file": "/Users/hretheum/dev/bezrobocie/vector-wave/kolegium/ai_writing_flow/src/ai_writing_flow/clients/editorial_client.py",
      "exists": true,
      "hits": [
        {
          "type": "directive_line",
          "start_line": 56,
          "end_line": 56,
          "snippet": "\"\"\"Check if circuit breaker should be open or closed\"\"\"",
          "values_preview": [
            "Check if circuit breaker should be open or closed"
          ],
          "priority_guess": "medium",
          "category_guess": "style"
        }
      ],
      "integration_points": [
        {
          "line": 2,
          "text": "Editorial Service HTTP Client"
        },
        {
          "line": 3,
          "text": "Provides comprehensive interface to Editorial Service for content validation"
        },
        {
          "line": 4,
          "text": "Aligned with Vector Wave ChromaDB-centric architecture"
        },
        {
          "line": 7,
          "text": "import httpx"
        },
        {
          "line": 17,
          "text": "class EditorialServiceClient:"
        },
        {
          "line": 19,
          "text": "HTTP client for Editorial Service communication"
        },
        {
          "line": 23,
          "text": "def __init__(self, base_url: str = \"http://localhost:8040\", timeout: float = 30.0):"
        },
        {
          "line": 25,
          "text": "Initialize Editorial Service client"
        },
        {
          "line": 28,
          "text": "base_url: Editorial Service base URL (default: http://localhost:8040)"
        },
        {
          "line": 33,
          "text": "self.client = httpx.AsyncClient("
        },
        {
          "line": 34,
          "text": "timeout=httpx.Timeout(timeout),"
        },
        {
          "line": 35,
          "text": "limits=httpx.Limits(max_keepalive_connections=10, max_connections=50)"
        },
        {
          "line": 52,
          "text": "\"\"\"Close the HTTP client\"\"\""
        },
        {
          "line": 53,
          "text": "await self.client.aclose()"
        },
        {
          "line": 87,
          "text": "Check Editorial Service health"
        },
        {
          "line": 93,
          "text": "response = await self.client.get(f\"{self.base_url}/health\")"
        },
        {
          "line": 97,
          "text": "except httpx.HTTPError as e:"
        },
        {
          "line": 99,
          "text": "logger.error(f\"Editorial service health check failed: {e}\")"
        },
        {
          "line": 102,
          "text": "async def validate_selective(self,"
        },
        {
          "line": 121,
          "text": "raise Exception(\"Circuit breaker is open - Editorial Service unavailable\")"
        },
        {
          "line": 134,
          "text": "response = await self.client.post("
        },
        {
          "line": 142,
          "text": "except httpx.HTTPError as e:"
        },
        {
          "line": 144,
          "text": "logger.error(f\"Editorial service selective validation failed: {e}\")"
        },
        {
          "line": 147,
          "text": "async def validate_comprehensive(self,"
        },
        {
          "line": 166,
          "text": "raise Exception(\"Circuit breaker is open - Editorial Service unavailable\")"
        },
        {
          "line": 176,
          "text": "response = await self.client.post("
        },
        {
          "line": 184,
          "text": "except httpx.HTTPError as e:"
        },
        {
          "line": 186,
          "text": "logger.error(f\"Editorial service comprehensive validation failed: {e}\")"
        },
        {
          "line": 191,
          "text": "Get ChromaDB cache statistics"
        },
        {
          "line": 197,
          "text": "response = await self.client.get(f\"{self.base_url}/cache/stats\")"
        },
        {
          "line": 200,
          "text": "except httpx.HTTPError as e:"
        },
        {
          "line": 212,
          "text": "response = await self.client.get(f\"{self.base_url}/cache/dump\")"
        },
        {
          "line": 215,
          "text": "except httpx.HTTPError as e:"
        },
        {
          "line": 221,
          "text": "Trigger cache refresh from ChromaDB"
        },
        {
          "line": 227,
          "text": "response = await self.client.post(f\"{self.base_url}/cache/refresh\")"
        },
        {
          "line": 230,
          "text": "except httpx.HTTPError as e:"
        },
        {
          "line": 254,
          "text": "response = await self.client.post("
        },
        {
          "line": 261,
          "text": "except httpx.HTTPError as e:"
        },
        {
          "line": 284,
          "text": "result = await self.validate_selective("
        },
        {
          "line": 291,
          "text": "result = await self.validate_comprehensive("
        },
        {
          "line": 308,
          "text": "Get Editorial Service information"
        },
        {
          "line": 314,
          "text": "response = await self.client.get(f\"{self.base_url}/info\")"
        },
        {
          "line": 317,
          "text": "except httpx.HTTPError as e:"
        },
        {
          "line": 323,
          "text": "Check if Editorial Service is ready to handle requests"
        },
        {
          "line": 329,
          "text": "response = await self.client.get(f\"{self.base_url}/ready\")"
        },
        {
          "line": 336,
          "text": "async def create_editorial_client(base_url: str = \"http://localhost:8040\") -> EditorialServiceClient:"
        },
        {
          "line": 338,
          "text": "Create and return an Editorial Service client"
        },
        {
          "line": 341,
          "text": "base_url: Editorial Service base URL"
        },
        {
          "line": 344,
          "text": "Configured EditorialServiceClient instance"
        },
        {
          "line": 346,
          "text": "client = EditorialServiceClient(base_url=base_url)"
        },
        {
          "line": 350,
          "text": "await client.health_check()"
        },
        {
          "line": 351,
          "text": "logger.info(f\"Successfully connected to Editorial Service at {base_url}\")"
        },
        {
          "line": 353,
          "text": "logger.warning(f\"Editorial Service at {base_url} is not available: {e}\")"
        },
        {
          "line": 355,
          "text": "return client"
        }
      ]
    },
    {
      "file": "/Users/hretheum/dev/bezrobocie/vector-wave/kolegium/ai_writing_flow/src/ai_writing_flow/clients/topic_manager_client.py",
      "exists": true,
      "hits": [
        {
          "type": "directive_line",
          "start_line": 56,
          "end_line": 56,
          "snippet": "\"\"\"Check if circuit breaker should be open or closed\"\"\"",
          "values_preview": [
            "Check if circuit breaker should be open or closed"
          ],
          "priority_guess": "medium",
          "category_guess": "style"
        }
      ],
      "integration_points": [
        {
          "line": 2,
          "text": "Topic Manager HTTP Client"
        },
        {
          "line": 7,
          "text": "import httpx"
        },
        {
          "line": 17,
          "text": "class TopicManagerClient:"
        },
        {
          "line": 19,
          "text": "HTTP client for Topic Manager communication"
        },
        {
          "line": 23,
          "text": "def __init__(self, base_url: str = \"http://localhost:8041\", timeout: float = 30.0):"
        },
        {
          "line": 25,
          "text": "Initialize Topic Manager client"
        },
        {
          "line": 28,
          "text": "base_url: Topic Manager base URL (default: http://localhost:8041)"
        },
        {
          "line": 33,
          "text": "self.client = httpx.AsyncClient("
        },
        {
          "line": 34,
          "text": "timeout=httpx.Timeout(timeout),"
        },
        {
          "line": 35,
          "text": "limits=httpx.Limits(max_keepalive_connections=10, max_connections=50)"
        },
        {
          "line": 52,
          "text": "\"\"\"Close the HTTP client\"\"\""
        },
        {
          "line": 53,
          "text": "await self.client.aclose()"
        },
        {
          "line": 93,
          "text": "response = await self.client.get(f\"{self.base_url}/health\")"
        },
        {
          "line": 97,
          "text": "except httpx.HTTPError as e:"
        },
        {
          "line": 140,
          "text": "response = await self.client.get("
        },
        {
          "line": 148,
          "text": "except httpx.HTTPError as e:"
        },
        {
          "line": 196,
          "text": "response = await self.client.post("
        },
        {
          "line": 204,
          "text": "except httpx.HTTPError as e:"
        },
        {
          "line": 238,
          "text": "response = await self.client.post("
        },
        {
          "line": 246,
          "text": "except httpx.HTTPError as e:"
        },
        {
          "line": 281,
          "text": "response = await self.client.post("
        },
        {
          "line": 289,
          "text": "except httpx.HTTPError as e:"
        },
        {
          "line": 317,
          "text": "response = await self.client.post("
        },
        {
          "line": 325,
          "text": "except httpx.HTTPError as e:"
        },
        {
          "line": 360,
          "text": "response = await self.client.get("
        },
        {
          "line": 368,
          "text": "except httpx.HTTPError as e:"
        },
        {
          "line": 392,
          "text": "response = await self.client.get("
        },
        {
          "line": 399,
          "text": "except httpx.HTTPError as e:"
        },
        {
          "line": 405,
          "text": "async def create_topic_manager_client(base_url: str = \"http://localhost:8041\") -> TopicManagerClient:"
        },
        {
          "line": 407,
          "text": "Create and return a Topic Manager client"
        },
        {
          "line": 413,
          "text": "Configured TopicManagerClient instance"
        },
        {
          "line": 415,
          "text": "client = TopicManagerClient(base_url=base_url)"
        },
        {
          "line": 419,
          "text": "await client.health_check()"
        },
        {
          "line": 424,
          "text": "return client"
        }
      ]
    },
    {
      "file": "/Users/hretheum/dev/bezrobocie/vector-wave/kolegium/ai_writing_flow/src/ai_writing_flow/crews/style_crew.py",
      "exists": true,
      "hits": [
        {
          "type": "forbidden_phrases",
          "start_line": 393,
          "end_line": 393,
          "snippet": "                forbidden_phrases=[],",
          "values_preview": [],
          "priority_guess": "low",
          "category_guess": "forbidden"
        },
        {
          "type": "forbidden_phrases",
          "start_line": 420,
          "end_line": 420,
          "snippet": "                forbidden_phrases=[],",
          "values_preview": [],
          "priority_guess": "low",
          "category_guess": "forbidden"
        },
        {
          "type": "forbidden_phrases",
          "start_line": 429,
          "end_line": 433,
          "snippet": "        forbidden_phrases = [\n            v.get(\"phrase\", \"\") \n            for v in violations \n            if v.get(\"type\") == \"forbidden_phrase\"\n        ]",
          "values_preview": [
            "phrase",
            "type",
            "forbidden_phrase"
          ],
          "priority_guess": "low",
          "category_guess": "forbidden"
        }
      ],
      "integration_points": [
        {
          "line": 2,
          "text": "Style Crew - Validates content against Vector Wave styleguide using Editorial Service"
        },
        {
          "line": 3,
          "text": "Migrated to ChromaDB-centric architecture without hardcoded rules"
        },
        {
          "line": 14,
          "text": "from ..clients.editorial_client import EditorialServiceClient"
        },
        {
          "line": 25,
          "text": "All validation rules sourced from Editorial Service (ChromaDB)"
        },
        {
          "line": 28,
          "text": "def __init__(self, editorial_service_url: str = \"http://localhost:8040\"):"
        },
        {
          "line": 30,
          "text": "Initialize Style Crew with Editorial Service integration"
        },
        {
          "line": 33,
          "text": "editorial_service_url: URL of Editorial Service (default: http://localhost:8040)"
        },
        {
          "line": 35,
          "text": "self.editorial_service_url = editorial_service_url"
        },
        {
          "line": 36,
          "text": "self.editorial_client = None"
        },
        {
          "line": 37,
          "text": "self._initialize_client()"
        },
        {
          "line": 43,
          "text": "def _initialize_client(self):"
        },
        {
          "line": 44,
          "text": "\"\"\"Initialize Editorial Service client\"\"\""
        },
        {
          "line": 46,
          "text": "self.editorial_client = EditorialServiceClient("
        },
        {
          "line": 47,
          "text": "base_url=self.editorial_service_url,"
        },
        {
          "line": 50,
          "text": "logger.info(f\"Connected to Editorial Service at {self.editorial_service_url}\")"
        },
        {
          "line": 52,
          "text": "logger.error(f\"Failed to initialize Editorial Service client: {e}\")"
        },
        {
          "line": 55,
          "text": "@tool(\"Validate Style with Editorial Service\")"
        },
        {
          "line": 58,
          "text": "Validate content style using Editorial Service comprehensive validation"
        },
        {
          "line": 66,
          "text": "Dict with validation results from Editorial Service"
        },
        {
          "line": 68,
          "text": "if not self.editorial_client:"
        },
        {
          "line": 70,
          "text": "\"error\": \"Editorial Service not available\","
        },
        {
          "line": 72,
          "text": "\"suggestions\": [\"Editorial Service connection required for validation\"]"
        },
        {
          "line": 85,
          "text": "result = await self.editorial_client.validate_comprehensive("
        },
        {
          "line": 100,
          "text": "self.editorial_client.validate_comprehensive("
        },
        {
          "line": 108,
          "text": "logger.error(f\"Editorial Service validation failed: {e}\")"
        },
        {
          "line": 112,
          "text": "\"suggestions\": [\"Check Editorial Service connection\"]"
        },
        {
          "line": 115,
          "text": "@tool(\"Check Forbidden Phrases via Editorial Service\")"
        },
        {
          "line": 118,
          "text": "Identify forbidden phrases using Editorial Service"
        },
        {
          "line": 119,
          "text": "All forbidden phrases are stored in ChromaDB, zero hardcoded"
        },
        {
          "line": 130,
          "text": "logger.warning(f\"Editorial Service error: {validation_result['error']}\")"
        },
        {
          "line": 133,
          "text": "# Extract forbidden phrase violations from Editorial Service response"
        },
        {
          "line": 143,
          "text": "@tool(\"Validate Required Elements via Editorial Service\")"
        },
        {
          "line": 146,
          "text": "Check if draft contains required elements using Editorial Service"
        },
        {
          "line": 147,
          "text": "Requirements defined in ChromaDB, not hardcoded"
        },
        {
          "line": 158,
          "text": "logger.warning(f\"Editorial Service error: {validation_result['error']}\")"
        },
        {
          "line": 167,
          "text": "# Parse Editorial Service response for required elements"
        },
        {
          "line": 197,
          "text": "@tool(\"Analyze Style Patterns via Editorial Service\")"
        },
        {
          "line": 200,
          "text": "Analyze writing style patterns using Editorial Service"
        },
        {
          "line": 201,
          "text": "Pattern rules stored in ChromaDB"
        },
        {
          "line": 212,
          "text": "logger.warning(f\"Editorial Service error: {validation_result['error']}\")"
        },
        {
          "line": 215,
          "text": "# Parse style pattern violations from Editorial Service"
        },
        {
          "line": 226,
          "text": "# Map Editorial Service violation types to our pattern categories"
        },
        {
          "line": 243,
          "text": "@tool(\"Generate Style Suggestions via Editorial Service\")"
        },
        {
          "line": 246,
          "text": "Generate improvement suggestions using Editorial Service"
        },
        {
          "line": 258,
          "text": "return [\"Unable to generate suggestions - Editorial Service unavailable\"]"
        },
        {
          "line": 260,
          "text": "# Get suggestions directly from Editorial Service"
        },
        {
          "line": 270,
          "text": "@tool(\"Check Editorial Service Health\")"
        },
        {
          "line": 273,
          "text": "Check if Editorial Service is available and has rules loaded"
        },
        {
          "line": 278,
          "text": "if not self.editorial_client:"
        },
        {
          "line": 281,
          "text": "\"error\": \"Client not initialized\""
        },
        {
          "line": 292,
          "text": "health = await self.editorial_client.health_check()"
        },
        {
          "line": 293,
          "text": "stats = await self.editorial_client.get_cache_stats()"
        },
        {
          "line": 298,
          "text": "\"service\": \"editorial-service\""
        },
        {
          "line": 306,
          "text": "health = asyncio.run(self.editorial_client.health_check())"
        },
        {
          "line": 307,
          "text": "stats = asyncio.run(self.editorial_client.get_cache_stats())"
        },
        {
          "line": 312,
          "text": "\"service\": \"editorial-service\""
        },
        {
          "line": 324,
          "text": "role=\"Editorial Style Guardian (ChromaDB-Powered)\","
        },
        {
          "line": 325,
          "text": "goal=\"Ensure all content meets Vector Wave's style standards using Editorial Service validation\","
        },
        {
          "line": 327,
          "text": "with ChromaDB-powered validation. You work with the Editorial Service to check content"
        },
        {
          "line": 350,
          "text": "Validate this draft against Vector Wave style standards using Editorial Service:"
        },
        {
          "line": 356,
          "text": "Validation Process (ChromaDB-Powered):"
        },
        {
          "line": 357,
          "text": "1. 🔍 Comprehensive Validation: Use Editorial Service to check against all style rules"
        },
        {
          "line": 358,
          "text": "2. ❌ Forbidden Phrases: Identify banned corporate jargon from ChromaDB"
        },
        {
          "line": 361,
          "text": "5. 💡 Suggestions: Get specific improvements from Editorial Service"
        },
        {
          "line": 363,
          "text": "Editorial Service Integration:"
        },
        {
          "line": 364,
          "text": "- Endpoint: {self.editorial_service_url}"
        },
        {
          "line": 366,
          "text": "- Source: 100% ChromaDB (zero hardcoded rules)"
        },
        {
          "line": 368,
          "text": "First, check Editorial Service health to ensure connection."
        },
        {
          "line": 372,
          "text": "Be thorough but constructive. All rules come from Editorial Service."
        },
        {
          "line": 375,
          "text": "expected_output=\"Complete style validation report from Editorial Service with violations and suggestions\""
        },
        {
          "line": 382,
          "text": "# First check Editorial Service availability"
        },
        {
          "line": 385,
          "text": "logger.error(f\"Editorial Service unavailable: {health.get('error')}\")"
        },
        {
          "line": 391,
          "text": "\"description\": f\"Editorial Service unavailable: {health.get('error')}\""
        },
        {
          "line": 394,
          "text": "suggestions=[\"Please ensure Editorial Service is running on port 8040\"],"
        },
        {
          "line": 398,
          "text": "logger.info(f\"Editorial Service healthy with {health.get('total_rules', 0)} rules loaded\")"
        },
        {
          "line": 409,
          "text": "# Get comprehensive validation from Editorial Service"
        },
        {
          "line": 421,
          "text": "suggestions=[\"Check Editorial Service connection\"],"
        },
        {
          "line": 425,
          "text": "# Extract violations from Editorial Service response"
        },
        {
          "line": 435,
          "text": "# Get suggestions from Editorial Service"
        },
        {
          "line": 438,
          "text": "# Calculate compliance score from Editorial Service metrics"
        }
      ]
    },
    {
      "file": "/Users/hretheum/dev/bezrobocie/vector-wave/kolegium/ai_writing_flow/src/ai_writing_flow/crews/__init__.py",
      "exists": true,
      "hits": [],
      "integration_points": []
    },
    {
      "file": "/Users/hretheum/dev/bezrobocie/vector-wave/kolegium/ai_writing_flow/src/ai_writing_flow/crews/research_crew.py",
      "exists": true,
      "hits": [
        {
          "type": "directive_line",
          "start_line": 103,
          "end_line": 103,
          "snippet": "# Return as formatted string since tools must return strings",
          "values_preview": [],
          "priority_guess": "high",
          "category_guess": "required"
        },
        {
          "type": "directive_line",
          "start_line": 159,
          "end_line": 159,
          "snippet": "# Return as JSON string since tools must return strings",
          "values_preview": [],
          "priority_guess": "high",
          "category_guess": "required"
        }
      ],
      "integration_points": [
        {
          "line": 18,
          "text": "from ..clients.topic_manager_client import TopicManagerClient"
        },
        {
          "line": 89,
          "text": "r'https?://[^\\s]+',"
        },
        {
          "line": 95,
          "text": "if any(indicator in line.lower() for indicator in ['źródło', 'source', 'http']):"
        },
        {
          "line": 128,
          "text": "\"url\": \"https://gartner.com/ai-agents-2024\","
        },
        {
          "line": 139,
          "text": "\"url\": \"https://stackoverflow.com/survey/2024\","
        },
        {
          "line": 169,
          "text": "def __init__(self, topic_manager_url: str = \"http://localhost:8041\"):"
        },
        {
          "line": 174,
          "text": "topic_manager_url: URL of Topic Manager service (default: http://localhost:8041)"
        },
        {
          "line": 178,
          "text": "self.topic_manager_client = None"
        },
        {
          "line": 186,
          "text": "\"\"\"Initialize Topic Manager client\"\"\""
        },
        {
          "line": 188,
          "text": "self.topic_manager_client = TopicManagerClient("
        },
        {
          "line": 194,
          "text": "logger.error(f\"Failed to initialize Topic Manager client: {e}\")"
        },
        {
          "line": 213,
          "text": "if not self.topic_manager_client:"
        },
        {
          "line": 229,
          "text": "result = await self.topic_manager_client.get_topic_suggestions("
        },
        {
          "line": 243,
          "text": "self.topic_manager_client.get_topic_suggestions("
        },
        {
          "line": 275,
          "text": "if not self.topic_manager_client:"
        },
        {
          "line": 290,
          "text": "result = await self.topic_manager_client.trigger_research_discovery("
        },
        {
          "line": 303,
          "text": "self.topic_manager_client.trigger_research_discovery("
        },
        {
          "line": 334,
          "text": "if not self.topic_manager_client:"
        },
        {
          "line": 349,
          "text": "result = await self.topic_manager_client.trigger_auto_scraping("
        },
        {
          "line": 362,
          "text": "self.topic_manager_client.trigger_auto_scraping("
        },
        {
          "line": 393,
          "text": "if not self.topic_manager_client:"
        },
        {
          "line": 410,
          "text": "search_result = await self.topic_manager_client.search_topics("
        },
        {
          "line": 423,
          "text": "score_result = await self.topic_manager_client.get_topic_relevance_score("
        },
        {
          "line": 440,
          "text": "self.topic_manager_client.search_topics("
        },
        {
          "line": 455,
          "text": "self.topic_manager_client.get_topic_relevance_score("
        },
        {
          "line": 488,
          "text": "if not self.topic_manager_client:"
        },
        {
          "line": 503,
          "text": "result = await self.topic_manager_client.search_topics("
        },
        {
          "line": 516,
          "text": "self.topic_manager_client.search_topics("
        },
        {
          "line": 628,
          "text": "url_pattern = r'https?://[^\\s]+'"
        },
        {
          "line": 641,
          "text": "\"url\": \"https://gartner.com/ai-agents-2024\","
        }
      ]
    },
    {
      "file": "/Users/hretheum/dev/bezrobocie/vector-wave/kolegium/ai_writing_flow/src/ai_writing_flow/crews/audience_crew.py",
      "exists": true,
      "hits": [],
      "integration_points": [
        {
          "line": 3,
          "text": "Enhanced with Editorial Service integration for platform-specific validation"
        },
        {
          "line": 17,
          "text": "from ..clients.editorial_client import EditorialServiceClient"
        },
        {
          "line": 188,
          "text": "Enhanced with Editorial Service platform-aware optimization"
        },
        {
          "line": 191,
          "text": "def __init__(self, editorial_service_url: str = \"http://localhost:8040\"):"
        },
        {
          "line": 193,
          "text": "Initialize Audience Crew with Editorial Service integration"
        },
        {
          "line": 196,
          "text": "editorial_service_url: URL of Editorial Service (default: http://localhost:8040)"
        },
        {
          "line": 204,
          "text": "# Editorial Service integration"
        },
        {
          "line": 205,
          "text": "self.editorial_service_url = editorial_service_url"
        },
        {
          "line": 206,
          "text": "self.editorial_client = None"
        },
        {
          "line": 207,
          "text": "self._initialize_editorial_client()"
        },
        {
          "line": 209,
          "text": "# Circuit breaker state for Editorial Service"
        },
        {
          "line": 210,
          "text": "self._editorial_service_available = True"
        },
        {
          "line": 213,
          "text": "def _initialize_editorial_client(self):"
        },
        {
          "line": 214,
          "text": "\"\"\"Initialize Editorial Service client\"\"\""
        },
        {
          "line": 216,
          "text": "self.editorial_client = EditorialServiceClient("
        },
        {
          "line": 217,
          "text": "base_url=self.editorial_service_url,"
        },
        {
          "line": 220,
          "text": "logger.info(f\"Connected to Editorial Service at {self.editorial_service_url}\")"
        },
        {
          "line": 222,
          "text": "logger.error(f\"Failed to initialize Editorial Service client: {e}\")"
        },
        {
          "line": 223,
          "text": "self._editorial_service_available = False"
        },
        {
          "line": 228,
          "text": "Validate content for platform-specific optimization using Editorial Service"
        },
        {
          "line": 239,
          "text": "if not self.editorial_client:"
        },
        {
          "line": 241,
          "text": "\"error\": \"Editorial Service not available\","
        },
        {
          "line": 243,
          "text": "\"suggestions\": [\"Editorial Service connection required for platform optimization\"]"
        },
        {
          "line": 255,
          "text": "result = await self.editorial_client.validate_comprehensive("
        },
        {
          "line": 274,
          "text": "self.editorial_client.validate_comprehensive("
        },
        {
          "line": 294,
          "text": "logger.error(f\"Editorial Service platform validation failed: {e}\")"
        },
        {
          "line": 298,
          "text": "\"suggestions\": [\"Check Editorial Service connection for platform optimization\"]"
        },
        {
          "line": 304,
          "text": "Get platform-specific rules and constraints from Editorial Service"
        },
        {
          "line": 312,
          "text": "if not self.editorial_client:"
        },
        {
          "line": 314,
          "text": "\"error\": \"Editorial Service not available\","
        },
        {
          "line": 327,
          "text": "cache_dump = await self.editorial_client.get_cache_dump()"
        },
        {
          "line": 346,
          "text": "cache_dump = asyncio.run(self.editorial_client.get_cache_dump())"
        },
        {
          "line": 440,
          "text": "\"\"\"Fallback platform rules when Editorial Service unavailable\"\"\""
        },
        {
          "line": 452,
          "text": "\"\"\"Create the audience mapping specialist agent with Editorial Service platform optimization\"\"\""
        },
        {
          "line": 455,
          "text": "goal=\"Complete audience analysis with Editorial Service platform optimization in focused tool calls\","
        },
        {
          "line": 478,
          "text": "editorial_recommendations: str) -> Task:"
        },
        {
          "line": 479,
          "text": "\"\"\"Create an audience alignment task with Editorial Service platform optimization\"\"\""
        },
        {
          "line": 494,
          "text": "Editorial context: {editorial_recommendations[:100]}..."
        },
        {
          "line": 497,
          "text": "- Use Editorial Service platform rules from ChromaDB"
        },
        {
          "line": 522,
          "text": "- Platform Rules Applied: [X rules from Editorial Service]"
        },
        {
          "line": 528,
          "text": "editorial_recommendations: str) -> AudienceAlignment:"
        },
        {
          "line": 545,
          "text": "tasks=[self.create_audience_task(topic, platform, research_summary, editorial_recommendations)],"
        }
      ]
    },
    {
      "file": "/Users/hretheum/dev/bezrobocie/vector-wave/kolegium/ai_writing_flow/src/ai_writing_flow/crews/quality_crew.py",
      "exists": true,
      "hits": [
        {
          "type": "directive_line",
          "start_line": 457,
          "end_line": 457,
          "snippet": "that quality content must be accurate, valuable, and ethical. You're thorough but pragmatic,",
          "values_preview": [],
          "priority_guess": "high",
          "category_guess": "required"
        }
      ],
      "integration_points": [
        {
          "line": 2,
          "text": "Quality Crew - Final quality assessment with Editorial Service comprehensive validation"
        },
        {
          "line": 3,
          "text": "Enhanced with ChromaDB-sourced editorial guidelines for final quality check"
        },
        {
          "line": 17,
          "text": "from ..clients.editorial_client import EditorialServiceClient"
        },
        {
          "line": 27,
          "text": "Crew responsible for final quality control with Editorial Service integration"
        },
        {
          "line": 31,
          "text": "def __init__(self, editorial_service_url: str = \"http://localhost:8040\"):"
        },
        {
          "line": 33,
          "text": "Initialize Quality Crew with Editorial Service integration"
        },
        {
          "line": 36,
          "text": "editorial_service_url: URL of Editorial Service (default: http://localhost:8040)"
        },
        {
          "line": 59,
          "text": "# Editorial Service integration"
        },
        {
          "line": 60,
          "text": "self.editorial_service_url = editorial_service_url"
        },
        {
          "line": 61,
          "text": "self.editorial_client = None"
        },
        {
          "line": 62,
          "text": "self._initialize_editorial_client()"
        },
        {
          "line": 64,
          "text": "# Circuit breaker state for Editorial Service"
        },
        {
          "line": 65,
          "text": "self._editorial_service_available = True"
        },
        {
          "line": 68,
          "text": "def _initialize_editorial_client(self):"
        },
        {
          "line": 69,
          "text": "\"\"\"Initialize Editorial Service client\"\"\""
        },
        {
          "line": 71,
          "text": "self.editorial_client = EditorialServiceClient("
        },
        {
          "line": 72,
          "text": "base_url=self.editorial_service_url,"
        },
        {
          "line": 75,
          "text": "logger.info(f\"Connected to Editorial Service at {self.editorial_service_url}\")"
        },
        {
          "line": 77,
          "text": "logger.error(f\"Failed to initialize Editorial Service client: {e}\")"
        },
        {
          "line": 78,
          "text": "self._editorial_service_available = False"
        },
        {
          "line": 81,
          "text": "def validate_comprehensive_quality(self, content: str, platform: str = \"general\", content_type: str = \"article\") -> str:"
        },
        {
          "line": 83,
          "text": "Perform comprehensive Editorial Service validation for final quality check"
        },
        {
          "line": 84,
          "text": "Uses comprehensive validation (8-12 rules) from ChromaDB"
        },
        {
          "line": 94,
          "text": "if not self.editorial_client:"
        },
        {
          "line": 96,
          "text": "\"error\": \"Editorial Service not available\","
        },
        {
          "line": 98,
          "text": "\"suggestions\": [\"Editorial Service connection required for comprehensive quality validation\"],"
        },
        {
          "line": 112,
          "text": "result = await self.editorial_client.validate_comprehensive("
        },
        {
          "line": 130,
          "text": "self.editorial_client.validate_comprehensive("
        },
        {
          "line": 148,
          "text": "logger.error(f\"Editorial Service comprehensive validation failed: {e}\")"
        },
        {
          "line": 152,
          "text": "\"suggestions\": [\"Check Editorial Service connection for comprehensive validation\"],"
        },
        {
          "line": 157,
          "text": "@tool(\"Get Editorial Quality Rules\")"
        },
        {
          "line": 158,
          "text": "def get_editorial_quality_rules(self, validation_type: str = \"comprehensive\") -> str:"
        },
        {
          "line": 160,
          "text": "Get comprehensive quality rules from Editorial Service"
        },
        {
          "line": 168,
          "text": "if not self.editorial_client:"
        },
        {
          "line": 170,
          "text": "\"error\": \"Editorial Service not available\","
        },
        {
          "line": 182,
          "text": "cache_dump = await self.editorial_client.get_cache_dump()"
        },
        {
          "line": 202,
          "text": "cache_dump = asyncio.run(self.editorial_client.get_cache_dump())"
        },
        {
          "line": 225,
          "text": "@tool(\"Check Editorial Service Health\")"
        },
        {
          "line": 226,
          "text": "def check_editorial_health(self) -> str:"
        },
        {
          "line": 228,
          "text": "Check if Editorial Service is available for comprehensive validation"
        },
        {
          "line": 233,
          "text": "if not self.editorial_client:"
        },
        {
          "line": 236,
          "text": "\"error\": \"Client not initialized\","
        },
        {
          "line": 237,
          "text": "\"service\": \"editorial-service\""
        },
        {
          "line": 248,
          "text": "health = await self.editorial_client.health_check()"
        },
        {
          "line": 252,
          "text": "\"service\": \"editorial-service\","
        },
        {
          "line": 253,
          "text": "\"endpoint\": self.editorial_service_url,"
        },
        {
          "line": 262,
          "text": "health = asyncio.run(self.editorial_client.health_check())"
        },
        {
          "line": 266,
          "text": "\"service\": \"editorial-service\","
        },
        {
          "line": 267,
          "text": "\"endpoint\": self.editorial_service_url,"
        },
        {
          "line": 274,
          "text": "logger.error(f\"Editorial health check failed: {e}\")"
        },
        {
          "line": 278,
          "text": "\"service\": \"editorial-service\""
        },
        {
          "line": 290,
          "text": "# Add Editorial Service specific insights"
        },
        {
          "line": 294,
          "text": "assessment[\"editorial_compliance\"] = \"excellent\""
        },
        {
          "line": 296,
          "text": "assessment[\"editorial_compliance\"] = \"good\""
        },
        {
          "line": 298,
          "text": "assessment[\"editorial_compliance\"] = \"needs_improvement\""
        },
        {
          "line": 303,
          "text": "\"\"\"Fallback quality rules when Editorial Service unavailable\"\"\""
        },
        {
          "line": 449,
          "text": "\"\"\"Create the quality control agent with Editorial Service integration\"\"\""
        },
        {
          "line": 451,
          "text": "role=\"Chief Quality Officer (Editorial Service Enhanced)\","
        },
        {
          "line": 452,
          "text": "goal=\"Ensure content meets the highest standards using Editorial Service comprehensive validation (8-12 rules)\","
        },
        {
          "line": 453,
          "text": "backstory=\"\"\"You are a meticulous quality controller enhanced with Editorial Service validation."
        },
        {
          "line": 455,
          "text": "ChromaDB-sourced editorial guidelines for comprehensive quality checks. You've fact-checked"
        },
        {
          "line": 459,
          "text": "You use Editorial Service's comprehensive validation (8-12 rules) for final quality assurance,"
        },
        {
          "line": 460,
          "text": "ensuring all content meets the highest editorial standards sourced from ChromaDB.\"\"\","
        },
        {
          "line": 462,
          "text": "self.validate_comprehensive_quality,"
        },
        {
          "line": 463,
          "text": "self.get_editorial_quality_rules,"
        },
        {
          "line": 464,
          "text": "self.check_editorial_health,"
        },
        {
          "line": 478,
          "text": "\"\"\"Create a comprehensive quality assessment task with Editorial Service integration\"\"\""
        },
        {
          "line": 484,
          "text": "Perform comprehensive quality assessment with Editorial Service integration for this draft:"
        },
        {
          "line": 488,
          "text": "COMPREHENSIVE QUALITY WORKFLOW (Editorial Service Enhanced):"
        },
        {
          "line": 490,
          "text": "1. 🏥 Editorial Service Health Check"
        },
        {
          "line": 491,
          "text": "- Verify Editorial Service is available"
        },
        {
          "line": 493,
          "text": "- Check connection to ChromaDB editorial guidelines"
        },
        {
          "line": 495,
          "text": "2. 📋 Get Editorial Quality Rules"
        },
        {
          "line": 497,
          "text": "- Understand ChromaDB-sourced editorial standards"
        },
        {
          "line": 500,
          "text": "3. 🔍 Comprehensive Editorial Validation"
        },
        {
          "line": 501,
          "text": "- Run comprehensive Editorial Service validation"
        },
        {
          "line": 502,
          "text": "- Apply 8-12 rules from ChromaDB for final quality check"
        },
        {
          "line": 506,
          "text": "4. 📊 Traditional Quality Checks (Supplement Editorial Service)"
        },
        {
          "line": 514,
          "text": "- Combine Editorial Service comprehensive results"
        },
        {
          "line": 520,
          "text": "Editorial Service Integration:"
        },
        {
          "line": 521,
          "text": "- Service: {self.editorial_service_url}"
        },
        {
          "line": 525,
          "text": "- All validation rules sourced from ChromaDB (zero hardcoded)"
        },
        {
          "line": 531,
          "text": "Important: Use Editorial Service comprehensive validation as the PRIMARY quality check."
        },
        {
          "line": 532,
          "text": "Traditional tools supplement and verify the Editorial Service results."
        },
        {
          "line": 533,
          "text": "This ensures all content meets Vector Wave's highest editorial standards."
        },
        {
          "line": 536,
          "text": "expected_output=\"\"\"Complete comprehensive quality assessment with Editorial Service validation results:"
        },
        {
          "line": 539,
          "text": "- Editorial Service Comprehensive Score: [X/100]"
        },
        {
          "line": 540,
          "text": "- Editorial Violations: [list any violations]"
        },
        {
          "line": 547,
          "text": "[Specific, actionable recommendations based on Editorial Service and traditional analysis]"
        },
        {
          "line": 549,
          "text": "EDITORIAL SERVICE DETAILS:"
        },
        {
          "line": 550,
          "text": "[Rules applied, ChromaDB sources, validation context]\"\"\""
        }
      ]
    },
    {
      "file": "/Users/hretheum/dev/bezrobocie/vector-wave/kolegium/ai_writing_flow/src/ai_writing_flow/crews/writer_crew.py",
      "exists": true,
      "hits": [
        {
          "type": "directive_line",
          "start_line": 124,
          "end_line": 124,
          "snippet": "\"Common Pitfalls (and How to Avoid Them)\",",
          "values_preview": [
            "Common Pitfalls (and How to Avoid Them)"
          ],
          "priority_guess": "medium",
          "category_guess": "forbidden"
        }
      ],
      "integration_points": [
        {
          "line": 2,
          "text": "Writer Crew - Content generation following Vector Wave style with Editorial Service integration"
        },
        {
          "line": 16,
          "text": "from ..clients.editorial_client import EditorialServiceClient"
        },
        {
          "line": 169,
          "text": "Crew responsible for content writing with Editorial Service integration"
        },
        {
          "line": 173,
          "text": "def __init__(self, editorial_service_url: str = \"http://localhost:8040\"):"
        },
        {
          "line": 175,
          "text": "Initialize Writer Crew with Editorial Service integration"
        },
        {
          "line": 178,
          "text": "editorial_service_url: URL of Editorial Service (default: http://localhost:8040)"
        },
        {
          "line": 183,
          "text": "self.editorial_service_url = editorial_service_url"
        },
        {
          "line": 184,
          "text": "self.editorial_client = None"
        },
        {
          "line": 185,
          "text": "self._initialize_editorial_client()"
        },
        {
          "line": 187,
          "text": "# Circuit breaker state for Editorial Service"
        },
        {
          "line": 188,
          "text": "self._editorial_service_available = True"
        },
        {
          "line": 191,
          "text": "def _initialize_editorial_client(self):"
        },
        {
          "line": 192,
          "text": "\"\"\"Initialize Editorial Service client\"\"\""
        },
        {
          "line": 194,
          "text": "self.editorial_client = EditorialServiceClient("
        },
        {
          "line": 195,
          "text": "base_url=self.editorial_service_url,"
        },
        {
          "line": 198,
          "text": "logger.info(f\"Connected to Editorial Service at {self.editorial_service_url}\")"
        },
        {
          "line": 200,
          "text": "logger.error(f\"Failed to initialize Editorial Service client: {e}\")"
        },
        {
          "line": 201,
          "text": "self._editorial_service_available = False"
        },
        {
          "line": 203,
          "text": "@tool(\"Validate Content with Editorial Service\")"
        },
        {
          "line": 204,
          "text": "def validate_selective(self, content: str, platform: str = \"general\", checkpoint: str = \"writing\") -> str:"
        },
        {
          "line": 206,
          "text": "Validate content using Editorial Service selective validation"
        },
        {
          "line": 217,
          "text": "if not self.editorial_client:"
        },
        {
          "line": 219,
          "text": "\"error\": \"Editorial Service not available\","
        },
        {
          "line": 221,
          "text": "\"suggestions\": [\"Editorial Service connection required for validation\"],"
        },
        {
          "line": 234,
          "text": "result = await self.editorial_client.validate_selective("
        },
        {
          "line": 248,
          "text": "self.editorial_client.validate_selective("
        },
        {
          "line": 259,
          "text": "logger.error(f\"Editorial Service validation failed: {e}\")"
        },
        {
          "line": 263,
          "text": "\"suggestions\": [\"Check Editorial Service connection\"],"
        },
        {
          "line": 267,
          "text": "@tool(\"Check Editorial Service Health\")"
        },
        {
          "line": 268,
          "text": "def check_editorial_health(self) -> str:"
        },
        {
          "line": 270,
          "text": "Check if Editorial Service is available and ready"
        },
        {
          "line": 275,
          "text": "if not self.editorial_client:"
        },
        {
          "line": 278,
          "text": "\"error\": \"Client not initialized\","
        },
        {
          "line": 279,
          "text": "\"service\": \"editorial-service\""
        },
        {
          "line": 290,
          "text": "health = await self.editorial_client.health_check()"
        },
        {
          "line": 294,
          "text": "\"service\": \"editorial-service\","
        },
        {
          "line": 295,
          "text": "\"endpoint\": self.editorial_service_url"
        },
        {
          "line": 303,
          "text": "health = asyncio.run(self.editorial_client.health_check())"
        },
        {
          "line": 307,
          "text": "\"service\": \"editorial-service\","
        },
        {
          "line": 308,
          "text": "\"endpoint\": self.editorial_service_url"
        },
        {
          "line": 314,
          "text": "logger.error(f\"Editorial health check failed: {e}\")"
        },
        {
          "line": 318,
          "text": "\"service\": \"editorial-service\""
        },
        {
          "line": 322,
          "text": "\"\"\"Create the content writer agent with Editorial Service integration\"\"\""
        },
        {
          "line": 324,
          "text": "role=\"Senior Content Strategist & Writer (Editorial Service Enhanced)\","
        },
        {
          "line": 325,
          "text": "goal=\"Create compelling content using Editorial Service selective validation for human-assisted workflow\","
        },
        {
          "line": 326,
          "text": "backstory=\"\"\"You are a seasoned content creator enhanced with Editorial Service validation."
        },
        {
          "line": 330,
          "text": "topics accessible without dumbing them down. You use Editorial Service's selective validation"
        },
        {
          "line": 333,
          "text": "against ChromaDB-sourced editorial guidelines.\"\"\","
        },
        {
          "line": 339,
          "text": "self.validate_selective,"
        },
        {
          "line": 340,
          "text": "self.check_editorial_health"
        },
        {
          "line": 350,
          "text": "\"\"\"Create a content writing task with Editorial Service integration\"\"\""
        },
        {
          "line": 360,
          "text": "Editorial Service Integration Steps:"
        },
        {
          "line": 361,
          "text": "1. 🏥 Check Editorial Service health to ensure validation is available"
        },
        {
          "line": 363,
          "text": "3. 🔍 Validate content using Editorial Service selective validation (3-4 rules)"
        },
        {
          "line": 374,
          "text": "7. Validate with Editorial Service selective validation throughout process"
        },
        {
          "line": 376,
          "text": "Editorial Service Integration:"
        },
        {
          "line": 377,
          "text": "- Service: {self.editorial_service_url}"
        },
        {
          "line": 380,
          "text": "- All validation rules sourced from ChromaDB (zero hardcoded)"
        },
        {
          "line": 382,
          "text": "Style Guidelines (validated by Editorial Service):"
        },
        {
          "line": 391,
          "text": "Important: Use Editorial Service validation at key checkpoints during writing."
        },
        {
          "line": 397,
          "text": "expected_output=\"Complete validated draft with Editorial Service selective validation results, compelling hook, structured body, and clear call-to-action\""
        }
      ]
    },
    {
      "file": "/Users/hretheum/dev/bezrobocie/vector-wave/kolegium/ai_writing_flow/src/ai_writing_flow/crews/writing_crew.py",
      "exists": true,
      "hits": [],
      "integration_points": []
    },
    {
      "file": "/Users/hretheum/dev/bezrobocie/vector-wave/kolegium/ai_writing_flow/src/ai_writing_flow/crews/content_crew/content_crew.py",
      "exists": true,
      "hits": [],
      "integration_points": []
    },
    {
      "file": "/Users/hretheum/dev/bezrobocie/vector-wave/kolegium/ai_writing_flow/src/ai_writing_flow/crews/poem_crew/poem_crew.py",
      "exists": true,
      "hits": [],
      "integration_points": [
        {
          "line": 8,
          "text": "# https://docs.crewai.com/concepts/crews#example-crew-class-with-decorators"
        },
        {
          "line": 19,
          "text": "# Agents: https://docs.crewai.com/concepts/agents#yaml-configuration-recommended"
        },
        {
          "line": 20,
          "text": "# Tasks: https://docs.crewai.com/concepts/tasks#yaml-configuration-recommended"
        },
        {
          "line": 25,
          "text": "# https://docs.crewai.com/concepts/agents#agent-tools"
        },
        {
          "line": 34,
          "text": "# https://docs.crewai.com/concepts/tasks#overview-of-a-task"
        },
        {
          "line": 45,
          "text": "# https://docs.crewai.com/concepts/knowledge#what-is-knowledge"
        }
      ]
    },
    {
      "file": "/Users/hretheum/dev/bezrobocie/vector-wave/kolegium/ai_writing_flow/src/ai_writing_flow/crews/poem_crew/__init__.py",
      "exists": true,
      "hits": [],
      "integration_points": []
    },
    {
      "file": "/Users/hretheum/dev/bezrobocie/vector-wave/kolegium/ai_writing_flow/src/ai_writing_flow/tools/knowledge_base_tool.py",
      "exists": true,
      "hits": [],
      "integration_points": []
    },
    {
      "file": "/Users/hretheum/dev/bezrobocie/vector-wave/kolegium/ai_writing_flow/src/ai_writing_flow/tools/__init__.py",
      "exists": true,
      "hits": [],
      "integration_points": []
    },
    {
      "file": "/Users/hretheum/dev/bezrobocie/vector-wave/kolegium/ai_writing_flow/src/ai_writing_flow/tools/styleguide_loader.py",
      "exists": true,
      "hits": [],
      "integration_points": []
    },
    {
      "file": "/Users/hretheum/dev/bezrobocie/vector-wave/kolegium/ai_writing_flow/src/ai_writing_flow/tools/custom_tool.py",
      "exists": true,
      "hits": [],
      "integration_points": []
    },
    {
      "file": "/Users/hretheum/dev/bezrobocie/vector-wave/kolegium/ai_writing_flow/src/ai_writing_flow/tools/enhanced_knowledge_tools.py",
      "exists": true,
      "hits": [],
      "integration_points": []
    },
    {
      "file": "/Users/hretheum/dev/bezrobocie/vector-wave/kolegium/ai_writing_flow/src/ai_writing_flow/config/dev_config.py",
      "exists": true,
      "hits": [],
      "integration_points": []
    },
    {
      "file": "/Users/hretheum/dev/bezrobocie/vector-wave/kolegium/ai_writing_flow/src/ai_writing_flow/config/__init__.py",
      "exists": true,
      "hits": [],
      "integration_points": []
    },
    {
      "file": "/Users/hretheum/dev/bezrobocie/vector-wave/kolegium/ai_writing_flow/src/ai_writing_flow/optimization/dev_cache.py",
      "exists": true,
      "hits": [],
      "integration_points": []
    },
    {
      "file": "/Users/hretheum/dev/bezrobocie/vector-wave/kolegium/ai_writing_flow/src/ai_writing_flow/optimization/optimized_flow.py",
      "exists": true,
      "hits": [
        {
          "type": "directive_line",
          "start_line": 105,
          "end_line": 105,
          "snippet": "# Check if we should use local fallback",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        }
      ],
      "integration_points": []
    },
    {
      "file": "/Users/hretheum/dev/bezrobocie/vector-wave/kolegium/ai_writing_flow/src/ai_writing_flow/optimization/resource_manager.py",
      "exists": true,
      "hits": [
        {
          "type": "directive_line",
          "start_line": 330,
          "end_line": 330,
          "snippet": "\"\"\"Check if system should throttle operations\"\"\"",
          "values_preview": [
            "Check if system should throttle operations"
          ],
          "priority_guess": "medium",
          "category_guess": "style"
        }
      ],
      "integration_points": []
    },
    {
      "file": "/Users/hretheum/dev/bezrobocie/vector-wave/kolegium/ai_writing_flow/src/ai_writing_flow/optimization/__init__.py",
      "exists": true,
      "hits": [],
      "integration_points": []
    },
    {
      "file": "/Users/hretheum/dev/bezrobocie/vector-wave/kolegium/ai_writing_flow/src/ai_writing_flow/crewai_flow/__init__.py",
      "exists": true,
      "hits": [],
      "integration_points": []
    },
    {
      "file": "/Users/hretheum/dev/bezrobocie/vector-wave/kolegium/ai_writing_flow/src/ai_writing_flow/crewai_flow/crews/__init__.py",
      "exists": true,
      "hits": [],
      "integration_points": []
    },
    {
      "file": "/Users/hretheum/dev/bezrobocie/vector-wave/kolegium/ai_writing_flow/src/ai_writing_flow/crewai_flow/crews/writing_crew.py",
      "exists": true,
      "hits": [],
      "integration_points": []
    },
    {
      "file": "/Users/hretheum/dev/bezrobocie/vector-wave/kolegium/ai_writing_flow/src/ai_writing_flow/crewai_flow/tasks/research_task.py",
      "exists": true,
      "hits": [
        {
          "type": "directive_line",
          "start_line": 39,
          "end_line": 39,
          "snippet": "- require_sources: Require source citations (default: True)",
          "values_preview": [],
          "priority_guess": "low",
          "category_guess": "required"
        },
        {
          "type": "directive_line",
          "start_line": 241,
          "end_line": 241,
          "snippet": "- All claims must be attributed to sources",
          "values_preview": [],
          "priority_guess": "high",
          "category_guess": "required"
        },
        {
          "type": "directive_line",
          "start_line": 242,
          "end_line": 242,
          "snippet": "- Conflicting information must be noted",
          "values_preview": [],
          "priority_guess": "high",
          "category_guess": "required"
        },
        {
          "type": "directive_line",
          "start_line": 243,
          "end_line": 243,
          "snippet": "- Recency and relevance must be considered",
          "values_preview": [],
          "priority_guess": "high",
          "category_guess": "required"
        },
        {
          "type": "directive_line",
          "start_line": 244,
          "end_line": 244,
          "snippet": "- Knowledge Base insights should be integrated where relevant",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 246,
          "end_line": 246,
          "snippet": "The research should provide a solid foundation for creating authoritative,",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        }
      ],
      "integration_points": [
        {
          "line": 72,
          "text": "- editorial_recommendations: Editorial guidance"
        },
        {
          "line": 121,
          "text": "editorial_recommendations = inputs.get('editorial_recommendations', '')"
        },
        {
          "line": 147,
          "text": "**Editorial Context:**"
        },
        {
          "line": 148,
          "text": "{editorial_recommendations if editorial_recommendations else 'No specific editorial guidance provided'}"
        }
      ]
    },
    {
      "file": "/Users/hretheum/dev/bezrobocie/vector-wave/kolegium/ai_writing_flow/src/ai_writing_flow/crewai_flow/tasks/content_analysis_task.py",
      "exists": true,
      "hits": [
        {
          "type": "directive_line",
          "start_line": 203,
          "end_line": 203,
          "snippet": "All recommendations must be specific, actionable, and optimized for viral potential and audience engagement.",
          "values_preview": [],
          "priority_guess": "high",
          "category_guess": "required"
        },
        {
          "type": "directive_line",
          "start_line": 219,
          "end_line": 219,
          "snippet": "All recommendations should be specific, actionable, and optimized for the target platform and audience.",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        }
      ],
      "integration_points": [
        {
          "line": 123,
          "text": "editorial_recommendations = inputs.get('editorial_recommendations', '')"
        },
        {
          "line": 134,
          "text": "**Editorial Context:**"
        },
        {
          "line": 135,
          "text": "{editorial_recommendations if editorial_recommendations else 'No specific editorial recommendations provided'}"
        }
      ]
    },
    {
      "file": "/Users/hretheum/dev/bezrobocie/vector-wave/kolegium/ai_writing_flow/src/ai_writing_flow/crewai_flow/tasks/writing_task.py",
      "exists": true,
      "hits": [],
      "integration_points": []
    },
    {
      "file": "/Users/hretheum/dev/bezrobocie/vector-wave/kolegium/ai_writing_flow/src/ai_writing_flow/crewai_flow/tasks/__init__.py",
      "exists": true,
      "hits": [],
      "integration_points": []
    },
    {
      "file": "/Users/hretheum/dev/bezrobocie/vector-wave/kolegium/ai_writing_flow/src/ai_writing_flow/crewai_flow/tasks/quality_task.py",
      "exists": true,
      "hits": [],
      "integration_points": []
    },
    {
      "file": "/Users/hretheum/dev/bezrobocie/vector-wave/kolegium/ai_writing_flow/src/ai_writing_flow/crewai_flow/tasks/style_task.py",
      "exists": true,
      "hits": [],
      "integration_points": []
    },
    {
      "file": "/Users/hretheum/dev/bezrobocie/vector-wave/kolegium/ai_writing_flow/src/ai_writing_flow/crewai_flow/tools/crewai_knowledge_tools.py",
      "exists": true,
      "hits": [],
      "integration_points": []
    },
    {
      "file": "/Users/hretheum/dev/bezrobocie/vector-wave/kolegium/ai_writing_flow/src/ai_writing_flow/crewai_flow/tools/__init__.py",
      "exists": true,
      "hits": [],
      "integration_points": []
    },
    {
      "file": "/Users/hretheum/dev/bezrobocie/vector-wave/kolegium/ai_writing_flow/src/ai_writing_flow/crewai_flow/config/agents_config.py",
      "exists": true,
      "hits": [],
      "integration_points": []
    },
    {
      "file": "/Users/hretheum/dev/bezrobocie/vector-wave/kolegium/ai_writing_flow/src/ai_writing_flow/crewai_flow/config/tasks_config.py",
      "exists": true,
      "hits": [
        {
          "type": "directive_line",
          "start_line": 96,
          "end_line": 96,
          "snippet": "\"should maintain all key information while presenting it in \"",
          "values_preview": [
            "should maintain all key information while presenting it in"
          ],
          "priority_guess": "medium",
          "category_guess": "style"
        }
      ],
      "integration_points": []
    },
    {
      "file": "/Users/hretheum/dev/bezrobocie/vector-wave/kolegium/ai_writing_flow/src/ai_writing_flow/crewai_flow/config/__init__.py",
      "exists": true,
      "hits": [],
      "integration_points": []
    },
    {
      "file": "/Users/hretheum/dev/bezrobocie/vector-wave/kolegium/ai_writing_flow/src/ai_writing_flow/crewai_flow/agents/__init__.py",
      "exists": true,
      "hits": [],
      "integration_points": []
    },
    {
      "file": "/Users/hretheum/dev/bezrobocie/vector-wave/kolegium/ai_writing_flow/src/ai_writing_flow/crewai_flow/agents/style_agent.py",
      "exists": true,
      "hits": [],
      "integration_points": []
    },
    {
      "file": "/Users/hretheum/dev/bezrobocie/vector-wave/kolegium/ai_writing_flow/src/ai_writing_flow/crewai_flow/agents/research_agent.py",
      "exists": true,
      "hits": [],
      "integration_points": []
    },
    {
      "file": "/Users/hretheum/dev/bezrobocie/vector-wave/kolegium/ai_writing_flow/src/ai_writing_flow/crewai_flow/agents/quality_agent.py",
      "exists": true,
      "hits": [],
      "integration_points": []
    },
    {
      "file": "/Users/hretheum/dev/bezrobocie/vector-wave/kolegium/ai_writing_flow/src/ai_writing_flow/crewai_flow/agents/content_analysis_agent.py",
      "exists": true,
      "hits": [
        {
          "type": "directive_line",
          "start_line": 261,
          "end_line": 261,
          "snippet": "- Output must follow ContentAnalysisResult Pydantic model structure",
          "values_preview": [],
          "priority_guess": "high",
          "category_guess": "required"
        },
        {
          "type": "directive_line",
          "start_line": 273,
          "end_line": 273,
          "snippet": "Your analysis should enable optimal content generation by providing clear,",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        }
      ],
      "integration_points": []
    },
    {
      "file": "/Users/hretheum/dev/bezrobocie/vector-wave/kolegium/ai_writing_flow/src/ai_writing_flow/crewai_flow/agents/writer_agent.py",
      "exists": true,
      "hits": [],
      "integration_points": []
    },
    {
      "file": "/Users/hretheum/dev/bezrobocie/vector-wave/kolegium/ai_writing_flow/src/ai_writing_flow/crewai_flow/persistence/flow_state_manager.py",
      "exists": true,
      "hits": [],
      "integration_points": []
    },
    {
      "file": "/Users/hretheum/dev/bezrobocie/vector-wave/kolegium/ai_writing_flow/src/ai_writing_flow/crewai_flow/persistence/__init__.py",
      "exists": true,
      "hits": [],
      "integration_points": []
    },
    {
      "file": "/Users/hretheum/dev/bezrobocie/vector-wave/kolegium/ai_writing_flow/src/ai_writing_flow/crewai_flow/flows/ai_writing_flow.py",
      "exists": true,
      "hits": [],
      "integration_points": [
        {
          "line": 290,
          "text": "editorial_recommendations=inputs.get(\"editorial_recommendations\", \"\"),"
        },
        {
          "line": 380,
          "text": "\"editorial_recommendations\": inputs.editorial_recommendations,"
        }
      ]
    },
    {
      "file": "/Users/hretheum/dev/bezrobocie/vector-wave/kolegium/ai_writing_flow/src/ai_writing_flow/crewai_flow/flows/viral_content_flow.py",
      "exists": true,
      "hits": [],
      "integration_points": [
        {
          "line": 39,
          "text": "editorial_recommendations: str = \"\""
        },
        {
          "line": 126,
          "text": "self.state.editorial_recommendations = inputs.get('editorial_recommendations', '')"
        },
        {
          "line": 160,
          "text": "'editorial_recommendations': self.state.editorial_recommendations,"
        },
        {
          "line": 171,
          "text": "\"url\": \"https://trends.example.com/current\","
        },
        {
          "line": 180,
          "text": "\"url\": \"https://viral.example.com/patterns\","
        }
      ]
    },
    {
      "file": "/Users/hretheum/dev/bezrobocie/vector-wave/kolegium/ai_writing_flow/src/ai_writing_flow/crewai_flow/flows/research_flow.py",
      "exists": true,
      "hits": [],
      "integration_points": [
        {
          "line": 40,
          "text": "editorial_recommendations: str = \"\""
        },
        {
          "line": 139,
          "text": "self.state.editorial_recommendations = inputs.get('editorial_recommendations', '')"
        },
        {
          "line": 531,
          "text": "'editorial_recommendations': self.state.editorial_recommendations,"
        },
        {
          "line": 542,
          "text": "\"url\": \"https://docs.crewai.com/flows\","
        },
        {
          "line": 551,
          "text": "\"url\": \"https://github.com/crewai/examples\","
        },
        {
          "line": 640,
          "text": "\"url\": \"https://trends.example.com\","
        },
        {
          "line": 706,
          "text": "\"url\": \"https://example.com/article1\","
        },
        {
          "line": 814,
          "text": "editorial = inputs.get('editorial_recommendations', '').lower()"
        },
        {
          "line": 815,
          "text": "all_text = f\"{topic} {' '.join(themes)} {editorial}\""
        },
        {
          "line": 865,
          "text": "if 'clickbait' in editorial or 'bold predictions' in editorial:"
        },
        {
          "line": 869,
          "text": "if 'step-by-step' in editorial or 'beginner' in themes:"
        }
      ]
    },
    {
      "file": "/Users/hretheum/dev/bezrobocie/vector-wave/kolegium/ai_writing_flow/src/ai_writing_flow/crewai_flow/flows/technical_content_flow.py",
      "exists": true,
      "hits": [],
      "integration_points": [
        {
          "line": 41,
          "text": "editorial_recommendations: str = \"\""
        },
        {
          "line": 129,
          "text": "self.state.editorial_recommendations = inputs.get('editorial_recommendations', '')"
        },
        {
          "line": 165,
          "text": "'editorial_recommendations': self.state.editorial_recommendations,"
        },
        {
          "line": 182,
          "text": "\"url\": \"https://docs.example.com/technical-guide\","
        },
        {
          "line": 191,
          "text": "\"url\": \"https://github.com/example/implementation\","
        },
        {
          "line": 200,
          "text": "\"url\": \"https://blog.expert.com/deep-dive\","
        },
        {
          "line": 488,
          "text": "{self.state.editorial_recommendations}"
        }
      ]
    },
    {
      "file": "/Users/hretheum/dev/bezrobocie/vector-wave/kolegium/ai_writing_flow/src/ai_writing_flow/crewai_flow/flows/__init__.py",
      "exists": true,
      "hits": [],
      "integration_points": []
    },
    {
      "file": "/Users/hretheum/dev/bezrobocie/vector-wave/kolegium/ai_writing_flow/src/ai_writing_flow/crewai_flow/flows/ui_integrated_flow.py",
      "exists": true,
      "hits": [],
      "integration_points": []
    },
    {
      "file": "/Users/hretheum/dev/bezrobocie/vector-wave/kolegium/ai_writing_flow/src/ai_writing_flow/crewai_flow/flows/realtime_status_flow.py",
      "exists": true,
      "hits": [],
      "integration_points": []
    },
    {
      "file": "/Users/hretheum/dev/bezrobocie/vector-wave/kolegium/ai_writing_flow/src/ai_writing_flow/crewai_flow/flows/human_approval_flow.py",
      "exists": true,
      "hits": [],
      "integration_points": []
    },
    {
      "file": "/Users/hretheum/dev/bezrobocie/vector-wave/kolegium/ai_writing_flow/src/ai_writing_flow/crewai_flow/flows/integrated_approval_flow.py",
      "exists": true,
      "hits": [],
      "integration_points": [
        {
          "line": 94,
          "text": "\"editorial_review\": ApprovalPattern("
        },
        {
          "line": 95,
          "text": "name=\"editorial_review\","
        },
        {
          "line": 96,
          "text": "description=\"Editorial review with revision loops\","
        },
        {
          "line": 98,
          "text": "enable_timeout=False,  # No timeout for editorial"
        }
      ]
    },
    {
      "file": "/Users/hretheum/dev/bezrobocie/vector-wave/kolegium/ai_writing_flow/src/ai_writing_flow/crewai_flow/flows/standard_content_flow.py",
      "exists": true,
      "hits": [],
      "integration_points": [
        {
          "line": 4,
          "text": "Standard content flow following proven editorial process:"
        },
        {
          "line": 39,
          "text": "editorial_recommendations: str = \"\""
        },
        {
          "line": 63,
          "text": "Standard Content Flow following proven editorial process:"
        },
        {
          "line": 122,
          "text": "self.state.editorial_recommendations = inputs.get('editorial_recommendations', '')"
        },
        {
          "line": 154,
          "text": "'editorial_recommendations': self.state.editorial_recommendations,"
        },
        {
          "line": 165,
          "text": "\"url\": \"https://expert.example.com/analysis\","
        },
        {
          "line": 174,
          "text": "\"url\": \"https://research.example.com/study\","
        },
        {
          "line": 183,
          "text": "\"url\": \"https://practical.example.com/guide\","
        },
        {
          "line": 551,
          "text": "{self.state.editorial_recommendations}"
        }
      ]
    },
    {
      "file": "/Users/hretheum/dev/bezrobocie/vector-wave/kolegium/ai_writing_flow/src/ai_writing_flow/crewai_flow/flows/feedback_processing_flow.py",
      "exists": true,
      "hits": [],
      "integration_points": []
    },
    {
      "file": "/Users/hretheum/dev/bezrobocie/vector-wave/kolegium/ai_writing_flow/src/ai_writing_flow/crewai_flow/logging/__init__.py",
      "exists": true,
      "hits": [],
      "integration_points": []
    },
    {
      "file": "/Users/hretheum/dev/bezrobocie/vector-wave/kolegium/ai_writing_flow/src/ai_writing_flow/crewai_flow/logging/decision_logger.py",
      "exists": true,
      "hits": [],
      "integration_points": [
        {
          "line": 42,
          "text": "editorial_recommendations: str"
        },
        {
          "line": 137,
          "text": "editorial_recommendations=inputs.get('editorial_recommendations', ''),"
        },
        {
          "line": 202,
          "text": "editorial_recommendations=\"\","
        },
        {
          "line": 258,
          "text": "editorial_recommendations=\"\","
        },
        {
          "line": 479,
          "text": "\"editorial_recommendations\": \"\","
        }
      ]
    },
    {
      "file": "/Users/hretheum/dev/bezrobocie/vector-wave/kolegium/ai_writing_flow/src/ai_writing_flow/managers/stage_manager.py",
      "exists": true,
      "hits": [
        {
          "type": "directive_line",
          "start_line": 97,
          "end_line": 97,
          "snippet": "\"\"\"Check if stage should be skipped based on conditions.",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 103,
          "end_line": 103,
          "snippet": "True if stage should be skipped",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 265,
          "end_line": 265,
          "snippet": "\"\"\"Check if a stage should be skipped.",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 271,
          "end_line": 271,
          "snippet": "True if stage should be skipped",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 1043,
          "end_line": 1043,
          "snippet": "expected_max = 3  # Normal stage should not execute more than 3 times in an hour",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        }
      ],
      "integration_points": []
    },
    {
      "file": "/Users/hretheum/dev/bezrobocie/vector-wave/kolegium/ai_writing_flow/src/ai_writing_flow/managers/__init__.py",
      "exists": true,
      "hits": [],
      "integration_points": []
    },
    {
      "file": "/Users/hretheum/dev/bezrobocie/vector-wave/kolegium/ai_writing_flow/src/ai_writing_flow/utils/retry_manager.py",
      "exists": true,
      "hits": [
        {
          "type": "directive_line",
          "start_line": 48,
          "end_line": 48,
          "snippet": "should_retry: Optional callable to determine if exception should trigger retry",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 205,
          "end_line": 205,
          "snippet": "# Check if we should retry this specific exception",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 237,
          "end_line": 237,
          "snippet": "# Should never reach here",
          "values_preview": [],
          "priority_guess": "high",
          "category_guess": "forbidden"
        },
        {
          "type": "directive_line",
          "start_line": 281,
          "end_line": 281,
          "snippet": "# Check if we should retry this specific exception",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 313,
          "end_line": 313,
          "snippet": "# Should never reach here",
          "values_preview": [],
          "priority_guess": "high",
          "category_guess": "forbidden"
        }
      ],
      "integration_points": []
    },
    {
      "file": "/Users/hretheum/dev/bezrobocie/vector-wave/kolegium/ai_writing_flow/src/ai_writing_flow/utils/ui_bridge_v2.py",
      "exists": true,
      "hits": [],
      "integration_points": []
    },
    {
      "file": "/Users/hretheum/dev/bezrobocie/vector-wave/kolegium/ai_writing_flow/src/ai_writing_flow/utils/__init__.py",
      "exists": true,
      "hits": [],
      "integration_points": []
    },
    {
      "file": "/Users/hretheum/dev/bezrobocie/vector-wave/kolegium/ai_writing_flow/src/ai_writing_flow/utils/loop_prevention.py",
      "exists": true,
      "hits": [
        {
          "type": "directive_line",
          "start_line": 487,
          "end_line": 487,
          "snippet": "Check if execution should be stopped due to loop prevention",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 490,
          "end_line": 490,
          "snippet": "True if execution should be stopped",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        }
      ],
      "integration_points": []
    },
    {
      "file": "/Users/hretheum/dev/bezrobocie/vector-wave/kolegium/ai_writing_flow/src/ai_writing_flow/utils/circuit_breaker.py",
      "exists": true,
      "hits": [],
      "integration_points": []
    },
    {
      "file": "/Users/hretheum/dev/bezrobocie/vector-wave/kolegium/ai_writing_flow/src/ai_writing_flow/utils/ui_bridge.py",
      "exists": true,
      "hits": [],
      "integration_points": []
    },
    {
      "file": "/Users/hretheum/dev/bezrobocie/vector-wave/kolegium/ai_writing_flow/src/ai_writing_flow/models/flow_stage.py",
      "exists": true,
      "hits": [],
      "integration_points": []
    },
    {
      "file": "/Users/hretheum/dev/bezrobocie/vector-wave/kolegium/ai_writing_flow/src/ai_writing_flow/models/__init__.py",
      "exists": true,
      "hits": [],
      "integration_points": [
        {
          "line": 44,
          "text": "editorial_recommendations: str = \"\""
        }
      ]
    },
    {
      "file": "/Users/hretheum/dev/bezrobocie/vector-wave/kolegium/ai_writing_flow/src/ai_writing_flow/models/flow_control_state.py",
      "exists": true,
      "hits": [
        {
          "type": "directive_line",
          "start_line": 225,
          "end_line": 225,
          "snippet": "Check if circuit breaker should attempt recovery.",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 231,
          "end_line": 231,
          "snippet": "True if recovery should be attempted",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        }
      ],
      "integration_points": []
    },
    {
      "file": "/Users/hretheum/dev/bezrobocie/vector-wave/kolegium/ai_writing_flow/src/ai_writing_flow/models/stage_execution.py",
      "exists": true,
      "hits": [],
      "integration_points": []
    },
    {
      "file": "/Users/hretheum/dev/bezrobocie/vector-wave/kolegium/ai_writing_flow/src/ai_writing_flow/adapters/knowledge_adapter.py",
      "exists": true,
      "hits": [],
      "integration_points": [
        {
          "line": 13,
          "text": "import aiohttp"
        },
        {
          "line": 146,
          "text": "kb_api_url: str = \"http://localhost:8080\","
        },
        {
          "line": 189,
          "text": "self._session: Optional[aiohttp.ClientSession] = None"
        },
        {
          "line": 196,
          "text": "async def _get_session(self) -> aiohttp.ClientSession:"
        },
        {
          "line": 197,
          "text": "\"\"\"Get or create HTTP session with connection pooling\"\"\""
        },
        {
          "line": 199,
          "text": "timeout = aiohttp.ClientTimeout(total=self.timeout)"
        },
        {
          "line": 200,
          "text": "connector = aiohttp.TCPConnector(limit=10, limit_per_host=5)"
        },
        {
          "line": 201,
          "text": "self._session = aiohttp.ClientSession("
        },
        {
          "line": 209,
          "text": "\"\"\"Close HTTP session and cleanup resources\"\"\""
        },
        {
          "line": 281,
          "text": "except aiohttp.ClientError as e:"
        },
        {
          "line": 554,
          "text": "kb_api_url=os.getenv('KB_API_URL', 'http://localhost:8082'),"
        }
      ]
    },
    {
      "file": "/Users/hretheum/dev/bezrobocie/vector-wave/kolegium/ai_writing_flow/src/ai_writing_flow/adapters/__init__.py",
      "exists": true,
      "hits": [],
      "integration_points": []
    },
    {
      "file": "/Users/hretheum/dev/bezrobocie/vector-wave/kolegium/ai_writing_flow/src/ai_writing_flow/optimizations/optimized_research.py",
      "exists": true,
      "hits": [],
      "integration_points": []
    },
    {
      "file": "/Users/hretheum/dev/bezrobocie/vector-wave/kolegium/ai_writing_flow/src/ai_writing_flow/optimizations/optimized_knowledge_search.py",
      "exists": true,
      "hits": [
        {
          "type": "directive_line",
          "start_line": 452,
          "end_line": 452,
          "snippet": "# Small delay to avoid overwhelming the system",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "forbidden"
        }
      ],
      "integration_points": [
        {
          "line": 24,
          "text": "import aiohttp"
        },
        {
          "line": 103,
          "text": "connection_pool_size: HTTP connection pool size"
        },
        {
          "line": 136,
          "text": "self._session: Optional[aiohttp.ClientSession] = None"
        },
        {
          "line": 142,
          "text": "async def _get_session(self) -> aiohttp.ClientSession:"
        },
        {
          "line": 143,
          "text": "\"\"\"Get or create HTTP session with connection pooling\"\"\""
        },
        {
          "line": 145,
          "text": "connector = aiohttp.TCPConnector("
        },
        {
          "line": 152,
          "text": "timeout = aiohttp.ClientTimeout(total=10.0)"
        },
        {
          "line": 154,
          "text": "self._session = aiohttp.ClientSession("
        }
      ]
    },
    {
      "file": "/Users/hretheum/dev/bezrobocie/vector-wave/kolegium/ai_writing_flow/src/ai_writing_flow/optimizations/cache_manager.py",
      "exists": true,
      "hits": [],
      "integration_points": []
    },
    {
      "file": "/Users/hretheum/dev/bezrobocie/vector-wave/kolegium/ai_writing_flow/src/ai_writing_flow/optimizations/__init__.py",
      "exists": true,
      "hits": [],
      "integration_points": []
    },
    {
      "file": "/Users/hretheum/dev/bezrobocie/vector-wave/kolegium/ai_writing_flow/src/ai_writing_flow/optimizations/optimized_quality_assessment.py",
      "exists": true,
      "hits": [
        {
          "type": "regex_compile",
          "start_line": 256,
          "end_line": 256,
          "snippet": "                'headings': re.compile(r'^#{1,6}\\s+.+$', re.MULTILINE),",
          "values_preview": [
            "headings",
            "^#{1,6}\\s+.+$"
          ],
          "priority_guess": "low",
          "category_guess": "pattern"
        },
        {
          "type": "regex_compile",
          "start_line": 257,
          "end_line": 257,
          "snippet": "                'bullet_points': re.compile(r'^\\s*[-*•]\\s+.+$', re.MULTILINE),",
          "values_preview": [
            "bullet_points",
            "^\\s*[-*•]\\s+.+$"
          ],
          "priority_guess": "low",
          "category_guess": "pattern"
        },
        {
          "type": "regex_compile",
          "start_line": 258,
          "end_line": 258,
          "snippet": "                'numbered_lists': re.compile(r'^\\s*\\d+\\.\\s+.+$', re.MULTILINE),",
          "values_preview": [
            "numbered_lists",
            "^\\s*\\d+\\.\\s+.+$"
          ],
          "priority_guess": "low",
          "category_guess": "pattern"
        },
        {
          "type": "regex_compile",
          "start_line": 259,
          "end_line": 259,
          "snippet": "                'paragraphs': re.compile(r'\\n\\s*\\n')",
          "values_preview": [
            "paragraphs",
            "\\n\\s*\\n"
          ],
          "priority_guess": "low",
          "category_guess": "pattern"
        },
        {
          "type": "regex_compile",
          "start_line": 263,
          "end_line": 263,
          "snippet": "                'sentence_enders': re.compile(r'[.!?]+'),",
          "values_preview": [
            "sentence_enders",
            "[.!?]+"
          ],
          "priority_guess": "low",
          "category_guess": "pattern"
        },
        {
          "type": "regex_compile",
          "start_line": 264,
          "end_line": 264,
          "snippet": "                'complex_words': re.compile(r'\\b\\w{7,}\\b'),",
          "values_preview": [
            "complex_words",
            "\\b\\w{7,}\\b"
          ],
          "priority_guess": "low",
          "category_guess": "pattern"
        },
        {
          "type": "regex_compile",
          "start_line": 265,
          "end_line": 265,
          "snippet": "                'simple_sentences': re.compile(r'^[^,;:]+[.!?]$', re.MULTILINE)",
          "values_preview": [
            "simple_sentences",
            "^[^,;:]+[.!?]$"
          ],
          "priority_guess": "low",
          "category_guess": "pattern"
        },
        {
          "type": "regex_compile",
          "start_line": 705,
          "end_line": 705,
          "snippet": "        date_pattern = re.compile(r'\\b\\d{4}\\b|\\b\\d{1,2}/\\d{1,2}/\\d{2,4}\\b')",
          "values_preview": [
            "\\b\\d{4}\\b|\\b\\d{1,2}/\\d{1,2}/\\d{2,4}\\b"
          ],
          "priority_guess": "low",
          "category_guess": "pattern"
        },
        {
          "type": "regex_compile",
          "start_line": 706,
          "end_line": 706,
          "snippet": "        number_pattern = re.compile(r'\\b\\d+\\.?\\d*%?\\b')",
          "values_preview": [
            "\\b\\d+\\.?\\d*%?\\b"
          ],
          "priority_guess": "low",
          "category_guess": "pattern"
        }
      ],
      "integration_points": []
    },
    {
      "file": "/Users/hretheum/dev/bezrobocie/vector-wave/kolegium/ai_writing_flow/src/ai_writing_flow/optimizations/optimized_draft_generation.py",
      "exists": true,
      "hits": [],
      "integration_points": []
    },
    {
      "file": "/Users/hretheum/dev/bezrobocie/vector-wave/kolegium/ai_writing_flow/src/ai_writing_flow/optimizations/performance_optimizer.py",
      "exists": true,
      "hits": [],
      "integration_points": []
    },
    {
      "file": "/Users/hretheum/dev/bezrobocie/vector-wave/kolegium/ai_writing_flow/src/ai_writing_flow/optimizations/optimized_audience_alignment.py",
      "exists": true,
      "hits": [],
      "integration_points": []
    },
    {
      "file": "/Users/hretheum/dev/bezrobocie/vector-wave/kolegium/ai_writing_flow/src/ai_writing_flow/profiling/performance_analyzer.py",
      "exists": true,
      "hits": [
        {
          "type": "directive_line",
          "start_line": 237,
          "end_line": 237,
          "snippet": "suggestions.append(\"Consider caching results to avoid repeated computation\")",
          "values_preview": [
            "Consider caching results to avoid repeated computation"
          ],
          "priority_guess": "medium",
          "category_guess": "forbidden"
        },
        {
          "type": "directive_line",
          "start_line": 551,
          "end_line": 551,
          "snippet": "\"Add result caching to avoid redundant computations\"",
          "values_preview": [
            "Add result caching to avoid redundant computations"
          ],
          "priority_guess": "medium",
          "category_guess": "forbidden"
        }
      ],
      "integration_points": []
    },
    {
      "file": "/Users/hretheum/dev/bezrobocie/vector-wave/kolegium/ai_writing_flow/src/ai_writing_flow/profiling/__init__.py",
      "exists": true,
      "hits": [],
      "integration_points": []
    },
    {
      "file": "/Users/hretheum/dev/bezrobocie/vector-wave/kolegium/ai_writing_flow/src/ai_writing_flow/profiling/test_profiler.py",
      "exists": true,
      "hits": [
        {
          "type": "directive_line",
          "start_line": 195,
          "end_line": 195,
          "snippet": "# Should have bottlenecks in bottlenecked scenario",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 219,
          "end_line": 219,
          "snippet": "# Should have historical comparison",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 234,
          "end_line": 234,
          "snippet": "# Should have recommendations",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 285,
          "end_line": 285,
          "snippet": "# Should detect the spike",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        }
      ],
      "integration_points": []
    },
    {
      "file": "/Users/hretheum/dev/bezrobocie/vector-wave/kolegium/ai_writing_flow/src/ai_writing_flow/profiling/flow_profiler.py",
      "exists": true,
      "hits": [],
      "integration_points": []
    },
    {
      "file": "/Users/hretheum/dev/bezrobocie/vector-wave/kolegium/ai_writing_flow/src/ai_writing_flow/profiling/dev_profiler.py",
      "exists": true,
      "hits": [
        {
          "type": "directive_line",
          "start_line": 366,
          "end_line": 366,
          "snippet": "recommendations.append(\"Enable hot-reload to avoid full reinitialization\")",
          "values_preview": [
            "Enable hot-reload to avoid full reinitialization"
          ],
          "priority_guess": "medium",
          "category_guess": "forbidden"
        }
      ],
      "integration_points": []
    },
    {
      "file": "/Users/hretheum/dev/bezrobocie/vector-wave/kolegium/ai_writing_flow/src/ai_writing_flow/profiling/v2_integration.py",
      "exists": true,
      "hits": [],
      "integration_points": [
        {
          "line": 467,
          "text": "\"editorial_recommendations\": \"Focus on technical depth and profiling insights\""
        }
      ]
    },
    {
      "file": "/Users/hretheum/dev/bezrobocie/vector-wave/kolegium/ai_writing_flow/src/ai_writing_flow/profiling/mock_profiler.py",
      "exists": true,
      "hits": [],
      "integration_points": []
    },
    {
      "file": "/Users/hretheum/dev/bezrobocie/vector-wave/kolegium/ai_writing_flow/src/ai_writing_flow/api/__init__.py",
      "exists": true,
      "hits": [],
      "integration_points": []
    },
    {
      "file": "/Users/hretheum/dev/bezrobocie/vector-wave/kolegium/ai_writing_flow/src/ai_writing_flow/api/endpoints.py",
      "exists": true,
      "hits": [],
      "integration_points": [
        {
          "line": 23,
          "text": "from fastapi import FastAPI, HTTPException, BackgroundTasks, Request"
        },
        {
          "line": 32,
          "text": "HTTPException = None"
        },
        {
          "line": 49,
          "text": "editorial_recommendations: str = Field(default=\"\", description=\"Editorial guidance\")"
        },
        {
          "line": 159,
          "text": "\"editorial_recommendations\": flow_request.editorial_recommendations,"
        },
        {
          "line": 429,
          "text": "\"editorial_recommendations\": request_data.get(\"editorial_recommendations\", \"\"),"
        },
        {
          "line": 557,
          "text": "Can be used with Flask, Django, or custom HTTP servers"
        },
        {
          "line": 568,
          "text": "method: HTTP method (GET, POST, etc.)"
        }
      ]
    },
    {
      "file": "/Users/hretheum/dev/bezrobocie/vector-wave/kolegium/ai_writing_flow/src/ai_writing_flow/monitoring/flow_metrics_integration.py",
      "exists": true,
      "hits": [],
      "integration_points": []
    },
    {
      "file": "/Users/hretheum/dev/bezrobocie/vector-wave/kolegium/ai_writing_flow/src/ai_writing_flow/monitoring/flow_metrics.py",
      "exists": true,
      "hits": [],
      "integration_points": []
    },
    {
      "file": "/Users/hretheum/dev/bezrobocie/vector-wave/kolegium/ai_writing_flow/src/ai_writing_flow/monitoring/local_metrics.py",
      "exists": true,
      "hits": [],
      "integration_points": []
    },
    {
      "file": "/Users/hretheum/dev/bezrobocie/vector-wave/kolegium/ai_writing_flow/src/ai_writing_flow/monitoring/health_dashboard.py",
      "exists": true,
      "hits": [],
      "integration_points": [
        {
          "line": 14,
          "text": "from http.server import HTTPServer, BaseHTTPRequestHandler"
        },
        {
          "line": 133,
          "text": "# Simple HTTP server for dashboard"
        },
        {
          "line": 134,
          "text": "class DashboardHandler(BaseHTTPRequestHandler):"
        },
        {
          "line": 135,
          "text": "\"\"\"HTTP request handler for dashboard\"\"\""
        },
        {
          "line": 450,
          "text": "server = HTTPServer(('localhost', port), DashboardHandler)"
        },
        {
          "line": 452,
          "text": "logger.info(f\"Health dashboard started at http://localhost:{port}\")"
        },
        {
          "line": 462,
          "text": "def stop_health_dashboard(server: HTTPServer):"
        }
      ]
    },
    {
      "file": "/Users/hretheum/dev/bezrobocie/vector-wave/kolegium/ai_writing_flow/src/ai_writing_flow/monitoring/__init__.py",
      "exists": true,
      "hits": [],
      "integration_points": []
    },
    {
      "file": "/Users/hretheum/dev/bezrobocie/vector-wave/kolegium/ai_writing_flow/src/ai_writing_flow/monitoring/dev_logger.py",
      "exists": true,
      "hits": [],
      "integration_points": []
    },
    {
      "file": "/Users/hretheum/dev/bezrobocie/vector-wave/kolegium/ai_writing_flow/src/ai_writing_flow/monitoring/storage.py",
      "exists": true,
      "hits": [],
      "integration_points": []
    },
    {
      "file": "/Users/hretheum/dev/bezrobocie/vector-wave/kolegium/ai_writing_flow/src/ai_writing_flow/monitoring/dashboard_api.py",
      "exists": true,
      "hits": [],
      "integration_points": [
        {
          "line": 92,
          "text": "self._websocket_clients: List[Any] = []  # Would be WebSocket objects in real implementation"
        }
      ]
    },
    {
      "file": "/Users/hretheum/dev/bezrobocie/vector-wave/kolegium/ai_writing_flow/src/ai_writing_flow/monitoring/alerting.py",
      "exists": true,
      "hits": [],
      "integration_points": [
        {
          "line": 496,
          "text": "\"dashboard_url\": \"http://localhost:8080/dashboard\"  # Could be configurable"
        }
      ]
    },
    {
      "file": "/Users/hretheum/dev/bezrobocie/vector-wave/kolegium/ai_writing_flow/src/ai_writing_flow/validation/__init__.py",
      "exists": true,
      "hits": [],
      "integration_points": []
    },
    {
      "file": "/Users/hretheum/dev/bezrobocie/vector-wave/kolegium/ai_writing_flow/src/ai_writing_flow/validation/quality_gate.py",
      "exists": true,
      "hits": [
        {
          "type": "directive_line",
          "start_line": 390,
          "end_line": 390,
          "snippet": "# Validate throughput (should be > 0 if system is active)",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        }
      ],
      "integration_points": []
    },
    {
      "file": "/Users/hretheum/dev/bezrobocie/vector-wave/kolegium/ai_writing_flow/deployment/backups/20250804_132311/test_optimization_performance.py",
      "exists": true,
      "hits": [
        {
          "type": "directive_line",
          "start_line": 262,
          "end_line": 262,
          "snippet": "consistency. Organizations must evaluate trade-offs between system complexity",
          "values_preview": [],
          "priority_guess": "high",
          "category_guess": "required"
        },
        {
          "type": "directive_line",
          "start_line": 341,
          "end_line": 341,
          "snippet": "\"\"\"Cloud computing security considerations require comprehensive understanding of shared responsibility models, data protection strategies, and compliance requirements. Organizations must implement multi-layered security approaches.\"\"\",",
          "values_preview": [
            "Cloud computing security considerations require comprehensive understanding of shared responsibility models, data protection strategies, and compliance requirements. Organizations must implement multi-layered security approaches."
          ],
          "priority_guess": "high",
          "category_guess": "required"
        }
      ],
      "integration_points": []
    },
    {
      "file": "/Users/hretheum/dev/bezrobocie/vector-wave/kolegium/ai_writing_flow/deployment/backups/20250804_132311/test_local_kb_integration.py",
      "exists": true,
      "hits": [],
      "integration_points": [
        {
          "line": 14,
          "text": "os.environ[\"KNOWLEDGE_BASE_URL\"] = \"http://localhost:8082\""
        }
      ]
    },
    {
      "file": "/Users/hretheum/dev/bezrobocie/vector-wave/kolegium/ai_writing_flow/deployment/backups/20250804_132311/test_audience_tools_proper.py",
      "exists": true,
      "hits": [],
      "integration_points": []
    },
    {
      "file": "/Users/hretheum/dev/bezrobocie/vector-wave/kolegium/ai_writing_flow/deployment/backups/20250804_132311/test_structure.py",
      "exists": true,
      "hits": [],
      "integration_points": [
        {
          "line": 223,
          "text": "print(\"1. Install dependencies: pip install aiohttp structlog\")"
        }
      ]
    },
    {
      "file": "/Users/hretheum/dev/bezrobocie/vector-wave/kolegium/ai_writing_flow/deployment/backups/20250804_132311/performance_tests.py",
      "exists": true,
      "hits": [
        {
          "type": "directive_line",
          "start_line": 132,
          "end_line": 132,
          "snippet": "# Memory should not increase by more than 50MB",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 141,
          "end_line": 141,
          "snippet": "# Total memory increase should be reasonable",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 172,
          "end_line": 172,
          "snippet": "# This should fallback to file search quickly",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 180,
          "end_line": 180,
          "snippet": "# Should recover quickly via fallback",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 201,
          "end_line": 201,
          "snippet": "# Should fail immediately without network calls",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 212,
          "end_line": 212,
          "snippet": "# Circuit breaker should fail fast (<10ms)",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 328,
          "end_line": 328,
          "snippet": "# Should handle burst gracefully",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 376,
          "end_line": 376,
          "snippet": "# Should still complete in reasonable time",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 398,
          "end_line": 398,
          "snippet": "# Statistics should remain reasonable in size",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 403,
          "end_line": 403,
          "snippet": "assert len(adapter.stats.strategy_usage) == 1  # Should not grow indefinitely",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        }
      ],
      "integration_points": [
        {
          "line": 37,
          "text": "with patch('aiohttp.ClientSession.post') as mock_post:"
        },
        {
          "line": 67,
          "text": "with patch('aiohttp.ClientSession.post') as mock_post:"
        },
        {
          "line": 113,
          "text": "with patch('aiohttp.ClientSession.post') as mock_post:"
        },
        {
          "line": 167,
          "text": "with patch('aiohttp.ClientSession.post', side_effect=mock_post_side_effect):"
        },
        {
          "line": 229,
          "text": "with patch('aiohttp.ClientSession.post') as mock_post:"
        },
        {
          "line": 296,
          "text": "with patch('aiohttp.ClientSession.post') as mock_post:"
        },
        {
          "line": 347,
          "text": "with patch('aiohttp.ClientSession.post') as mock_post:"
        }
      ]
    },
    {
      "file": "/Users/hretheum/dev/bezrobocie/vector-wave/kolegium/ai_writing_flow/deployment/backups/20250804_132311/test_phase2_simplified.py",
      "exists": true,
      "hits": [
        {
          "type": "directive_line",
          "start_line": 104,
          "end_line": 104,
          "snippet": "# Test 1: Should stop execution method",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 106,
          "end_line": 106,
          "snippet": "assert should_stop == False  # Should not stop initially",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 112,
          "end_line": 112,
          "snippet": "assert should_stop == True  # Should stop after force stop",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 199,
          "end_line": 199,
          "snippet": "assert config.skip_research == True  # ORIGINAL should skip research",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 205,
          "end_line": 205,
          "snippet": "assert config.skip_research == False  # EXTERNAL should include research",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "required"
        },
        {
          "type": "directive_line",
          "start_line": 265,
          "end_line": 265,
          "snippet": "assert False, \"Should have failed\"",
          "values_preview": [
            "Should have failed"
          ],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 279,
          "end_line": 279,
          "snippet": "assert False, \"Should have failed\"",
          "values_preview": [
            "Should have failed"
          ],
          "priority_guess": "medium",
          "category_guess": "style"
        }
      ],
      "integration_points": []
    },
    {
      "file": "/Users/hretheum/dev/bezrobocie/vector-wave/kolegium/ai_writing_flow/deployment/backups/20250804_132311/test_tool_decorator.py",
      "exists": true,
      "hits": [],
      "integration_points": []
    },
    {
      "file": "/Users/hretheum/dev/bezrobocie/vector-wave/kolegium/ai_writing_flow/deployment/backups/20250804_132311/test_search_with_threshold.py",
      "exists": true,
      "hits": [],
      "integration_points": []
    },
    {
      "file": "/Users/hretheum/dev/bezrobocie/vector-wave/kolegium/ai_writing_flow/deployment/backups/20250804_132311/test_optimization_mock_performance.py",
      "exists": true,
      "hits": [
        {
          "type": "directive_line",
          "start_line": 7,
          "end_line": 7,
          "snippet": "mock implementations to avoid external dependencies.",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "forbidden"
        },
        {
          "type": "directive_line",
          "start_line": 731,
          "end_line": 731,
          "snippet": "consistency. Organizations must evaluate trade-offs between system complexity",
          "values_preview": [],
          "priority_guess": "high",
          "category_guess": "required"
        },
        {
          "type": "directive_line",
          "start_line": 810,
          "end_line": 810,
          "snippet": "\"\"\"Cloud computing security considerations require comprehensive understanding of shared responsibility models, data protection strategies, and compliance requirements. Organizations must implement multi-layered security approaches.\"\"\",",
          "values_preview": [
            "Cloud computing security considerations require comprehensive understanding of shared responsibility models, data protection strategies, and compliance requirements. Organizations must implement multi-layered security approaches."
          ],
          "priority_guess": "high",
          "category_guess": "required"
        },
        {
          "type": "directive_line",
          "start_line": 870,
          "end_line": 870,
          "snippet": "print(\"Using mock implementations to avoid external dependencies.\")",
          "values_preview": [
            "Using mock implementations to avoid external dependencies."
          ],
          "priority_guess": "medium",
          "category_guess": "forbidden"
        }
      ],
      "integration_points": []
    },
    {
      "file": "/Users/hretheum/dev/bezrobocie/vector-wave/kolegium/ai_writing_flow/deployment/backups/20250804_132311/test_actual_search.py",
      "exists": true,
      "hits": [],
      "integration_points": []
    },
    {
      "file": "/Users/hretheum/dev/bezrobocie/vector-wave/kolegium/ai_writing_flow/deployment/backups/20250804_132311/test_knowledge_integration.py",
      "exists": true,
      "hits": [
        {
          "type": "directive_line",
          "start_line": 57,
          "end_line": 57,
          "snippet": "# Test file search (should work even without KB)",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 80,
          "end_line": 80,
          "snippet": "# Should fallback to file search",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 134,
          "end_line": 134,
          "snippet": "# Import legacy tools (should work without errors)",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        }
      ],
      "integration_points": [
        {
          "line": 35,
          "text": "assert adapter.kb_api_url == \"http://localhost:8080\""
        },
        {
          "line": 42,
          "text": "kb_api_url=\"http://custom:9090\","
        },
        {
          "line": 46,
          "text": "assert adapter.kb_api_url == \"http://custom:9090\""
        },
        {
          "line": 72,
          "text": "kb_api_url=\"http://nonexistent:9999\","
        }
      ]
    },
    {
      "file": "/Users/hretheum/dev/bezrobocie/vector-wave/kolegium/ai_writing_flow/deployment/backups/20250804_132311/knowledge_config.py",
      "exists": true,
      "hits": [],
      "integration_points": [
        {
          "line": 19,
          "text": "KB_API_URL: str = os.getenv(\"KNOWLEDGE_BASE_URL\", \"http://localhost:8082\")"
        },
        {
          "line": 100,
          "text": "export KNOWLEDGE_BASE_URL=\"http://localhost:8082\""
        },
        {
          "line": 110,
          "text": "export KNOWLEDGE_BASE_URL=\"https://kb.vectorwave.dev\""
        }
      ]
    },
    {
      "file": "/Users/hretheum/dev/bezrobocie/vector-wave/kolegium/ai_writing_flow/deployment/backups/20250804_132311/test_listen_chain_validation.py",
      "exists": true,
      "hits": [
        {
          "type": "directive_line",
          "start_line": 76,
          "end_line": 76,
          "snippet": "assert next_method == \"align_audience\"  # Should continue to next step",
          "values_preview": [
            "align_audience"
          ],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 169,
          "end_line": 169,
          "snippet": "# Test with ORIGINAL content (should skip research)",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 174,
          "end_line": 174,
          "snippet": "assert should_execute == False  # Should skip due to config.skip_research=True",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 188,
          "end_line": 188,
          "snippet": "assert should_execute == False  # Should skip due to config.skip_style_validation=True",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 278,
          "end_line": 278,
          "snippet": "# Test 1: Critical step failure (should not continue)",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 292,
          "end_line": 292,
          "snippet": "# Test 2: Optional step failure (should continue)",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 303,
          "end_line": 303,
          "snippet": "# Test 3: Fallback used (should continue)",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 311,
          "end_line": 311,
          "snippet": "# Test 4: Non-critical step with no fallback (should continue with warning)",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        }
      ],
      "integration_points": []
    },
    {
      "file": "/Users/hretheum/dev/bezrobocie/vector-wave/kolegium/ai_writing_flow/deployment/backups/20250804_132311/test_comprehensive_profiling.py",
      "exists": true,
      "hits": [],
      "integration_points": []
    },
    {
      "file": "/Users/hretheum/dev/bezrobocie/vector-wave/kolegium/ai_writing_flow/deployment/backups/20250804_132311/test_phase1_complete.py",
      "exists": true,
      "hits": [
        {
          "type": "directive_line",
          "start_line": 118,
          "end_line": 118,
          "snippet": "# Simulate multiple calls to same method (should trigger detection)",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 166,
          "end_line": 166,
          "snippet": "# Complete it quickly (should not timeout)",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 345,
          "end_line": 345,
          "snippet": "return total_time < 5.0  # Should complete in under 5 seconds",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        }
      ],
      "integration_points": []
    },
    {
      "file": "/Users/hretheum/dev/bezrobocie/vector-wave/kolegium/ai_writing_flow/deployment/backups/20250804_132311/test_audience_tools.py",
      "exists": true,
      "hits": [],
      "integration_points": []
    },
    {
      "file": "/Users/hretheum/dev/bezrobocie/vector-wave/kolegium/ai_writing_flow/deployment/backups/20250804_132311/test_final_integration.py",
      "exists": true,
      "hits": [],
      "integration_points": []
    },
    {
      "file": "/Users/hretheum/dev/bezrobocie/vector-wave/kolegium/ai_writing_flow/deployment/backups/20250804_132311/test_kb_connectivity.py",
      "exists": true,
      "hits": [
        {
          "type": "directive_line",
          "start_line": 186,
          "end_line": 186,
          "snippet": "# Test search (should fallback to file search)",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        }
      ],
      "integration_points": [
        {
          "line": 23,
          "text": "import aiohttp"
        },
        {
          "line": 116,
          "text": "timeout = aiohttp.ClientTimeout(total=5.0)"
        },
        {
          "line": 117,
          "text": "async with aiohttp.ClientSession(timeout=timeout) as session:"
        },
        {
          "line": 128,
          "text": "except aiohttp.ClientConnectorError:"
        },
        {
          "line": 180,
          "text": "kb_api_url=\"http://localhost:9999\",  # Non-existent port"
        }
      ]
    },
    {
      "file": "/Users/hretheum/dev/bezrobocie/vector-wave/kolegium/ai_writing_flow/deployment/backups/20250804_132311/test_phase2_components.py",
      "exists": true,
      "hits": [
        {
          "type": "directive_line",
          "start_line": 39,
          "end_line": 39,
          "snippet": "assert config.skip_research == True  # ORIGINAL should skip research",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 54,
          "end_line": 54,
          "snippet": "assert config.skip_research == False  # EXTERNAL should include research",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "required"
        },
        {
          "type": "directive_line",
          "start_line": 87,
          "end_line": 87,
          "snippet": "assert False, \"Should have raised ValueError\"",
          "values_preview": [
            "Should have raised ValueError"
          ],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 132,
          "end_line": 132,
          "snippet": "assert False, \"Should have raised ValueError\"",
          "values_preview": [
            "Should have raised ValueError"
          ],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 145,
          "end_line": 145,
          "snippet": "assert False, \"Should have raised ValueError\"",
          "values_preview": [
            "Should have raised ValueError"
          ],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 159,
          "end_line": 159,
          "snippet": "assert False, \"Should have raised ValueError\"",
          "values_preview": [
            "Should have raised ValueError"
          ],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 161,
          "end_line": 161,
          "snippet": "assert \"Viral score must be 0-10\" in str(e)",
          "values_preview": [
            "Viral score must be 0-10"
          ],
          "priority_guess": "high",
          "category_guess": "required"
        },
        {
          "type": "directive_line",
          "start_line": 196,
          "end_line": 196,
          "snippet": "# Test 1: Should execute research for EXTERNAL content",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 206,
          "end_line": 206,
          "snippet": "print(\"✅ EXTERNAL content should execute research\")",
          "values_preview": [
            "✅ EXTERNAL content should execute research"
          ],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 208,
          "end_line": 208,
          "snippet": "# Test 2: Should skip research for ORIGINAL content",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 211,
          "end_line": 211,
          "snippet": "print(\"✅ ORIGINAL content should skip research\")",
          "values_preview": [
            "✅ ORIGINAL content should skip research"
          ],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 224,
          "end_line": 224,
          "snippet": "assert executor.should_execute_research(writing_state) == False  # Should be marked complete",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 258,
          "end_line": 258,
          "snippet": "# Test 1: Should execute audience alignment by default",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 269,
          "end_line": 269,
          "snippet": "print(\"✅ Should execute audience alignment by default\")",
          "values_preview": [
            "✅ Should execute audience alignment by default"
          ],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 288,
          "end_line": 288,
          "snippet": "# Blog should have higher depth level than Twitter",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 297,
          "end_line": 297,
          "snippet": "assert fallback_result.technical_founder_score > 0  # Should have default values",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 325,
          "end_line": 325,
          "snippet": "# Test 1: Should execute draft generation when no draft exists",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 339,
          "end_line": 339,
          "snippet": "print(\"✅ Should execute draft generation when no draft exists\")",
          "values_preview": [
            "✅ Should execute draft generation when no draft exists"
          ],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 371,
          "end_line": 371,
          "snippet": "assert checkpoint.review_required == True  # High viral score should require review",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "required"
        }
      ],
      "integration_points": []
    },
    {
      "file": "/Users/hretheum/dev/bezrobocie/vector-wave/kolegium/ai_writing_flow/deployment/backups/20250804_132311/init_monitoring_storage.py",
      "exists": true,
      "hits": [],
      "integration_points": []
    },
    {
      "file": "/Users/hretheum/dev/bezrobocie/vector-wave/kolegium/ai_writing_flow/deployment/backups/20250804_132311/test_comprehensive_integration.py",
      "exists": true,
      "hits": [
        {
          "type": "directive_line",
          "start_line": 153,
          "end_line": 153,
          "snippet": "# Should have either KB results or file content",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 168,
          "end_line": 168,
          "snippet": "assert len(result) > 100  # Should have substantial content",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 265,
          "end_line": 265,
          "snippet": "# All queries should succeed",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 386,
          "end_line": 386,
          "snippet": "# Should fallback gracefully",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 389,
          "end_line": 389,
          "snippet": "assert len(result.file_content) > 0  # Should have file fallback content",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 408,
          "end_line": 408,
          "snippet": "# First few requests should fail and trigger circuit breaker",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 417,
          "end_line": 417,
          "snippet": "# Circuit breaker should now be open",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 422,
          "end_line": 422,
          "snippet": "# Should have some failures recorded",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 456,
          "end_line": 456,
          "snippet": "# Should timeout quickly",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 487,
          "end_line": 487,
          "snippet": "# Should handle gracefully and fallback to file search",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 492,
          "end_line": 492,
          "snippet": "# Should fallback to file content",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 539,
          "end_line": 539,
          "snippet": "assert len(str(result)) > 100  # Should have substantial output",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 579,
          "end_line": 579,
          "snippet": "assert len(result) > 50  # Should have meaningful content",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 616,
          "end_line": 616,
          "snippet": "# Should track operations",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 645,
          "end_line": 645,
          "snippet": "# Should have recorded the error",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 667,
          "end_line": 667,
          "snippet": "# Basic configuration should be valid for testing",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        }
      ],
      "integration_points": [
        {
          "line": 24,
          "text": "import aiohttp"
        },
        {
          "line": 50,
          "text": "self.kb_url = \"http://localhost:8082\""
        },
        {
          "line": 192,
          "text": "self.kb_url = \"http://localhost:8082\""
        },
        {
          "line": 364,
          "text": "self.kb_url = \"http://localhost:8082\""
        },
        {
          "line": 374,
          "text": "kb_api_url=\"http://localhost:9999\",  # Non-existent port"
        },
        {
          "line": 401,
          "text": "kb_api_url=\"http://localhost:9999\",  # Will fail"
        },
        {
          "line": 588,
          "text": "self.kb_url = \"http://localhost:8082\""
        },
        {
          "line": 629,
          "text": "kb_api_url=\"http://localhost:9999\",  # Will fail"
        }
      ]
    },
    {
      "file": "/Users/hretheum/dev/bezrobocie/vector-wave/kolegium/ai_writing_flow/deployment/backups/20250804_132311/test_live_kb_integration.py",
      "exists": true,
      "hits": [
        {
          "type": "directive_line",
          "start_line": 73,
          "end_line": 73,
          "snippet": "# Should have either KB results or file content (or both)",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 76,
          "end_line": 76,
          "snippet": "# If KB is available, should have used HYBRID strategy",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 102,
          "end_line": 102,
          "snippet": "# Should have file content if docs exist",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 172,
          "end_line": 172,
          "snippet": "# Should find agent-related content",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 217,
          "end_line": 217,
          "snippet": "# First request should timeout",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 224,
          "end_line": 224,
          "snippet": "# Second request should timeout and open circuit breaker",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 231,
          "end_line": 231,
          "snippet": "# Third request should fail immediately",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 240,
          "end_line": 240,
          "snippet": "# Should fail very quickly",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        }
      ],
      "integration_points": [
        {
          "line": 8,
          "text": "import aiohttp"
        },
        {
          "line": 29,
          "text": "kb_api_url=\"http://localhost:8080\","
        },
        {
          "line": 53,
          "text": "except aiohttp.ClientConnectionError:"
        }
      ]
    },
    {
      "file": "/Users/hretheum/dev/bezrobocie/vector-wave/kolegium/ai_writing_flow/deployment/backups/20250804_132311/run_scaling_tests.py",
      "exists": true,
      "hits": [],
      "integration_points": []
    },
    {
      "file": "/Users/hretheum/dev/bezrobocie/vector-wave/kolegium/ai_writing_flow/deployment/backups/20250804_132311/test_flow_inputs.py",
      "exists": true,
      "hits": [
        {
          "type": "directive_line",
          "start_line": 57,
          "end_line": 57,
          "snippet": "# Test 3: Invalid viral score (should raise ValidationError)",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 63,
          "end_line": 63,
          "snippet": "viral_score=15.0  # Invalid - should be 0-10",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 65,
          "end_line": 65,
          "snippet": "assert False, \"Should have raised ValidationError\"",
          "values_preview": [
            "Should have raised ValidationError"
          ],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 69,
          "end_line": 69,
          "snippet": "# Test 4: Empty topic title (should raise ValidationError)",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 76,
          "end_line": 76,
          "snippet": "assert False, \"Should have raised ValidationError\"",
          "values_preview": [
            "Should have raised ValidationError"
          ],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 80,
          "end_line": 80,
          "snippet": "# Test 5: Empty platform (should raise ValidationError)",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 87,
          "end_line": 87,
          "snippet": "assert False, \"Should have raised ValidationError\"",
          "values_preview": [
            "Should have raised ValidationError"
          ],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 133,
          "end_line": 133,
          "snippet": "assert False, \"Should have raised ValueError\"",
          "values_preview": [
            "Should have raised ValueError"
          ],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 204,
          "end_line": 204,
          "snippet": "assert False, \"Should have raised ValueError\"",
          "values_preview": [
            "Should have raised ValueError"
          ],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 212,
          "end_line": 212,
          "snippet": "assert False, \"Should have raised ValueError\"",
          "values_preview": [
            "Should have raised ValueError"
          ],
          "priority_guess": "medium",
          "category_guess": "style"
        }
      ],
      "integration_points": []
    },
    {
      "file": "/Users/hretheum/dev/bezrobocie/vector-wave/kolegium/ai_writing_flow/deployment/backups/20250804_132311/test_audience_crew_direct.py",
      "exists": true,
      "hits": [],
      "integration_points": [
        {
          "line": 23,
          "text": "editorial_recommendations = \"Focus on practical examples and ROI\""
        },
        {
          "line": 31,
          "text": "editorial_recommendations=editorial_recommendations"
        }
      ]
    },
    {
      "file": "/Users/hretheum/dev/bezrobocie/vector-wave/kolegium/ai_writing_flow/deployment/backups/20250804_132311/test_phase2_complete_integration.py",
      "exists": true,
      "hits": [
        {
          "type": "directive_line",
          "start_line": 163,
          "end_line": 163,
          "snippet": "# Test 1: Style validation should execute",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 166,
          "end_line": 166,
          "snippet": "print(\"✅ Style validation should execute for draft with violations\")",
          "values_preview": [
            "✅ Style validation should execute for draft with violations"
          ],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 171,
          "end_line": 171,
          "snippet": "assert result.is_compliant == False  # Should fail due to forbidden phrases",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "forbidden"
        },
        {
          "type": "directive_line",
          "start_line": 230,
          "end_line": 230,
          "snippet": "According to industry reports, the market has shown significant growth in the past quarter. Business leaders should consider strategic investments in emerging technologies.",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 234,
          "end_line": 234,
          "snippet": "Based on this analysis, organizations should focus on:",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        }
      ],
      "integration_points": []
    },
    {
      "file": "/Users/hretheum/dev/bezrobocie/vector-wave/kolegium/ai_writing_flow/deployment/backups/20250804_132311/test_production_integration.py",
      "exists": true,
      "hits": [],
      "integration_points": [
        {
          "line": 34,
          "text": "self.kb_url = \"http://localhost:8082\""
        },
        {
          "line": 226,
          "text": "kb_api_url=\"http://localhost:9999\",  # Non-existent"
        }
      ]
    },
    {
      "file": "/Users/hretheum/dev/bezrobocie/vector-wave/kolegium/ai_writing_flow/deployment/backups/20250804_132311/test_knowledge_integration_simplified.py",
      "exists": true,
      "hits": [
        {
          "type": "directive_line",
          "start_line": 88,
          "end_line": 88,
          "snippet": "# Second failure - should open circuit breaker",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 94,
          "end_line": 94,
          "snippet": "# Third attempt should fail immediately due to circuit breaker",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 182,
          "end_line": 182,
          "snippet": "# Should also have KB results for enrichment",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 236,
          "end_line": 236,
          "snippet": "# Failures 1 and 2 - circuit breaker should remain closed",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 242,
          "end_line": 242,
          "snippet": "# Failure 3 - should open circuit breaker",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 378,
          "end_line": 378,
          "snippet": "# Should complete in reasonable time (less than 2 seconds for 10 requests)",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 508,
          "end_line": 508,
          "snippet": "# KnowledgeResponse should be convertible to string",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        }
      ],
      "integration_points": [
        {
          "line": 8,
          "text": "import aiohttp"
        },
        {
          "line": 51,
          "text": "kb_api_url=\"http://localhost:8080\","
        },
        {
          "line": 55,
          "text": "with patch('aiohttp.ClientSession.post') as mock_post:"
        },
        {
          "line": 76,
          "text": "kb_api_url=\"http://localhost:8080\","
        },
        {
          "line": 80,
          "text": "with patch('aiohttp.ClientSession.post', side_effect=aiohttp.ClientConnectionError(\"Connection failed\")):"
        },
        {
          "line": 110,
          "text": "with patch('aiohttp.ClientSession.post', side_effect=aiohttp.ClientConnectionError()):"
        },
        {
          "line": 147,
          "text": "with patch('aiohttp.ClientSession.post') as mock_post:"
        },
        {
          "line": 170,
          "text": "with patch('aiohttp.ClientSession.post') as mock_post:"
        },
        {
          "line": 194,
          "text": "with patch('aiohttp.ClientSession.post') as mock_post:"
        },
        {
          "line": 217,
          "text": "with patch('aiohttp.ClientSession.post', side_effect=aiohttp.ClientConnectionError()):"
        },
        {
          "line": 234,
          "text": "with patch('aiohttp.ClientSession.post', side_effect=aiohttp.ClientConnectionError()):"
        },
        {
          "line": 271,
          "text": "with patch('aiohttp.ClientSession.post', side_effect=aiohttp.ClientConnectionError()):"
        },
        {
          "line": 279,
          "text": "with patch('aiohttp.ClientSession.post') as mock_post:"
        },
        {
          "line": 303,
          "text": "with patch('aiohttp.ClientSession.post') as mock_post:"
        },
        {
          "line": 327,
          "text": "with patch('aiohttp.ClientSession.post') as mock_post:"
        },
        {
          "line": 358,
          "text": "with patch('aiohttp.ClientSession.post') as mock_post:"
        },
        {
          "line": 426,
          "text": "with patch('aiohttp.ClientSession.post') as mock_post:"
        },
        {
          "line": 482,
          "text": "with patch('aiohttp.ClientSession.post') as mock_post:"
        },
        {
          "line": 547,
          "text": "'KNOWLEDGE_BASE_URL': 'http://custom:9090',"
        },
        {
          "line": 553,
          "text": "assert adapter.kb_api_url == 'http://custom:9090'"
        }
      ]
    },
    {
      "file": "/Users/hretheum/dev/bezrobocie/vector-wave/kolegium/ai_writing_flow/deployment/backups/20250804_132311/test_initialize_basic.py",
      "exists": true,
      "hits": [],
      "integration_points": []
    },
    {
      "file": "/Users/hretheum/dev/bezrobocie/vector-wave/kolegium/ai_writing_flow/deployment/backups/20250804_132311/test_crewai_agent_integration.py",
      "exists": true,
      "hits": [
        {
          "type": "directive_line",
          "start_line": 76,
          "end_line": 76,
          "snippet": "assert len(result_str) > 500, \"Result should be comprehensive\"",
          "values_preview": [
            "Result should be comprehensive"
          ],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 77,
          "end_line": 77,
          "snippet": "assert \"agent\" in result_str.lower(), \"Should contain agent information\"",
          "values_preview": [
            "agent",
            "Should contain agent information"
          ],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 156,
          "end_line": 156,
          "snippet": "assert len(result_str) > 800, \"Collaborative result should be extensive\"",
          "values_preview": [
            "Collaborative result should be extensive"
          ],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 157,
          "end_line": 157,
          "snippet": "assert \"agent\" in result_str.lower(), \"Should contain agent information\"",
          "values_preview": [
            "agent",
            "Should contain agent information"
          ],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 158,
          "end_line": 158,
          "snippet": "assert any(word in result_str.lower() for word in [\"troubleshoot\", \"issue\", \"problem\"]), \"Should contain troubleshooting info\"",
          "values_preview": [
            "troubleshoot",
            "issue",
            "problem",
            "Should contain troubleshooting info"
          ],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 207,
          "end_line": 207,
          "snippet": "# Should complete even with potential tool errors",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 208,
          "end_line": 208,
          "snippet": "assert len(str(result)) > 100, \"Should provide some result even with errors\"",
          "values_preview": [
            "Should provide some result even with errors"
          ],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 269,
          "end_line": 269,
          "snippet": "# Performance should be reasonable",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 271,
          "end_line": 271,
          "snippet": "assert len(str(result)) > 200, \"Should have substantial results\"",
          "values_preview": [
            "Should have substantial results"
          ],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 346,
          "end_line": 346,
          "snippet": "assert len(result_str) > 600, \"Tutorial should be comprehensive\"",
          "values_preview": [
            "Tutorial should be comprehensive"
          ],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 347,
          "end_line": 347,
          "snippet": "assert \"agent\" in result_str.lower(), \"Should explain agents\"",
          "values_preview": [
            "agent",
            "Should explain agents"
          ],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 348,
          "end_line": 348,
          "snippet": "assert any(word in result_str for word in [\"example\", \"code\", \"```\"]), \"Should include examples\"",
          "values_preview": [
            "example",
            "code",
            "```",
            "Should include examples"
          ],
          "priority_guess": "medium",
          "category_guess": "required"
        },
        {
          "type": "directive_line",
          "start_line": 414,
          "end_line": 414,
          "snippet": "assert len(result_str) > 400, \"Support guide should be detailed\"",
          "values_preview": [
            "Support guide should be detailed"
          ],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 415,
          "end_line": 415,
          "snippet": "assert any(word in result_str.lower() for word in [\"issue\", \"problem\", \"solution\"]), \"Should address issues\"",
          "values_preview": [
            "issue",
            "problem",
            "solution",
            "Should address issues"
          ],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 416,
          "end_line": 416,
          "snippet": "assert any(word in result_str.lower() for word in [\"install\", \"memory\"]), \"Should cover common problems\"",
          "values_preview": [
            "install",
            "memory",
            "Should cover common problems"
          ],
          "priority_guess": "medium",
          "category_guess": "style"
        }
      ],
      "integration_points": []
    },
    {
      "file": "/Users/hretheum/dev/bezrobocie/vector-wave/kolegium/ai_writing_flow/deployment/backups/20250804_132311/test_inputs_only.py",
      "exists": true,
      "hits": [
        {
          "type": "directive_line",
          "start_line": 43,
          "end_line": 43,
          "snippet": "# Test 2: Invalid viral score (should raise ValidationError)",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 49,
          "end_line": 49,
          "snippet": "viral_score=15.0  # Invalid - should be 0-10",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 51,
          "end_line": 51,
          "snippet": "print(\"❌ Should have raised ValidationError for invalid viral_score\")",
          "values_preview": [
            "❌ Should have raised ValidationError for invalid viral_score"
          ],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 56,
          "end_line": 56,
          "snippet": "# Test 3: Empty topic title (should raise ValidationError)",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 63,
          "end_line": 63,
          "snippet": "print(\"❌ Should have raised ValidationError for empty topic_title\")",
          "values_preview": [
            "❌ Should have raised ValidationError for empty topic_title"
          ],
          "priority_guess": "medium",
          "category_guess": "style"
        }
      ],
      "integration_points": []
    },
    {
      "file": "/Users/hretheum/dev/bezrobocie/vector-wave/kolegium/ai_writing_flow/deployment/backups/20250804_132311/tests/test_enhanced_knowledge_tools.py",
      "exists": true,
      "hits": [
        {
          "type": "directive_line",
          "start_line": 170,
          "end_line": 170,
          "snippet": "# Should search for agent-specific patterns",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "pattern"
        },
        {
          "type": "directive_line",
          "start_line": 245,
          "end_line": 245,
          "snippet": "# Should search for installation troubleshooting",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 306,
          "end_line": 306,
          "snippet": "# Should maintain same interface",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 315,
          "end_line": 315,
          "snippet": "# Should return same format as before",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 325,
          "end_line": 325,
          "snippet": "# Should return same format as before",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 409,
          "end_line": 409,
          "snippet": "# Performance info should be included",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "required"
        }
      ],
      "integration_points": []
    },
    {
      "file": "/Users/hretheum/dev/bezrobocie/vector-wave/kolegium/ai_writing_flow/deployment/backups/20250804_132311/tests/test_error_scenarios.py",
      "exists": true,
      "hits": [
        {
          "type": "directive_line",
          "start_line": 139,
          "end_line": 139,
          "snippet": "viral_score=15.0  # Should be 0-10",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 149,
          "end_line": 149,
          "snippet": "viral_score=-1.0  # Should be >= 0",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 247,
          "end_line": 247,
          "snippet": "# Try backward transition (should fail)",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 275,
          "end_line": 275,
          "snippet": "# Complete should detect timeout",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 282,
          "end_line": 282,
          "snippet": "# Should be marked as failed due to timeout",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 336,
          "end_line": 336,
          "snippet": "# At least some operations should succeed (thread-safe operations)",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 339,
          "end_line": 339,
          "snippet": "assert success_count >= 1  # At least one should succeed",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 345,
          "end_line": 345,
          "snippet": "# The limit is 20 per stage, so we should be able to execute some and then hit the limit",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 361,
          "end_line": 361,
          "snippet": "# Should have executed some operations before hitting the limit",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 362,
          "end_line": 362,
          "snippet": "assert executed_count > 0, \"Should have executed at least some operations\"",
          "values_preview": [
            "Should have executed at least some operations"
          ],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 390,
          "end_line": 390,
          "snippet": "# Circuit should now be open",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 393,
          "end_line": 393,
          "snippet": "# Next call should fail with CircuitBreakerError",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 416,
          "end_line": 416,
          "snippet": "# Next call should attempt recovery (half-open)",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 421,
          "end_line": 421,
          "snippet": "# Circuit should be open again",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 446,
          "end_line": 446,
          "snippet": "assert not cb2.is_open  # Second CB should still be closed",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 448,
          "end_line": 448,
          "snippet": "# Second circuit breaker should still work",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 451,
          "end_line": 451,
          "snippet": "assert not cb2.is_open  # Should remain closed",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 475,
          "end_line": 475,
          "snippet": "# Next call should succeed and close circuit",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 501,
          "end_line": 501,
          "snippet": "# Should fail after max attempts",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 507,
          "end_line": 507,
          "snippet": "# Verify retry count was tracked (should be 2 attempts total)",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 521,
          "end_line": 521,
          "snippet": "raise TypeError(\"Wrong type - should not retry\")",
          "values_preview": [
            "Wrong type - should not retry"
          ],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 523,
          "end_line": 523,
          "snippet": "# Should fail immediately without retries",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 527,
          "end_line": 527,
          "snippet": "assert str(exc_info.value) == \"Wrong type - should not retry\"",
          "values_preview": [
            "Wrong type - should not retry"
          ],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 529,
          "end_line": 529,
          "snippet": "# Should not have retried - non-retryable exceptions don't increment retry count",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 549,
          "end_line": 549,
          "snippet": "# Should not retry permanent errors",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 554,
          "end_line": 554,
          "snippet": "# Should not have retried - custom should_retry returned False for \"Permanent failure\"",
          "values_preview": [
            "Permanent failure"
          ],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 564,
          "end_line": 564,
          "snippet": "raise RuntimeError(\"Should not retry due to global limit\")",
          "values_preview": [
            "Should not retry due to global limit"
          ],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 566,
          "end_line": 566,
          "snippet": "# Should fail immediately due to global limit",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 570,
          "end_line": 570,
          "snippet": "# Retry count might increase by 1 due to the failed attempt, but should not retry",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 572,
          "end_line": 572,
          "snippet": "# Should be 10 (original) or 11 (original + 1 failed attempt)",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 587,
          "end_line": 587,
          "snippet": "# Should fail after retries",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 612,
          "end_line": 612,
          "snippet": "# Use smaller numbers to avoid hitting loop prevention limits",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "forbidden"
        },
        {
          "type": "directive_line",
          "start_line": 616,
          "end_line": 616,
          "snippet": "for i in range(10):  # Create fewer executions to avoid loop limits",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "forbidden"
        },
        {
          "type": "directive_line",
          "start_line": 647,
          "end_line": 647,
          "snippet": "# Reduce operations per thread to avoid loop prevention",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "forbidden"
        },
        {
          "type": "directive_line",
          "start_line": 707,
          "end_line": 707,
          "snippet": "# System should handle open circuit gracefully",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 737,
          "end_line": 737,
          "snippet": "# Should have some successes and/or some failures (intermittent behavior)",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 808,
          "end_line": 808,
          "snippet": "# This should trigger: retry -> circuit breaker -> final failure",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 836,
          "end_line": 836,
          "snippet": "# First attempt should fail and trip circuit breaker",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        }
      ],
      "integration_points": [
        {
          "line": 49,
          "text": "editorial_recommendations: str = Field(default=\"\", description=\"Editorial guidance\")"
        }
      ]
    },
    {
      "file": "/Users/hretheum/dev/bezrobocie/vector-wave/kolegium/ai_writing_flow/deployment/backups/20250804_132311/tests/test_scaling_behavior_basic.py",
      "exists": true,
      "hits": [
        {
          "type": "directive_line",
          "start_line": 294,
          "end_line": 294,
          "snippet": "assert metrics.throughput > 0, \"Throughput should be positive\"",
          "values_preview": [
            "Throughput should be positive"
          ],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 295,
          "end_line": 295,
          "snippet": "assert metrics.execution_time > 0, \"Execution time should be positive\"",
          "values_preview": [
            "Execution time should be positive"
          ],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 341,
          "end_line": 341,
          "snippet": "# Validate memory scaling is predictable (should increase linearly)",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 374,
          "end_line": 374,
          "snippet": "# At higher loads, we should find bottlenecks",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 379,
          "end_line": 379,
          "snippet": "\"Should either detect bottleneck or maintain efficiency at high load\"",
          "values_preview": [
            "Should either detect bottleneck or maintain efficiency at high load"
          ],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 388,
          "end_line": 388,
          "snippet": "# Efficiency should be reasonable (>70% for sustainable load)",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 393,
          "end_line": 393,
          "snippet": "# Success rate should remain high",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 401,
          "end_line": 401,
          "snippet": "\"Overall scaling efficiency should be >75%\"",
          "values_preview": [
            "Overall scaling efficiency should be >75%"
          ],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 416,
          "end_line": 416,
          "snippet": "assert recommended_capacity >= 1, \"Should recommend at least 1 flow capacity\"",
          "values_preview": [
            "Should recommend at least 1 flow capacity"
          ],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 417,
          "end_line": 417,
          "snippet": "assert recommended_capacity <= 8, \"Recommended capacity should be reasonable\"",
          "values_preview": [
            "Recommended capacity should be reasonable"
          ],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 418,
          "end_line": 418,
          "snippet": "assert peak_throughput > 0, \"Peak throughput should be positive\"",
          "values_preview": [
            "Peak throughput should be positive"
          ],
          "priority_guess": "medium",
          "category_guess": "style"
        }
      ],
      "integration_points": []
    },
    {
      "file": "/Users/hretheum/dev/bezrobocie/vector-wave/kolegium/ai_writing_flow/deployment/backups/20250804_132311/tests/test_flow_control_state_complete.py",
      "exists": true,
      "hits": [
        {
          "type": "directive_line",
          "start_line": 157,
          "end_line": 157,
          "snippet": "# Next attempt should fail",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 171,
          "end_line": 171,
          "snippet": "# (bypassing the normal transition method to avoid execution limits)",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "forbidden"
        },
        {
          "type": "directive_line",
          "start_line": 174,
          "end_line": 174,
          "snippet": "# Create dummy transitions with varied stages to avoid execution limit",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "forbidden"
        },
        {
          "type": "directive_line",
          "start_line": 197,
          "end_line": 197,
          "snippet": "# Now make a real transition which should trigger trimming",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 202,
          "end_line": 202,
          "snippet": "# After trimming, history should be reduced to MAX_HISTORY_SIZE//2",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 318,
          "end_line": 318,
          "snippet": "# Success should reset failures",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 345,
          "end_line": 345,
          "snippet": "# Should not attempt recovery immediately",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 354,
          "end_line": 354,
          "snippet": "# Now should attempt recovery",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 413,
          "end_line": 413,
          "snippet": "# Should have exactly 1000 retries (10 threads * 100 increments)",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 472,
          "end_line": 472,
          "snippet": "# Should detect the loop pattern",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "pattern"
        },
        {
          "type": "directive_line",
          "start_line": 475,
          "end_line": 475,
          "snippet": "# With our loop, it should detect something",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 477,
          "end_line": 477,
          "snippet": "# We created a clear loop pattern, so warnings should be found",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "pattern"
        },
        {
          "type": "directive_line",
          "start_line": 526,
          "end_line": 526,
          "snippet": "assert duration < 1.0  # Should be less than 1 second",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 532,
          "end_line": 532,
          "snippet": "# Initially should be start time",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 535,
          "end_line": 535,
          "snippet": "# After transition, should be transition time",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 557,
          "end_line": 557,
          "snippet": "# Should handle long reasons without issues",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 571,
          "end_line": 571,
          "snippet": "# Should return empty dict for now",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 608,
          "end_line": 608,
          "snippet": "# Should complete transitions quickly",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        }
      ],
      "integration_points": []
    },
    {
      "file": "/Users/hretheum/dev/bezrobocie/vector-wave/kolegium/ai_writing_flow/deployment/backups/20250804_132311/tests/test_heavy_load_standalone.py",
      "exists": true,
      "hits": [
        {
          "type": "directive_line",
          "start_line": 756,
          "end_line": 756,
          "snippet": "# CPU usage should have been elevated during test",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 944,
          "end_line": 944,
          "snippet": "assert circuit_breaker_activated, \"Circuit breaker should have activated with high failure rate\"",
          "values_preview": [
            "Circuit breaker should have activated with high failure rate"
          ],
          "priority_guess": "medium",
          "category_guess": "style"
        }
      ],
      "integration_points": []
    },
    {
      "file": "/Users/hretheum/dev/bezrobocie/vector-wave/kolegium/ai_writing_flow/deployment/backups/20250804_132311/tests/test_resource_contention_basic.py",
      "exists": true,
      "hits": [
        {
          "type": "directive_line",
          "start_line": 332,
          "end_line": 332,
          "snippet": "assert len(results) == len(simulators), \"All CPU workloads should complete\"",
          "values_preview": [
            "All CPU workloads should complete"
          ],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 335,
          "end_line": 335,
          "snippet": "# Check fairness - no worker should be starved",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 382,
          "end_line": 382,
          "snippet": "assert len(results) == 4, \"All memory workloads should complete\"",
          "values_preview": [
            "All memory workloads should complete"
          ],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 420,
          "end_line": 420,
          "snippet": "assert len(results) == 6, \"All I/O workloads should complete\"",
          "values_preview": [
            "All I/O workloads should complete"
          ],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 517,
          "end_line": 517,
          "snippet": "assert len(results) == 8, \"All mixed workloads should complete\"",
          "values_preview": [
            "All mixed workloads should complete"
          ],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 519,
          "end_line": 519,
          "snippet": "# Resource usage should be significant but manageable",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 523,
          "end_line": 523,
          "snippet": "# System should handle mixed load without critical issues",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        }
      ],
      "integration_points": []
    },
    {
      "file": "/Users/hretheum/dev/bezrobocie/vector-wave/kolegium/ai_writing_flow/deployment/backups/20250804_132311/tests/test_resource_contention.py",
      "exists": true,
      "hits": [
        {
          "type": "directive_line",
          "start_line": 359,
          "end_line": 359,
          "snippet": "assert len(results) == 5, \"All flows should complete\"",
          "values_preview": [
            "All flows should complete"
          ],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 400,
          "end_line": 400,
          "snippet": "assert len(results) == len(executors), \"All CPU-intensive flows should complete\"",
          "values_preview": [
            "All CPU-intensive flows should complete"
          ],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 403,
          "end_line": 403,
          "snippet": "# Check for fair CPU scheduling (no single flow should dominate)",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 408,
          "end_line": 408,
          "snippet": "# Execution times should be reasonably similar (within 2x factor)",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 440,
          "end_line": 440,
          "snippet": "assert len(results) == 8, \"All I/O flows should complete\"",
          "values_preview": [
            "All I/O flows should complete"
          ],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 465,
          "end_line": 465,
          "snippet": "# Simulate state operations that require locking",
          "values_preview": [],
          "priority_guess": "low",
          "category_guess": "required"
        },
        {
          "type": "directive_line",
          "start_line": 514,
          "end_line": 514,
          "snippet": "assert len(contention_results) == 10, \"All threads should complete successfully\"",
          "values_preview": [
            "All threads should complete successfully"
          ],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 621,
          "end_line": 621,
          "snippet": "assert len(results) == 8, \"All mixed workload flows should complete\"",
          "values_preview": [
            "All mixed workload flows should complete"
          ],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 623,
          "end_line": 623,
          "snippet": "# Resource usage should be significant but not excessive",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 631,
          "end_line": 631,
          "snippet": "# Performance should degrade gracefully",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 666,
          "end_line": 666,
          "snippet": "# Execute flow (will fail due to missing CrewAI, but should handle gracefully)",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 698,
          "end_line": 698,
          "snippet": "assert len(results) == 4, \"All V2 flows should attempt execution\"",
          "values_preview": [
            "All V2 flows should attempt execution"
          ],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 700,
          "end_line": 700,
          "snippet": "# Flows should fail gracefully, not crash",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 704,
          "end_line": 704,
          "snippet": "# Resource usage should be reasonable",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 801,
          "end_line": 801,
          "snippet": "# At least one thread should complete or timeout gracefully",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 805,
          "end_line": 805,
          "snippet": "# Deadlock detector should identify potential issues",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 865,
          "end_line": 865,
          "snippet": "# Performance should degrade under pressure, but not excessively",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 869,
          "end_line": 869,
          "snippet": "# High resource usage should be detected",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 872,
          "end_line": 872,
          "snippet": "# System should detect contention patterns",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "pattern"
        },
        {
          "type": "directive_line",
          "start_line": 940,
          "end_line": 940,
          "snippet": "# Memory should be mostly reclaimed after cleanup",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 966,
          "end_line": 966,
          "snippet": "# Should detect file handle growth",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        }
      ],
      "integration_points": []
    },
    {
      "file": "/Users/hretheum/dev/bezrobocie/vector-wave/kolegium/ai_writing_flow/deployment/backups/20250804_132311/tests/test_concurrent_execution.py",
      "exists": true,
      "hits": [
        {
          "type": "directive_line",
          "start_line": 125,
          "end_line": 125,
          "snippet": "# Verify isolation - each flow should have unique execution_id",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 168,
          "end_line": 168,
          "snippet": "# Verify thread safety - at least one should succeed",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 217,
          "end_line": 217,
          "snippet": "assert len(retry_results) >= 1  # At least some should succeed",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 267,
          "end_line": 267,
          "snippet": "assert len(cb_errors) >= 3   # Failed operations should be recorded",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 294,
          "end_line": 294,
          "snippet": "# Only try transition once per thread to avoid invalid transitions",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "forbidden"
        },
        {
          "type": "directive_line",
          "start_line": 370,
          "end_line": 370,
          "snippet": "# Verify thread safety - at least some operations should succeed",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 373,
          "end_line": 373,
          "snippet": "# Stage should be completed successfully",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 642,
          "end_line": 642,
          "snippet": "# Verify flows accessed the counter (values should be reasonable)",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        }
      ],
      "integration_points": []
    },
    {
      "file": "/Users/hretheum/dev/bezrobocie/vector-wave/kolegium/ai_writing_flow/deployment/backups/20250804_132311/tests/test_scaling_behavior.py",
      "exists": true,
      "hits": [
        {
          "type": "directive_line",
          "start_line": 369,
          "end_line": 369,
          "snippet": "# Memory should scale sub-linearly (growth rate < 1.5)",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 417,
          "end_line": 417,
          "snippet": "# CPU should scale reasonably (not > 95% until high flow counts)",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 483,
          "end_line": 483,
          "snippet": "# Should detect performance issues at high loads",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 571,
          "end_line": 571,
          "snippet": "# Efficiency should not degrade significantly",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 608,
          "end_line": 608,
          "snippet": "# Resource efficiency should not collapse",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        }
      ],
      "integration_points": [
        {
          "line": 174,
          "text": "kb_api_url=f\"http://localhost:808{i % 3 + 2}\",  # Distribute across mock endpoints"
        },
        {
          "line": 263,
          "text": "with patch('aiohttp.ClientSession.post') as mock_post:"
        },
        {
          "line": 345,
          "text": "with patch('aiohttp.ClientSession.post') as mock_post:"
        },
        {
          "line": 440,
          "text": "with patch('aiohttp.ClientSession.post') as mock_post:"
        },
        {
          "line": 502,
          "text": "with patch('aiohttp.ClientSession.post') as mock_post:"
        },
        {
          "line": 544,
          "text": "with patch('aiohttp.ClientSession.post') as mock_post:"
        },
        {
          "line": 590,
          "text": "with patch('aiohttp.ClientSession.post') as mock_post:"
        },
        {
          "line": 641,
          "text": "with patch('aiohttp.ClientSession.post') as mock_post:"
        }
      ]
    },
    {
      "file": "/Users/hretheum/dev/bezrobocie/vector-wave/kolegium/ai_writing_flow/deployment/backups/20250804_132311/tests/test_api_models.py",
      "exists": true,
      "hits": [
        {
          "type": "directive_line",
          "start_line": 12,
          "end_line": 12,
          "snippet": "# Define models inline to avoid circular imports",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "forbidden"
        },
        {
          "type": "directive_line",
          "start_line": 137,
          "end_line": 137,
          "snippet": "\"viral_score\": \"invalid\"  # Should be float",
          "values_preview": [
            "viral_score",
            "invalid"
          ],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 276,
          "end_line": 276,
          "snippet": "\"progress_percent\": \"invalid\"  # Should be float",
          "values_preview": [
            "progress_percent",
            "invalid"
          ],
          "priority_guess": "medium",
          "category_guess": "style"
        }
      ],
      "integration_points": [
        {
          "line": 25,
          "text": "editorial_recommendations: str = Field(default=\"\", description=\"Editorial guidance\")"
        },
        {
          "line": 98,
          "text": "\"editorial_recommendations\": \"Focus on technical depth\","
        },
        {
          "line": 113,
          "text": "assert request.editorial_recommendations == \"Focus on technical depth\""
        }
      ]
    },
    {
      "file": "/Users/hretheum/dev/bezrobocie/vector-wave/kolegium/ai_writing_flow/deployment/backups/20250804_132311/tests/__init__.py",
      "exists": true,
      "hits": [],
      "integration_points": []
    },
    {
      "file": "/Users/hretheum/dev/bezrobocie/vector-wave/kolegium/ai_writing_flow/deployment/backups/20250804_132311/tests/test_flow_integration.py",
      "exists": true,
      "hits": [
        {
          "type": "directive_line",
          "start_line": 148,
          "end_line": 148,
          "snippet": "# Circuit should now be open",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 153,
          "end_line": 153,
          "snippet": "# Subsequent calls should fail fast",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 172,
          "end_line": 172,
          "snippet": "# Try to start research stage - should skip",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 175,
          "end_line": 175,
          "snippet": "# Should return skipped execution",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 216,
          "end_line": 216,
          "snippet": "# Should be marked as failed due to timeout",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 329,
          "end_line": 329,
          "snippet": "# Execute should handle failure gracefully",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 370,
          "end_line": 370,
          "snippet": "# Execute only a few key stages to avoid complexity",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "forbidden"
        },
        {
          "type": "directive_line",
          "start_line": 549,
          "end_line": 549,
          "snippet": "stage_limit = 5  # Much smaller to avoid hitting global limits",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "forbidden"
        },
        {
          "type": "directive_line",
          "start_line": 589,
          "end_line": 589,
          "snippet": "# Third execution should be blocked due to stage limit",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 621,
          "end_line": 621,
          "snippet": "# Verify proper ordering (each stage should come before its successors)",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 662,
          "end_line": 662,
          "snippet": "# Should still be marked as complete",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 665,
          "end_line": 665,
          "snippet": "# Result should be stored",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 701,
          "end_line": 701,
          "snippet": "# Use much smaller numbers to avoid hitting loop prevention limits",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "forbidden"
        },
        {
          "type": "directive_line",
          "start_line": 702,
          "end_line": 702,
          "snippet": "iterations = 10  # Much smaller to avoid loop prevention",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "forbidden"
        }
      ],
      "integration_points": []
    },
    {
      "file": "/Users/hretheum/dev/bezrobocie/vector-wave/kolegium/ai_writing_flow/deployment/backups/20250804_132311/tests/test_10_concurrent_flows_simplified.py",
      "exists": true,
      "hits": [
        {
          "type": "directive_line",
          "start_line": 621,
          "end_line": 621,
          "snippet": "# Validate no issues (mocks should handle everything)",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 689,
          "end_line": 689,
          "snippet": "assert result1[\"flow_id\"] != result2[\"flow_id\"], \"Flow IDs should be different\"",
          "values_preview": [
            "flow_id",
            "flow_id",
            "Flow IDs should be different"
          ],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 690,
          "end_line": 690,
          "snippet": "assert result1[\"final_state\"].topic_title != result2[\"final_state\"].topic_title, \"States should be isolated\"",
          "values_preview": [
            "final_state",
            "final_state",
            "States should be isolated"
          ],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 694,
          "end_line": 694,
          "snippet": "# Metrics should be separate instances",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 695,
          "end_line": 695,
          "snippet": "assert id(result1[\"metrics\"]) != id(result2[\"metrics\"]), \"Metrics should be isolated\"",
          "values_preview": [
            "metrics",
            "metrics",
            "Metrics should be isolated"
          ],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 717,
          "end_line": 717,
          "snippet": "\"topic_title\": \"\",  # Empty title should cause validation failure",
          "values_preview": [
            "topic_title"
          ],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 744,
          "end_line": 744,
          "snippet": "# Should have at least some successful flows",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 747,
          "end_line": 747,
          "snippet": "# Successful flows should have normal execution times",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        }
      ],
      "integration_points": [
        {
          "line": 49,
          "text": "sys.modules['prometheus_client'] = Mock()"
        },
        {
          "line": 72,
          "text": "\"editorial_recommendations\": \"Focus on technical implementation details\""
        },
        {
          "line": 80,
          "text": "\"editorial_recommendations\": \"Keep it concise for Twitter audience\""
        },
        {
          "line": 88,
          "text": "\"editorial_recommendations\": \"Include performance benchmarks\""
        },
        {
          "line": 96,
          "text": "\"editorial_recommendations\": \"Add code examples and diagrams\""
        },
        {
          "line": 104,
          "text": "\"editorial_recommendations\": \"Include vulnerability scanning examples\""
        },
        {
          "line": 112,
          "text": "\"editorial_recommendations\": \"Share real-world implementation story\""
        },
        {
          "line": 120,
          "text": "\"editorial_recommendations\": \"Break into digestible thread format\""
        },
        {
          "line": 128,
          "text": "\"editorial_recommendations\": \"Include lessons learned and gotchas\""
        },
        {
          "line": 136,
          "text": "\"editorial_recommendations\": \"Make it actionable and specific\""
        },
        {
          "line": 144,
          "text": "\"editorial_recommendations\": \"Include dashboard screenshots\""
        },
        {
          "line": 413,
          "text": "\"editorial_recommendations\": flow_config.get(\"editorial_recommendations\", \"\"),"
        }
      ]
    },
    {
      "file": "/Users/hretheum/dev/bezrobocie/vector-wave/kolegium/ai_writing_flow/deployment/backups/20250804_132311/tests/README_STRESS_TESTS.md",
      "exists": true,
      "hits": [],
      "integration_points": []
    },
    {
      "file": "/Users/hretheum/dev/bezrobocie/vector-wave/kolegium/ai_writing_flow/deployment/backups/20250804_132311/tests/test_heavy_load.py",
      "exists": true,
      "hits": [
        {
          "type": "directive_line",
          "start_line": 668,
          "end_line": 668,
          "snippet": "# CPU usage should have been high during test",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 853,
          "end_line": 853,
          "snippet": "assert circuit_open_detected, \"Circuit breaker should have opened under failures\"",
          "values_preview": [
            "Circuit breaker should have opened under failures"
          ],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 854,
          "end_line": 854,
          "snippet": "assert circuit_open_count >= 1, \"Circuit breaker should have blocked calls when open\"",
          "values_preview": [
            "Circuit breaker should have blocked calls when open"
          ],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 855,
          "end_line": 855,
          "snippet": "assert failure_count <= 5, \"Circuit breaker should have prevented excessive failures\"",
          "values_preview": [
            "Circuit breaker should have prevented excessive failures"
          ],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 859,
          "end_line": 859,
          "snippet": "assert status[\"total_failures\"] >= 3, \"Circuit breaker should have recorded failures\"",
          "values_preview": [
            "total_failures",
            "Circuit breaker should have recorded failures"
          ],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 860,
          "end_line": 860,
          "snippet": "assert status[\"failure_threshold\"] == 3, \"Circuit breaker threshold should be configured\"",
          "values_preview": [
            "failure_threshold",
            "Circuit breaker threshold should be configured"
          ],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 1043,
          "end_line": 1043,
          "snippet": "assert test_monitor.safety_violated, \"Memory limit should have been enforced\"",
          "values_preview": [
            "Memory limit should have been enforced"
          ],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 1080,
          "end_line": 1080,
          "snippet": "assert health_status is not None, \"Health status should be available after emergency stop\"",
          "values_preview": [
            "Health status should be available after emergency stop"
          ],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 1092,
          "end_line": 1092,
          "snippet": "# Attempt normal operation after emergency stop (should handle gracefully)",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 1099,
          "end_line": 1099,
          "snippet": "# This should either work or fail gracefully",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        }
      ],
      "integration_points": [
        {
          "line": 362,
          "text": "\"editorial_recommendations\": \"Optimize for stress testing\""
        }
      ]
    },
    {
      "file": "/Users/hretheum/dev/bezrobocie/vector-wave/kolegium/ai_writing_flow/deployment/backups/20250804_132311/tests/test_knowledge_adapter.py",
      "exists": true,
      "hits": [
        {
          "type": "directive_line",
          "start_line": 78,
          "end_line": 78,
          "snippet": "# Second failure - should open circuit breaker",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 273,
          "end_line": 273,
          "snippet": "# Should not raise error due to retry",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 355,
          "end_line": 355,
          "snippet": "# Context should be preserved in the second search",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        }
      ],
      "integration_points": [
        {
          "line": 10,
          "text": "import aiohttp"
        },
        {
          "line": 31,
          "text": "assert adapter.kb_api_url == \"http://localhost:8080\""
        },
        {
          "line": 40,
          "text": "\"kb_api_url\": \"http://custom:9090\","
        },
        {
          "line": 49,
          "text": "assert adapter.kb_api_url == \"http://custom:9090\""
        },
        {
          "line": 71,
          "text": "with patch('aiohttp.ClientSession.post', side_effect=aiohttp.ClientError()):"
        },
        {
          "line": 113,
          "text": "with patch('aiohttp.ClientSession.post') as mock_post:"
        },
        {
          "line": 148,
          "text": "with patch('aiohttp.ClientSession.post') as mock_post:"
        },
        {
          "line": 165,
          "text": "with patch('aiohttp.ClientSession.post', side_effect=aiohttp.ClientError()):"
        },
        {
          "line": 193,
          "text": "with patch('aiohttp.ClientSession.post') as mock_post:"
        },
        {
          "line": 212,
          "text": "with patch('aiohttp.ClientSession.post', side_effect=aiohttp.ClientError()):"
        },
        {
          "line": 227,
          "text": "with patch('aiohttp.ClientSession.post', side_effect=asyncio.TimeoutError()):"
        },
        {
          "line": 238,
          "text": "with patch('aiohttp.ClientSession.post') as mock_post:"
        },
        {
          "line": 264,
          "text": "with patch('aiohttp.ClientSession.post') as mock_post:"
        },
        {
          "line": 267,
          "text": "aiohttp.ClientError(\"Network error\"),"
        },
        {
          "line": 305,
          "text": "with patch('aiohttp.ClientSession.post', side_effect=aiohttp.ClientError()):"
        }
      ]
    },
    {
      "file": "/Users/hretheum/dev/bezrobocie/vector-wave/kolegium/ai_writing_flow/deployment/backups/20250804_132311/tests/test_flow_control_state.py",
      "exists": true,
      "hits": [
        {
          "type": "directive_line",
          "start_line": 128,
          "end_line": 128,
          "snippet": "# History should be limited to 100",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 222,
          "end_line": 222,
          "snippet": "# Transition should be prevented",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 263,
          "end_line": 263,
          "snippet": "# No errors should occur",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 267,
          "end_line": 267,
          "snippet": "# All transitions should be recorded",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 287,
          "end_line": 287,
          "snippet": "# Should have exactly 1000 retries (10 threads * 100 increments)",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 360,
          "end_line": 360,
          "snippet": "# Should be able to convert to dict",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 372,
          "end_line": 372,
          "snippet": "\"\"\"Test transition to same stage (should be allowed for retries)\"\"\"",
          "values_preview": [
            "Test transition to same stage (should be allowed for retries)"
          ],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 375,
          "end_line": 375,
          "snippet": "# Same stage transition should work",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 394,
          "end_line": 394,
          "snippet": "# Should handle long reasons without issues",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 430,
          "end_line": 430,
          "snippet": "# Should complete 1000 transitions in under 1 second",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 433,
          "end_line": 433,
          "snippet": "# Only last 100 should be kept",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 448,
          "end_line": 448,
          "snippet": "# Should be reasonably small (less than 1MB)",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        }
      ],
      "integration_points": []
    },
    {
      "file": "/Users/hretheum/dev/bezrobocie/vector-wave/kolegium/ai_writing_flow/deployment/backups/20250804_132311/tests/test_retry_manager_complete.py",
      "exists": true,
      "hits": [
        {
          "type": "directive_line",
          "start_line": 140,
          "end_line": 140,
          "snippet": "# Should return default RetryConfig",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 180,
          "end_line": 180,
          "snippet": "# All should be around 10.0 but not exactly",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 182,
          "end_line": 182,
          "snippet": "assert len(set(delays)) > 1  # Should have different values",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 194,
          "end_line": 194,
          "snippet": "# Should get same delay every time",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 208,
          "end_line": 208,
          "snippet": "# Even with jitter, should never be negative",
          "values_preview": [],
          "priority_guess": "high",
          "category_guess": "forbidden"
        },
        {
          "type": "directive_line",
          "start_line": 290,
          "end_line": 290,
          "snippet": "# Should fail immediately due to global limit",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 367,
          "end_line": 367,
          "snippet": "assert elapsed >= 0.09  # Should have waited at least close to the delay (accounting for timing variance)",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 446,
          "end_line": 446,
          "snippet": "assert elapsed >= 0.09  # Should have waited at least close to the delay",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 596,
          "end_line": 596,
          "snippet": "# Should handle gracefully",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 636,
          "end_line": 636,
          "snippet": "# Should be capped at max_delay",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        }
      ],
      "integration_points": []
    },
    {
      "file": "/Users/hretheum/dev/bezrobocie/vector-wave/kolegium/ai_writing_flow/deployment/backups/20250804_132311/tests/test_stage_manager_complete.py",
      "exists": true,
      "hits": [
        {
          "type": "directive_line",
          "start_line": 50,
          "end_line": 50,
          "snippet": "assert len(manager._execution_events) > 0  # Should have FLOW_STARTED event",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 73,
          "end_line": 73,
          "snippet": "# Research should have skip condition",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 147,
          "end_line": 147,
          "snippet": "# Now should detect existing research",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 151,
          "end_line": 151,
          "snippet": "# So it should skip even when not completed",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 188,
          "end_line": 188,
          "snippet": "\"\"\"Test starting the current stage (should be allowed)\"\"\"",
          "values_preview": [
            "Test starting the current stage (should be allowed)"
          ],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 193,
          "end_line": 193,
          "snippet": "# Should be able to start current stage",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 326,
          "end_line": 326,
          "snippet": "# Should have FLOW_STARTED, STAGE_STARTED, STAGE_COMPLETED",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 437,
          "end_line": 437,
          "snippet": "# At least one should succeed",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 462,
          "end_line": 462,
          "snippet": "# Should have all events (1 FLOW_STARTED + 50 logged)",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 510,
          "end_line": 510,
          "snippet": "# Initially should not be timed out",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 544,
          "end_line": 544,
          "snippet": "# Complete should detect timeout",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 551,
          "end_line": 551,
          "snippet": "# Should be marked as failed due to timeout",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 640,
          "end_line": 640,
          "snippet": "# Add milestone event (should be kept)",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 651,
          "end_line": 651,
          "snippet": "# Should have: 1 initial FLOW_STARTED + 5 recent + 1 old milestone FLOW_STARTED = 7",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 835,
          "end_line": 835,
          "snippet": "# Loop prevention should have tracked executions",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 859,
          "end_line": 859,
          "snippet": "# Should have some executions blocked",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 861,
          "end_line": 861,
          "snippet": "assert len(executions) == 3  # Only 3 should succeed",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 872,
          "end_line": 872,
          "snippet": "# Complete without starting - should not crash",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 876,
          "end_line": 876,
          "snippet": "# Manager should log the event even without execution",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 878,
          "end_line": 878,
          "snippet": "# Should have at least one completion event",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 902,
          "end_line": 902,
          "snippet": "# Should be sorted by timestamp",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        }
      ],
      "integration_points": []
    },
    {
      "file": "/Users/hretheum/dev/bezrobocie/vector-wave/kolegium/ai_writing_flow/deployment/backups/20250804_132311/tests/test_flow_methods.py",
      "exists": true,
      "hits": [
        {
          "type": "directive_line",
          "start_line": 135,
          "end_line": 135,
          "snippet": "viral_score=15.0  # Invalid - should be 0-10",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 180,
          "end_line": 180,
          "snippet": "# First execution should succeed",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 184,
          "end_line": 184,
          "snippet": "# Second execution should succeed but log warning",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 188,
          "end_line": 188,
          "snippet": "# Third execution should succeed but log warning",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 192,
          "end_line": 192,
          "snippet": "# Fourth execution should fail (infinite loop prevention)",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 245,
          "end_line": 245,
          "snippet": "# EXTERNAL content should conduct research",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 252,
          "end_line": 252,
          "snippet": "# ORIGINAL content should skip research",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 259,
          "end_line": 259,
          "snippet": "# Skip research flag should skip research",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 269,
          "end_line": 269,
          "snippet": "# No feedback should go to style validation",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 273,
          "end_line": 273,
          "snippet": "# Minor feedback should go to style validation",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 277,
          "end_line": 277,
          "snippet": "# Major feedback should go to audience alignment",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 281,
          "end_line": 281,
          "snippet": "# Pivot feedback should go to research (EXTERNAL)",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 285,
          "end_line": 285,
          "snippet": "# Pivot feedback should go to audience align (ORIGINAL)",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 292,
          "end_line": 292,
          "snippet": "# Should retry when under limit",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 297,
          "end_line": 297,
          "snippet": "# Should not retry when at limit",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 302,
          "end_line": 302,
          "snippet": "# Should retry draft generation for content quality issues",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 310,
          "end_line": 310,
          "snippet": "# Should not retry research for unsupported error type",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        }
      ],
      "integration_points": []
    },
    {
      "file": "/Users/hretheum/dev/bezrobocie/vector-wave/kolegium/ai_writing_flow/deployment/backups/20250804_132311/tests/test_10_concurrent_flows.py",
      "exists": true,
      "hits": [
        {
          "type": "directive_line",
          "start_line": 760,
          "end_line": 760,
          "snippet": "assert result1[\"flow_id\"] != result2[\"flow_id\"], \"Flow IDs should be different\"",
          "values_preview": [
            "flow_id",
            "flow_id",
            "Flow IDs should be different"
          ],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 761,
          "end_line": 761,
          "snippet": "assert result1[\"final_state\"].topic_title != result2[\"final_state\"].topic_title, \"States should be isolated\"",
          "values_preview": [
            "final_state",
            "final_state",
            "States should be isolated"
          ],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 765,
          "end_line": 765,
          "snippet": "# Metrics should be separate instances",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 766,
          "end_line": 766,
          "snippet": "assert id(result1[\"metrics\"]) != id(result2[\"metrics\"]), \"Metrics should be isolated\"",
          "values_preview": [
            "metrics",
            "metrics",
            "Metrics should be isolated"
          ],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 788,
          "end_line": 788,
          "snippet": "\"topic_title\": \"\",  # Empty title should cause validation failure",
          "values_preview": [
            "topic_title"
          ],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 815,
          "end_line": 815,
          "snippet": "# Should have 3 successful and 1 failed",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 819,
          "end_line": 819,
          "snippet": "# Successful flows should have normal execution times",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        }
      ],
      "integration_points": [
        {
          "line": 53,
          "text": "sys.modules['prometheus_client'] = Mock()"
        },
        {
          "line": 84,
          "text": "\"editorial_recommendations\": \"Focus on technical implementation details\""
        },
        {
          "line": 92,
          "text": "\"editorial_recommendations\": \"Keep it concise for Twitter audience\""
        },
        {
          "line": 100,
          "text": "\"editorial_recommendations\": \"Include performance benchmarks\""
        },
        {
          "line": 108,
          "text": "\"editorial_recommendations\": \"Add code examples and diagrams\""
        },
        {
          "line": 116,
          "text": "\"editorial_recommendations\": \"Include vulnerability scanning examples\""
        },
        {
          "line": 124,
          "text": "\"editorial_recommendations\": \"Share real-world implementation story\""
        },
        {
          "line": 132,
          "text": "\"editorial_recommendations\": \"Break into digestible thread format\""
        },
        {
          "line": 140,
          "text": "\"editorial_recommendations\": \"Include lessons learned and gotchas\""
        },
        {
          "line": 148,
          "text": "\"editorial_recommendations\": \"Make it actionable and specific\""
        },
        {
          "line": 156,
          "text": "\"editorial_recommendations\": \"Include dashboard screenshots\""
        },
        {
          "line": 389,
          "text": "\"editorial_recommendations\": flow_config.get(\"editorial_recommendations\", \"\"),"
        }
      ]
    },
    {
      "file": "/Users/hretheum/dev/bezrobocie/vector-wave/kolegium/ai_writing_flow/deployment/backups/20250804_132311/tests/test_load_performance.py",
      "exists": true,
      "hits": [
        {
          "type": "directive_line",
          "start_line": 183,
          "end_line": 183,
          "snippet": "# Memory should not grow excessively",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 234,
          "end_line": 234,
          "snippet": "assert executions > 50  # Should execute reasonable number of operations",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 360,
          "end_line": 360,
          "snippet": "# Memory growth should be reasonable",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 424,
          "end_line": 424,
          "snippet": "# Memory should not grow excessively",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 518,
          "end_line": 518,
          "snippet": "# Response times should remain reasonable",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 525,
          "end_line": 525,
          "snippet": "# Response time should not degrade dramatically with load",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 618,
          "end_line": 618,
          "snippet": "# Throughput should not degrade dramatically with concurrency",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        }
      ],
      "integration_points": []
    },
    {
      "file": "/Users/hretheum/dev/bezrobocie/vector-wave/kolegium/ai_writing_flow/deployment/backups/20250804_132311/tests/concurrent_flows_test_report.md",
      "exists": true,
      "hits": [
        {
          "type": "directive_line",
          "start_line": 197,
          "end_line": 197,
          "snippet": "Based on test results, production deployment should provision:",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 204,
          "end_line": 204,
          "snippet": "Production monitoring should track:",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        }
      ],
      "integration_points": [
        {
          "line": 88,
          "text": "4. **Mock External Dependencies** - structlog, opentelemetry, aiohttp"
        }
      ]
    },
    {
      "file": "/Users/hretheum/dev/bezrobocie/vector-wave/kolegium/ai_writing_flow/deployment/backups/20250804_132311/tests/test_failure_recovery_load.py",
      "exists": true,
      "hits": [
        {
          "type": "directive_line",
          "start_line": 425,
          "end_line": 425,
          "snippet": "assert metrics.circuit_breaker_triggered, \"Circuit breaker should activate for I/O failures\"",
          "values_preview": [
            "Circuit breaker should activate for I/O failures"
          ],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 426,
          "end_line": 426,
          "snippet": "assert metrics.graceful_degradation, \"System should degrade gracefully\"",
          "values_preview": [
            "System should degrade gracefully"
          ],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 475,
          "end_line": 475,
          "snippet": "assert metrics.circuit_breaker_triggered, \"Circuit breaker should activate\"",
          "values_preview": [
            "Circuit breaker should activate"
          ],
          "priority_guess": "medium",
          "category_guess": "style"
        }
      ],
      "integration_points": []
    },
    {
      "file": "/Users/hretheum/dev/bezrobocie/vector-wave/kolegium/ai_writing_flow/deployment/backups/20250804_132311/tests/test_api_endpoints.py",
      "exists": true,
      "hits": [
        {
          "type": "directive_line",
          "start_line": 278,
          "end_line": 278,
          "snippet": "# Should only return completed flows",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 504,
          "end_line": 504,
          "snippet": "# Step 2: Check status (should be completed)",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 543,
          "end_line": 543,
          "snippet": "# Health check should include statistics",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "required"
        }
      ],
      "integration_points": []
    },
    {
      "file": "/Users/hretheum/dev/bezrobocie/vector-wave/kolegium/ai_writing_flow/deployment/backups/20250804_132311/tests/test_integration_phase1.py",
      "exists": true,
      "hits": [
        {
          "type": "directive_line",
          "start_line": 106,
          "end_line": 106,
          "snippet": "# Circuit should be open now",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 116,
          "end_line": 116,
          "snippet": "# Try to call when open - should fail immediately",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 119,
          "end_line": 119,
          "snippet": "assert False, \"Should have raised CircuitBreakerError\"",
          "values_preview": [
            "Should have raised CircuitBreakerError"
          ],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 169,
          "end_line": 169,
          "snippet": "# At least one should succeed, others might fail due to invalid state",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        }
      ],
      "integration_points": []
    },
    {
      "file": "/Users/hretheum/dev/bezrobocie/vector-wave/kolegium/ai_writing_flow/deployment/backups/20250804_132311/tests/test_retry_escalation_paths.py",
      "exists": true,
      "hits": [
        {
          "type": "directive_line",
          "start_line": 98,
          "end_line": 98,
          "snippet": "# Second delay should be roughly 2x first delay (exponential backoff)",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 130,
          "end_line": 130,
          "snippet": "# Now circuit breaker should block calls",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 135,
          "end_line": 135,
          "snippet": "# Circuit breaker should be open after 3 failures",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 449,
          "end_line": 449,
          "snippet": "# Now retry should respect circuit breaker state",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 486,
          "end_line": 486,
          "snippet": "# Circuit breaker should allow retry now",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 528,
          "end_line": 528,
          "snippet": "# Should have seen progression in retry counts",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 599,
          "end_line": 599,
          "snippet": "# Execute critical stage - should succeed with retries",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 604,
          "end_line": 604,
          "snippet": "# Execute normal stage - should fail due to limited retries",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 641,
          "end_line": 641,
          "snippet": "# First execution should fail and escalate priority",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 647,
          "end_line": 647,
          "snippet": "# Priority should have been escalated",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 654,
          "end_line": 654,
          "snippet": "# Second execution with higher priority should succeed",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 855,
          "end_line": 855,
          "snippet": "# Should now succeed",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        }
      ],
      "integration_points": []
    },
    {
      "file": "/Users/hretheum/dev/bezrobocie/vector-wave/kolegium/ai_writing_flow/deployment/backups/20250804_132311/tests/test_circuit_breaker_complete.py",
      "exists": true,
      "hits": [
        {
          "type": "directive_line",
          "start_line": 128,
          "end_line": 128,
          "snippet": "# State should transition to HALF_OPEN on next check",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 140,
          "end_line": 140,
          "snippet": "# Successful call should close the circuit",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 156,
          "end_line": 156,
          "snippet": "# Failed call should reopen the circuit",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 203,
          "end_line": 203,
          "snippet": "# Expected exception should be counted",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 209,
          "end_line": 209,
          "snippet": "# Unexpected exception should not be counted",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 213,
          "end_line": 213,
          "snippet": "# Failure count should not increase for unexpected exception",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 235,
          "end_line": 235,
          "snippet": "# Circuit should be open now",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 364,
          "end_line": 364,
          "snippet": "# Create StageCircuitBreaker - should sync state",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 427,
          "end_line": 427,
          "snippet": "# Circuit should be open after threshold failures",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 459,
          "end_line": 459,
          "snippet": "# Calls should be blocked",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 513,
          "end_line": 513,
          "snippet": "# Should return True when no failure time",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 549,
          "end_line": 549,
          "snippet": "# Should be in HALF_OPEN state",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        }
      ],
      "integration_points": []
    },
    {
      "file": "/Users/hretheum/dev/bezrobocie/vector-wave/kolegium/ai_writing_flow/deployment/backups/20250804_132311/tests/monitoring/test_metrics_accuracy.py",
      "exists": true,
      "hits": [
        {
          "type": "directive_line",
          "start_line": 67,
          "end_line": 67,
          "snippet": "# CPU usage should match mocked value (latest value strategy)",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 70,
          "end_line": 70,
          "snippet": "# Memory should be ~100MB",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 89,
          "end_line": 89,
          "snippet": "# Average should match statistics.mean(expected_times)",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 124,
          "end_line": 124,
          "snippet": "# Success rate should be 70% (7/10)",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 129,
          "end_line": 129,
          "snippet": "# Error rate should be 30% (3/10)",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 334,
          "end_line": 334,
          "snippet": "# Should have at least 2 buckets with aggregated values",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 484,
          "end_line": 484,
          "snippet": "if agg.count == 3:  # Should have 3 samples",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 595,
          "end_line": 595,
          "snippet": "# Should be healthy",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 598,
          "end_line": 598,
          "snippet": "# All checks should pass",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 600,
          "end_line": 600,
          "snippet": "assert checks[\"memory_usage\"] == True, \"Memory usage check should pass\"",
          "values_preview": [
            "memory_usage",
            "Memory usage check should pass"
          ],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 601,
          "end_line": 601,
          "snippet": "assert checks[\"cpu_usage\"] == True, \"CPU usage check should pass\"",
          "values_preview": [
            "cpu_usage",
            "CPU usage check should pass"
          ],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 602,
          "end_line": 602,
          "snippet": "assert checks[\"error_rate\"] == True, \"Error rate check should pass\"",
          "values_preview": [
            "error_rate",
            "Error rate check should pass"
          ],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 635,
          "end_line": 635,
          "snippet": "assert len(completed_flows) >= 1, \"Should have at least 1 completed flow\"",
          "values_preview": [
            "Should have at least 1 completed flow"
          ],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 654,
          "end_line": 654,
          "snippet": "# All values should be zero or sensible defaults",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 655,
          "end_line": 655,
          "snippet": "assert kpis.success_rate == 0.0, \"Success rate should be 0 with no data\"",
          "values_preview": [
            "Success rate should be 0 with no data"
          ],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 656,
          "end_line": 656,
          "snippet": "assert kpis.error_rate == 0.0, \"Error rate should be 0 with no data\"",
          "values_preview": [
            "Error rate should be 0 with no data"
          ],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 657,
          "end_line": 657,
          "snippet": "assert kpis.avg_execution_time == 0.0, \"Avg execution time should be 0 with no data\"",
          "values_preview": [
            "Avg execution time should be 0 with no data"
          ],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 658,
          "end_line": 658,
          "snippet": "assert kpis.throughput == 0.0, \"Throughput should be 0 with no data\"",
          "values_preview": [
            "Throughput should be 0 with no data"
          ],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 659,
          "end_line": 659,
          "snippet": "assert kpis.active_flows == 0, \"Active flows should be 0 with no data\"",
          "values_preview": [
            "Active flows should be 0 with no data"
          ],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 660,
          "end_line": 660,
          "snippet": "assert kpis.total_executions == 0, \"Total executions should be 0 with no data\"",
          "values_preview": [
            "Total executions should be 0 with no data"
          ],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 675,
          "end_line": 675,
          "snippet": "f\"Single point avg should equal the value: expected {execution_time}, got {kpis.avg_execution_time}\"",
          "values_preview": [
            "Single point avg should equal the value: expected {execution_time}, got {kpis.avg_execution_time}"
          ],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 677,
          "end_line": 677,
          "snippet": "f\"Single point P95 should equal the value: expected {execution_time}, got {kpis.p95_execution_time}\"",
          "values_preview": [
            "Single point P95 should equal the value: expected {execution_time}, got {kpis.p95_execution_time}"
          ],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 679,
          "end_line": 679,
          "snippet": "f\"Single point P99 should equal the value: expected {execution_time}, got {kpis.p99_execution_time}\"",
          "values_preview": [
            "Single point P99 should equal the value: expected {execution_time}, got {kpis.p99_execution_time}"
          ],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 681,
          "end_line": 681,
          "snippet": "assert kpis.success_rate == 100.0, \"Single successful flow should give 100% success rate\"",
          "values_preview": [
            "Single successful flow should give 100% success rate"
          ],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 682,
          "end_line": 682,
          "snippet": "assert kpis.error_rate == 0.0, \"Single successful flow should give 0% error rate\"",
          "values_preview": [
            "Single successful flow should give 0% error rate"
          ],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 706,
          "end_line": 706,
          "snippet": "# Min and max should be the actual extremes",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 761,
          "end_line": 761,
          "snippet": "# Should have 30 total executions (3 threads * 10 flows each)",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 766,
          "end_line": 766,
          "snippet": "# All should be successful",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        }
      ],
      "integration_points": []
    },
    {
      "file": "/Users/hretheum/dev/bezrobocie/vector-wave/kolegium/ai_writing_flow/deployment/backups/20250804_132311/tests/monitoring/__init__.py",
      "exists": true,
      "hits": [],
      "integration_points": []
    },
    {
      "file": "/Users/hretheum/dev/bezrobocie/vector-wave/kolegium/ai_writing_flow/deployment/backups/20250804_132311/tests/monitoring/test_alerting_reliability.py",
      "exists": true,
      "hits": [
        {
          "type": "directive_line",
          "start_line": 99,
          "end_line": 99,
          "snippet": "# Should create an alert",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 120,
          "end_line": 120,
          "snippet": "assert len(active_alerts) == 1, \"Should have one memory alert\"",
          "values_preview": [
            "Should have one memory alert"
          ],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 123,
          "end_line": 123,
          "snippet": "assert alert.rule_id == \"memory_low\", \"Should be memory_low rule\"",
          "values_preview": [
            "memory_low",
            "Should be memory_low rule"
          ],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 124,
          "end_line": 124,
          "snippet": "assert alert.severity == AlertSeverity.MEDIUM, \"Should be MEDIUM severity\"",
          "values_preview": [
            "Should be MEDIUM severity"
          ],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 125,
          "end_line": 125,
          "snippet": "assert alert.value == 50.0, \"Value should match triggered value\"",
          "values_preview": [
            "Value should match triggered value"
          ],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 129,
          "end_line": 129,
          "snippet": "# CPU value below threshold - should not trigger",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 137,
          "end_line": 137,
          "snippet": "# Memory value above threshold - should not trigger less_than rule",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 162,
          "end_line": 162,
          "snippet": "assert len(active_alerts) == 0, \"Disabled rule should not create alerts\"",
          "values_preview": [
            "Disabled rule should not create alerts"
          ],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 177,
          "end_line": 177,
          "snippet": "assert len(active_alerts) == 1, \"Should have one escalated alert\"",
          "values_preview": [
            "Should have one escalated alert"
          ],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 182,
          "end_line": 182,
          "snippet": "# After escalation_threshold (2), should be escalated to CRITICAL",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 184,
          "end_line": 184,
          "snippet": "assert alert.status == AlertStatus.ESCALATED, \"Should be escalated status\"",
          "values_preview": [
            "Should be escalated status"
          ],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 185,
          "end_line": 185,
          "snippet": "assert alert.severity == AlertSeverity.CRITICAL, \"Should be escalated to CRITICAL severity\"",
          "values_preview": [
            "Should be escalated to CRITICAL severity"
          ],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 221,
          "end_line": 221,
          "snippet": "assert success == True, \"Console notification should succeed\"",
          "values_preview": [
            "Console notification should succeed"
          ],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 229,
          "end_line": 229,
          "snippet": "# HIGH severity should use ERROR log level",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 232,
          "end_line": 232,
          "snippet": "assert \"ALERT [HIGH]\" in log_message, \"Log message should contain alert severity\"",
          "values_preview": [
            "ALERT [HIGH]",
            "Log message should contain alert severity"
          ],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 233,
          "end_line": 233,
          "snippet": "assert \"85.0\" in log_message, \"Log message should contain alert value\"",
          "values_preview": [
            "85.0",
            "Log message should contain alert value"
          ],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 234,
          "end_line": 234,
          "snippet": "assert \"80.0\" in log_message, \"Log message should contain threshold\"",
          "values_preview": [
            "80.0",
            "Log message should contain threshold"
          ],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 257,
          "end_line": 257,
          "snippet": "# Should handle error gracefully",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 260,
          "end_line": 260,
          "snippet": "assert success == False, \"Should return False when logger fails\"",
          "values_preview": [
            "Should return False when logger fails"
          ],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 262,
          "end_line": 262,
          "snippet": "# Error should be logged to fallback logger",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 294,
          "end_line": 294,
          "snippet": "assert success == True, \"Webhook notification should succeed\"",
          "values_preview": [
            "Webhook notification should succeed"
          ],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 301,
          "end_line": 301,
          "snippet": "assert call_args.full_url == webhook_url, \"URL should match\"",
          "values_preview": [
            "URL should match"
          ],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 307,
          "end_line": 307,
          "snippet": "assert \"attachments\" in payload, \"Payload should have attachments\"",
          "values_preview": [
            "attachments",
            "Payload should have attachments"
          ],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 308,
          "end_line": 308,
          "snippet": "assert len(payload[\"attachments\"]) == 1, \"Should have one attachment\"",
          "values_preview": [
            "attachments",
            "Should have one attachment"
          ],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 311,
          "end_line": 311,
          "snippet": "assert attachment[\"title\"] == \"CRITICAL Alert: throughput\", \"Title should match alert\"",
          "values_preview": [
            "title",
            "CRITICAL Alert: throughput",
            "Title should match alert"
          ],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 312,
          "end_line": 312,
          "snippet": "assert attachment[\"text\"] == \"Webhook test alert\", \"Text should match message\"",
          "values_preview": [
            "text",
            "Webhook test alert",
            "Text should match message"
          ],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 339,
          "end_line": 339,
          "snippet": "assert success == False, \"Should return False on connection failure\"",
          "values_preview": [
            "Should return False on connection failure"
          ],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 373,
          "end_line": 373,
          "snippet": "assert success == True, \"Email notification should succeed\"",
          "values_preview": [
            "Email notification should succeed"
          ],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 386,
          "end_line": 386,
          "snippet": "assert from_addr == \"alerts@test.com\", \"From address should match\"",
          "values_preview": [
            "alerts@test.com",
            "From address should match"
          ],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 387,
          "end_line": 387,
          "snippet": "assert to_addrs == [\"admin@test.com\", \"dev@test.com\"], \"To addresses should match\"",
          "values_preview": [
            "admin@test.com",
            "dev@test.com",
            "To addresses should match"
          ],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 388,
          "end_line": 388,
          "snippet": "assert \"Email test alert\" in message, \"Message should contain alert text\"",
          "values_preview": [
            "Email test alert",
            "Message should contain alert text"
          ],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 420,
          "end_line": 420,
          "snippet": "assert success == False, \"Should return False on SMTP failure\"",
          "values_preview": [
            "Should return False on SMTP failure"
          ],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 468,
          "end_line": 468,
          "snippet": "assert len(active_alerts) == 1, \"Should have created one alert\"",
          "values_preview": [
            "Should have created one alert"
          ],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 471,
          "end_line": 471,
          "snippet": "assert alert.rule_id == \"lifecycle_test\", \"Should be our test rule\"",
          "values_preview": [
            "lifecycle_test",
            "Should be our test rule"
          ],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 472,
          "end_line": 472,
          "snippet": "assert alert.status == AlertStatus.ACTIVE, \"Should be active\"",
          "values_preview": [
            "Should be active"
          ],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 473,
          "end_line": 473,
          "snippet": "assert alert.value == 80.0, \"Should have correct value\"",
          "values_preview": [
            "Should have correct value"
          ],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 474,
          "end_line": 474,
          "snippet": "assert alert.notification_count > 0, \"Should have sent notification\"",
          "values_preview": [
            "Should have sent notification"
          ],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 479,
          "end_line": 479,
          "snippet": "\"Should increment alert creation count\"",
          "values_preview": [
            "Should increment alert creation count"
          ],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 493,
          "end_line": 493,
          "snippet": "assert len(initial_alerts) == 1, \"Should have one alert initially\"",
          "values_preview": [
            "Should have one alert initially"
          ],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 511,
          "end_line": 511,
          "snippet": "assert len(updated_alerts) == 1, \"Should still have one alert (updated)\"",
          "values_preview": [
            "Should still have one alert (updated)"
          ],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 514,
          "end_line": 514,
          "snippet": "assert updated_alert.value == 85.0, \"Should have updated value\"",
          "values_preview": [
            "Should have updated value"
          ],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 516,
          "end_line": 516,
          "snippet": "\"Should have incremented escalation count\"",
          "values_preview": [
            "Should have incremented escalation count"
          ],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 530,
          "end_line": 530,
          "snippet": "assert len(active_alerts) == 1, \"Should have one active alert\"",
          "values_preview": [
            "Should have one active alert"
          ],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 538,
          "end_line": 538,
          "snippet": "assert success == True, \"Should successfully resolve alert\"",
          "values_preview": [
            "Should successfully resolve alert"
          ],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 542,
          "end_line": 542,
          "snippet": "assert len(remaining_alerts) == 0, \"Should have no active alerts after resolution\"",
          "values_preview": [
            "Should have no active alerts after resolution"
          ],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 546,
          "end_line": 546,
          "snippet": "assert len(history) >= 1, \"Should be in alert history\"",
          "values_preview": [
            "Should be in alert history"
          ],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 549,
          "end_line": 549,
          "snippet": "assert resolved_alert.status == AlertStatus.RESOLVED, \"Should be resolved status\"",
          "values_preview": [
            "Should be resolved status"
          ],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 550,
          "end_line": 550,
          "snippet": "assert resolved_alert.resolved_at is not None, \"Should have resolution timestamp\"",
          "values_preview": [
            "Should have resolution timestamp"
          ],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 552,
          "end_line": 552,
          "snippet": "\"Should have resolution message in metadata\"",
          "values_preview": [
            "Should have resolution message in metadata"
          ],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 566,
          "end_line": 566,
          "snippet": "assert len(active_alerts) == 1, \"Should have one active alert\"",
          "values_preview": [
            "Should have one active alert"
          ],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 571,
          "end_line": 571,
          "snippet": "assert resolved_count >= 1, f\"Should have auto-resolved at least 1 alert, got {resolved_count}\"",
          "values_preview": [
            "Should have auto-resolved at least 1 alert, got {resolved_count}"
          ],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 575,
          "end_line": 575,
          "snippet": "assert len(remaining_alerts) == 0, \"Should have no active alerts after auto-resolution\"",
          "values_preview": [
            "Should have no active alerts after auto-resolution"
          ],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 601,
          "end_line": 601,
          "snippet": "# First trigger - should create alert",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 611,
          "end_line": 611,
          "snippet": "assert len(first_check) == 1, \"First trigger should create alert\"",
          "values_preview": [
            "First trigger should create alert"
          ],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 613,
          "end_line": 613,
          "snippet": "# Second trigger immediately - should be blocked by cooldown",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 623,
          "end_line": 623,
          "snippet": "assert len(second_check) == 1, \"Should still have only one alert due to cooldown\"",
          "values_preview": [
            "Should still have only one alert due to cooldown"
          ],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 625,
          "end_line": 625,
          "snippet": "# Value should not have updated due to cooldown",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 627,
          "end_line": 627,
          "snippet": "assert alert.value == 15.0, \"Value should not update during cooldown\"",
          "values_preview": [
            "Value should not update during cooldown"
          ],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 644,
          "end_line": 644,
          "snippet": "# Second trigger after cooldown - should update existing alert",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 654,
          "end_line": 654,
          "snippet": "assert len(alerts) == 1, \"Should have one alert\"",
          "values_preview": [
            "Should have one alert"
          ],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 657,
          "end_line": 657,
          "snippet": "assert alert.value == 25.0, \"Value should be updated after cooldown\"",
          "values_preview": [
            "Value should be updated after cooldown"
          ],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 658,
          "end_line": 658,
          "snippet": "assert alert.escalation_count >= 1, \"Escalation count should increment\"",
          "values_preview": [
            "Escalation count should increment"
          ],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 664,
          "end_line": 664,
          "snippet": "# Rapid-fire triggers (most should be rate limited)",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 676,
          "end_line": 676,
          "snippet": "# Should have only one alert due to rate limiting",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 678,
          "end_line": 678,
          "snippet": "assert len(active_alerts) == 1, \"Rate limiting should prevent multiple alerts\"",
          "values_preview": [
            "Rate limiting should prevent multiple alerts"
          ],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 680,
          "end_line": 680,
          "snippet": "# But escalation count should reflect multiple triggers",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 758,
          "end_line": 758,
          "snippet": "# Should have multiple alerts due to different rule thresholds",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 759,
          "end_line": 759,
          "snippet": "assert len(active_alerts) > 0, \"Should have created some alerts\"",
          "values_preview": [
            "Should have created some alerts"
          ],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 761,
          "end_line": 761,
          "snippet": "# All alerts should be properly formed",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 763,
          "end_line": 763,
          "snippet": "assert alert.status == AlertStatus.ACTIVE, \"All alerts should be active\"",
          "values_preview": [
            "All alerts should be active"
          ],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 764,
          "end_line": 764,
          "snippet": "assert alert.kpi_type == KPIType.CPU_USAGE, \"All alerts should be for CPU usage\"",
          "values_preview": [
            "All alerts should be for CPU usage"
          ],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 765,
          "end_line": 765,
          "snippet": "assert alert.value > 50.0, \"All alert values should be above base threshold\"",
          "values_preview": [
            "All alert values should be above base threshold"
          ],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 790,
          "end_line": 790,
          "snippet": "# Alert should still be created despite notification failure",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 792,
          "end_line": 792,
          "snippet": "assert len(active_alerts) >= 1, \"Alert should be created despite notification failures\"",
          "values_preview": [
            "Alert should be created despite notification failures"
          ],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 794,
          "end_line": 794,
          "snippet": "# Working channel should have been called",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 797,
          "end_line": 797,
          "snippet": "# Failed channel should have been attempted",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 829,
          "end_line": 829,
          "snippet": "# Should have created more alerts",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 831,
          "end_line": 831,
          "snippet": "assert alerts_created > 0, f\"Should have created alerts during load test, got {alerts_created}\"",
          "values_preview": [
            "Should have created alerts during load test, got {alerts_created}"
          ],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 833,
          "end_line": 833,
          "snippet": "# Active alerts count should be reasonable",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 834,
          "end_line": 834,
          "snippet": "assert final_stats[\"active_alerts\"] >= 0, \"Active alerts count should be non-negative\"",
          "values_preview": [
            "active_alerts",
            "Active alerts count should be non-negative"
          ],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 836,
          "end_line": 836,
          "snippet": "# Statistics should be consistent",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 839,
          "end_line": 839,
          "snippet": "\"Active alerts count should match sum of severity breakdown\"",
          "values_preview": [
            "Active alerts count should match sum of severity breakdown"
          ],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 894,
          "end_line": 894,
          "snippet": "# Get KPIs - should trigger threshold checks",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 902,
          "end_line": 902,
          "snippet": "# Should have alerts for both CPU and memory",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 904,
          "end_line": 904,
          "snippet": "assert KPIType.CPU_USAGE in alert_types, \"Should have CPU usage alert\"",
          "values_preview": [
            "Should have CPU usage alert"
          ],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 905,
          "end_line": 905,
          "snippet": "assert KPIType.MEMORY_USAGE in alert_types, \"Should have memory usage alert\"",
          "values_preview": [
            "Should have memory usage alert"
          ],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 911,
          "end_line": 911,
          "snippet": "assert abs(cpu_alert.value - 85.0) < 0.1, \"CPU alert value should match metrics\"",
          "values_preview": [
            "CPU alert value should match metrics"
          ],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 912,
          "end_line": 912,
          "snippet": "assert abs(memory_alert.value - 150.0) < 1.0, \"Memory alert value should match metrics\"",
          "values_preview": [
            "Memory alert value should match metrics"
          ],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 931,
          "end_line": 931,
          "snippet": "# Should not have created any alerts",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 933,
          "end_line": 933,
          "snippet": "assert len(active_alerts) == 0, \"Should not create alerts when observer is removed\"",
          "values_preview": [
            "Should not create alerts when observer is removed"
          ],
          "priority_guess": "medium",
          "category_guess": "style"
        }
      ],
      "integration_points": [
        {
          "line": 267,
          "text": "webhook_url = \"https://hooks.slack.com/test\""
        },
        {
          "line": 270,
          "text": "# Mock successful HTTP response"
        },
        {
          "line": 316,
          "text": "webhook_url = \"https://hooks.slack.com/test\""
        },
        {
          "line": 319,
          "text": "# Mock HTTP error"
        }
      ]
    },
    {
      "file": "/Users/hretheum/dev/bezrobocie/vector-wave/kolegium/ai_writing_flow/deployment/backups/20250804_132311/src/PERFORMANCE_PROFILING_RESULTS.md",
      "exists": true,
      "hits": [],
      "integration_points": []
    },
    {
      "file": "/Users/hretheum/dev/bezrobocie/vector-wave/kolegium/ai_writing_flow/deployment/backups/20250804_132311/src/ai_writing_flow/listen_chain.py",
      "exists": true,
      "hits": [
        {
          "type": "directive_line",
          "start_line": 167,
          "end_line": 167,
          "snippet": "# Check if step should be executed",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 325,
          "end_line": 325,
          "snippet": "Determine if chain should continue after step failure - Task 15.3",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 332,
          "end_line": 332,
          "snippet": "True if chain should continue despite failure",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 337,
          "end_line": 337,
          "snippet": "# Critical steps that must succeed",
          "values_preview": [],
          "priority_guess": "high",
          "category_guess": "required"
        }
      ],
      "integration_points": []
    },
    {
      "file": "/Users/hretheum/dev/bezrobocie/vector-wave/kolegium/ai_writing_flow/deployment/backups/20250804_132311/src/ai_writing_flow/draft_linear.py",
      "exists": true,
      "hits": [
        {
          "type": "directive_line",
          "start_line": 72,
          "end_line": 72,
          "snippet": "Determine if draft generation should be executed",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 78,
          "end_line": 78,
          "snippet": "True if draft generation should be executed",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 233,
          "end_line": 233,
          "snippet": "draft += f\"• Leaders should consider strategic adoption\\n\\n\"",
          "values_preview": [
            "• Leaders should consider strategic adoption\\n\\n"
          ],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 284,
          "end_line": 284,
          "snippet": "# Always require review if configured",
          "values_preview": [],
          "priority_guess": "low",
          "category_guess": "required"
        }
      ],
      "integration_points": []
    },
    {
      "file": "/Users/hretheum/dev/bezrobocie/vector-wave/kolegium/ai_writing_flow/deployment/backups/20250804_132311/src/ai_writing_flow/models.py",
      "exists": true,
      "hits": [],
      "integration_points": [
        {
          "line": 21,
          "text": "editorial_recommendations: str = Field(default=\"\", description=\"Editorial guidance from Kolegium\")"
        }
      ]
    },
    {
      "file": "/Users/hretheum/dev/bezrobocie/vector-wave/kolegium/ai_writing_flow/deployment/backups/20250804_132311/src/ai_writing_flow/research_linear.py",
      "exists": true,
      "hits": [
        {
          "type": "directive_line",
          "start_line": 59,
          "end_line": 59,
          "snippet": "Determine if research should be executed based on state and config",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 65,
          "end_line": 65,
          "snippet": "True if research should be executed",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        }
      ],
      "integration_points": [
        {
          "line": 177,
          "text": "\"url\": \"https://example.com/source1\","
        }
      ]
    },
    {
      "file": "/Users/hretheum/dev/bezrobocie/vector-wave/kolegium/ai_writing_flow/deployment/backups/20250804_132311/src/ai_writing_flow/linear_flow.py",
      "exists": true,
      "hits": [
        {
          "type": "directive_line",
          "start_line": 84,
          "end_line": 84,
          "snippet": "\"\"\"Determine if research phase should be executed\"\"\"",
          "values_preview": [
            "Determine if research phase should be executed"
          ],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 115,
          "end_line": 115,
          "snippet": "\"\"\"Determine if stage should be retried based on error type\"\"\"",
          "values_preview": [
            "Determine if stage should be retried based on error type"
          ],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 376,
          "end_line": 376,
          "snippet": "raise ValueError(f\"Viral score must be between 0.0 and 10.0, got: {inputs.viral_score}\")",
          "values_preview": [
            "Viral score must be between 0.0 and 10.0, got: {inputs.viral_score}"
          ],
          "priority_guess": "high",
          "category_guess": "required"
        },
        {
          "type": "directive_line",
          "start_line": 563,
          "end_line": 563,
          "snippet": "\"\"\"Determine if stage execution should be retried\"\"\"",
          "values_preview": [
            "Determine if stage execution should be retried"
          ],
          "priority_guess": "medium",
          "category_guess": "style"
        }
      ],
      "integration_points": [
        {
          "line": 72,
          "text": "editorial_recommendations: str = Field(default=\"\", description=\"Editorial guidance\")"
        },
        {
          "line": 395,
          "text": "self.writing_state.editorial_recommendations = inputs.editorial_recommendations"
        }
      ]
    },
    {
      "file": "/Users/hretheum/dev/bezrobocie/vector-wave/kolegium/ai_writing_flow/deployment/backups/20250804_132311/src/ai_writing_flow/__init__.py",
      "exists": true,
      "hits": [],
      "integration_points": []
    },
    {
      "file": "/Users/hretheum/dev/bezrobocie/vector-wave/kolegium/ai_writing_flow/deployment/backups/20250804_132311/src/ai_writing_flow/execution_guards.py",
      "exists": true,
      "hits": [],
      "integration_points": []
    },
    {
      "file": "/Users/hretheum/dev/bezrobocie/vector-wave/kolegium/ai_writing_flow/deployment/backups/20250804_132311/src/ai_writing_flow/quality_linear.py",
      "exists": true,
      "hits": [
        {
          "type": "directive_line",
          "start_line": 79,
          "end_line": 79,
          "snippet": "Determine if quality assessment should be executed",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 85,
          "end_line": 85,
          "snippet": "True if quality assessment should be executed",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 152,
          "end_line": 152,
          "snippet": "# Quality check failed - determine if we should retry - Task 17.2",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        }
      ],
      "integration_points": []
    },
    {
      "file": "/Users/hretheum/dev/bezrobocie/vector-wave/kolegium/ai_writing_flow/deployment/backups/20250804_132311/src/ai_writing_flow/main.py",
      "exists": true,
      "hits": [],
      "integration_points": [
        {
          "line": 142,
          "text": "\"editorial_recommendations\": \"Focus on V2 production features and monitoring capabilities\""
        }
      ]
    },
    {
      "file": "/Users/hretheum/dev/bezrobocie/vector-wave/kolegium/ai_writing_flow/deployment/backups/20250804_132311/src/ai_writing_flow/audience_linear.py",
      "exists": true,
      "hits": [
        {
          "type": "directive_line",
          "start_line": 59,
          "end_line": 59,
          "snippet": "Determine if audience alignment should be executed",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 65,
          "end_line": 65,
          "snippet": "True if audience alignment should be executed",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 240,
          "end_line": 240,
          "snippet": "insights.append(\"High viral potential - content should appeal to broader audience\")",
          "values_preview": [
            "High viral potential - content should appeal to broader audience"
          ],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 255,
          "end_line": 255,
          "snippet": "adjustments.append(\"Keep explanations simple and avoid technical jargon\")",
          "values_preview": [
            "Keep explanations simple and avoid technical jargon"
          ],
          "priority_guess": "medium",
          "category_guess": "forbidden"
        }
      ],
      "integration_points": []
    },
    {
      "file": "/Users/hretheum/dev/bezrobocie/vector-wave/kolegium/ai_writing_flow/deployment/backups/20250804_132311/src/ai_writing_flow/flow_inputs.py",
      "exists": true,
      "hits": [
        {
          "type": "directive_line",
          "start_line": 66,
          "end_line": 66,
          "snippet": "validation_results[\"critical_errors\"].append(f\"Viral score must be 0-10, got {inputs.viral_score}\")",
          "values_preview": [
            "critical_errors",
            "Viral score must be 0-10, got {inputs.viral_score}"
          ],
          "priority_guess": "high",
          "category_guess": "required"
        },
        {
          "type": "directive_line",
          "start_line": 71,
          "end_line": 71,
          "snippet": "validation_results[\"critical_errors\"].append(f\"Invalid content type. Must be one of: {valid_content_types}\")",
          "values_preview": [
            "critical_errors",
            "Invalid content type. Must be one of: {valid_content_types}"
          ],
          "priority_guess": "high",
          "category_guess": "required"
        },
        {
          "type": "directive_line",
          "start_line": 76,
          "end_line": 76,
          "snippet": "validation_results[\"critical_errors\"].append(f\"Invalid content ownership. Must be one of: {valid_ownership}\")",
          "values_preview": [
            "critical_errors",
            "Invalid content ownership. Must be one of: {valid_ownership}"
          ],
          "priority_guess": "high",
          "category_guess": "required"
        },
        {
          "type": "directive_line",
          "start_line": 158,
          "end_line": 158,
          "snippet": "raise ValueError(f\"Viral score must be between 0.0 and 10.0, got: {inputs.viral_score}\")",
          "values_preview": [
            "Viral score must be between 0.0 and 10.0, got: {inputs.viral_score}"
          ],
          "priority_guess": "high",
          "category_guess": "required"
        },
        {
          "type": "directive_line",
          "start_line": 348,
          "end_line": 348,
          "snippet": "issues.append(\"Cannot require human approval with 0 feedback iterations\")",
          "values_preview": [
            "Cannot require human approval with 0 feedback iterations"
          ],
          "priority_guess": "low",
          "category_guess": "required"
        }
      ],
      "integration_points": [
        {
          "line": 22,
          "text": "editorial_recommendations: str = Field(default=\"\", description=\"Editorial guidance\")"
        },
        {
          "line": 100,
          "text": "# Editorial recommendations validation"
        },
        {
          "line": 101,
          "text": "if inputs.editorial_recommendations and len(inputs.editorial_recommendations) > 2000:"
        },
        {
          "line": 102,
          "text": "validation_results[\"warnings\"].append(\"Editorial recommendations very long (>2000 chars)\")"
        }
      ]
    },
    {
      "file": "/Users/hretheum/dev/bezrobocie/vector-wave/kolegium/ai_writing_flow/deployment/backups/20250804_132311/src/ai_writing_flow/ai_writing_flow_v2.py",
      "exists": true,
      "hits": [],
      "integration_points": [
        {
          "line": 359,
          "text": "\"editorial_recommendations\": inputs.get(\"editorial_recommendations\", \"\"),"
        },
        {
          "line": 632,
          "text": "\"editorial_recommendations\": \"Focus on production-ready features and monitoring capabilities\""
        }
      ]
    },
    {
      "file": "/Users/hretheum/dev/bezrobocie/vector-wave/kolegium/ai_writing_flow/deployment/backups/20250804_132311/src/ai_writing_flow/style_linear.py",
      "exists": true,
      "hits": [
        {
          "type": "directive_line",
          "start_line": 72,
          "end_line": 72,
          "snippet": "Determine if style validation should be executed",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 78,
          "end_line": 78,
          "snippet": "True if style validation should be executed",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 143,
          "end_line": 143,
          "snippet": "# Validation failed - check if we should retry - Task 16.2",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "forbidden_phrases",
          "start_line": 206,
          "end_line": 206,
          "snippet": "        forbidden_phrases = []",
          "values_preview": [],
          "priority_guess": "low",
          "category_guess": "forbidden"
        },
        {
          "type": "directive_line",
          "start_line": 214,
          "end_line": 214,
          "snippet": "\"message\": \"LinkedIn posts should be under 3000 characters\",",
          "values_preview": [
            "message",
            "LinkedIn posts should be under 3000 characters"
          ],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 237,
          "end_line": 237,
          "snippet": "\"message\": \"Individual tweets should be under 280 characters\",",
          "values_preview": [
            "message",
            "Individual tweets should be under 280 characters"
          ],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 260,
          "end_line": 260,
          "snippet": "\"message\": \"Blog posts should be at least 300 words for SEO\",",
          "values_preview": [
            "message",
            "Blog posts should be at least 300 words for SEO"
          ],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 282,
          "end_line": 282,
          "snippet": "\"message\": \"Avoid excessive exclamation marks\",",
          "values_preview": [
            "message",
            "Avoid excessive exclamation marks"
          ],
          "priority_guess": "medium",
          "category_guess": "forbidden"
        },
        {
          "type": "forbidden_phrases",
          "start_line": 450,
          "end_line": 450,
          "snippet": "        result.forbidden_phrases = []",
          "values_preview": [],
          "priority_guess": "low",
          "category_guess": "forbidden"
        }
      ],
      "integration_points": []
    },
    {
      "file": "/Users/hretheum/dev/bezrobocie/vector-wave/kolegium/ai_writing_flow/deployment/backups/20250804_132311/src/ai_writing_flow/crews/style_crew.py",
      "exists": true,
      "hits": [
        {
          "type": "forbidden_phrases",
          "start_line": 22,
          "end_line": 31,
          "snippet": "        self.forbidden_phrases = [\n            \"leveraging\", \"utilize\", \"synergy\", \"paradigm shift\",\n            \"cutting-edge\", \"revolutionary\", \"game-changing\", \"disruptive\",\n            \"best practices\", \"industry-leading\", \"world-class\", \"next-gen\",\n            \"seamless\", \"robust\", \"scalable solution\", \"enterprise-grade\",\n            \"unlock\", \"empower\", \"transform your business\", \"drive innovation\",\n            \"at the end of the day\", \"low-hanging fruit\", \"move the needle\",\n            \"dive into\", \"dive deep\", \"deep dive\", \"unpack\",",
          "values_preview": [
            "leveraging",
            "utilize",
            "synergy",
            "paradigm shift",
            "cutting-edge",
            "revolutionary",
            "game-changing",
            "disruptive",
            "best practices",
            "industry-leading",
            "world-class",
            "next-gen",
            "seamless",
            "robust",
            "scalable solution",
            "enterprise-grade",
            "unlock",
            "empower",
            "transform your business",
            "drive innovation"
          ],
          "priority_guess": "low",
          "category_guess": "forbidden"
        },
        {
          "type": "required_elements",
          "start_line": 34,
          "end_line": 38,
          "snippet": "        self.required_elements = {\n            \"evidence\": [\"statistic\", \"study\", \"research\", \"data\", \"%\", \"survey\"],\n            \"specificity\": [\"example\", \"for instance\", \"specifically\", \"case study\"],\n            \"conclusion\": [\"therefore\", \"so\", \"which means\", \"the result\", \"in practice\"]\n        }",
          "values_preview": [
            "evidence",
            "statistic",
            "study",
            "research",
            "data",
            "specificity",
            "example",
            "for instance",
            "specifically",
            "case study",
            "conclusion",
            "therefore",
            "so",
            "which means",
            "the result",
            "in practice"
          ],
          "priority_guess": "low",
          "category_guess": "required"
        },
        {
          "type": "regex_compile",
          "start_line": 57,
          "end_line": 57,
          "snippet": "                pattern = re.compile(r'.{0,20}' + re.escape(phrase) + r'.{0,20}', re.IGNORECASE)",
          "values_preview": [
            ".{0,20}",
            ".{0,20}"
          ],
          "priority_guess": "low",
          "category_guess": "pattern"
        },
        {
          "type": "forbidden_phrases",
          "start_line": 256,
          "end_line": 257,
          "snippet": "            forbidden_phrases=[phrase.split(\"'\")[1] for phrase in forbidden_phrases \n                             if \"'\" in phrase],",
          "values_preview": [],
          "priority_guess": "low",
          "category_guess": "forbidden"
        }
      ],
      "integration_points": [
        {
          "line": 153,
          "text": "role=\"Editorial Style Guardian\","
        },
        {
          "line": 156,
          "text": "of editorial experience at top tech publications, you have an eagle eye for"
        }
      ]
    },
    {
      "file": "/Users/hretheum/dev/bezrobocie/vector-wave/kolegium/ai_writing_flow/deployment/backups/20250804_132311/src/ai_writing_flow/crews/__init__.py",
      "exists": true,
      "hits": [],
      "integration_points": []
    },
    {
      "file": "/Users/hretheum/dev/bezrobocie/vector-wave/kolegium/ai_writing_flow/deployment/backups/20250804_132311/src/ai_writing_flow/crews/research_crew.py",
      "exists": true,
      "hits": [
        {
          "type": "directive_line",
          "start_line": 97,
          "end_line": 97,
          "snippet": "# Return as formatted string since tools must return strings",
          "values_preview": [],
          "priority_guess": "high",
          "category_guess": "required"
        },
        {
          "type": "directive_line",
          "start_line": 153,
          "end_line": 153,
          "snippet": "# Return as JSON string since tools must return strings",
          "values_preview": [],
          "priority_guess": "high",
          "category_guess": "required"
        }
      ],
      "integration_points": [
        {
          "line": 83,
          "text": "r'https?://[^\\s]+',"
        },
        {
          "line": 89,
          "text": "if any(indicator in line.lower() for indicator in ['źródło', 'source', 'http']):"
        },
        {
          "line": 122,
          "text": "\"url\": \"https://gartner.com/ai-agents-2024\","
        },
        {
          "line": 133,
          "text": "\"url\": \"https://stackoverflow.com/survey/2024\","
        },
        {
          "line": 233,
          "text": "url_pattern = r'https?://[^\\s]+'"
        },
        {
          "line": 246,
          "text": "\"url\": \"https://gartner.com/ai-agents-2024\","
        }
      ]
    },
    {
      "file": "/Users/hretheum/dev/bezrobocie/vector-wave/kolegium/ai_writing_flow/deployment/backups/20250804_132311/src/ai_writing_flow/crews/audience_crew.py",
      "exists": true,
      "hits": [],
      "integration_points": [
        {
          "line": 218,
          "text": "editorial_recommendations: str) -> Task:"
        },
        {
          "line": 253,
          "text": "editorial_recommendations: str) -> AudienceAlignment:"
        },
        {
          "line": 270,
          "text": "tasks=[self.create_audience_task(topic, platform, research_summary, editorial_recommendations)],"
        }
      ]
    },
    {
      "file": "/Users/hretheum/dev/bezrobocie/vector-wave/kolegium/ai_writing_flow/deployment/backups/20250804_132311/src/ai_writing_flow/crews/quality_crew.py",
      "exists": true,
      "hits": [
        {
          "type": "directive_line",
          "start_line": 181,
          "end_line": 181,
          "snippet": "that quality content must be accurate, valuable, and ethical. You're thorough",
          "values_preview": [],
          "priority_guess": "high",
          "category_guess": "required"
        }
      ],
      "integration_points": []
    },
    {
      "file": "/Users/hretheum/dev/bezrobocie/vector-wave/kolegium/ai_writing_flow/deployment/backups/20250804_132311/src/ai_writing_flow/crews/writer_crew.py",
      "exists": true,
      "hits": [
        {
          "type": "directive_line",
          "start_line": 118,
          "end_line": 118,
          "snippet": "\"Common Pitfalls (and How to Avoid Them)\",",
          "values_preview": [
            "Common Pitfalls (and How to Avoid Them)"
          ],
          "priority_guess": "medium",
          "category_guess": "forbidden"
        }
      ],
      "integration_points": []
    },
    {
      "file": "/Users/hretheum/dev/bezrobocie/vector-wave/kolegium/ai_writing_flow/deployment/backups/20250804_132311/src/ai_writing_flow/crews/writing_crew.py",
      "exists": true,
      "hits": [],
      "integration_points": []
    },
    {
      "file": "/Users/hretheum/dev/bezrobocie/vector-wave/kolegium/ai_writing_flow/deployment/backups/20250804_132311/src/ai_writing_flow/crews/content_crew/content_crew.py",
      "exists": true,
      "hits": [],
      "integration_points": []
    },
    {
      "file": "/Users/hretheum/dev/bezrobocie/vector-wave/kolegium/ai_writing_flow/deployment/backups/20250804_132311/src/ai_writing_flow/crews/poem_crew/poem_crew.py",
      "exists": true,
      "hits": [],
      "integration_points": [
        {
          "line": 8,
          "text": "# https://docs.crewai.com/concepts/crews#example-crew-class-with-decorators"
        },
        {
          "line": 19,
          "text": "# Agents: https://docs.crewai.com/concepts/agents#yaml-configuration-recommended"
        },
        {
          "line": 20,
          "text": "# Tasks: https://docs.crewai.com/concepts/tasks#yaml-configuration-recommended"
        },
        {
          "line": 25,
          "text": "# https://docs.crewai.com/concepts/agents#agent-tools"
        },
        {
          "line": 34,
          "text": "# https://docs.crewai.com/concepts/tasks#overview-of-a-task"
        },
        {
          "line": 45,
          "text": "# https://docs.crewai.com/concepts/knowledge#what-is-knowledge"
        }
      ]
    },
    {
      "file": "/Users/hretheum/dev/bezrobocie/vector-wave/kolegium/ai_writing_flow/deployment/backups/20250804_132311/src/ai_writing_flow/crews/poem_crew/__init__.py",
      "exists": true,
      "hits": [],
      "integration_points": []
    },
    {
      "file": "/Users/hretheum/dev/bezrobocie/vector-wave/kolegium/ai_writing_flow/deployment/backups/20250804_132311/src/ai_writing_flow/tools/knowledge_base_tool.py",
      "exists": true,
      "hits": [],
      "integration_points": []
    },
    {
      "file": "/Users/hretheum/dev/bezrobocie/vector-wave/kolegium/ai_writing_flow/deployment/backups/20250804_132311/src/ai_writing_flow/tools/__init__.py",
      "exists": true,
      "hits": [],
      "integration_points": []
    },
    {
      "file": "/Users/hretheum/dev/bezrobocie/vector-wave/kolegium/ai_writing_flow/deployment/backups/20250804_132311/src/ai_writing_flow/tools/styleguide_loader.py",
      "exists": true,
      "hits": [],
      "integration_points": []
    },
    {
      "file": "/Users/hretheum/dev/bezrobocie/vector-wave/kolegium/ai_writing_flow/deployment/backups/20250804_132311/src/ai_writing_flow/tools/custom_tool.py",
      "exists": true,
      "hits": [],
      "integration_points": []
    },
    {
      "file": "/Users/hretheum/dev/bezrobocie/vector-wave/kolegium/ai_writing_flow/deployment/backups/20250804_132311/src/ai_writing_flow/tools/enhanced_knowledge_tools.py",
      "exists": true,
      "hits": [],
      "integration_points": []
    },
    {
      "file": "/Users/hretheum/dev/bezrobocie/vector-wave/kolegium/ai_writing_flow/deployment/backups/20250804_132311/src/ai_writing_flow/managers/stage_manager.py",
      "exists": true,
      "hits": [
        {
          "type": "directive_line",
          "start_line": 97,
          "end_line": 97,
          "snippet": "\"\"\"Check if stage should be skipped based on conditions.",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 103,
          "end_line": 103,
          "snippet": "True if stage should be skipped",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 265,
          "end_line": 265,
          "snippet": "\"\"\"Check if a stage should be skipped.",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 271,
          "end_line": 271,
          "snippet": "True if stage should be skipped",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 1043,
          "end_line": 1043,
          "snippet": "expected_max = 3  # Normal stage should not execute more than 3 times in an hour",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        }
      ],
      "integration_points": []
    },
    {
      "file": "/Users/hretheum/dev/bezrobocie/vector-wave/kolegium/ai_writing_flow/deployment/backups/20250804_132311/src/ai_writing_flow/managers/__init__.py",
      "exists": true,
      "hits": [],
      "integration_points": []
    },
    {
      "file": "/Users/hretheum/dev/bezrobocie/vector-wave/kolegium/ai_writing_flow/deployment/backups/20250804_132311/src/ai_writing_flow/utils/retry_manager.py",
      "exists": true,
      "hits": [
        {
          "type": "directive_line",
          "start_line": 48,
          "end_line": 48,
          "snippet": "should_retry: Optional callable to determine if exception should trigger retry",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 205,
          "end_line": 205,
          "snippet": "# Check if we should retry this specific exception",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 237,
          "end_line": 237,
          "snippet": "# Should never reach here",
          "values_preview": [],
          "priority_guess": "high",
          "category_guess": "forbidden"
        },
        {
          "type": "directive_line",
          "start_line": 281,
          "end_line": 281,
          "snippet": "# Check if we should retry this specific exception",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 313,
          "end_line": 313,
          "snippet": "# Should never reach here",
          "values_preview": [],
          "priority_guess": "high",
          "category_guess": "forbidden"
        }
      ],
      "integration_points": []
    },
    {
      "file": "/Users/hretheum/dev/bezrobocie/vector-wave/kolegium/ai_writing_flow/deployment/backups/20250804_132311/src/ai_writing_flow/utils/ui_bridge_v2.py",
      "exists": true,
      "hits": [],
      "integration_points": []
    },
    {
      "file": "/Users/hretheum/dev/bezrobocie/vector-wave/kolegium/ai_writing_flow/deployment/backups/20250804_132311/src/ai_writing_flow/utils/__init__.py",
      "exists": true,
      "hits": [],
      "integration_points": []
    },
    {
      "file": "/Users/hretheum/dev/bezrobocie/vector-wave/kolegium/ai_writing_flow/deployment/backups/20250804_132311/src/ai_writing_flow/utils/loop_prevention.py",
      "exists": true,
      "hits": [
        {
          "type": "directive_line",
          "start_line": 487,
          "end_line": 487,
          "snippet": "Check if execution should be stopped due to loop prevention",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 490,
          "end_line": 490,
          "snippet": "True if execution should be stopped",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        }
      ],
      "integration_points": []
    },
    {
      "file": "/Users/hretheum/dev/bezrobocie/vector-wave/kolegium/ai_writing_flow/deployment/backups/20250804_132311/src/ai_writing_flow/utils/circuit_breaker.py",
      "exists": true,
      "hits": [],
      "integration_points": []
    },
    {
      "file": "/Users/hretheum/dev/bezrobocie/vector-wave/kolegium/ai_writing_flow/deployment/backups/20250804_132311/src/ai_writing_flow/utils/ui_bridge.py",
      "exists": true,
      "hits": [],
      "integration_points": []
    },
    {
      "file": "/Users/hretheum/dev/bezrobocie/vector-wave/kolegium/ai_writing_flow/deployment/backups/20250804_132311/src/ai_writing_flow/models/flow_stage.py",
      "exists": true,
      "hits": [],
      "integration_points": []
    },
    {
      "file": "/Users/hretheum/dev/bezrobocie/vector-wave/kolegium/ai_writing_flow/deployment/backups/20250804_132311/src/ai_writing_flow/models/__init__.py",
      "exists": true,
      "hits": [],
      "integration_points": [
        {
          "line": 38,
          "text": "editorial_recommendations: str = \"\""
        }
      ]
    },
    {
      "file": "/Users/hretheum/dev/bezrobocie/vector-wave/kolegium/ai_writing_flow/deployment/backups/20250804_132311/src/ai_writing_flow/models/flow_control_state.py",
      "exists": true,
      "hits": [
        {
          "type": "directive_line",
          "start_line": 225,
          "end_line": 225,
          "snippet": "Check if circuit breaker should attempt recovery.",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 231,
          "end_line": 231,
          "snippet": "True if recovery should be attempted",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        }
      ],
      "integration_points": []
    },
    {
      "file": "/Users/hretheum/dev/bezrobocie/vector-wave/kolegium/ai_writing_flow/deployment/backups/20250804_132311/src/ai_writing_flow/models/stage_execution.py",
      "exists": true,
      "hits": [],
      "integration_points": []
    },
    {
      "file": "/Users/hretheum/dev/bezrobocie/vector-wave/kolegium/ai_writing_flow/deployment/backups/20250804_132311/src/ai_writing_flow/adapters/knowledge_adapter.py",
      "exists": true,
      "hits": [],
      "integration_points": [
        {
          "line": 13,
          "text": "import aiohttp"
        },
        {
          "line": 146,
          "text": "kb_api_url: str = \"http://localhost:8080\","
        },
        {
          "line": 189,
          "text": "self._session: Optional[aiohttp.ClientSession] = None"
        },
        {
          "line": 196,
          "text": "async def _get_session(self) -> aiohttp.ClientSession:"
        },
        {
          "line": 197,
          "text": "\"\"\"Get or create HTTP session with connection pooling\"\"\""
        },
        {
          "line": 199,
          "text": "timeout = aiohttp.ClientTimeout(total=self.timeout)"
        },
        {
          "line": 200,
          "text": "connector = aiohttp.TCPConnector(limit=10, limit_per_host=5)"
        },
        {
          "line": 201,
          "text": "self._session = aiohttp.ClientSession("
        },
        {
          "line": 209,
          "text": "\"\"\"Close HTTP session and cleanup resources\"\"\""
        },
        {
          "line": 281,
          "text": "except aiohttp.ClientError as e:"
        },
        {
          "line": 554,
          "text": "kb_api_url=os.getenv('KB_API_URL', 'http://localhost:8082'),"
        }
      ]
    },
    {
      "file": "/Users/hretheum/dev/bezrobocie/vector-wave/kolegium/ai_writing_flow/deployment/backups/20250804_132311/src/ai_writing_flow/adapters/__init__.py",
      "exists": true,
      "hits": [],
      "integration_points": []
    },
    {
      "file": "/Users/hretheum/dev/bezrobocie/vector-wave/kolegium/ai_writing_flow/deployment/backups/20250804_132311/src/ai_writing_flow/optimizations/optimized_research.py",
      "exists": true,
      "hits": [],
      "integration_points": []
    },
    {
      "file": "/Users/hretheum/dev/bezrobocie/vector-wave/kolegium/ai_writing_flow/deployment/backups/20250804_132311/src/ai_writing_flow/optimizations/optimized_knowledge_search.py",
      "exists": true,
      "hits": [
        {
          "type": "directive_line",
          "start_line": 452,
          "end_line": 452,
          "snippet": "# Small delay to avoid overwhelming the system",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "forbidden"
        }
      ],
      "integration_points": [
        {
          "line": 24,
          "text": "import aiohttp"
        },
        {
          "line": 103,
          "text": "connection_pool_size: HTTP connection pool size"
        },
        {
          "line": 136,
          "text": "self._session: Optional[aiohttp.ClientSession] = None"
        },
        {
          "line": 142,
          "text": "async def _get_session(self) -> aiohttp.ClientSession:"
        },
        {
          "line": 143,
          "text": "\"\"\"Get or create HTTP session with connection pooling\"\"\""
        },
        {
          "line": 145,
          "text": "connector = aiohttp.TCPConnector("
        },
        {
          "line": 152,
          "text": "timeout = aiohttp.ClientTimeout(total=10.0)"
        },
        {
          "line": 154,
          "text": "self._session = aiohttp.ClientSession("
        }
      ]
    },
    {
      "file": "/Users/hretheum/dev/bezrobocie/vector-wave/kolegium/ai_writing_flow/deployment/backups/20250804_132311/src/ai_writing_flow/optimizations/cache_manager.py",
      "exists": true,
      "hits": [],
      "integration_points": []
    },
    {
      "file": "/Users/hretheum/dev/bezrobocie/vector-wave/kolegium/ai_writing_flow/deployment/backups/20250804_132311/src/ai_writing_flow/optimizations/__init__.py",
      "exists": true,
      "hits": [],
      "integration_points": []
    },
    {
      "file": "/Users/hretheum/dev/bezrobocie/vector-wave/kolegium/ai_writing_flow/deployment/backups/20250804_132311/src/ai_writing_flow/optimizations/optimized_quality_assessment.py",
      "exists": true,
      "hits": [
        {
          "type": "regex_compile",
          "start_line": 256,
          "end_line": 256,
          "snippet": "                'headings': re.compile(r'^#{1,6}\\s+.+$', re.MULTILINE),",
          "values_preview": [
            "headings",
            "^#{1,6}\\s+.+$"
          ],
          "priority_guess": "low",
          "category_guess": "pattern"
        },
        {
          "type": "regex_compile",
          "start_line": 257,
          "end_line": 257,
          "snippet": "                'bullet_points': re.compile(r'^\\s*[-*•]\\s+.+$', re.MULTILINE),",
          "values_preview": [
            "bullet_points",
            "^\\s*[-*•]\\s+.+$"
          ],
          "priority_guess": "low",
          "category_guess": "pattern"
        },
        {
          "type": "regex_compile",
          "start_line": 258,
          "end_line": 258,
          "snippet": "                'numbered_lists': re.compile(r'^\\s*\\d+\\.\\s+.+$', re.MULTILINE),",
          "values_preview": [
            "numbered_lists",
            "^\\s*\\d+\\.\\s+.+$"
          ],
          "priority_guess": "low",
          "category_guess": "pattern"
        },
        {
          "type": "regex_compile",
          "start_line": 259,
          "end_line": 259,
          "snippet": "                'paragraphs': re.compile(r'\\n\\s*\\n')",
          "values_preview": [
            "paragraphs",
            "\\n\\s*\\n"
          ],
          "priority_guess": "low",
          "category_guess": "pattern"
        },
        {
          "type": "regex_compile",
          "start_line": 263,
          "end_line": 263,
          "snippet": "                'sentence_enders': re.compile(r'[.!?]+'),",
          "values_preview": [
            "sentence_enders",
            "[.!?]+"
          ],
          "priority_guess": "low",
          "category_guess": "pattern"
        },
        {
          "type": "regex_compile",
          "start_line": 264,
          "end_line": 264,
          "snippet": "                'complex_words': re.compile(r'\\b\\w{7,}\\b'),",
          "values_preview": [
            "complex_words",
            "\\b\\w{7,}\\b"
          ],
          "priority_guess": "low",
          "category_guess": "pattern"
        },
        {
          "type": "regex_compile",
          "start_line": 265,
          "end_line": 265,
          "snippet": "                'simple_sentences': re.compile(r'^[^,;:]+[.!?]$', re.MULTILINE)",
          "values_preview": [
            "simple_sentences",
            "^[^,;:]+[.!?]$"
          ],
          "priority_guess": "low",
          "category_guess": "pattern"
        },
        {
          "type": "regex_compile",
          "start_line": 705,
          "end_line": 705,
          "snippet": "        date_pattern = re.compile(r'\\b\\d{4}\\b|\\b\\d{1,2}/\\d{1,2}/\\d{2,4}\\b')",
          "values_preview": [
            "\\b\\d{4}\\b|\\b\\d{1,2}/\\d{1,2}/\\d{2,4}\\b"
          ],
          "priority_guess": "low",
          "category_guess": "pattern"
        },
        {
          "type": "regex_compile",
          "start_line": 706,
          "end_line": 706,
          "snippet": "        number_pattern = re.compile(r'\\b\\d+\\.?\\d*%?\\b')",
          "values_preview": [
            "\\b\\d+\\.?\\d*%?\\b"
          ],
          "priority_guess": "low",
          "category_guess": "pattern"
        }
      ],
      "integration_points": []
    },
    {
      "file": "/Users/hretheum/dev/bezrobocie/vector-wave/kolegium/ai_writing_flow/deployment/backups/20250804_132311/src/ai_writing_flow/optimizations/optimized_draft_generation.py",
      "exists": true,
      "hits": [],
      "integration_points": []
    },
    {
      "file": "/Users/hretheum/dev/bezrobocie/vector-wave/kolegium/ai_writing_flow/deployment/backups/20250804_132311/src/ai_writing_flow/optimizations/performance_optimizer.py",
      "exists": true,
      "hits": [],
      "integration_points": []
    },
    {
      "file": "/Users/hretheum/dev/bezrobocie/vector-wave/kolegium/ai_writing_flow/deployment/backups/20250804_132311/src/ai_writing_flow/optimizations/optimized_audience_alignment.py",
      "exists": true,
      "hits": [],
      "integration_points": []
    },
    {
      "file": "/Users/hretheum/dev/bezrobocie/vector-wave/kolegium/ai_writing_flow/deployment/backups/20250804_132311/src/ai_writing_flow/profiling/performance_analyzer.py",
      "exists": true,
      "hits": [
        {
          "type": "directive_line",
          "start_line": 237,
          "end_line": 237,
          "snippet": "suggestions.append(\"Consider caching results to avoid repeated computation\")",
          "values_preview": [
            "Consider caching results to avoid repeated computation"
          ],
          "priority_guess": "medium",
          "category_guess": "forbidden"
        },
        {
          "type": "directive_line",
          "start_line": 551,
          "end_line": 551,
          "snippet": "\"Add result caching to avoid redundant computations\"",
          "values_preview": [
            "Add result caching to avoid redundant computations"
          ],
          "priority_guess": "medium",
          "category_guess": "forbidden"
        }
      ],
      "integration_points": []
    },
    {
      "file": "/Users/hretheum/dev/bezrobocie/vector-wave/kolegium/ai_writing_flow/deployment/backups/20250804_132311/src/ai_writing_flow/profiling/__init__.py",
      "exists": true,
      "hits": [],
      "integration_points": []
    },
    {
      "file": "/Users/hretheum/dev/bezrobocie/vector-wave/kolegium/ai_writing_flow/deployment/backups/20250804_132311/src/ai_writing_flow/profiling/test_profiler.py",
      "exists": true,
      "hits": [
        {
          "type": "directive_line",
          "start_line": 195,
          "end_line": 195,
          "snippet": "# Should have bottlenecks in bottlenecked scenario",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 219,
          "end_line": 219,
          "snippet": "# Should have historical comparison",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 234,
          "end_line": 234,
          "snippet": "# Should have recommendations",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 285,
          "end_line": 285,
          "snippet": "# Should detect the spike",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        }
      ],
      "integration_points": []
    },
    {
      "file": "/Users/hretheum/dev/bezrobocie/vector-wave/kolegium/ai_writing_flow/deployment/backups/20250804_132311/src/ai_writing_flow/profiling/flow_profiler.py",
      "exists": true,
      "hits": [],
      "integration_points": []
    },
    {
      "file": "/Users/hretheum/dev/bezrobocie/vector-wave/kolegium/ai_writing_flow/deployment/backups/20250804_132311/src/ai_writing_flow/profiling/v2_integration.py",
      "exists": true,
      "hits": [],
      "integration_points": [
        {
          "line": 467,
          "text": "\"editorial_recommendations\": \"Focus on technical depth and profiling insights\""
        }
      ]
    },
    {
      "file": "/Users/hretheum/dev/bezrobocie/vector-wave/kolegium/ai_writing_flow/deployment/backups/20250804_132311/src/ai_writing_flow/profiling/mock_profiler.py",
      "exists": true,
      "hits": [],
      "integration_points": []
    },
    {
      "file": "/Users/hretheum/dev/bezrobocie/vector-wave/kolegium/ai_writing_flow/deployment/backups/20250804_132311/src/ai_writing_flow/api/__init__.py",
      "exists": true,
      "hits": [],
      "integration_points": []
    },
    {
      "file": "/Users/hretheum/dev/bezrobocie/vector-wave/kolegium/ai_writing_flow/deployment/backups/20250804_132311/src/ai_writing_flow/api/endpoints.py",
      "exists": true,
      "hits": [],
      "integration_points": [
        {
          "line": 23,
          "text": "from fastapi import FastAPI, HTTPException, BackgroundTasks, Request"
        },
        {
          "line": 32,
          "text": "HTTPException = None"
        },
        {
          "line": 49,
          "text": "editorial_recommendations: str = Field(default=\"\", description=\"Editorial guidance\")"
        },
        {
          "line": 159,
          "text": "\"editorial_recommendations\": flow_request.editorial_recommendations,"
        },
        {
          "line": 429,
          "text": "\"editorial_recommendations\": request_data.get(\"editorial_recommendations\", \"\"),"
        },
        {
          "line": 557,
          "text": "Can be used with Flask, Django, or custom HTTP servers"
        },
        {
          "line": 568,
          "text": "method: HTTP method (GET, POST, etc.)"
        }
      ]
    },
    {
      "file": "/Users/hretheum/dev/bezrobocie/vector-wave/kolegium/ai_writing_flow/deployment/backups/20250804_132311/src/ai_writing_flow/monitoring/flow_metrics.py",
      "exists": true,
      "hits": [],
      "integration_points": []
    },
    {
      "file": "/Users/hretheum/dev/bezrobocie/vector-wave/kolegium/ai_writing_flow/deployment/backups/20250804_132311/src/ai_writing_flow/monitoring/__init__.py",
      "exists": true,
      "hits": [],
      "integration_points": []
    },
    {
      "file": "/Users/hretheum/dev/bezrobocie/vector-wave/kolegium/ai_writing_flow/deployment/backups/20250804_132311/src/ai_writing_flow/monitoring/storage.py",
      "exists": true,
      "hits": [],
      "integration_points": []
    },
    {
      "file": "/Users/hretheum/dev/bezrobocie/vector-wave/kolegium/ai_writing_flow/deployment/backups/20250804_132311/src/ai_writing_flow/monitoring/dashboard_api.py",
      "exists": true,
      "hits": [],
      "integration_points": [
        {
          "line": 92,
          "text": "self._websocket_clients: List[Any] = []  # Would be WebSocket objects in real implementation"
        }
      ]
    },
    {
      "file": "/Users/hretheum/dev/bezrobocie/vector-wave/kolegium/ai_writing_flow/deployment/backups/20250804_132311/src/ai_writing_flow/monitoring/alerting.py",
      "exists": true,
      "hits": [],
      "integration_points": [
        {
          "line": 496,
          "text": "\"dashboard_url\": \"http://localhost:8080/dashboard\"  # Could be configurable"
        }
      ]
    },
    {
      "file": "/Users/hretheum/dev/bezrobocie/vector-wave/kolegium/ai_writing_flow/deployment/backups/20250804_132311/src/ai_writing_flow/validation/__init__.py",
      "exists": true,
      "hits": [],
      "integration_points": []
    },
    {
      "file": "/Users/hretheum/dev/bezrobocie/vector-wave/kolegium/ai_writing_flow/deployment/backups/20250804_132311/src/ai_writing_flow/validation/quality_gate.py",
      "exists": true,
      "hits": [
        {
          "type": "directive_line",
          "start_line": 390,
          "end_line": 390,
          "snippet": "# Validate throughput (should be > 0 if system is active)",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        }
      ],
      "integration_points": []
    },
    {
      "file": "/Users/hretheum/dev/bezrobocie/vector-wave/kolegium/ai_writing_flow/deployment/backups/20250804_131201/test_optimization_performance.py",
      "exists": true,
      "hits": [
        {
          "type": "directive_line",
          "start_line": 262,
          "end_line": 262,
          "snippet": "consistency. Organizations must evaluate trade-offs between system complexity",
          "values_preview": [],
          "priority_guess": "high",
          "category_guess": "required"
        },
        {
          "type": "directive_line",
          "start_line": 341,
          "end_line": 341,
          "snippet": "\"\"\"Cloud computing security considerations require comprehensive understanding of shared responsibility models, data protection strategies, and compliance requirements. Organizations must implement multi-layered security approaches.\"\"\",",
          "values_preview": [
            "Cloud computing security considerations require comprehensive understanding of shared responsibility models, data protection strategies, and compliance requirements. Organizations must implement multi-layered security approaches."
          ],
          "priority_guess": "high",
          "category_guess": "required"
        }
      ],
      "integration_points": []
    },
    {
      "file": "/Users/hretheum/dev/bezrobocie/vector-wave/kolegium/ai_writing_flow/deployment/backups/20250804_131201/test_local_kb_integration.py",
      "exists": true,
      "hits": [],
      "integration_points": [
        {
          "line": 14,
          "text": "os.environ[\"KNOWLEDGE_BASE_URL\"] = \"http://localhost:8082\""
        }
      ]
    },
    {
      "file": "/Users/hretheum/dev/bezrobocie/vector-wave/kolegium/ai_writing_flow/deployment/backups/20250804_131201/test_audience_tools_proper.py",
      "exists": true,
      "hits": [],
      "integration_points": []
    },
    {
      "file": "/Users/hretheum/dev/bezrobocie/vector-wave/kolegium/ai_writing_flow/deployment/backups/20250804_131201/test_structure.py",
      "exists": true,
      "hits": [],
      "integration_points": [
        {
          "line": 223,
          "text": "print(\"1. Install dependencies: pip install aiohttp structlog\")"
        }
      ]
    },
    {
      "file": "/Users/hretheum/dev/bezrobocie/vector-wave/kolegium/ai_writing_flow/deployment/backups/20250804_131201/performance_tests.py",
      "exists": true,
      "hits": [
        {
          "type": "directive_line",
          "start_line": 132,
          "end_line": 132,
          "snippet": "# Memory should not increase by more than 50MB",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 141,
          "end_line": 141,
          "snippet": "# Total memory increase should be reasonable",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 172,
          "end_line": 172,
          "snippet": "# This should fallback to file search quickly",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 180,
          "end_line": 180,
          "snippet": "# Should recover quickly via fallback",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 201,
          "end_line": 201,
          "snippet": "# Should fail immediately without network calls",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 212,
          "end_line": 212,
          "snippet": "# Circuit breaker should fail fast (<10ms)",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 328,
          "end_line": 328,
          "snippet": "# Should handle burst gracefully",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 376,
          "end_line": 376,
          "snippet": "# Should still complete in reasonable time",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 398,
          "end_line": 398,
          "snippet": "# Statistics should remain reasonable in size",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 403,
          "end_line": 403,
          "snippet": "assert len(adapter.stats.strategy_usage) == 1  # Should not grow indefinitely",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        }
      ],
      "integration_points": [
        {
          "line": 37,
          "text": "with patch('aiohttp.ClientSession.post') as mock_post:"
        },
        {
          "line": 67,
          "text": "with patch('aiohttp.ClientSession.post') as mock_post:"
        },
        {
          "line": 113,
          "text": "with patch('aiohttp.ClientSession.post') as mock_post:"
        },
        {
          "line": 167,
          "text": "with patch('aiohttp.ClientSession.post', side_effect=mock_post_side_effect):"
        },
        {
          "line": 229,
          "text": "with patch('aiohttp.ClientSession.post') as mock_post:"
        },
        {
          "line": 296,
          "text": "with patch('aiohttp.ClientSession.post') as mock_post:"
        },
        {
          "line": 347,
          "text": "with patch('aiohttp.ClientSession.post') as mock_post:"
        }
      ]
    },
    {
      "file": "/Users/hretheum/dev/bezrobocie/vector-wave/kolegium/ai_writing_flow/deployment/backups/20250804_131201/test_phase2_simplified.py",
      "exists": true,
      "hits": [
        {
          "type": "directive_line",
          "start_line": 104,
          "end_line": 104,
          "snippet": "# Test 1: Should stop execution method",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 106,
          "end_line": 106,
          "snippet": "assert should_stop == False  # Should not stop initially",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 112,
          "end_line": 112,
          "snippet": "assert should_stop == True  # Should stop after force stop",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 199,
          "end_line": 199,
          "snippet": "assert config.skip_research == True  # ORIGINAL should skip research",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 205,
          "end_line": 205,
          "snippet": "assert config.skip_research == False  # EXTERNAL should include research",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "required"
        },
        {
          "type": "directive_line",
          "start_line": 265,
          "end_line": 265,
          "snippet": "assert False, \"Should have failed\"",
          "values_preview": [
            "Should have failed"
          ],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 279,
          "end_line": 279,
          "snippet": "assert False, \"Should have failed\"",
          "values_preview": [
            "Should have failed"
          ],
          "priority_guess": "medium",
          "category_guess": "style"
        }
      ],
      "integration_points": []
    },
    {
      "file": "/Users/hretheum/dev/bezrobocie/vector-wave/kolegium/ai_writing_flow/deployment/backups/20250804_131201/test_tool_decorator.py",
      "exists": true,
      "hits": [],
      "integration_points": []
    },
    {
      "file": "/Users/hretheum/dev/bezrobocie/vector-wave/kolegium/ai_writing_flow/deployment/backups/20250804_131201/test_search_with_threshold.py",
      "exists": true,
      "hits": [],
      "integration_points": []
    },
    {
      "file": "/Users/hretheum/dev/bezrobocie/vector-wave/kolegium/ai_writing_flow/deployment/backups/20250804_131201/test_optimization_mock_performance.py",
      "exists": true,
      "hits": [
        {
          "type": "directive_line",
          "start_line": 7,
          "end_line": 7,
          "snippet": "mock implementations to avoid external dependencies.",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "forbidden"
        },
        {
          "type": "directive_line",
          "start_line": 731,
          "end_line": 731,
          "snippet": "consistency. Organizations must evaluate trade-offs between system complexity",
          "values_preview": [],
          "priority_guess": "high",
          "category_guess": "required"
        },
        {
          "type": "directive_line",
          "start_line": 810,
          "end_line": 810,
          "snippet": "\"\"\"Cloud computing security considerations require comprehensive understanding of shared responsibility models, data protection strategies, and compliance requirements. Organizations must implement multi-layered security approaches.\"\"\",",
          "values_preview": [
            "Cloud computing security considerations require comprehensive understanding of shared responsibility models, data protection strategies, and compliance requirements. Organizations must implement multi-layered security approaches."
          ],
          "priority_guess": "high",
          "category_guess": "required"
        },
        {
          "type": "directive_line",
          "start_line": 870,
          "end_line": 870,
          "snippet": "print(\"Using mock implementations to avoid external dependencies.\")",
          "values_preview": [
            "Using mock implementations to avoid external dependencies."
          ],
          "priority_guess": "medium",
          "category_guess": "forbidden"
        }
      ],
      "integration_points": []
    },
    {
      "file": "/Users/hretheum/dev/bezrobocie/vector-wave/kolegium/ai_writing_flow/deployment/backups/20250804_131201/test_actual_search.py",
      "exists": true,
      "hits": [],
      "integration_points": []
    },
    {
      "file": "/Users/hretheum/dev/bezrobocie/vector-wave/kolegium/ai_writing_flow/deployment/backups/20250804_131201/test_knowledge_integration.py",
      "exists": true,
      "hits": [
        {
          "type": "directive_line",
          "start_line": 57,
          "end_line": 57,
          "snippet": "# Test file search (should work even without KB)",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 80,
          "end_line": 80,
          "snippet": "# Should fallback to file search",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 134,
          "end_line": 134,
          "snippet": "# Import legacy tools (should work without errors)",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        }
      ],
      "integration_points": [
        {
          "line": 35,
          "text": "assert adapter.kb_api_url == \"http://localhost:8080\""
        },
        {
          "line": 42,
          "text": "kb_api_url=\"http://custom:9090\","
        },
        {
          "line": 46,
          "text": "assert adapter.kb_api_url == \"http://custom:9090\""
        },
        {
          "line": 72,
          "text": "kb_api_url=\"http://nonexistent:9999\","
        }
      ]
    },
    {
      "file": "/Users/hretheum/dev/bezrobocie/vector-wave/kolegium/ai_writing_flow/deployment/backups/20250804_131201/knowledge_config.py",
      "exists": true,
      "hits": [],
      "integration_points": [
        {
          "line": 19,
          "text": "KB_API_URL: str = os.getenv(\"KNOWLEDGE_BASE_URL\", \"http://localhost:8082\")"
        },
        {
          "line": 100,
          "text": "export KNOWLEDGE_BASE_URL=\"http://localhost:8082\""
        },
        {
          "line": 110,
          "text": "export KNOWLEDGE_BASE_URL=\"https://kb.vectorwave.dev\""
        }
      ]
    },
    {
      "file": "/Users/hretheum/dev/bezrobocie/vector-wave/kolegium/ai_writing_flow/deployment/backups/20250804_131201/test_listen_chain_validation.py",
      "exists": true,
      "hits": [
        {
          "type": "directive_line",
          "start_line": 76,
          "end_line": 76,
          "snippet": "assert next_method == \"align_audience\"  # Should continue to next step",
          "values_preview": [
            "align_audience"
          ],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 169,
          "end_line": 169,
          "snippet": "# Test with ORIGINAL content (should skip research)",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 174,
          "end_line": 174,
          "snippet": "assert should_execute == False  # Should skip due to config.skip_research=True",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 188,
          "end_line": 188,
          "snippet": "assert should_execute == False  # Should skip due to config.skip_style_validation=True",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 278,
          "end_line": 278,
          "snippet": "# Test 1: Critical step failure (should not continue)",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 292,
          "end_line": 292,
          "snippet": "# Test 2: Optional step failure (should continue)",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 303,
          "end_line": 303,
          "snippet": "# Test 3: Fallback used (should continue)",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 311,
          "end_line": 311,
          "snippet": "# Test 4: Non-critical step with no fallback (should continue with warning)",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        }
      ],
      "integration_points": []
    },
    {
      "file": "/Users/hretheum/dev/bezrobocie/vector-wave/kolegium/ai_writing_flow/deployment/backups/20250804_131201/test_comprehensive_profiling.py",
      "exists": true,
      "hits": [],
      "integration_points": []
    },
    {
      "file": "/Users/hretheum/dev/bezrobocie/vector-wave/kolegium/ai_writing_flow/deployment/backups/20250804_131201/test_phase1_complete.py",
      "exists": true,
      "hits": [
        {
          "type": "directive_line",
          "start_line": 118,
          "end_line": 118,
          "snippet": "# Simulate multiple calls to same method (should trigger detection)",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 166,
          "end_line": 166,
          "snippet": "# Complete it quickly (should not timeout)",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 345,
          "end_line": 345,
          "snippet": "return total_time < 5.0  # Should complete in under 5 seconds",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        }
      ],
      "integration_points": []
    },
    {
      "file": "/Users/hretheum/dev/bezrobocie/vector-wave/kolegium/ai_writing_flow/deployment/backups/20250804_131201/test_audience_tools.py",
      "exists": true,
      "hits": [],
      "integration_points": []
    },
    {
      "file": "/Users/hretheum/dev/bezrobocie/vector-wave/kolegium/ai_writing_flow/deployment/backups/20250804_131201/test_final_integration.py",
      "exists": true,
      "hits": [],
      "integration_points": []
    },
    {
      "file": "/Users/hretheum/dev/bezrobocie/vector-wave/kolegium/ai_writing_flow/deployment/backups/20250804_131201/test_kb_connectivity.py",
      "exists": true,
      "hits": [
        {
          "type": "directive_line",
          "start_line": 186,
          "end_line": 186,
          "snippet": "# Test search (should fallback to file search)",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        }
      ],
      "integration_points": [
        {
          "line": 23,
          "text": "import aiohttp"
        },
        {
          "line": 116,
          "text": "timeout = aiohttp.ClientTimeout(total=5.0)"
        },
        {
          "line": 117,
          "text": "async with aiohttp.ClientSession(timeout=timeout) as session:"
        },
        {
          "line": 128,
          "text": "except aiohttp.ClientConnectorError:"
        },
        {
          "line": 180,
          "text": "kb_api_url=\"http://localhost:9999\",  # Non-existent port"
        }
      ]
    },
    {
      "file": "/Users/hretheum/dev/bezrobocie/vector-wave/kolegium/ai_writing_flow/deployment/backups/20250804_131201/test_phase2_components.py",
      "exists": true,
      "hits": [
        {
          "type": "directive_line",
          "start_line": 39,
          "end_line": 39,
          "snippet": "assert config.skip_research == True  # ORIGINAL should skip research",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 54,
          "end_line": 54,
          "snippet": "assert config.skip_research == False  # EXTERNAL should include research",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "required"
        },
        {
          "type": "directive_line",
          "start_line": 87,
          "end_line": 87,
          "snippet": "assert False, \"Should have raised ValueError\"",
          "values_preview": [
            "Should have raised ValueError"
          ],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 132,
          "end_line": 132,
          "snippet": "assert False, \"Should have raised ValueError\"",
          "values_preview": [
            "Should have raised ValueError"
          ],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 145,
          "end_line": 145,
          "snippet": "assert False, \"Should have raised ValueError\"",
          "values_preview": [
            "Should have raised ValueError"
          ],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 159,
          "end_line": 159,
          "snippet": "assert False, \"Should have raised ValueError\"",
          "values_preview": [
            "Should have raised ValueError"
          ],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 161,
          "end_line": 161,
          "snippet": "assert \"Viral score must be 0-10\" in str(e)",
          "values_preview": [
            "Viral score must be 0-10"
          ],
          "priority_guess": "high",
          "category_guess": "required"
        },
        {
          "type": "directive_line",
          "start_line": 196,
          "end_line": 196,
          "snippet": "# Test 1: Should execute research for EXTERNAL content",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 206,
          "end_line": 206,
          "snippet": "print(\"✅ EXTERNAL content should execute research\")",
          "values_preview": [
            "✅ EXTERNAL content should execute research"
          ],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 208,
          "end_line": 208,
          "snippet": "# Test 2: Should skip research for ORIGINAL content",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 211,
          "end_line": 211,
          "snippet": "print(\"✅ ORIGINAL content should skip research\")",
          "values_preview": [
            "✅ ORIGINAL content should skip research"
          ],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 224,
          "end_line": 224,
          "snippet": "assert executor.should_execute_research(writing_state) == False  # Should be marked complete",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 258,
          "end_line": 258,
          "snippet": "# Test 1: Should execute audience alignment by default",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 269,
          "end_line": 269,
          "snippet": "print(\"✅ Should execute audience alignment by default\")",
          "values_preview": [
            "✅ Should execute audience alignment by default"
          ],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 288,
          "end_line": 288,
          "snippet": "# Blog should have higher depth level than Twitter",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 297,
          "end_line": 297,
          "snippet": "assert fallback_result.technical_founder_score > 0  # Should have default values",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 325,
          "end_line": 325,
          "snippet": "# Test 1: Should execute draft generation when no draft exists",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 339,
          "end_line": 339,
          "snippet": "print(\"✅ Should execute draft generation when no draft exists\")",
          "values_preview": [
            "✅ Should execute draft generation when no draft exists"
          ],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 371,
          "end_line": 371,
          "snippet": "assert checkpoint.review_required == True  # High viral score should require review",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "required"
        }
      ],
      "integration_points": []
    },
    {
      "file": "/Users/hretheum/dev/bezrobocie/vector-wave/kolegium/ai_writing_flow/deployment/backups/20250804_131201/test_comprehensive_integration.py",
      "exists": true,
      "hits": [
        {
          "type": "directive_line",
          "start_line": 153,
          "end_line": 153,
          "snippet": "# Should have either KB results or file content",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 168,
          "end_line": 168,
          "snippet": "assert len(result) > 100  # Should have substantial content",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 265,
          "end_line": 265,
          "snippet": "# All queries should succeed",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 386,
          "end_line": 386,
          "snippet": "# Should fallback gracefully",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 389,
          "end_line": 389,
          "snippet": "assert len(result.file_content) > 0  # Should have file fallback content",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 408,
          "end_line": 408,
          "snippet": "# First few requests should fail and trigger circuit breaker",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 417,
          "end_line": 417,
          "snippet": "# Circuit breaker should now be open",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 422,
          "end_line": 422,
          "snippet": "# Should have some failures recorded",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 456,
          "end_line": 456,
          "snippet": "# Should timeout quickly",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 487,
          "end_line": 487,
          "snippet": "# Should handle gracefully and fallback to file search",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 492,
          "end_line": 492,
          "snippet": "# Should fallback to file content",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 539,
          "end_line": 539,
          "snippet": "assert len(str(result)) > 100  # Should have substantial output",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 579,
          "end_line": 579,
          "snippet": "assert len(result) > 50  # Should have meaningful content",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 616,
          "end_line": 616,
          "snippet": "# Should track operations",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 645,
          "end_line": 645,
          "snippet": "# Should have recorded the error",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 667,
          "end_line": 667,
          "snippet": "# Basic configuration should be valid for testing",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        }
      ],
      "integration_points": [
        {
          "line": 24,
          "text": "import aiohttp"
        },
        {
          "line": 50,
          "text": "self.kb_url = \"http://localhost:8082\""
        },
        {
          "line": 192,
          "text": "self.kb_url = \"http://localhost:8082\""
        },
        {
          "line": 364,
          "text": "self.kb_url = \"http://localhost:8082\""
        },
        {
          "line": 374,
          "text": "kb_api_url=\"http://localhost:9999\",  # Non-existent port"
        },
        {
          "line": 401,
          "text": "kb_api_url=\"http://localhost:9999\",  # Will fail"
        },
        {
          "line": 588,
          "text": "self.kb_url = \"http://localhost:8082\""
        },
        {
          "line": 629,
          "text": "kb_api_url=\"http://localhost:9999\",  # Will fail"
        }
      ]
    },
    {
      "file": "/Users/hretheum/dev/bezrobocie/vector-wave/kolegium/ai_writing_flow/deployment/backups/20250804_131201/test_live_kb_integration.py",
      "exists": true,
      "hits": [
        {
          "type": "directive_line",
          "start_line": 73,
          "end_line": 73,
          "snippet": "# Should have either KB results or file content (or both)",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 76,
          "end_line": 76,
          "snippet": "# If KB is available, should have used HYBRID strategy",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 102,
          "end_line": 102,
          "snippet": "# Should have file content if docs exist",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 172,
          "end_line": 172,
          "snippet": "# Should find agent-related content",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 217,
          "end_line": 217,
          "snippet": "# First request should timeout",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 224,
          "end_line": 224,
          "snippet": "# Second request should timeout and open circuit breaker",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 231,
          "end_line": 231,
          "snippet": "# Third request should fail immediately",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 240,
          "end_line": 240,
          "snippet": "# Should fail very quickly",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        }
      ],
      "integration_points": [
        {
          "line": 8,
          "text": "import aiohttp"
        },
        {
          "line": 29,
          "text": "kb_api_url=\"http://localhost:8080\","
        },
        {
          "line": 53,
          "text": "except aiohttp.ClientConnectionError:"
        }
      ]
    },
    {
      "file": "/Users/hretheum/dev/bezrobocie/vector-wave/kolegium/ai_writing_flow/deployment/backups/20250804_131201/run_scaling_tests.py",
      "exists": true,
      "hits": [],
      "integration_points": []
    },
    {
      "file": "/Users/hretheum/dev/bezrobocie/vector-wave/kolegium/ai_writing_flow/deployment/backups/20250804_131201/test_flow_inputs.py",
      "exists": true,
      "hits": [
        {
          "type": "directive_line",
          "start_line": 57,
          "end_line": 57,
          "snippet": "# Test 3: Invalid viral score (should raise ValidationError)",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 63,
          "end_line": 63,
          "snippet": "viral_score=15.0  # Invalid - should be 0-10",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 65,
          "end_line": 65,
          "snippet": "assert False, \"Should have raised ValidationError\"",
          "values_preview": [
            "Should have raised ValidationError"
          ],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 69,
          "end_line": 69,
          "snippet": "# Test 4: Empty topic title (should raise ValidationError)",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 76,
          "end_line": 76,
          "snippet": "assert False, \"Should have raised ValidationError\"",
          "values_preview": [
            "Should have raised ValidationError"
          ],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 80,
          "end_line": 80,
          "snippet": "# Test 5: Empty platform (should raise ValidationError)",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 87,
          "end_line": 87,
          "snippet": "assert False, \"Should have raised ValidationError\"",
          "values_preview": [
            "Should have raised ValidationError"
          ],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 133,
          "end_line": 133,
          "snippet": "assert False, \"Should have raised ValueError\"",
          "values_preview": [
            "Should have raised ValueError"
          ],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 204,
          "end_line": 204,
          "snippet": "assert False, \"Should have raised ValueError\"",
          "values_preview": [
            "Should have raised ValueError"
          ],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 212,
          "end_line": 212,
          "snippet": "assert False, \"Should have raised ValueError\"",
          "values_preview": [
            "Should have raised ValueError"
          ],
          "priority_guess": "medium",
          "category_guess": "style"
        }
      ],
      "integration_points": []
    },
    {
      "file": "/Users/hretheum/dev/bezrobocie/vector-wave/kolegium/ai_writing_flow/deployment/backups/20250804_131201/test_audience_crew_direct.py",
      "exists": true,
      "hits": [],
      "integration_points": [
        {
          "line": 23,
          "text": "editorial_recommendations = \"Focus on practical examples and ROI\""
        },
        {
          "line": 31,
          "text": "editorial_recommendations=editorial_recommendations"
        }
      ]
    },
    {
      "file": "/Users/hretheum/dev/bezrobocie/vector-wave/kolegium/ai_writing_flow/deployment/backups/20250804_131201/test_phase2_complete_integration.py",
      "exists": true,
      "hits": [
        {
          "type": "directive_line",
          "start_line": 163,
          "end_line": 163,
          "snippet": "# Test 1: Style validation should execute",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 166,
          "end_line": 166,
          "snippet": "print(\"✅ Style validation should execute for draft with violations\")",
          "values_preview": [
            "✅ Style validation should execute for draft with violations"
          ],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 171,
          "end_line": 171,
          "snippet": "assert result.is_compliant == False  # Should fail due to forbidden phrases",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "forbidden"
        },
        {
          "type": "directive_line",
          "start_line": 230,
          "end_line": 230,
          "snippet": "According to industry reports, the market has shown significant growth in the past quarter. Business leaders should consider strategic investments in emerging technologies.",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 234,
          "end_line": 234,
          "snippet": "Based on this analysis, organizations should focus on:",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        }
      ],
      "integration_points": []
    },
    {
      "file": "/Users/hretheum/dev/bezrobocie/vector-wave/kolegium/ai_writing_flow/deployment/backups/20250804_131201/test_production_integration.py",
      "exists": true,
      "hits": [],
      "integration_points": [
        {
          "line": 34,
          "text": "self.kb_url = \"http://localhost:8082\""
        },
        {
          "line": 226,
          "text": "kb_api_url=\"http://localhost:9999\",  # Non-existent"
        }
      ]
    },
    {
      "file": "/Users/hretheum/dev/bezrobocie/vector-wave/kolegium/ai_writing_flow/deployment/backups/20250804_131201/test_knowledge_integration_simplified.py",
      "exists": true,
      "hits": [
        {
          "type": "directive_line",
          "start_line": 88,
          "end_line": 88,
          "snippet": "# Second failure - should open circuit breaker",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 94,
          "end_line": 94,
          "snippet": "# Third attempt should fail immediately due to circuit breaker",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 182,
          "end_line": 182,
          "snippet": "# Should also have KB results for enrichment",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 236,
          "end_line": 236,
          "snippet": "# Failures 1 and 2 - circuit breaker should remain closed",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 242,
          "end_line": 242,
          "snippet": "# Failure 3 - should open circuit breaker",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 378,
          "end_line": 378,
          "snippet": "# Should complete in reasonable time (less than 2 seconds for 10 requests)",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 508,
          "end_line": 508,
          "snippet": "# KnowledgeResponse should be convertible to string",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        }
      ],
      "integration_points": [
        {
          "line": 8,
          "text": "import aiohttp"
        },
        {
          "line": 51,
          "text": "kb_api_url=\"http://localhost:8080\","
        },
        {
          "line": 55,
          "text": "with patch('aiohttp.ClientSession.post') as mock_post:"
        },
        {
          "line": 76,
          "text": "kb_api_url=\"http://localhost:8080\","
        },
        {
          "line": 80,
          "text": "with patch('aiohttp.ClientSession.post', side_effect=aiohttp.ClientConnectionError(\"Connection failed\")):"
        },
        {
          "line": 110,
          "text": "with patch('aiohttp.ClientSession.post', side_effect=aiohttp.ClientConnectionError()):"
        },
        {
          "line": 147,
          "text": "with patch('aiohttp.ClientSession.post') as mock_post:"
        },
        {
          "line": 170,
          "text": "with patch('aiohttp.ClientSession.post') as mock_post:"
        },
        {
          "line": 194,
          "text": "with patch('aiohttp.ClientSession.post') as mock_post:"
        },
        {
          "line": 217,
          "text": "with patch('aiohttp.ClientSession.post', side_effect=aiohttp.ClientConnectionError()):"
        },
        {
          "line": 234,
          "text": "with patch('aiohttp.ClientSession.post', side_effect=aiohttp.ClientConnectionError()):"
        },
        {
          "line": 271,
          "text": "with patch('aiohttp.ClientSession.post', side_effect=aiohttp.ClientConnectionError()):"
        },
        {
          "line": 279,
          "text": "with patch('aiohttp.ClientSession.post') as mock_post:"
        },
        {
          "line": 303,
          "text": "with patch('aiohttp.ClientSession.post') as mock_post:"
        },
        {
          "line": 327,
          "text": "with patch('aiohttp.ClientSession.post') as mock_post:"
        },
        {
          "line": 358,
          "text": "with patch('aiohttp.ClientSession.post') as mock_post:"
        },
        {
          "line": 426,
          "text": "with patch('aiohttp.ClientSession.post') as mock_post:"
        },
        {
          "line": 482,
          "text": "with patch('aiohttp.ClientSession.post') as mock_post:"
        },
        {
          "line": 547,
          "text": "'KNOWLEDGE_BASE_URL': 'http://custom:9090',"
        },
        {
          "line": 553,
          "text": "assert adapter.kb_api_url == 'http://custom:9090'"
        }
      ]
    },
    {
      "file": "/Users/hretheum/dev/bezrobocie/vector-wave/kolegium/ai_writing_flow/deployment/backups/20250804_131201/test_initialize_basic.py",
      "exists": true,
      "hits": [],
      "integration_points": []
    },
    {
      "file": "/Users/hretheum/dev/bezrobocie/vector-wave/kolegium/ai_writing_flow/deployment/backups/20250804_131201/test_crewai_agent_integration.py",
      "exists": true,
      "hits": [
        {
          "type": "directive_line",
          "start_line": 76,
          "end_line": 76,
          "snippet": "assert len(result_str) > 500, \"Result should be comprehensive\"",
          "values_preview": [
            "Result should be comprehensive"
          ],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 77,
          "end_line": 77,
          "snippet": "assert \"agent\" in result_str.lower(), \"Should contain agent information\"",
          "values_preview": [
            "agent",
            "Should contain agent information"
          ],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 156,
          "end_line": 156,
          "snippet": "assert len(result_str) > 800, \"Collaborative result should be extensive\"",
          "values_preview": [
            "Collaborative result should be extensive"
          ],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 157,
          "end_line": 157,
          "snippet": "assert \"agent\" in result_str.lower(), \"Should contain agent information\"",
          "values_preview": [
            "agent",
            "Should contain agent information"
          ],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 158,
          "end_line": 158,
          "snippet": "assert any(word in result_str.lower() for word in [\"troubleshoot\", \"issue\", \"problem\"]), \"Should contain troubleshooting info\"",
          "values_preview": [
            "troubleshoot",
            "issue",
            "problem",
            "Should contain troubleshooting info"
          ],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 207,
          "end_line": 207,
          "snippet": "# Should complete even with potential tool errors",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 208,
          "end_line": 208,
          "snippet": "assert len(str(result)) > 100, \"Should provide some result even with errors\"",
          "values_preview": [
            "Should provide some result even with errors"
          ],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 269,
          "end_line": 269,
          "snippet": "# Performance should be reasonable",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 271,
          "end_line": 271,
          "snippet": "assert len(str(result)) > 200, \"Should have substantial results\"",
          "values_preview": [
            "Should have substantial results"
          ],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 346,
          "end_line": 346,
          "snippet": "assert len(result_str) > 600, \"Tutorial should be comprehensive\"",
          "values_preview": [
            "Tutorial should be comprehensive"
          ],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 347,
          "end_line": 347,
          "snippet": "assert \"agent\" in result_str.lower(), \"Should explain agents\"",
          "values_preview": [
            "agent",
            "Should explain agents"
          ],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 348,
          "end_line": 348,
          "snippet": "assert any(word in result_str for word in [\"example\", \"code\", \"```\"]), \"Should include examples\"",
          "values_preview": [
            "example",
            "code",
            "```",
            "Should include examples"
          ],
          "priority_guess": "medium",
          "category_guess": "required"
        },
        {
          "type": "directive_line",
          "start_line": 414,
          "end_line": 414,
          "snippet": "assert len(result_str) > 400, \"Support guide should be detailed\"",
          "values_preview": [
            "Support guide should be detailed"
          ],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 415,
          "end_line": 415,
          "snippet": "assert any(word in result_str.lower() for word in [\"issue\", \"problem\", \"solution\"]), \"Should address issues\"",
          "values_preview": [
            "issue",
            "problem",
            "solution",
            "Should address issues"
          ],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 416,
          "end_line": 416,
          "snippet": "assert any(word in result_str.lower() for word in [\"install\", \"memory\"]), \"Should cover common problems\"",
          "values_preview": [
            "install",
            "memory",
            "Should cover common problems"
          ],
          "priority_guess": "medium",
          "category_guess": "style"
        }
      ],
      "integration_points": []
    },
    {
      "file": "/Users/hretheum/dev/bezrobocie/vector-wave/kolegium/ai_writing_flow/deployment/backups/20250804_131201/test_inputs_only.py",
      "exists": true,
      "hits": [
        {
          "type": "directive_line",
          "start_line": 43,
          "end_line": 43,
          "snippet": "# Test 2: Invalid viral score (should raise ValidationError)",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 49,
          "end_line": 49,
          "snippet": "viral_score=15.0  # Invalid - should be 0-10",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 51,
          "end_line": 51,
          "snippet": "print(\"❌ Should have raised ValidationError for invalid viral_score\")",
          "values_preview": [
            "❌ Should have raised ValidationError for invalid viral_score"
          ],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 56,
          "end_line": 56,
          "snippet": "# Test 3: Empty topic title (should raise ValidationError)",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 63,
          "end_line": 63,
          "snippet": "print(\"❌ Should have raised ValidationError for empty topic_title\")",
          "values_preview": [
            "❌ Should have raised ValidationError for empty topic_title"
          ],
          "priority_guess": "medium",
          "category_guess": "style"
        }
      ],
      "integration_points": []
    },
    {
      "file": "/Users/hretheum/dev/bezrobocie/vector-wave/kolegium/ai_writing_flow/deployment/backups/20250804_131201/tests/test_enhanced_knowledge_tools.py",
      "exists": true,
      "hits": [
        {
          "type": "directive_line",
          "start_line": 170,
          "end_line": 170,
          "snippet": "# Should search for agent-specific patterns",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "pattern"
        },
        {
          "type": "directive_line",
          "start_line": 245,
          "end_line": 245,
          "snippet": "# Should search for installation troubleshooting",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 306,
          "end_line": 306,
          "snippet": "# Should maintain same interface",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 315,
          "end_line": 315,
          "snippet": "# Should return same format as before",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 325,
          "end_line": 325,
          "snippet": "# Should return same format as before",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 409,
          "end_line": 409,
          "snippet": "# Performance info should be included",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "required"
        }
      ],
      "integration_points": []
    },
    {
      "file": "/Users/hretheum/dev/bezrobocie/vector-wave/kolegium/ai_writing_flow/deployment/backups/20250804_131201/tests/test_error_scenarios.py",
      "exists": true,
      "hits": [
        {
          "type": "directive_line",
          "start_line": 139,
          "end_line": 139,
          "snippet": "viral_score=15.0  # Should be 0-10",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 149,
          "end_line": 149,
          "snippet": "viral_score=-1.0  # Should be >= 0",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 247,
          "end_line": 247,
          "snippet": "# Try backward transition (should fail)",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 275,
          "end_line": 275,
          "snippet": "# Complete should detect timeout",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 282,
          "end_line": 282,
          "snippet": "# Should be marked as failed due to timeout",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 336,
          "end_line": 336,
          "snippet": "# At least some operations should succeed (thread-safe operations)",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 339,
          "end_line": 339,
          "snippet": "assert success_count >= 1  # At least one should succeed",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 345,
          "end_line": 345,
          "snippet": "# The limit is 20 per stage, so we should be able to execute some and then hit the limit",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 361,
          "end_line": 361,
          "snippet": "# Should have executed some operations before hitting the limit",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 362,
          "end_line": 362,
          "snippet": "assert executed_count > 0, \"Should have executed at least some operations\"",
          "values_preview": [
            "Should have executed at least some operations"
          ],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 390,
          "end_line": 390,
          "snippet": "# Circuit should now be open",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 393,
          "end_line": 393,
          "snippet": "# Next call should fail with CircuitBreakerError",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 416,
          "end_line": 416,
          "snippet": "# Next call should attempt recovery (half-open)",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 421,
          "end_line": 421,
          "snippet": "# Circuit should be open again",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 446,
          "end_line": 446,
          "snippet": "assert not cb2.is_open  # Second CB should still be closed",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 448,
          "end_line": 448,
          "snippet": "# Second circuit breaker should still work",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 451,
          "end_line": 451,
          "snippet": "assert not cb2.is_open  # Should remain closed",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 475,
          "end_line": 475,
          "snippet": "# Next call should succeed and close circuit",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 501,
          "end_line": 501,
          "snippet": "# Should fail after max attempts",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 507,
          "end_line": 507,
          "snippet": "# Verify retry count was tracked (should be 2 attempts total)",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 521,
          "end_line": 521,
          "snippet": "raise TypeError(\"Wrong type - should not retry\")",
          "values_preview": [
            "Wrong type - should not retry"
          ],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 523,
          "end_line": 523,
          "snippet": "# Should fail immediately without retries",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 527,
          "end_line": 527,
          "snippet": "assert str(exc_info.value) == \"Wrong type - should not retry\"",
          "values_preview": [
            "Wrong type - should not retry"
          ],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 529,
          "end_line": 529,
          "snippet": "# Should not have retried - non-retryable exceptions don't increment retry count",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 549,
          "end_line": 549,
          "snippet": "# Should not retry permanent errors",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 554,
          "end_line": 554,
          "snippet": "# Should not have retried - custom should_retry returned False for \"Permanent failure\"",
          "values_preview": [
            "Permanent failure"
          ],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 564,
          "end_line": 564,
          "snippet": "raise RuntimeError(\"Should not retry due to global limit\")",
          "values_preview": [
            "Should not retry due to global limit"
          ],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 566,
          "end_line": 566,
          "snippet": "# Should fail immediately due to global limit",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 570,
          "end_line": 570,
          "snippet": "# Retry count might increase by 1 due to the failed attempt, but should not retry",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 572,
          "end_line": 572,
          "snippet": "# Should be 10 (original) or 11 (original + 1 failed attempt)",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 587,
          "end_line": 587,
          "snippet": "# Should fail after retries",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 612,
          "end_line": 612,
          "snippet": "# Use smaller numbers to avoid hitting loop prevention limits",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "forbidden"
        },
        {
          "type": "directive_line",
          "start_line": 616,
          "end_line": 616,
          "snippet": "for i in range(10):  # Create fewer executions to avoid loop limits",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "forbidden"
        },
        {
          "type": "directive_line",
          "start_line": 647,
          "end_line": 647,
          "snippet": "# Reduce operations per thread to avoid loop prevention",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "forbidden"
        },
        {
          "type": "directive_line",
          "start_line": 707,
          "end_line": 707,
          "snippet": "# System should handle open circuit gracefully",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 737,
          "end_line": 737,
          "snippet": "# Should have some successes and/or some failures (intermittent behavior)",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 808,
          "end_line": 808,
          "snippet": "# This should trigger: retry -> circuit breaker -> final failure",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 836,
          "end_line": 836,
          "snippet": "# First attempt should fail and trip circuit breaker",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        }
      ],
      "integration_points": [
        {
          "line": 49,
          "text": "editorial_recommendations: str = Field(default=\"\", description=\"Editorial guidance\")"
        }
      ]
    },
    {
      "file": "/Users/hretheum/dev/bezrobocie/vector-wave/kolegium/ai_writing_flow/deployment/backups/20250804_131201/tests/test_scaling_behavior_basic.py",
      "exists": true,
      "hits": [
        {
          "type": "directive_line",
          "start_line": 294,
          "end_line": 294,
          "snippet": "assert metrics.throughput > 0, \"Throughput should be positive\"",
          "values_preview": [
            "Throughput should be positive"
          ],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 295,
          "end_line": 295,
          "snippet": "assert metrics.execution_time > 0, \"Execution time should be positive\"",
          "values_preview": [
            "Execution time should be positive"
          ],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 341,
          "end_line": 341,
          "snippet": "# Validate memory scaling is predictable (should increase linearly)",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 374,
          "end_line": 374,
          "snippet": "# At higher loads, we should find bottlenecks",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 379,
          "end_line": 379,
          "snippet": "\"Should either detect bottleneck or maintain efficiency at high load\"",
          "values_preview": [
            "Should either detect bottleneck or maintain efficiency at high load"
          ],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 388,
          "end_line": 388,
          "snippet": "# Efficiency should be reasonable (>70% for sustainable load)",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 393,
          "end_line": 393,
          "snippet": "# Success rate should remain high",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 401,
          "end_line": 401,
          "snippet": "\"Overall scaling efficiency should be >75%\"",
          "values_preview": [
            "Overall scaling efficiency should be >75%"
          ],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 416,
          "end_line": 416,
          "snippet": "assert recommended_capacity >= 1, \"Should recommend at least 1 flow capacity\"",
          "values_preview": [
            "Should recommend at least 1 flow capacity"
          ],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 417,
          "end_line": 417,
          "snippet": "assert recommended_capacity <= 8, \"Recommended capacity should be reasonable\"",
          "values_preview": [
            "Recommended capacity should be reasonable"
          ],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 418,
          "end_line": 418,
          "snippet": "assert peak_throughput > 0, \"Peak throughput should be positive\"",
          "values_preview": [
            "Peak throughput should be positive"
          ],
          "priority_guess": "medium",
          "category_guess": "style"
        }
      ],
      "integration_points": []
    },
    {
      "file": "/Users/hretheum/dev/bezrobocie/vector-wave/kolegium/ai_writing_flow/deployment/backups/20250804_131201/tests/test_flow_control_state_complete.py",
      "exists": true,
      "hits": [
        {
          "type": "directive_line",
          "start_line": 157,
          "end_line": 157,
          "snippet": "# Next attempt should fail",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 171,
          "end_line": 171,
          "snippet": "# (bypassing the normal transition method to avoid execution limits)",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "forbidden"
        },
        {
          "type": "directive_line",
          "start_line": 174,
          "end_line": 174,
          "snippet": "# Create dummy transitions with varied stages to avoid execution limit",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "forbidden"
        },
        {
          "type": "directive_line",
          "start_line": 197,
          "end_line": 197,
          "snippet": "# Now make a real transition which should trigger trimming",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 202,
          "end_line": 202,
          "snippet": "# After trimming, history should be reduced to MAX_HISTORY_SIZE//2",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 318,
          "end_line": 318,
          "snippet": "# Success should reset failures",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 345,
          "end_line": 345,
          "snippet": "# Should not attempt recovery immediately",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 354,
          "end_line": 354,
          "snippet": "# Now should attempt recovery",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 413,
          "end_line": 413,
          "snippet": "# Should have exactly 1000 retries (10 threads * 100 increments)",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 472,
          "end_line": 472,
          "snippet": "# Should detect the loop pattern",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "pattern"
        },
        {
          "type": "directive_line",
          "start_line": 475,
          "end_line": 475,
          "snippet": "# With our loop, it should detect something",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 477,
          "end_line": 477,
          "snippet": "# We created a clear loop pattern, so warnings should be found",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "pattern"
        },
        {
          "type": "directive_line",
          "start_line": 526,
          "end_line": 526,
          "snippet": "assert duration < 1.0  # Should be less than 1 second",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 532,
          "end_line": 532,
          "snippet": "# Initially should be start time",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 535,
          "end_line": 535,
          "snippet": "# After transition, should be transition time",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 557,
          "end_line": 557,
          "snippet": "# Should handle long reasons without issues",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 571,
          "end_line": 571,
          "snippet": "# Should return empty dict for now",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 608,
          "end_line": 608,
          "snippet": "# Should complete transitions quickly",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        }
      ],
      "integration_points": []
    },
    {
      "file": "/Users/hretheum/dev/bezrobocie/vector-wave/kolegium/ai_writing_flow/deployment/backups/20250804_131201/tests/test_heavy_load_standalone.py",
      "exists": true,
      "hits": [
        {
          "type": "directive_line",
          "start_line": 756,
          "end_line": 756,
          "snippet": "# CPU usage should have been elevated during test",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 944,
          "end_line": 944,
          "snippet": "assert circuit_breaker_activated, \"Circuit breaker should have activated with high failure rate\"",
          "values_preview": [
            "Circuit breaker should have activated with high failure rate"
          ],
          "priority_guess": "medium",
          "category_guess": "style"
        }
      ],
      "integration_points": []
    },
    {
      "file": "/Users/hretheum/dev/bezrobocie/vector-wave/kolegium/ai_writing_flow/deployment/backups/20250804_131201/tests/test_resource_contention_basic.py",
      "exists": true,
      "hits": [
        {
          "type": "directive_line",
          "start_line": 332,
          "end_line": 332,
          "snippet": "assert len(results) == len(simulators), \"All CPU workloads should complete\"",
          "values_preview": [
            "All CPU workloads should complete"
          ],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 335,
          "end_line": 335,
          "snippet": "# Check fairness - no worker should be starved",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 382,
          "end_line": 382,
          "snippet": "assert len(results) == 4, \"All memory workloads should complete\"",
          "values_preview": [
            "All memory workloads should complete"
          ],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 420,
          "end_line": 420,
          "snippet": "assert len(results) == 6, \"All I/O workloads should complete\"",
          "values_preview": [
            "All I/O workloads should complete"
          ],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 517,
          "end_line": 517,
          "snippet": "assert len(results) == 8, \"All mixed workloads should complete\"",
          "values_preview": [
            "All mixed workloads should complete"
          ],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 519,
          "end_line": 519,
          "snippet": "# Resource usage should be significant but manageable",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 523,
          "end_line": 523,
          "snippet": "# System should handle mixed load without critical issues",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        }
      ],
      "integration_points": []
    },
    {
      "file": "/Users/hretheum/dev/bezrobocie/vector-wave/kolegium/ai_writing_flow/deployment/backups/20250804_131201/tests/test_resource_contention.py",
      "exists": true,
      "hits": [
        {
          "type": "directive_line",
          "start_line": 359,
          "end_line": 359,
          "snippet": "assert len(results) == 5, \"All flows should complete\"",
          "values_preview": [
            "All flows should complete"
          ],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 400,
          "end_line": 400,
          "snippet": "assert len(results) == len(executors), \"All CPU-intensive flows should complete\"",
          "values_preview": [
            "All CPU-intensive flows should complete"
          ],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 403,
          "end_line": 403,
          "snippet": "# Check for fair CPU scheduling (no single flow should dominate)",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 408,
          "end_line": 408,
          "snippet": "# Execution times should be reasonably similar (within 2x factor)",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 440,
          "end_line": 440,
          "snippet": "assert len(results) == 8, \"All I/O flows should complete\"",
          "values_preview": [
            "All I/O flows should complete"
          ],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 465,
          "end_line": 465,
          "snippet": "# Simulate state operations that require locking",
          "values_preview": [],
          "priority_guess": "low",
          "category_guess": "required"
        },
        {
          "type": "directive_line",
          "start_line": 514,
          "end_line": 514,
          "snippet": "assert len(contention_results) == 10, \"All threads should complete successfully\"",
          "values_preview": [
            "All threads should complete successfully"
          ],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 621,
          "end_line": 621,
          "snippet": "assert len(results) == 8, \"All mixed workload flows should complete\"",
          "values_preview": [
            "All mixed workload flows should complete"
          ],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 623,
          "end_line": 623,
          "snippet": "# Resource usage should be significant but not excessive",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 631,
          "end_line": 631,
          "snippet": "# Performance should degrade gracefully",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 666,
          "end_line": 666,
          "snippet": "# Execute flow (will fail due to missing CrewAI, but should handle gracefully)",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 698,
          "end_line": 698,
          "snippet": "assert len(results) == 4, \"All V2 flows should attempt execution\"",
          "values_preview": [
            "All V2 flows should attempt execution"
          ],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 700,
          "end_line": 700,
          "snippet": "# Flows should fail gracefully, not crash",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 704,
          "end_line": 704,
          "snippet": "# Resource usage should be reasonable",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 801,
          "end_line": 801,
          "snippet": "# At least one thread should complete or timeout gracefully",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 805,
          "end_line": 805,
          "snippet": "# Deadlock detector should identify potential issues",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 865,
          "end_line": 865,
          "snippet": "# Performance should degrade under pressure, but not excessively",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 869,
          "end_line": 869,
          "snippet": "# High resource usage should be detected",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 872,
          "end_line": 872,
          "snippet": "# System should detect contention patterns",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "pattern"
        },
        {
          "type": "directive_line",
          "start_line": 940,
          "end_line": 940,
          "snippet": "# Memory should be mostly reclaimed after cleanup",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 966,
          "end_line": 966,
          "snippet": "# Should detect file handle growth",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        }
      ],
      "integration_points": []
    },
    {
      "file": "/Users/hretheum/dev/bezrobocie/vector-wave/kolegium/ai_writing_flow/deployment/backups/20250804_131201/tests/test_concurrent_execution.py",
      "exists": true,
      "hits": [
        {
          "type": "directive_line",
          "start_line": 125,
          "end_line": 125,
          "snippet": "# Verify isolation - each flow should have unique execution_id",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 168,
          "end_line": 168,
          "snippet": "# Verify thread safety - at least one should succeed",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 217,
          "end_line": 217,
          "snippet": "assert len(retry_results) >= 1  # At least some should succeed",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 267,
          "end_line": 267,
          "snippet": "assert len(cb_errors) >= 3   # Failed operations should be recorded",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 294,
          "end_line": 294,
          "snippet": "# Only try transition once per thread to avoid invalid transitions",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "forbidden"
        },
        {
          "type": "directive_line",
          "start_line": 370,
          "end_line": 370,
          "snippet": "# Verify thread safety - at least some operations should succeed",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 373,
          "end_line": 373,
          "snippet": "# Stage should be completed successfully",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 642,
          "end_line": 642,
          "snippet": "# Verify flows accessed the counter (values should be reasonable)",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        }
      ],
      "integration_points": []
    },
    {
      "file": "/Users/hretheum/dev/bezrobocie/vector-wave/kolegium/ai_writing_flow/deployment/backups/20250804_131201/tests/test_scaling_behavior.py",
      "exists": true,
      "hits": [
        {
          "type": "directive_line",
          "start_line": 369,
          "end_line": 369,
          "snippet": "# Memory should scale sub-linearly (growth rate < 1.5)",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 417,
          "end_line": 417,
          "snippet": "# CPU should scale reasonably (not > 95% until high flow counts)",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 483,
          "end_line": 483,
          "snippet": "# Should detect performance issues at high loads",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 571,
          "end_line": 571,
          "snippet": "# Efficiency should not degrade significantly",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 608,
          "end_line": 608,
          "snippet": "# Resource efficiency should not collapse",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        }
      ],
      "integration_points": [
        {
          "line": 174,
          "text": "kb_api_url=f\"http://localhost:808{i % 3 + 2}\",  # Distribute across mock endpoints"
        },
        {
          "line": 263,
          "text": "with patch('aiohttp.ClientSession.post') as mock_post:"
        },
        {
          "line": 345,
          "text": "with patch('aiohttp.ClientSession.post') as mock_post:"
        },
        {
          "line": 440,
          "text": "with patch('aiohttp.ClientSession.post') as mock_post:"
        },
        {
          "line": 502,
          "text": "with patch('aiohttp.ClientSession.post') as mock_post:"
        },
        {
          "line": 544,
          "text": "with patch('aiohttp.ClientSession.post') as mock_post:"
        },
        {
          "line": 590,
          "text": "with patch('aiohttp.ClientSession.post') as mock_post:"
        },
        {
          "line": 641,
          "text": "with patch('aiohttp.ClientSession.post') as mock_post:"
        }
      ]
    },
    {
      "file": "/Users/hretheum/dev/bezrobocie/vector-wave/kolegium/ai_writing_flow/deployment/backups/20250804_131201/tests/test_api_models.py",
      "exists": true,
      "hits": [
        {
          "type": "directive_line",
          "start_line": 12,
          "end_line": 12,
          "snippet": "# Define models inline to avoid circular imports",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "forbidden"
        },
        {
          "type": "directive_line",
          "start_line": 137,
          "end_line": 137,
          "snippet": "\"viral_score\": \"invalid\"  # Should be float",
          "values_preview": [
            "viral_score",
            "invalid"
          ],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 276,
          "end_line": 276,
          "snippet": "\"progress_percent\": \"invalid\"  # Should be float",
          "values_preview": [
            "progress_percent",
            "invalid"
          ],
          "priority_guess": "medium",
          "category_guess": "style"
        }
      ],
      "integration_points": [
        {
          "line": 25,
          "text": "editorial_recommendations: str = Field(default=\"\", description=\"Editorial guidance\")"
        },
        {
          "line": 98,
          "text": "\"editorial_recommendations\": \"Focus on technical depth\","
        },
        {
          "line": 113,
          "text": "assert request.editorial_recommendations == \"Focus on technical depth\""
        }
      ]
    },
    {
      "file": "/Users/hretheum/dev/bezrobocie/vector-wave/kolegium/ai_writing_flow/deployment/backups/20250804_131201/tests/__init__.py",
      "exists": true,
      "hits": [],
      "integration_points": []
    },
    {
      "file": "/Users/hretheum/dev/bezrobocie/vector-wave/kolegium/ai_writing_flow/deployment/backups/20250804_131201/tests/test_flow_integration.py",
      "exists": true,
      "hits": [
        {
          "type": "directive_line",
          "start_line": 148,
          "end_line": 148,
          "snippet": "# Circuit should now be open",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 153,
          "end_line": 153,
          "snippet": "# Subsequent calls should fail fast",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 172,
          "end_line": 172,
          "snippet": "# Try to start research stage - should skip",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 175,
          "end_line": 175,
          "snippet": "# Should return skipped execution",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 216,
          "end_line": 216,
          "snippet": "# Should be marked as failed due to timeout",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 329,
          "end_line": 329,
          "snippet": "# Execute should handle failure gracefully",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 370,
          "end_line": 370,
          "snippet": "# Execute only a few key stages to avoid complexity",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "forbidden"
        },
        {
          "type": "directive_line",
          "start_line": 549,
          "end_line": 549,
          "snippet": "stage_limit = 5  # Much smaller to avoid hitting global limits",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "forbidden"
        },
        {
          "type": "directive_line",
          "start_line": 589,
          "end_line": 589,
          "snippet": "# Third execution should be blocked due to stage limit",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 621,
          "end_line": 621,
          "snippet": "# Verify proper ordering (each stage should come before its successors)",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 662,
          "end_line": 662,
          "snippet": "# Should still be marked as complete",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 665,
          "end_line": 665,
          "snippet": "# Result should be stored",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 701,
          "end_line": 701,
          "snippet": "# Use much smaller numbers to avoid hitting loop prevention limits",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "forbidden"
        },
        {
          "type": "directive_line",
          "start_line": 702,
          "end_line": 702,
          "snippet": "iterations = 10  # Much smaller to avoid loop prevention",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "forbidden"
        }
      ],
      "integration_points": []
    },
    {
      "file": "/Users/hretheum/dev/bezrobocie/vector-wave/kolegium/ai_writing_flow/deployment/backups/20250804_131201/tests/test_10_concurrent_flows_simplified.py",
      "exists": true,
      "hits": [
        {
          "type": "directive_line",
          "start_line": 621,
          "end_line": 621,
          "snippet": "# Validate no issues (mocks should handle everything)",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 689,
          "end_line": 689,
          "snippet": "assert result1[\"flow_id\"] != result2[\"flow_id\"], \"Flow IDs should be different\"",
          "values_preview": [
            "flow_id",
            "flow_id",
            "Flow IDs should be different"
          ],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 690,
          "end_line": 690,
          "snippet": "assert result1[\"final_state\"].topic_title != result2[\"final_state\"].topic_title, \"States should be isolated\"",
          "values_preview": [
            "final_state",
            "final_state",
            "States should be isolated"
          ],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 694,
          "end_line": 694,
          "snippet": "# Metrics should be separate instances",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 695,
          "end_line": 695,
          "snippet": "assert id(result1[\"metrics\"]) != id(result2[\"metrics\"]), \"Metrics should be isolated\"",
          "values_preview": [
            "metrics",
            "metrics",
            "Metrics should be isolated"
          ],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 717,
          "end_line": 717,
          "snippet": "\"topic_title\": \"\",  # Empty title should cause validation failure",
          "values_preview": [
            "topic_title"
          ],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 744,
          "end_line": 744,
          "snippet": "# Should have at least some successful flows",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 747,
          "end_line": 747,
          "snippet": "# Successful flows should have normal execution times",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        }
      ],
      "integration_points": [
        {
          "line": 49,
          "text": "sys.modules['prometheus_client'] = Mock()"
        },
        {
          "line": 72,
          "text": "\"editorial_recommendations\": \"Focus on technical implementation details\""
        },
        {
          "line": 80,
          "text": "\"editorial_recommendations\": \"Keep it concise for Twitter audience\""
        },
        {
          "line": 88,
          "text": "\"editorial_recommendations\": \"Include performance benchmarks\""
        },
        {
          "line": 96,
          "text": "\"editorial_recommendations\": \"Add code examples and diagrams\""
        },
        {
          "line": 104,
          "text": "\"editorial_recommendations\": \"Include vulnerability scanning examples\""
        },
        {
          "line": 112,
          "text": "\"editorial_recommendations\": \"Share real-world implementation story\""
        },
        {
          "line": 120,
          "text": "\"editorial_recommendations\": \"Break into digestible thread format\""
        },
        {
          "line": 128,
          "text": "\"editorial_recommendations\": \"Include lessons learned and gotchas\""
        },
        {
          "line": 136,
          "text": "\"editorial_recommendations\": \"Make it actionable and specific\""
        },
        {
          "line": 144,
          "text": "\"editorial_recommendations\": \"Include dashboard screenshots\""
        },
        {
          "line": 413,
          "text": "\"editorial_recommendations\": flow_config.get(\"editorial_recommendations\", \"\"),"
        }
      ]
    },
    {
      "file": "/Users/hretheum/dev/bezrobocie/vector-wave/kolegium/ai_writing_flow/deployment/backups/20250804_131201/tests/README_STRESS_TESTS.md",
      "exists": true,
      "hits": [],
      "integration_points": []
    },
    {
      "file": "/Users/hretheum/dev/bezrobocie/vector-wave/kolegium/ai_writing_flow/deployment/backups/20250804_131201/tests/test_heavy_load.py",
      "exists": true,
      "hits": [
        {
          "type": "directive_line",
          "start_line": 668,
          "end_line": 668,
          "snippet": "# CPU usage should have been high during test",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 853,
          "end_line": 853,
          "snippet": "assert circuit_open_detected, \"Circuit breaker should have opened under failures\"",
          "values_preview": [
            "Circuit breaker should have opened under failures"
          ],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 854,
          "end_line": 854,
          "snippet": "assert circuit_open_count >= 1, \"Circuit breaker should have blocked calls when open\"",
          "values_preview": [
            "Circuit breaker should have blocked calls when open"
          ],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 855,
          "end_line": 855,
          "snippet": "assert failure_count <= 5, \"Circuit breaker should have prevented excessive failures\"",
          "values_preview": [
            "Circuit breaker should have prevented excessive failures"
          ],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 859,
          "end_line": 859,
          "snippet": "assert status[\"total_failures\"] >= 3, \"Circuit breaker should have recorded failures\"",
          "values_preview": [
            "total_failures",
            "Circuit breaker should have recorded failures"
          ],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 860,
          "end_line": 860,
          "snippet": "assert status[\"failure_threshold\"] == 3, \"Circuit breaker threshold should be configured\"",
          "values_preview": [
            "failure_threshold",
            "Circuit breaker threshold should be configured"
          ],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 1043,
          "end_line": 1043,
          "snippet": "assert test_monitor.safety_violated, \"Memory limit should have been enforced\"",
          "values_preview": [
            "Memory limit should have been enforced"
          ],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 1080,
          "end_line": 1080,
          "snippet": "assert health_status is not None, \"Health status should be available after emergency stop\"",
          "values_preview": [
            "Health status should be available after emergency stop"
          ],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 1092,
          "end_line": 1092,
          "snippet": "# Attempt normal operation after emergency stop (should handle gracefully)",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 1099,
          "end_line": 1099,
          "snippet": "# This should either work or fail gracefully",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        }
      ],
      "integration_points": [
        {
          "line": 362,
          "text": "\"editorial_recommendations\": \"Optimize for stress testing\""
        }
      ]
    },
    {
      "file": "/Users/hretheum/dev/bezrobocie/vector-wave/kolegium/ai_writing_flow/deployment/backups/20250804_131201/tests/test_knowledge_adapter.py",
      "exists": true,
      "hits": [
        {
          "type": "directive_line",
          "start_line": 78,
          "end_line": 78,
          "snippet": "# Second failure - should open circuit breaker",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 273,
          "end_line": 273,
          "snippet": "# Should not raise error due to retry",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 355,
          "end_line": 355,
          "snippet": "# Context should be preserved in the second search",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        }
      ],
      "integration_points": [
        {
          "line": 10,
          "text": "import aiohttp"
        },
        {
          "line": 31,
          "text": "assert adapter.kb_api_url == \"http://localhost:8080\""
        },
        {
          "line": 40,
          "text": "\"kb_api_url\": \"http://custom:9090\","
        },
        {
          "line": 49,
          "text": "assert adapter.kb_api_url == \"http://custom:9090\""
        },
        {
          "line": 71,
          "text": "with patch('aiohttp.ClientSession.post', side_effect=aiohttp.ClientError()):"
        },
        {
          "line": 113,
          "text": "with patch('aiohttp.ClientSession.post') as mock_post:"
        },
        {
          "line": 148,
          "text": "with patch('aiohttp.ClientSession.post') as mock_post:"
        },
        {
          "line": 165,
          "text": "with patch('aiohttp.ClientSession.post', side_effect=aiohttp.ClientError()):"
        },
        {
          "line": 193,
          "text": "with patch('aiohttp.ClientSession.post') as mock_post:"
        },
        {
          "line": 212,
          "text": "with patch('aiohttp.ClientSession.post', side_effect=aiohttp.ClientError()):"
        },
        {
          "line": 227,
          "text": "with patch('aiohttp.ClientSession.post', side_effect=asyncio.TimeoutError()):"
        },
        {
          "line": 238,
          "text": "with patch('aiohttp.ClientSession.post') as mock_post:"
        },
        {
          "line": 264,
          "text": "with patch('aiohttp.ClientSession.post') as mock_post:"
        },
        {
          "line": 267,
          "text": "aiohttp.ClientError(\"Network error\"),"
        },
        {
          "line": 305,
          "text": "with patch('aiohttp.ClientSession.post', side_effect=aiohttp.ClientError()):"
        }
      ]
    },
    {
      "file": "/Users/hretheum/dev/bezrobocie/vector-wave/kolegium/ai_writing_flow/deployment/backups/20250804_131201/tests/test_flow_control_state.py",
      "exists": true,
      "hits": [
        {
          "type": "directive_line",
          "start_line": 128,
          "end_line": 128,
          "snippet": "# History should be limited to 100",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 222,
          "end_line": 222,
          "snippet": "# Transition should be prevented",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 263,
          "end_line": 263,
          "snippet": "# No errors should occur",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 267,
          "end_line": 267,
          "snippet": "# All transitions should be recorded",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 287,
          "end_line": 287,
          "snippet": "# Should have exactly 1000 retries (10 threads * 100 increments)",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 360,
          "end_line": 360,
          "snippet": "# Should be able to convert to dict",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 372,
          "end_line": 372,
          "snippet": "\"\"\"Test transition to same stage (should be allowed for retries)\"\"\"",
          "values_preview": [
            "Test transition to same stage (should be allowed for retries)"
          ],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 375,
          "end_line": 375,
          "snippet": "# Same stage transition should work",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 394,
          "end_line": 394,
          "snippet": "# Should handle long reasons without issues",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 430,
          "end_line": 430,
          "snippet": "# Should complete 1000 transitions in under 1 second",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 433,
          "end_line": 433,
          "snippet": "# Only last 100 should be kept",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 448,
          "end_line": 448,
          "snippet": "# Should be reasonably small (less than 1MB)",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        }
      ],
      "integration_points": []
    },
    {
      "file": "/Users/hretheum/dev/bezrobocie/vector-wave/kolegium/ai_writing_flow/deployment/backups/20250804_131201/tests/test_retry_manager_complete.py",
      "exists": true,
      "hits": [
        {
          "type": "directive_line",
          "start_line": 140,
          "end_line": 140,
          "snippet": "# Should return default RetryConfig",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 180,
          "end_line": 180,
          "snippet": "# All should be around 10.0 but not exactly",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 182,
          "end_line": 182,
          "snippet": "assert len(set(delays)) > 1  # Should have different values",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 194,
          "end_line": 194,
          "snippet": "# Should get same delay every time",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 208,
          "end_line": 208,
          "snippet": "# Even with jitter, should never be negative",
          "values_preview": [],
          "priority_guess": "high",
          "category_guess": "forbidden"
        },
        {
          "type": "directive_line",
          "start_line": 290,
          "end_line": 290,
          "snippet": "# Should fail immediately due to global limit",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 367,
          "end_line": 367,
          "snippet": "assert elapsed >= 0.09  # Should have waited at least close to the delay (accounting for timing variance)",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 446,
          "end_line": 446,
          "snippet": "assert elapsed >= 0.09  # Should have waited at least close to the delay",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 596,
          "end_line": 596,
          "snippet": "# Should handle gracefully",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 636,
          "end_line": 636,
          "snippet": "# Should be capped at max_delay",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        }
      ],
      "integration_points": []
    },
    {
      "file": "/Users/hretheum/dev/bezrobocie/vector-wave/kolegium/ai_writing_flow/deployment/backups/20250804_131201/tests/test_stage_manager_complete.py",
      "exists": true,
      "hits": [
        {
          "type": "directive_line",
          "start_line": 50,
          "end_line": 50,
          "snippet": "assert len(manager._execution_events) > 0  # Should have FLOW_STARTED event",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 73,
          "end_line": 73,
          "snippet": "# Research should have skip condition",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 147,
          "end_line": 147,
          "snippet": "# Now should detect existing research",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 151,
          "end_line": 151,
          "snippet": "# So it should skip even when not completed",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 188,
          "end_line": 188,
          "snippet": "\"\"\"Test starting the current stage (should be allowed)\"\"\"",
          "values_preview": [
            "Test starting the current stage (should be allowed)"
          ],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 193,
          "end_line": 193,
          "snippet": "# Should be able to start current stage",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 326,
          "end_line": 326,
          "snippet": "# Should have FLOW_STARTED, STAGE_STARTED, STAGE_COMPLETED",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 437,
          "end_line": 437,
          "snippet": "# At least one should succeed",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 462,
          "end_line": 462,
          "snippet": "# Should have all events (1 FLOW_STARTED + 50 logged)",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 510,
          "end_line": 510,
          "snippet": "# Initially should not be timed out",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 544,
          "end_line": 544,
          "snippet": "# Complete should detect timeout",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 551,
          "end_line": 551,
          "snippet": "# Should be marked as failed due to timeout",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 640,
          "end_line": 640,
          "snippet": "# Add milestone event (should be kept)",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 651,
          "end_line": 651,
          "snippet": "# Should have: 1 initial FLOW_STARTED + 5 recent + 1 old milestone FLOW_STARTED = 7",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 835,
          "end_line": 835,
          "snippet": "# Loop prevention should have tracked executions",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 859,
          "end_line": 859,
          "snippet": "# Should have some executions blocked",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 861,
          "end_line": 861,
          "snippet": "assert len(executions) == 3  # Only 3 should succeed",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 872,
          "end_line": 872,
          "snippet": "# Complete without starting - should not crash",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 876,
          "end_line": 876,
          "snippet": "# Manager should log the event even without execution",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 878,
          "end_line": 878,
          "snippet": "# Should have at least one completion event",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 902,
          "end_line": 902,
          "snippet": "# Should be sorted by timestamp",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        }
      ],
      "integration_points": []
    },
    {
      "file": "/Users/hretheum/dev/bezrobocie/vector-wave/kolegium/ai_writing_flow/deployment/backups/20250804_131201/tests/test_flow_methods.py",
      "exists": true,
      "hits": [
        {
          "type": "directive_line",
          "start_line": 135,
          "end_line": 135,
          "snippet": "viral_score=15.0  # Invalid - should be 0-10",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 180,
          "end_line": 180,
          "snippet": "# First execution should succeed",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 184,
          "end_line": 184,
          "snippet": "# Second execution should succeed but log warning",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 188,
          "end_line": 188,
          "snippet": "# Third execution should succeed but log warning",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 192,
          "end_line": 192,
          "snippet": "# Fourth execution should fail (infinite loop prevention)",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 245,
          "end_line": 245,
          "snippet": "# EXTERNAL content should conduct research",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 252,
          "end_line": 252,
          "snippet": "# ORIGINAL content should skip research",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 259,
          "end_line": 259,
          "snippet": "# Skip research flag should skip research",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 269,
          "end_line": 269,
          "snippet": "# No feedback should go to style validation",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 273,
          "end_line": 273,
          "snippet": "# Minor feedback should go to style validation",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 277,
          "end_line": 277,
          "snippet": "# Major feedback should go to audience alignment",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 281,
          "end_line": 281,
          "snippet": "# Pivot feedback should go to research (EXTERNAL)",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 285,
          "end_line": 285,
          "snippet": "# Pivot feedback should go to audience align (ORIGINAL)",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 292,
          "end_line": 292,
          "snippet": "# Should retry when under limit",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 297,
          "end_line": 297,
          "snippet": "# Should not retry when at limit",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 302,
          "end_line": 302,
          "snippet": "# Should retry draft generation for content quality issues",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 310,
          "end_line": 310,
          "snippet": "# Should not retry research for unsupported error type",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        }
      ],
      "integration_points": []
    },
    {
      "file": "/Users/hretheum/dev/bezrobocie/vector-wave/kolegium/ai_writing_flow/deployment/backups/20250804_131201/tests/test_10_concurrent_flows.py",
      "exists": true,
      "hits": [
        {
          "type": "directive_line",
          "start_line": 760,
          "end_line": 760,
          "snippet": "assert result1[\"flow_id\"] != result2[\"flow_id\"], \"Flow IDs should be different\"",
          "values_preview": [
            "flow_id",
            "flow_id",
            "Flow IDs should be different"
          ],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 761,
          "end_line": 761,
          "snippet": "assert result1[\"final_state\"].topic_title != result2[\"final_state\"].topic_title, \"States should be isolated\"",
          "values_preview": [
            "final_state",
            "final_state",
            "States should be isolated"
          ],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 765,
          "end_line": 765,
          "snippet": "# Metrics should be separate instances",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 766,
          "end_line": 766,
          "snippet": "assert id(result1[\"metrics\"]) != id(result2[\"metrics\"]), \"Metrics should be isolated\"",
          "values_preview": [
            "metrics",
            "metrics",
            "Metrics should be isolated"
          ],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 788,
          "end_line": 788,
          "snippet": "\"topic_title\": \"\",  # Empty title should cause validation failure",
          "values_preview": [
            "topic_title"
          ],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 815,
          "end_line": 815,
          "snippet": "# Should have 3 successful and 1 failed",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 819,
          "end_line": 819,
          "snippet": "# Successful flows should have normal execution times",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        }
      ],
      "integration_points": [
        {
          "line": 53,
          "text": "sys.modules['prometheus_client'] = Mock()"
        },
        {
          "line": 84,
          "text": "\"editorial_recommendations\": \"Focus on technical implementation details\""
        },
        {
          "line": 92,
          "text": "\"editorial_recommendations\": \"Keep it concise for Twitter audience\""
        },
        {
          "line": 100,
          "text": "\"editorial_recommendations\": \"Include performance benchmarks\""
        },
        {
          "line": 108,
          "text": "\"editorial_recommendations\": \"Add code examples and diagrams\""
        },
        {
          "line": 116,
          "text": "\"editorial_recommendations\": \"Include vulnerability scanning examples\""
        },
        {
          "line": 124,
          "text": "\"editorial_recommendations\": \"Share real-world implementation story\""
        },
        {
          "line": 132,
          "text": "\"editorial_recommendations\": \"Break into digestible thread format\""
        },
        {
          "line": 140,
          "text": "\"editorial_recommendations\": \"Include lessons learned and gotchas\""
        },
        {
          "line": 148,
          "text": "\"editorial_recommendations\": \"Make it actionable and specific\""
        },
        {
          "line": 156,
          "text": "\"editorial_recommendations\": \"Include dashboard screenshots\""
        },
        {
          "line": 389,
          "text": "\"editorial_recommendations\": flow_config.get(\"editorial_recommendations\", \"\"),"
        }
      ]
    },
    {
      "file": "/Users/hretheum/dev/bezrobocie/vector-wave/kolegium/ai_writing_flow/deployment/backups/20250804_131201/tests/test_load_performance.py",
      "exists": true,
      "hits": [
        {
          "type": "directive_line",
          "start_line": 183,
          "end_line": 183,
          "snippet": "# Memory should not grow excessively",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 234,
          "end_line": 234,
          "snippet": "assert executions > 50  # Should execute reasonable number of operations",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 360,
          "end_line": 360,
          "snippet": "# Memory growth should be reasonable",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 424,
          "end_line": 424,
          "snippet": "# Memory should not grow excessively",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 518,
          "end_line": 518,
          "snippet": "# Response times should remain reasonable",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 525,
          "end_line": 525,
          "snippet": "# Response time should not degrade dramatically with load",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 618,
          "end_line": 618,
          "snippet": "# Throughput should not degrade dramatically with concurrency",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        }
      ],
      "integration_points": []
    },
    {
      "file": "/Users/hretheum/dev/bezrobocie/vector-wave/kolegium/ai_writing_flow/deployment/backups/20250804_131201/tests/concurrent_flows_test_report.md",
      "exists": true,
      "hits": [
        {
          "type": "directive_line",
          "start_line": 197,
          "end_line": 197,
          "snippet": "Based on test results, production deployment should provision:",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 204,
          "end_line": 204,
          "snippet": "Production monitoring should track:",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        }
      ],
      "integration_points": [
        {
          "line": 88,
          "text": "4. **Mock External Dependencies** - structlog, opentelemetry, aiohttp"
        }
      ]
    },
    {
      "file": "/Users/hretheum/dev/bezrobocie/vector-wave/kolegium/ai_writing_flow/deployment/backups/20250804_131201/tests/test_failure_recovery_load.py",
      "exists": true,
      "hits": [
        {
          "type": "directive_line",
          "start_line": 425,
          "end_line": 425,
          "snippet": "assert metrics.circuit_breaker_triggered, \"Circuit breaker should activate for I/O failures\"",
          "values_preview": [
            "Circuit breaker should activate for I/O failures"
          ],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 426,
          "end_line": 426,
          "snippet": "assert metrics.graceful_degradation, \"System should degrade gracefully\"",
          "values_preview": [
            "System should degrade gracefully"
          ],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 475,
          "end_line": 475,
          "snippet": "assert metrics.circuit_breaker_triggered, \"Circuit breaker should activate\"",
          "values_preview": [
            "Circuit breaker should activate"
          ],
          "priority_guess": "medium",
          "category_guess": "style"
        }
      ],
      "integration_points": []
    },
    {
      "file": "/Users/hretheum/dev/bezrobocie/vector-wave/kolegium/ai_writing_flow/deployment/backups/20250804_131201/tests/test_api_endpoints.py",
      "exists": true,
      "hits": [
        {
          "type": "directive_line",
          "start_line": 278,
          "end_line": 278,
          "snippet": "# Should only return completed flows",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 504,
          "end_line": 504,
          "snippet": "# Step 2: Check status (should be completed)",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 543,
          "end_line": 543,
          "snippet": "# Health check should include statistics",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "required"
        }
      ],
      "integration_points": []
    },
    {
      "file": "/Users/hretheum/dev/bezrobocie/vector-wave/kolegium/ai_writing_flow/deployment/backups/20250804_131201/tests/test_integration_phase1.py",
      "exists": true,
      "hits": [
        {
          "type": "directive_line",
          "start_line": 106,
          "end_line": 106,
          "snippet": "# Circuit should be open now",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 116,
          "end_line": 116,
          "snippet": "# Try to call when open - should fail immediately",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 119,
          "end_line": 119,
          "snippet": "assert False, \"Should have raised CircuitBreakerError\"",
          "values_preview": [
            "Should have raised CircuitBreakerError"
          ],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 169,
          "end_line": 169,
          "snippet": "# At least one should succeed, others might fail due to invalid state",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        }
      ],
      "integration_points": []
    },
    {
      "file": "/Users/hretheum/dev/bezrobocie/vector-wave/kolegium/ai_writing_flow/deployment/backups/20250804_131201/tests/test_retry_escalation_paths.py",
      "exists": true,
      "hits": [
        {
          "type": "directive_line",
          "start_line": 98,
          "end_line": 98,
          "snippet": "# Second delay should be roughly 2x first delay (exponential backoff)",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 130,
          "end_line": 130,
          "snippet": "# Now circuit breaker should block calls",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 135,
          "end_line": 135,
          "snippet": "# Circuit breaker should be open after 3 failures",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 449,
          "end_line": 449,
          "snippet": "# Now retry should respect circuit breaker state",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 486,
          "end_line": 486,
          "snippet": "# Circuit breaker should allow retry now",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 528,
          "end_line": 528,
          "snippet": "# Should have seen progression in retry counts",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 599,
          "end_line": 599,
          "snippet": "# Execute critical stage - should succeed with retries",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 604,
          "end_line": 604,
          "snippet": "# Execute normal stage - should fail due to limited retries",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 641,
          "end_line": 641,
          "snippet": "# First execution should fail and escalate priority",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 647,
          "end_line": 647,
          "snippet": "# Priority should have been escalated",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 654,
          "end_line": 654,
          "snippet": "# Second execution with higher priority should succeed",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 855,
          "end_line": 855,
          "snippet": "# Should now succeed",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        }
      ],
      "integration_points": []
    },
    {
      "file": "/Users/hretheum/dev/bezrobocie/vector-wave/kolegium/ai_writing_flow/deployment/backups/20250804_131201/tests/test_circuit_breaker_complete.py",
      "exists": true,
      "hits": [
        {
          "type": "directive_line",
          "start_line": 128,
          "end_line": 128,
          "snippet": "# State should transition to HALF_OPEN on next check",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 140,
          "end_line": 140,
          "snippet": "# Successful call should close the circuit",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 156,
          "end_line": 156,
          "snippet": "# Failed call should reopen the circuit",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 203,
          "end_line": 203,
          "snippet": "# Expected exception should be counted",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 209,
          "end_line": 209,
          "snippet": "# Unexpected exception should not be counted",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 213,
          "end_line": 213,
          "snippet": "# Failure count should not increase for unexpected exception",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 235,
          "end_line": 235,
          "snippet": "# Circuit should be open now",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 364,
          "end_line": 364,
          "snippet": "# Create StageCircuitBreaker - should sync state",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 427,
          "end_line": 427,
          "snippet": "# Circuit should be open after threshold failures",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 459,
          "end_line": 459,
          "snippet": "# Calls should be blocked",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 513,
          "end_line": 513,
          "snippet": "# Should return True when no failure time",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 549,
          "end_line": 549,
          "snippet": "# Should be in HALF_OPEN state",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        }
      ],
      "integration_points": []
    },
    {
      "file": "/Users/hretheum/dev/bezrobocie/vector-wave/kolegium/ai_writing_flow/deployment/backups/20250804_131201/tests/monitoring/test_metrics_accuracy.py",
      "exists": true,
      "hits": [
        {
          "type": "directive_line",
          "start_line": 67,
          "end_line": 67,
          "snippet": "# CPU usage should match mocked value (latest value strategy)",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 70,
          "end_line": 70,
          "snippet": "# Memory should be ~100MB",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 89,
          "end_line": 89,
          "snippet": "# Average should match statistics.mean(expected_times)",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 124,
          "end_line": 124,
          "snippet": "# Success rate should be 70% (7/10)",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 129,
          "end_line": 129,
          "snippet": "# Error rate should be 30% (3/10)",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 334,
          "end_line": 334,
          "snippet": "# Should have at least 2 buckets with aggregated values",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 484,
          "end_line": 484,
          "snippet": "if agg.count == 3:  # Should have 3 samples",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 595,
          "end_line": 595,
          "snippet": "# Should be healthy",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 598,
          "end_line": 598,
          "snippet": "# All checks should pass",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 600,
          "end_line": 600,
          "snippet": "assert checks[\"memory_usage\"] == True, \"Memory usage check should pass\"",
          "values_preview": [
            "memory_usage",
            "Memory usage check should pass"
          ],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 601,
          "end_line": 601,
          "snippet": "assert checks[\"cpu_usage\"] == True, \"CPU usage check should pass\"",
          "values_preview": [
            "cpu_usage",
            "CPU usage check should pass"
          ],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 602,
          "end_line": 602,
          "snippet": "assert checks[\"error_rate\"] == True, \"Error rate check should pass\"",
          "values_preview": [
            "error_rate",
            "Error rate check should pass"
          ],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 635,
          "end_line": 635,
          "snippet": "assert len(completed_flows) >= 1, \"Should have at least 1 completed flow\"",
          "values_preview": [
            "Should have at least 1 completed flow"
          ],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 654,
          "end_line": 654,
          "snippet": "# All values should be zero or sensible defaults",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 655,
          "end_line": 655,
          "snippet": "assert kpis.success_rate == 0.0, \"Success rate should be 0 with no data\"",
          "values_preview": [
            "Success rate should be 0 with no data"
          ],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 656,
          "end_line": 656,
          "snippet": "assert kpis.error_rate == 0.0, \"Error rate should be 0 with no data\"",
          "values_preview": [
            "Error rate should be 0 with no data"
          ],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 657,
          "end_line": 657,
          "snippet": "assert kpis.avg_execution_time == 0.0, \"Avg execution time should be 0 with no data\"",
          "values_preview": [
            "Avg execution time should be 0 with no data"
          ],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 658,
          "end_line": 658,
          "snippet": "assert kpis.throughput == 0.0, \"Throughput should be 0 with no data\"",
          "values_preview": [
            "Throughput should be 0 with no data"
          ],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 659,
          "end_line": 659,
          "snippet": "assert kpis.active_flows == 0, \"Active flows should be 0 with no data\"",
          "values_preview": [
            "Active flows should be 0 with no data"
          ],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 660,
          "end_line": 660,
          "snippet": "assert kpis.total_executions == 0, \"Total executions should be 0 with no data\"",
          "values_preview": [
            "Total executions should be 0 with no data"
          ],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 675,
          "end_line": 675,
          "snippet": "f\"Single point avg should equal the value: expected {execution_time}, got {kpis.avg_execution_time}\"",
          "values_preview": [
            "Single point avg should equal the value: expected {execution_time}, got {kpis.avg_execution_time}"
          ],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 677,
          "end_line": 677,
          "snippet": "f\"Single point P95 should equal the value: expected {execution_time}, got {kpis.p95_execution_time}\"",
          "values_preview": [
            "Single point P95 should equal the value: expected {execution_time}, got {kpis.p95_execution_time}"
          ],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 679,
          "end_line": 679,
          "snippet": "f\"Single point P99 should equal the value: expected {execution_time}, got {kpis.p99_execution_time}\"",
          "values_preview": [
            "Single point P99 should equal the value: expected {execution_time}, got {kpis.p99_execution_time}"
          ],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 681,
          "end_line": 681,
          "snippet": "assert kpis.success_rate == 100.0, \"Single successful flow should give 100% success rate\"",
          "values_preview": [
            "Single successful flow should give 100% success rate"
          ],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 682,
          "end_line": 682,
          "snippet": "assert kpis.error_rate == 0.0, \"Single successful flow should give 0% error rate\"",
          "values_preview": [
            "Single successful flow should give 0% error rate"
          ],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 706,
          "end_line": 706,
          "snippet": "# Min and max should be the actual extremes",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 761,
          "end_line": 761,
          "snippet": "# Should have 30 total executions (3 threads * 10 flows each)",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 766,
          "end_line": 766,
          "snippet": "# All should be successful",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        }
      ],
      "integration_points": []
    },
    {
      "file": "/Users/hretheum/dev/bezrobocie/vector-wave/kolegium/ai_writing_flow/deployment/backups/20250804_131201/tests/monitoring/__init__.py",
      "exists": true,
      "hits": [],
      "integration_points": []
    },
    {
      "file": "/Users/hretheum/dev/bezrobocie/vector-wave/kolegium/ai_writing_flow/deployment/backups/20250804_131201/tests/monitoring/test_alerting_reliability.py",
      "exists": true,
      "hits": [
        {
          "type": "directive_line",
          "start_line": 99,
          "end_line": 99,
          "snippet": "# Should create an alert",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 120,
          "end_line": 120,
          "snippet": "assert len(active_alerts) == 1, \"Should have one memory alert\"",
          "values_preview": [
            "Should have one memory alert"
          ],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 123,
          "end_line": 123,
          "snippet": "assert alert.rule_id == \"memory_low\", \"Should be memory_low rule\"",
          "values_preview": [
            "memory_low",
            "Should be memory_low rule"
          ],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 124,
          "end_line": 124,
          "snippet": "assert alert.severity == AlertSeverity.MEDIUM, \"Should be MEDIUM severity\"",
          "values_preview": [
            "Should be MEDIUM severity"
          ],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 125,
          "end_line": 125,
          "snippet": "assert alert.value == 50.0, \"Value should match triggered value\"",
          "values_preview": [
            "Value should match triggered value"
          ],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 129,
          "end_line": 129,
          "snippet": "# CPU value below threshold - should not trigger",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 137,
          "end_line": 137,
          "snippet": "# Memory value above threshold - should not trigger less_than rule",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 162,
          "end_line": 162,
          "snippet": "assert len(active_alerts) == 0, \"Disabled rule should not create alerts\"",
          "values_preview": [
            "Disabled rule should not create alerts"
          ],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 177,
          "end_line": 177,
          "snippet": "assert len(active_alerts) == 1, \"Should have one escalated alert\"",
          "values_preview": [
            "Should have one escalated alert"
          ],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 182,
          "end_line": 182,
          "snippet": "# After escalation_threshold (2), should be escalated to CRITICAL",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 184,
          "end_line": 184,
          "snippet": "assert alert.status == AlertStatus.ESCALATED, \"Should be escalated status\"",
          "values_preview": [
            "Should be escalated status"
          ],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 185,
          "end_line": 185,
          "snippet": "assert alert.severity == AlertSeverity.CRITICAL, \"Should be escalated to CRITICAL severity\"",
          "values_preview": [
            "Should be escalated to CRITICAL severity"
          ],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 221,
          "end_line": 221,
          "snippet": "assert success == True, \"Console notification should succeed\"",
          "values_preview": [
            "Console notification should succeed"
          ],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 229,
          "end_line": 229,
          "snippet": "# HIGH severity should use ERROR log level",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 232,
          "end_line": 232,
          "snippet": "assert \"ALERT [HIGH]\" in log_message, \"Log message should contain alert severity\"",
          "values_preview": [
            "ALERT [HIGH]",
            "Log message should contain alert severity"
          ],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 233,
          "end_line": 233,
          "snippet": "assert \"85.0\" in log_message, \"Log message should contain alert value\"",
          "values_preview": [
            "85.0",
            "Log message should contain alert value"
          ],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 234,
          "end_line": 234,
          "snippet": "assert \"80.0\" in log_message, \"Log message should contain threshold\"",
          "values_preview": [
            "80.0",
            "Log message should contain threshold"
          ],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 257,
          "end_line": 257,
          "snippet": "# Should handle error gracefully",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 260,
          "end_line": 260,
          "snippet": "assert success == False, \"Should return False when logger fails\"",
          "values_preview": [
            "Should return False when logger fails"
          ],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 262,
          "end_line": 262,
          "snippet": "# Error should be logged to fallback logger",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 294,
          "end_line": 294,
          "snippet": "assert success == True, \"Webhook notification should succeed\"",
          "values_preview": [
            "Webhook notification should succeed"
          ],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 301,
          "end_line": 301,
          "snippet": "assert call_args.full_url == webhook_url, \"URL should match\"",
          "values_preview": [
            "URL should match"
          ],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 307,
          "end_line": 307,
          "snippet": "assert \"attachments\" in payload, \"Payload should have attachments\"",
          "values_preview": [
            "attachments",
            "Payload should have attachments"
          ],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 308,
          "end_line": 308,
          "snippet": "assert len(payload[\"attachments\"]) == 1, \"Should have one attachment\"",
          "values_preview": [
            "attachments",
            "Should have one attachment"
          ],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 311,
          "end_line": 311,
          "snippet": "assert attachment[\"title\"] == \"CRITICAL Alert: throughput\", \"Title should match alert\"",
          "values_preview": [
            "title",
            "CRITICAL Alert: throughput",
            "Title should match alert"
          ],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 312,
          "end_line": 312,
          "snippet": "assert attachment[\"text\"] == \"Webhook test alert\", \"Text should match message\"",
          "values_preview": [
            "text",
            "Webhook test alert",
            "Text should match message"
          ],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 339,
          "end_line": 339,
          "snippet": "assert success == False, \"Should return False on connection failure\"",
          "values_preview": [
            "Should return False on connection failure"
          ],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 373,
          "end_line": 373,
          "snippet": "assert success == True, \"Email notification should succeed\"",
          "values_preview": [
            "Email notification should succeed"
          ],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 386,
          "end_line": 386,
          "snippet": "assert from_addr == \"alerts@test.com\", \"From address should match\"",
          "values_preview": [
            "alerts@test.com",
            "From address should match"
          ],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 387,
          "end_line": 387,
          "snippet": "assert to_addrs == [\"admin@test.com\", \"dev@test.com\"], \"To addresses should match\"",
          "values_preview": [
            "admin@test.com",
            "dev@test.com",
            "To addresses should match"
          ],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 388,
          "end_line": 388,
          "snippet": "assert \"Email test alert\" in message, \"Message should contain alert text\"",
          "values_preview": [
            "Email test alert",
            "Message should contain alert text"
          ],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 420,
          "end_line": 420,
          "snippet": "assert success == False, \"Should return False on SMTP failure\"",
          "values_preview": [
            "Should return False on SMTP failure"
          ],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 468,
          "end_line": 468,
          "snippet": "assert len(active_alerts) == 1, \"Should have created one alert\"",
          "values_preview": [
            "Should have created one alert"
          ],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 471,
          "end_line": 471,
          "snippet": "assert alert.rule_id == \"lifecycle_test\", \"Should be our test rule\"",
          "values_preview": [
            "lifecycle_test",
            "Should be our test rule"
          ],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 472,
          "end_line": 472,
          "snippet": "assert alert.status == AlertStatus.ACTIVE, \"Should be active\"",
          "values_preview": [
            "Should be active"
          ],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 473,
          "end_line": 473,
          "snippet": "assert alert.value == 80.0, \"Should have correct value\"",
          "values_preview": [
            "Should have correct value"
          ],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 474,
          "end_line": 474,
          "snippet": "assert alert.notification_count > 0, \"Should have sent notification\"",
          "values_preview": [
            "Should have sent notification"
          ],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 479,
          "end_line": 479,
          "snippet": "\"Should increment alert creation count\"",
          "values_preview": [
            "Should increment alert creation count"
          ],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 493,
          "end_line": 493,
          "snippet": "assert len(initial_alerts) == 1, \"Should have one alert initially\"",
          "values_preview": [
            "Should have one alert initially"
          ],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 511,
          "end_line": 511,
          "snippet": "assert len(updated_alerts) == 1, \"Should still have one alert (updated)\"",
          "values_preview": [
            "Should still have one alert (updated)"
          ],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 514,
          "end_line": 514,
          "snippet": "assert updated_alert.value == 85.0, \"Should have updated value\"",
          "values_preview": [
            "Should have updated value"
          ],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 516,
          "end_line": 516,
          "snippet": "\"Should have incremented escalation count\"",
          "values_preview": [
            "Should have incremented escalation count"
          ],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 530,
          "end_line": 530,
          "snippet": "assert len(active_alerts) == 1, \"Should have one active alert\"",
          "values_preview": [
            "Should have one active alert"
          ],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 538,
          "end_line": 538,
          "snippet": "assert success == True, \"Should successfully resolve alert\"",
          "values_preview": [
            "Should successfully resolve alert"
          ],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 542,
          "end_line": 542,
          "snippet": "assert len(remaining_alerts) == 0, \"Should have no active alerts after resolution\"",
          "values_preview": [
            "Should have no active alerts after resolution"
          ],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 546,
          "end_line": 546,
          "snippet": "assert len(history) >= 1, \"Should be in alert history\"",
          "values_preview": [
            "Should be in alert history"
          ],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 549,
          "end_line": 549,
          "snippet": "assert resolved_alert.status == AlertStatus.RESOLVED, \"Should be resolved status\"",
          "values_preview": [
            "Should be resolved status"
          ],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 550,
          "end_line": 550,
          "snippet": "assert resolved_alert.resolved_at is not None, \"Should have resolution timestamp\"",
          "values_preview": [
            "Should have resolution timestamp"
          ],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 552,
          "end_line": 552,
          "snippet": "\"Should have resolution message in metadata\"",
          "values_preview": [
            "Should have resolution message in metadata"
          ],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 566,
          "end_line": 566,
          "snippet": "assert len(active_alerts) == 1, \"Should have one active alert\"",
          "values_preview": [
            "Should have one active alert"
          ],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 571,
          "end_line": 571,
          "snippet": "assert resolved_count >= 1, f\"Should have auto-resolved at least 1 alert, got {resolved_count}\"",
          "values_preview": [
            "Should have auto-resolved at least 1 alert, got {resolved_count}"
          ],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 575,
          "end_line": 575,
          "snippet": "assert len(remaining_alerts) == 0, \"Should have no active alerts after auto-resolution\"",
          "values_preview": [
            "Should have no active alerts after auto-resolution"
          ],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 601,
          "end_line": 601,
          "snippet": "# First trigger - should create alert",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 611,
          "end_line": 611,
          "snippet": "assert len(first_check) == 1, \"First trigger should create alert\"",
          "values_preview": [
            "First trigger should create alert"
          ],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 613,
          "end_line": 613,
          "snippet": "# Second trigger immediately - should be blocked by cooldown",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 623,
          "end_line": 623,
          "snippet": "assert len(second_check) == 1, \"Should still have only one alert due to cooldown\"",
          "values_preview": [
            "Should still have only one alert due to cooldown"
          ],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 625,
          "end_line": 625,
          "snippet": "# Value should not have updated due to cooldown",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 627,
          "end_line": 627,
          "snippet": "assert alert.value == 15.0, \"Value should not update during cooldown\"",
          "values_preview": [
            "Value should not update during cooldown"
          ],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 644,
          "end_line": 644,
          "snippet": "# Second trigger after cooldown - should update existing alert",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 654,
          "end_line": 654,
          "snippet": "assert len(alerts) == 1, \"Should have one alert\"",
          "values_preview": [
            "Should have one alert"
          ],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 657,
          "end_line": 657,
          "snippet": "assert alert.value == 25.0, \"Value should be updated after cooldown\"",
          "values_preview": [
            "Value should be updated after cooldown"
          ],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 658,
          "end_line": 658,
          "snippet": "assert alert.escalation_count >= 1, \"Escalation count should increment\"",
          "values_preview": [
            "Escalation count should increment"
          ],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 664,
          "end_line": 664,
          "snippet": "# Rapid-fire triggers (most should be rate limited)",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 676,
          "end_line": 676,
          "snippet": "# Should have only one alert due to rate limiting",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 678,
          "end_line": 678,
          "snippet": "assert len(active_alerts) == 1, \"Rate limiting should prevent multiple alerts\"",
          "values_preview": [
            "Rate limiting should prevent multiple alerts"
          ],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 680,
          "end_line": 680,
          "snippet": "# But escalation count should reflect multiple triggers",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 758,
          "end_line": 758,
          "snippet": "# Should have multiple alerts due to different rule thresholds",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 759,
          "end_line": 759,
          "snippet": "assert len(active_alerts) > 0, \"Should have created some alerts\"",
          "values_preview": [
            "Should have created some alerts"
          ],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 761,
          "end_line": 761,
          "snippet": "# All alerts should be properly formed",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 763,
          "end_line": 763,
          "snippet": "assert alert.status == AlertStatus.ACTIVE, \"All alerts should be active\"",
          "values_preview": [
            "All alerts should be active"
          ],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 764,
          "end_line": 764,
          "snippet": "assert alert.kpi_type == KPIType.CPU_USAGE, \"All alerts should be for CPU usage\"",
          "values_preview": [
            "All alerts should be for CPU usage"
          ],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 765,
          "end_line": 765,
          "snippet": "assert alert.value > 50.0, \"All alert values should be above base threshold\"",
          "values_preview": [
            "All alert values should be above base threshold"
          ],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 790,
          "end_line": 790,
          "snippet": "# Alert should still be created despite notification failure",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 792,
          "end_line": 792,
          "snippet": "assert len(active_alerts) >= 1, \"Alert should be created despite notification failures\"",
          "values_preview": [
            "Alert should be created despite notification failures"
          ],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 794,
          "end_line": 794,
          "snippet": "# Working channel should have been called",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 797,
          "end_line": 797,
          "snippet": "# Failed channel should have been attempted",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 829,
          "end_line": 829,
          "snippet": "# Should have created more alerts",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 831,
          "end_line": 831,
          "snippet": "assert alerts_created > 0, f\"Should have created alerts during load test, got {alerts_created}\"",
          "values_preview": [
            "Should have created alerts during load test, got {alerts_created}"
          ],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 833,
          "end_line": 833,
          "snippet": "# Active alerts count should be reasonable",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 834,
          "end_line": 834,
          "snippet": "assert final_stats[\"active_alerts\"] >= 0, \"Active alerts count should be non-negative\"",
          "values_preview": [
            "active_alerts",
            "Active alerts count should be non-negative"
          ],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 836,
          "end_line": 836,
          "snippet": "# Statistics should be consistent",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 839,
          "end_line": 839,
          "snippet": "\"Active alerts count should match sum of severity breakdown\"",
          "values_preview": [
            "Active alerts count should match sum of severity breakdown"
          ],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 894,
          "end_line": 894,
          "snippet": "# Get KPIs - should trigger threshold checks",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 902,
          "end_line": 902,
          "snippet": "# Should have alerts for both CPU and memory",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 904,
          "end_line": 904,
          "snippet": "assert KPIType.CPU_USAGE in alert_types, \"Should have CPU usage alert\"",
          "values_preview": [
            "Should have CPU usage alert"
          ],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 905,
          "end_line": 905,
          "snippet": "assert KPIType.MEMORY_USAGE in alert_types, \"Should have memory usage alert\"",
          "values_preview": [
            "Should have memory usage alert"
          ],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 911,
          "end_line": 911,
          "snippet": "assert abs(cpu_alert.value - 85.0) < 0.1, \"CPU alert value should match metrics\"",
          "values_preview": [
            "CPU alert value should match metrics"
          ],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 912,
          "end_line": 912,
          "snippet": "assert abs(memory_alert.value - 150.0) < 1.0, \"Memory alert value should match metrics\"",
          "values_preview": [
            "Memory alert value should match metrics"
          ],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 931,
          "end_line": 931,
          "snippet": "# Should not have created any alerts",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 933,
          "end_line": 933,
          "snippet": "assert len(active_alerts) == 0, \"Should not create alerts when observer is removed\"",
          "values_preview": [
            "Should not create alerts when observer is removed"
          ],
          "priority_guess": "medium",
          "category_guess": "style"
        }
      ],
      "integration_points": [
        {
          "line": 267,
          "text": "webhook_url = \"https://hooks.slack.com/test\""
        },
        {
          "line": 270,
          "text": "# Mock successful HTTP response"
        },
        {
          "line": 316,
          "text": "webhook_url = \"https://hooks.slack.com/test\""
        },
        {
          "line": 319,
          "text": "# Mock HTTP error"
        }
      ]
    },
    {
      "file": "/Users/hretheum/dev/bezrobocie/vector-wave/kolegium/ai_writing_flow/deployment/backups/20250804_131201/src/PERFORMANCE_PROFILING_RESULTS.md",
      "exists": true,
      "hits": [],
      "integration_points": []
    },
    {
      "file": "/Users/hretheum/dev/bezrobocie/vector-wave/kolegium/ai_writing_flow/deployment/backups/20250804_131201/src/ai_writing_flow/listen_chain.py",
      "exists": true,
      "hits": [
        {
          "type": "directive_line",
          "start_line": 167,
          "end_line": 167,
          "snippet": "# Check if step should be executed",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 325,
          "end_line": 325,
          "snippet": "Determine if chain should continue after step failure - Task 15.3",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 332,
          "end_line": 332,
          "snippet": "True if chain should continue despite failure",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 337,
          "end_line": 337,
          "snippet": "# Critical steps that must succeed",
          "values_preview": [],
          "priority_guess": "high",
          "category_guess": "required"
        }
      ],
      "integration_points": []
    },
    {
      "file": "/Users/hretheum/dev/bezrobocie/vector-wave/kolegium/ai_writing_flow/deployment/backups/20250804_131201/src/ai_writing_flow/draft_linear.py",
      "exists": true,
      "hits": [
        {
          "type": "directive_line",
          "start_line": 72,
          "end_line": 72,
          "snippet": "Determine if draft generation should be executed",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 78,
          "end_line": 78,
          "snippet": "True if draft generation should be executed",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 233,
          "end_line": 233,
          "snippet": "draft += f\"• Leaders should consider strategic adoption\\n\\n\"",
          "values_preview": [
            "• Leaders should consider strategic adoption\\n\\n"
          ],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 284,
          "end_line": 284,
          "snippet": "# Always require review if configured",
          "values_preview": [],
          "priority_guess": "low",
          "category_guess": "required"
        }
      ],
      "integration_points": []
    },
    {
      "file": "/Users/hretheum/dev/bezrobocie/vector-wave/kolegium/ai_writing_flow/deployment/backups/20250804_131201/src/ai_writing_flow/models.py",
      "exists": true,
      "hits": [],
      "integration_points": [
        {
          "line": 21,
          "text": "editorial_recommendations: str = Field(default=\"\", description=\"Editorial guidance from Kolegium\")"
        }
      ]
    },
    {
      "file": "/Users/hretheum/dev/bezrobocie/vector-wave/kolegium/ai_writing_flow/deployment/backups/20250804_131201/src/ai_writing_flow/research_linear.py",
      "exists": true,
      "hits": [
        {
          "type": "directive_line",
          "start_line": 59,
          "end_line": 59,
          "snippet": "Determine if research should be executed based on state and config",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 65,
          "end_line": 65,
          "snippet": "True if research should be executed",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        }
      ],
      "integration_points": [
        {
          "line": 177,
          "text": "\"url\": \"https://example.com/source1\","
        }
      ]
    },
    {
      "file": "/Users/hretheum/dev/bezrobocie/vector-wave/kolegium/ai_writing_flow/deployment/backups/20250804_131201/src/ai_writing_flow/linear_flow.py",
      "exists": true,
      "hits": [
        {
          "type": "directive_line",
          "start_line": 84,
          "end_line": 84,
          "snippet": "\"\"\"Determine if research phase should be executed\"\"\"",
          "values_preview": [
            "Determine if research phase should be executed"
          ],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 115,
          "end_line": 115,
          "snippet": "\"\"\"Determine if stage should be retried based on error type\"\"\"",
          "values_preview": [
            "Determine if stage should be retried based on error type"
          ],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 376,
          "end_line": 376,
          "snippet": "raise ValueError(f\"Viral score must be between 0.0 and 10.0, got: {inputs.viral_score}\")",
          "values_preview": [
            "Viral score must be between 0.0 and 10.0, got: {inputs.viral_score}"
          ],
          "priority_guess": "high",
          "category_guess": "required"
        },
        {
          "type": "directive_line",
          "start_line": 563,
          "end_line": 563,
          "snippet": "\"\"\"Determine if stage execution should be retried\"\"\"",
          "values_preview": [
            "Determine if stage execution should be retried"
          ],
          "priority_guess": "medium",
          "category_guess": "style"
        }
      ],
      "integration_points": [
        {
          "line": 72,
          "text": "editorial_recommendations: str = Field(default=\"\", description=\"Editorial guidance\")"
        },
        {
          "line": 395,
          "text": "self.writing_state.editorial_recommendations = inputs.editorial_recommendations"
        }
      ]
    },
    {
      "file": "/Users/hretheum/dev/bezrobocie/vector-wave/kolegium/ai_writing_flow/deployment/backups/20250804_131201/src/ai_writing_flow/__init__.py",
      "exists": true,
      "hits": [],
      "integration_points": []
    },
    {
      "file": "/Users/hretheum/dev/bezrobocie/vector-wave/kolegium/ai_writing_flow/deployment/backups/20250804_131201/src/ai_writing_flow/execution_guards.py",
      "exists": true,
      "hits": [],
      "integration_points": []
    },
    {
      "file": "/Users/hretheum/dev/bezrobocie/vector-wave/kolegium/ai_writing_flow/deployment/backups/20250804_131201/src/ai_writing_flow/quality_linear.py",
      "exists": true,
      "hits": [
        {
          "type": "directive_line",
          "start_line": 79,
          "end_line": 79,
          "snippet": "Determine if quality assessment should be executed",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 85,
          "end_line": 85,
          "snippet": "True if quality assessment should be executed",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 152,
          "end_line": 152,
          "snippet": "# Quality check failed - determine if we should retry - Task 17.2",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        }
      ],
      "integration_points": []
    },
    {
      "file": "/Users/hretheum/dev/bezrobocie/vector-wave/kolegium/ai_writing_flow/deployment/backups/20250804_131201/src/ai_writing_flow/main.py",
      "exists": true,
      "hits": [],
      "integration_points": [
        {
          "line": 142,
          "text": "\"editorial_recommendations\": \"Focus on V2 production features and monitoring capabilities\""
        }
      ]
    },
    {
      "file": "/Users/hretheum/dev/bezrobocie/vector-wave/kolegium/ai_writing_flow/deployment/backups/20250804_131201/src/ai_writing_flow/audience_linear.py",
      "exists": true,
      "hits": [
        {
          "type": "directive_line",
          "start_line": 59,
          "end_line": 59,
          "snippet": "Determine if audience alignment should be executed",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 65,
          "end_line": 65,
          "snippet": "True if audience alignment should be executed",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 240,
          "end_line": 240,
          "snippet": "insights.append(\"High viral potential - content should appeal to broader audience\")",
          "values_preview": [
            "High viral potential - content should appeal to broader audience"
          ],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 255,
          "end_line": 255,
          "snippet": "adjustments.append(\"Keep explanations simple and avoid technical jargon\")",
          "values_preview": [
            "Keep explanations simple and avoid technical jargon"
          ],
          "priority_guess": "medium",
          "category_guess": "forbidden"
        }
      ],
      "integration_points": []
    },
    {
      "file": "/Users/hretheum/dev/bezrobocie/vector-wave/kolegium/ai_writing_flow/deployment/backups/20250804_131201/src/ai_writing_flow/flow_inputs.py",
      "exists": true,
      "hits": [
        {
          "type": "directive_line",
          "start_line": 66,
          "end_line": 66,
          "snippet": "validation_results[\"critical_errors\"].append(f\"Viral score must be 0-10, got {inputs.viral_score}\")",
          "values_preview": [
            "critical_errors",
            "Viral score must be 0-10, got {inputs.viral_score}"
          ],
          "priority_guess": "high",
          "category_guess": "required"
        },
        {
          "type": "directive_line",
          "start_line": 71,
          "end_line": 71,
          "snippet": "validation_results[\"critical_errors\"].append(f\"Invalid content type. Must be one of: {valid_content_types}\")",
          "values_preview": [
            "critical_errors",
            "Invalid content type. Must be one of: {valid_content_types}"
          ],
          "priority_guess": "high",
          "category_guess": "required"
        },
        {
          "type": "directive_line",
          "start_line": 76,
          "end_line": 76,
          "snippet": "validation_results[\"critical_errors\"].append(f\"Invalid content ownership. Must be one of: {valid_ownership}\")",
          "values_preview": [
            "critical_errors",
            "Invalid content ownership. Must be one of: {valid_ownership}"
          ],
          "priority_guess": "high",
          "category_guess": "required"
        },
        {
          "type": "directive_line",
          "start_line": 158,
          "end_line": 158,
          "snippet": "raise ValueError(f\"Viral score must be between 0.0 and 10.0, got: {inputs.viral_score}\")",
          "values_preview": [
            "Viral score must be between 0.0 and 10.0, got: {inputs.viral_score}"
          ],
          "priority_guess": "high",
          "category_guess": "required"
        },
        {
          "type": "directive_line",
          "start_line": 348,
          "end_line": 348,
          "snippet": "issues.append(\"Cannot require human approval with 0 feedback iterations\")",
          "values_preview": [
            "Cannot require human approval with 0 feedback iterations"
          ],
          "priority_guess": "low",
          "category_guess": "required"
        }
      ],
      "integration_points": [
        {
          "line": 22,
          "text": "editorial_recommendations: str = Field(default=\"\", description=\"Editorial guidance\")"
        },
        {
          "line": 100,
          "text": "# Editorial recommendations validation"
        },
        {
          "line": 101,
          "text": "if inputs.editorial_recommendations and len(inputs.editorial_recommendations) > 2000:"
        },
        {
          "line": 102,
          "text": "validation_results[\"warnings\"].append(\"Editorial recommendations very long (>2000 chars)\")"
        }
      ]
    },
    {
      "file": "/Users/hretheum/dev/bezrobocie/vector-wave/kolegium/ai_writing_flow/deployment/backups/20250804_131201/src/ai_writing_flow/ai_writing_flow_v2.py",
      "exists": true,
      "hits": [],
      "integration_points": [
        {
          "line": 360,
          "text": "\"editorial_recommendations\": inputs.get(\"editorial_recommendations\", \"\"),"
        },
        {
          "line": 633,
          "text": "\"editorial_recommendations\": \"Focus on production-ready features and monitoring capabilities\""
        }
      ]
    },
    {
      "file": "/Users/hretheum/dev/bezrobocie/vector-wave/kolegium/ai_writing_flow/deployment/backups/20250804_131201/src/ai_writing_flow/style_linear.py",
      "exists": true,
      "hits": [
        {
          "type": "directive_line",
          "start_line": 72,
          "end_line": 72,
          "snippet": "Determine if style validation should be executed",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 78,
          "end_line": 78,
          "snippet": "True if style validation should be executed",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 143,
          "end_line": 143,
          "snippet": "# Validation failed - check if we should retry - Task 16.2",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "forbidden_phrases",
          "start_line": 206,
          "end_line": 206,
          "snippet": "        forbidden_phrases = []",
          "values_preview": [],
          "priority_guess": "low",
          "category_guess": "forbidden"
        },
        {
          "type": "directive_line",
          "start_line": 214,
          "end_line": 214,
          "snippet": "\"message\": \"LinkedIn posts should be under 3000 characters\",",
          "values_preview": [
            "message",
            "LinkedIn posts should be under 3000 characters"
          ],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 237,
          "end_line": 237,
          "snippet": "\"message\": \"Individual tweets should be under 280 characters\",",
          "values_preview": [
            "message",
            "Individual tweets should be under 280 characters"
          ],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 260,
          "end_line": 260,
          "snippet": "\"message\": \"Blog posts should be at least 300 words for SEO\",",
          "values_preview": [
            "message",
            "Blog posts should be at least 300 words for SEO"
          ],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 282,
          "end_line": 282,
          "snippet": "\"message\": \"Avoid excessive exclamation marks\",",
          "values_preview": [
            "message",
            "Avoid excessive exclamation marks"
          ],
          "priority_guess": "medium",
          "category_guess": "forbidden"
        },
        {
          "type": "forbidden_phrases",
          "start_line": 450,
          "end_line": 450,
          "snippet": "        result.forbidden_phrases = []",
          "values_preview": [],
          "priority_guess": "low",
          "category_guess": "forbidden"
        }
      ],
      "integration_points": []
    },
    {
      "file": "/Users/hretheum/dev/bezrobocie/vector-wave/kolegium/ai_writing_flow/deployment/backups/20250804_131201/src/ai_writing_flow/crews/style_crew.py",
      "exists": true,
      "hits": [
        {
          "type": "forbidden_phrases",
          "start_line": 22,
          "end_line": 31,
          "snippet": "        self.forbidden_phrases = [\n            \"leveraging\", \"utilize\", \"synergy\", \"paradigm shift\",\n            \"cutting-edge\", \"revolutionary\", \"game-changing\", \"disruptive\",\n            \"best practices\", \"industry-leading\", \"world-class\", \"next-gen\",\n            \"seamless\", \"robust\", \"scalable solution\", \"enterprise-grade\",\n            \"unlock\", \"empower\", \"transform your business\", \"drive innovation\",\n            \"at the end of the day\", \"low-hanging fruit\", \"move the needle\",\n            \"dive into\", \"dive deep\", \"deep dive\", \"unpack\",",
          "values_preview": [
            "leveraging",
            "utilize",
            "synergy",
            "paradigm shift",
            "cutting-edge",
            "revolutionary",
            "game-changing",
            "disruptive",
            "best practices",
            "industry-leading",
            "world-class",
            "next-gen",
            "seamless",
            "robust",
            "scalable solution",
            "enterprise-grade",
            "unlock",
            "empower",
            "transform your business",
            "drive innovation"
          ],
          "priority_guess": "low",
          "category_guess": "forbidden"
        },
        {
          "type": "required_elements",
          "start_line": 34,
          "end_line": 38,
          "snippet": "        self.required_elements = {\n            \"evidence\": [\"statistic\", \"study\", \"research\", \"data\", \"%\", \"survey\"],\n            \"specificity\": [\"example\", \"for instance\", \"specifically\", \"case study\"],\n            \"conclusion\": [\"therefore\", \"so\", \"which means\", \"the result\", \"in practice\"]\n        }",
          "values_preview": [
            "evidence",
            "statistic",
            "study",
            "research",
            "data",
            "specificity",
            "example",
            "for instance",
            "specifically",
            "case study",
            "conclusion",
            "therefore",
            "so",
            "which means",
            "the result",
            "in practice"
          ],
          "priority_guess": "low",
          "category_guess": "required"
        },
        {
          "type": "regex_compile",
          "start_line": 57,
          "end_line": 57,
          "snippet": "                pattern = re.compile(r'.{0,20}' + re.escape(phrase) + r'.{0,20}', re.IGNORECASE)",
          "values_preview": [
            ".{0,20}",
            ".{0,20}"
          ],
          "priority_guess": "low",
          "category_guess": "pattern"
        },
        {
          "type": "forbidden_phrases",
          "start_line": 256,
          "end_line": 257,
          "snippet": "            forbidden_phrases=[phrase.split(\"'\")[1] for phrase in forbidden_phrases \n                             if \"'\" in phrase],",
          "values_preview": [],
          "priority_guess": "low",
          "category_guess": "forbidden"
        }
      ],
      "integration_points": [
        {
          "line": 153,
          "text": "role=\"Editorial Style Guardian\","
        },
        {
          "line": 156,
          "text": "of editorial experience at top tech publications, you have an eagle eye for"
        }
      ]
    },
    {
      "file": "/Users/hretheum/dev/bezrobocie/vector-wave/kolegium/ai_writing_flow/deployment/backups/20250804_131201/src/ai_writing_flow/crews/__init__.py",
      "exists": true,
      "hits": [],
      "integration_points": []
    },
    {
      "file": "/Users/hretheum/dev/bezrobocie/vector-wave/kolegium/ai_writing_flow/deployment/backups/20250804_131201/src/ai_writing_flow/crews/research_crew.py",
      "exists": true,
      "hits": [
        {
          "type": "directive_line",
          "start_line": 97,
          "end_line": 97,
          "snippet": "# Return as formatted string since tools must return strings",
          "values_preview": [],
          "priority_guess": "high",
          "category_guess": "required"
        },
        {
          "type": "directive_line",
          "start_line": 153,
          "end_line": 153,
          "snippet": "# Return as JSON string since tools must return strings",
          "values_preview": [],
          "priority_guess": "high",
          "category_guess": "required"
        }
      ],
      "integration_points": [
        {
          "line": 83,
          "text": "r'https?://[^\\s]+',"
        },
        {
          "line": 89,
          "text": "if any(indicator in line.lower() for indicator in ['źródło', 'source', 'http']):"
        },
        {
          "line": 122,
          "text": "\"url\": \"https://gartner.com/ai-agents-2024\","
        },
        {
          "line": 133,
          "text": "\"url\": \"https://stackoverflow.com/survey/2024\","
        },
        {
          "line": 233,
          "text": "url_pattern = r'https?://[^\\s]+'"
        },
        {
          "line": 246,
          "text": "\"url\": \"https://gartner.com/ai-agents-2024\","
        }
      ]
    },
    {
      "file": "/Users/hretheum/dev/bezrobocie/vector-wave/kolegium/ai_writing_flow/deployment/backups/20250804_131201/src/ai_writing_flow/crews/audience_crew.py",
      "exists": true,
      "hits": [],
      "integration_points": [
        {
          "line": 218,
          "text": "editorial_recommendations: str) -> Task:"
        },
        {
          "line": 253,
          "text": "editorial_recommendations: str) -> AudienceAlignment:"
        },
        {
          "line": 270,
          "text": "tasks=[self.create_audience_task(topic, platform, research_summary, editorial_recommendations)],"
        }
      ]
    },
    {
      "file": "/Users/hretheum/dev/bezrobocie/vector-wave/kolegium/ai_writing_flow/deployment/backups/20250804_131201/src/ai_writing_flow/crews/quality_crew.py",
      "exists": true,
      "hits": [
        {
          "type": "directive_line",
          "start_line": 181,
          "end_line": 181,
          "snippet": "that quality content must be accurate, valuable, and ethical. You're thorough",
          "values_preview": [],
          "priority_guess": "high",
          "category_guess": "required"
        }
      ],
      "integration_points": []
    },
    {
      "file": "/Users/hretheum/dev/bezrobocie/vector-wave/kolegium/ai_writing_flow/deployment/backups/20250804_131201/src/ai_writing_flow/crews/writer_crew.py",
      "exists": true,
      "hits": [
        {
          "type": "directive_line",
          "start_line": 118,
          "end_line": 118,
          "snippet": "\"Common Pitfalls (and How to Avoid Them)\",",
          "values_preview": [
            "Common Pitfalls (and How to Avoid Them)"
          ],
          "priority_guess": "medium",
          "category_guess": "forbidden"
        }
      ],
      "integration_points": []
    },
    {
      "file": "/Users/hretheum/dev/bezrobocie/vector-wave/kolegium/ai_writing_flow/deployment/backups/20250804_131201/src/ai_writing_flow/crews/writing_crew.py",
      "exists": true,
      "hits": [],
      "integration_points": []
    },
    {
      "file": "/Users/hretheum/dev/bezrobocie/vector-wave/kolegium/ai_writing_flow/deployment/backups/20250804_131201/src/ai_writing_flow/crews/content_crew/content_crew.py",
      "exists": true,
      "hits": [],
      "integration_points": []
    },
    {
      "file": "/Users/hretheum/dev/bezrobocie/vector-wave/kolegium/ai_writing_flow/deployment/backups/20250804_131201/src/ai_writing_flow/crews/poem_crew/poem_crew.py",
      "exists": true,
      "hits": [],
      "integration_points": [
        {
          "line": 8,
          "text": "# https://docs.crewai.com/concepts/crews#example-crew-class-with-decorators"
        },
        {
          "line": 19,
          "text": "# Agents: https://docs.crewai.com/concepts/agents#yaml-configuration-recommended"
        },
        {
          "line": 20,
          "text": "# Tasks: https://docs.crewai.com/concepts/tasks#yaml-configuration-recommended"
        },
        {
          "line": 25,
          "text": "# https://docs.crewai.com/concepts/agents#agent-tools"
        },
        {
          "line": 34,
          "text": "# https://docs.crewai.com/concepts/tasks#overview-of-a-task"
        },
        {
          "line": 45,
          "text": "# https://docs.crewai.com/concepts/knowledge#what-is-knowledge"
        }
      ]
    },
    {
      "file": "/Users/hretheum/dev/bezrobocie/vector-wave/kolegium/ai_writing_flow/deployment/backups/20250804_131201/src/ai_writing_flow/crews/poem_crew/__init__.py",
      "exists": true,
      "hits": [],
      "integration_points": []
    },
    {
      "file": "/Users/hretheum/dev/bezrobocie/vector-wave/kolegium/ai_writing_flow/deployment/backups/20250804_131201/src/ai_writing_flow/tools/knowledge_base_tool.py",
      "exists": true,
      "hits": [],
      "integration_points": []
    },
    {
      "file": "/Users/hretheum/dev/bezrobocie/vector-wave/kolegium/ai_writing_flow/deployment/backups/20250804_131201/src/ai_writing_flow/tools/__init__.py",
      "exists": true,
      "hits": [],
      "integration_points": []
    },
    {
      "file": "/Users/hretheum/dev/bezrobocie/vector-wave/kolegium/ai_writing_flow/deployment/backups/20250804_131201/src/ai_writing_flow/tools/styleguide_loader.py",
      "exists": true,
      "hits": [],
      "integration_points": []
    },
    {
      "file": "/Users/hretheum/dev/bezrobocie/vector-wave/kolegium/ai_writing_flow/deployment/backups/20250804_131201/src/ai_writing_flow/tools/custom_tool.py",
      "exists": true,
      "hits": [],
      "integration_points": []
    },
    {
      "file": "/Users/hretheum/dev/bezrobocie/vector-wave/kolegium/ai_writing_flow/deployment/backups/20250804_131201/src/ai_writing_flow/tools/enhanced_knowledge_tools.py",
      "exists": true,
      "hits": [],
      "integration_points": []
    },
    {
      "file": "/Users/hretheum/dev/bezrobocie/vector-wave/kolegium/ai_writing_flow/deployment/backups/20250804_131201/src/ai_writing_flow/managers/stage_manager.py",
      "exists": true,
      "hits": [
        {
          "type": "directive_line",
          "start_line": 97,
          "end_line": 97,
          "snippet": "\"\"\"Check if stage should be skipped based on conditions.",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 103,
          "end_line": 103,
          "snippet": "True if stage should be skipped",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 265,
          "end_line": 265,
          "snippet": "\"\"\"Check if a stage should be skipped.",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 271,
          "end_line": 271,
          "snippet": "True if stage should be skipped",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 1043,
          "end_line": 1043,
          "snippet": "expected_max = 3  # Normal stage should not execute more than 3 times in an hour",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        }
      ],
      "integration_points": []
    },
    {
      "file": "/Users/hretheum/dev/bezrobocie/vector-wave/kolegium/ai_writing_flow/deployment/backups/20250804_131201/src/ai_writing_flow/managers/__init__.py",
      "exists": true,
      "hits": [],
      "integration_points": []
    },
    {
      "file": "/Users/hretheum/dev/bezrobocie/vector-wave/kolegium/ai_writing_flow/deployment/backups/20250804_131201/src/ai_writing_flow/utils/retry_manager.py",
      "exists": true,
      "hits": [
        {
          "type": "directive_line",
          "start_line": 48,
          "end_line": 48,
          "snippet": "should_retry: Optional callable to determine if exception should trigger retry",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 205,
          "end_line": 205,
          "snippet": "# Check if we should retry this specific exception",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 237,
          "end_line": 237,
          "snippet": "# Should never reach here",
          "values_preview": [],
          "priority_guess": "high",
          "category_guess": "forbidden"
        },
        {
          "type": "directive_line",
          "start_line": 281,
          "end_line": 281,
          "snippet": "# Check if we should retry this specific exception",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 313,
          "end_line": 313,
          "snippet": "# Should never reach here",
          "values_preview": [],
          "priority_guess": "high",
          "category_guess": "forbidden"
        }
      ],
      "integration_points": []
    },
    {
      "file": "/Users/hretheum/dev/bezrobocie/vector-wave/kolegium/ai_writing_flow/deployment/backups/20250804_131201/src/ai_writing_flow/utils/ui_bridge_v2.py",
      "exists": true,
      "hits": [],
      "integration_points": []
    },
    {
      "file": "/Users/hretheum/dev/bezrobocie/vector-wave/kolegium/ai_writing_flow/deployment/backups/20250804_131201/src/ai_writing_flow/utils/__init__.py",
      "exists": true,
      "hits": [],
      "integration_points": []
    },
    {
      "file": "/Users/hretheum/dev/bezrobocie/vector-wave/kolegium/ai_writing_flow/deployment/backups/20250804_131201/src/ai_writing_flow/utils/loop_prevention.py",
      "exists": true,
      "hits": [
        {
          "type": "directive_line",
          "start_line": 487,
          "end_line": 487,
          "snippet": "Check if execution should be stopped due to loop prevention",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 490,
          "end_line": 490,
          "snippet": "True if execution should be stopped",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        }
      ],
      "integration_points": []
    },
    {
      "file": "/Users/hretheum/dev/bezrobocie/vector-wave/kolegium/ai_writing_flow/deployment/backups/20250804_131201/src/ai_writing_flow/utils/circuit_breaker.py",
      "exists": true,
      "hits": [],
      "integration_points": []
    },
    {
      "file": "/Users/hretheum/dev/bezrobocie/vector-wave/kolegium/ai_writing_flow/deployment/backups/20250804_131201/src/ai_writing_flow/utils/ui_bridge.py",
      "exists": true,
      "hits": [],
      "integration_points": []
    },
    {
      "file": "/Users/hretheum/dev/bezrobocie/vector-wave/kolegium/ai_writing_flow/deployment/backups/20250804_131201/src/ai_writing_flow/models/flow_stage.py",
      "exists": true,
      "hits": [],
      "integration_points": []
    },
    {
      "file": "/Users/hretheum/dev/bezrobocie/vector-wave/kolegium/ai_writing_flow/deployment/backups/20250804_131201/src/ai_writing_flow/models/__init__.py",
      "exists": true,
      "hits": [],
      "integration_points": [
        {
          "line": 38,
          "text": "editorial_recommendations: str = \"\""
        }
      ]
    },
    {
      "file": "/Users/hretheum/dev/bezrobocie/vector-wave/kolegium/ai_writing_flow/deployment/backups/20250804_131201/src/ai_writing_flow/models/flow_control_state.py",
      "exists": true,
      "hits": [
        {
          "type": "directive_line",
          "start_line": 225,
          "end_line": 225,
          "snippet": "Check if circuit breaker should attempt recovery.",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 231,
          "end_line": 231,
          "snippet": "True if recovery should be attempted",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        }
      ],
      "integration_points": []
    },
    {
      "file": "/Users/hretheum/dev/bezrobocie/vector-wave/kolegium/ai_writing_flow/deployment/backups/20250804_131201/src/ai_writing_flow/models/stage_execution.py",
      "exists": true,
      "hits": [],
      "integration_points": []
    },
    {
      "file": "/Users/hretheum/dev/bezrobocie/vector-wave/kolegium/ai_writing_flow/deployment/backups/20250804_131201/src/ai_writing_flow/adapters/knowledge_adapter.py",
      "exists": true,
      "hits": [],
      "integration_points": [
        {
          "line": 13,
          "text": "import aiohttp"
        },
        {
          "line": 146,
          "text": "kb_api_url: str = \"http://localhost:8080\","
        },
        {
          "line": 189,
          "text": "self._session: Optional[aiohttp.ClientSession] = None"
        },
        {
          "line": 196,
          "text": "async def _get_session(self) -> aiohttp.ClientSession:"
        },
        {
          "line": 197,
          "text": "\"\"\"Get or create HTTP session with connection pooling\"\"\""
        },
        {
          "line": 199,
          "text": "timeout = aiohttp.ClientTimeout(total=self.timeout)"
        },
        {
          "line": 200,
          "text": "connector = aiohttp.TCPConnector(limit=10, limit_per_host=5)"
        },
        {
          "line": 201,
          "text": "self._session = aiohttp.ClientSession("
        },
        {
          "line": 209,
          "text": "\"\"\"Close HTTP session and cleanup resources\"\"\""
        },
        {
          "line": 281,
          "text": "except aiohttp.ClientError as e:"
        },
        {
          "line": 554,
          "text": "kb_api_url=os.getenv('KB_API_URL', 'http://localhost:8082'),"
        }
      ]
    },
    {
      "file": "/Users/hretheum/dev/bezrobocie/vector-wave/kolegium/ai_writing_flow/deployment/backups/20250804_131201/src/ai_writing_flow/adapters/__init__.py",
      "exists": true,
      "hits": [],
      "integration_points": []
    },
    {
      "file": "/Users/hretheum/dev/bezrobocie/vector-wave/kolegium/ai_writing_flow/deployment/backups/20250804_131201/src/ai_writing_flow/optimizations/optimized_research.py",
      "exists": true,
      "hits": [],
      "integration_points": []
    },
    {
      "file": "/Users/hretheum/dev/bezrobocie/vector-wave/kolegium/ai_writing_flow/deployment/backups/20250804_131201/src/ai_writing_flow/optimizations/optimized_knowledge_search.py",
      "exists": true,
      "hits": [
        {
          "type": "directive_line",
          "start_line": 452,
          "end_line": 452,
          "snippet": "# Small delay to avoid overwhelming the system",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "forbidden"
        }
      ],
      "integration_points": [
        {
          "line": 24,
          "text": "import aiohttp"
        },
        {
          "line": 103,
          "text": "connection_pool_size: HTTP connection pool size"
        },
        {
          "line": 136,
          "text": "self._session: Optional[aiohttp.ClientSession] = None"
        },
        {
          "line": 142,
          "text": "async def _get_session(self) -> aiohttp.ClientSession:"
        },
        {
          "line": 143,
          "text": "\"\"\"Get or create HTTP session with connection pooling\"\"\""
        },
        {
          "line": 145,
          "text": "connector = aiohttp.TCPConnector("
        },
        {
          "line": 152,
          "text": "timeout = aiohttp.ClientTimeout(total=10.0)"
        },
        {
          "line": 154,
          "text": "self._session = aiohttp.ClientSession("
        }
      ]
    },
    {
      "file": "/Users/hretheum/dev/bezrobocie/vector-wave/kolegium/ai_writing_flow/deployment/backups/20250804_131201/src/ai_writing_flow/optimizations/cache_manager.py",
      "exists": true,
      "hits": [],
      "integration_points": []
    },
    {
      "file": "/Users/hretheum/dev/bezrobocie/vector-wave/kolegium/ai_writing_flow/deployment/backups/20250804_131201/src/ai_writing_flow/optimizations/__init__.py",
      "exists": true,
      "hits": [],
      "integration_points": []
    },
    {
      "file": "/Users/hretheum/dev/bezrobocie/vector-wave/kolegium/ai_writing_flow/deployment/backups/20250804_131201/src/ai_writing_flow/optimizations/optimized_quality_assessment.py",
      "exists": true,
      "hits": [
        {
          "type": "regex_compile",
          "start_line": 256,
          "end_line": 256,
          "snippet": "                'headings': re.compile(r'^#{1,6}\\s+.+$', re.MULTILINE),",
          "values_preview": [
            "headings",
            "^#{1,6}\\s+.+$"
          ],
          "priority_guess": "low",
          "category_guess": "pattern"
        },
        {
          "type": "regex_compile",
          "start_line": 257,
          "end_line": 257,
          "snippet": "                'bullet_points': re.compile(r'^\\s*[-*•]\\s+.+$', re.MULTILINE),",
          "values_preview": [
            "bullet_points",
            "^\\s*[-*•]\\s+.+$"
          ],
          "priority_guess": "low",
          "category_guess": "pattern"
        },
        {
          "type": "regex_compile",
          "start_line": 258,
          "end_line": 258,
          "snippet": "                'numbered_lists': re.compile(r'^\\s*\\d+\\.\\s+.+$', re.MULTILINE),",
          "values_preview": [
            "numbered_lists",
            "^\\s*\\d+\\.\\s+.+$"
          ],
          "priority_guess": "low",
          "category_guess": "pattern"
        },
        {
          "type": "regex_compile",
          "start_line": 259,
          "end_line": 259,
          "snippet": "                'paragraphs': re.compile(r'\\n\\s*\\n')",
          "values_preview": [
            "paragraphs",
            "\\n\\s*\\n"
          ],
          "priority_guess": "low",
          "category_guess": "pattern"
        },
        {
          "type": "regex_compile",
          "start_line": 263,
          "end_line": 263,
          "snippet": "                'sentence_enders': re.compile(r'[.!?]+'),",
          "values_preview": [
            "sentence_enders",
            "[.!?]+"
          ],
          "priority_guess": "low",
          "category_guess": "pattern"
        },
        {
          "type": "regex_compile",
          "start_line": 264,
          "end_line": 264,
          "snippet": "                'complex_words': re.compile(r'\\b\\w{7,}\\b'),",
          "values_preview": [
            "complex_words",
            "\\b\\w{7,}\\b"
          ],
          "priority_guess": "low",
          "category_guess": "pattern"
        },
        {
          "type": "regex_compile",
          "start_line": 265,
          "end_line": 265,
          "snippet": "                'simple_sentences': re.compile(r'^[^,;:]+[.!?]$', re.MULTILINE)",
          "values_preview": [
            "simple_sentences",
            "^[^,;:]+[.!?]$"
          ],
          "priority_guess": "low",
          "category_guess": "pattern"
        },
        {
          "type": "regex_compile",
          "start_line": 705,
          "end_line": 705,
          "snippet": "        date_pattern = re.compile(r'\\b\\d{4}\\b|\\b\\d{1,2}/\\d{1,2}/\\d{2,4}\\b')",
          "values_preview": [
            "\\b\\d{4}\\b|\\b\\d{1,2}/\\d{1,2}/\\d{2,4}\\b"
          ],
          "priority_guess": "low",
          "category_guess": "pattern"
        },
        {
          "type": "regex_compile",
          "start_line": 706,
          "end_line": 706,
          "snippet": "        number_pattern = re.compile(r'\\b\\d+\\.?\\d*%?\\b')",
          "values_preview": [
            "\\b\\d+\\.?\\d*%?\\b"
          ],
          "priority_guess": "low",
          "category_guess": "pattern"
        }
      ],
      "integration_points": []
    },
    {
      "file": "/Users/hretheum/dev/bezrobocie/vector-wave/kolegium/ai_writing_flow/deployment/backups/20250804_131201/src/ai_writing_flow/optimizations/optimized_draft_generation.py",
      "exists": true,
      "hits": [],
      "integration_points": []
    },
    {
      "file": "/Users/hretheum/dev/bezrobocie/vector-wave/kolegium/ai_writing_flow/deployment/backups/20250804_131201/src/ai_writing_flow/optimizations/performance_optimizer.py",
      "exists": true,
      "hits": [],
      "integration_points": []
    },
    {
      "file": "/Users/hretheum/dev/bezrobocie/vector-wave/kolegium/ai_writing_flow/deployment/backups/20250804_131201/src/ai_writing_flow/optimizations/optimized_audience_alignment.py",
      "exists": true,
      "hits": [],
      "integration_points": []
    },
    {
      "file": "/Users/hretheum/dev/bezrobocie/vector-wave/kolegium/ai_writing_flow/deployment/backups/20250804_131201/src/ai_writing_flow/profiling/performance_analyzer.py",
      "exists": true,
      "hits": [
        {
          "type": "directive_line",
          "start_line": 237,
          "end_line": 237,
          "snippet": "suggestions.append(\"Consider caching results to avoid repeated computation\")",
          "values_preview": [
            "Consider caching results to avoid repeated computation"
          ],
          "priority_guess": "medium",
          "category_guess": "forbidden"
        },
        {
          "type": "directive_line",
          "start_line": 551,
          "end_line": 551,
          "snippet": "\"Add result caching to avoid redundant computations\"",
          "values_preview": [
            "Add result caching to avoid redundant computations"
          ],
          "priority_guess": "medium",
          "category_guess": "forbidden"
        }
      ],
      "integration_points": []
    },
    {
      "file": "/Users/hretheum/dev/bezrobocie/vector-wave/kolegium/ai_writing_flow/deployment/backups/20250804_131201/src/ai_writing_flow/profiling/__init__.py",
      "exists": true,
      "hits": [],
      "integration_points": []
    },
    {
      "file": "/Users/hretheum/dev/bezrobocie/vector-wave/kolegium/ai_writing_flow/deployment/backups/20250804_131201/src/ai_writing_flow/profiling/test_profiler.py",
      "exists": true,
      "hits": [
        {
          "type": "directive_line",
          "start_line": 195,
          "end_line": 195,
          "snippet": "# Should have bottlenecks in bottlenecked scenario",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 219,
          "end_line": 219,
          "snippet": "# Should have historical comparison",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 234,
          "end_line": 234,
          "snippet": "# Should have recommendations",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        },
        {
          "type": "directive_line",
          "start_line": 285,
          "end_line": 285,
          "snippet": "# Should detect the spike",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        }
      ],
      "integration_points": []
    },
    {
      "file": "/Users/hretheum/dev/bezrobocie/vector-wave/kolegium/ai_writing_flow/deployment/backups/20250804_131201/src/ai_writing_flow/profiling/flow_profiler.py",
      "exists": true,
      "hits": [],
      "integration_points": []
    },
    {
      "file": "/Users/hretheum/dev/bezrobocie/vector-wave/kolegium/ai_writing_flow/deployment/backups/20250804_131201/src/ai_writing_flow/profiling/v2_integration.py",
      "exists": true,
      "hits": [],
      "integration_points": [
        {
          "line": 467,
          "text": "\"editorial_recommendations\": \"Focus on technical depth and profiling insights\""
        }
      ]
    },
    {
      "file": "/Users/hretheum/dev/bezrobocie/vector-wave/kolegium/ai_writing_flow/deployment/backups/20250804_131201/src/ai_writing_flow/profiling/mock_profiler.py",
      "exists": true,
      "hits": [],
      "integration_points": []
    },
    {
      "file": "/Users/hretheum/dev/bezrobocie/vector-wave/kolegium/ai_writing_flow/deployment/backups/20250804_131201/src/ai_writing_flow/api/__init__.py",
      "exists": true,
      "hits": [],
      "integration_points": []
    },
    {
      "file": "/Users/hretheum/dev/bezrobocie/vector-wave/kolegium/ai_writing_flow/deployment/backups/20250804_131201/src/ai_writing_flow/api/endpoints.py",
      "exists": true,
      "hits": [],
      "integration_points": [
        {
          "line": 23,
          "text": "from fastapi import FastAPI, HTTPException, BackgroundTasks, Request"
        },
        {
          "line": 32,
          "text": "HTTPException = None"
        },
        {
          "line": 49,
          "text": "editorial_recommendations: str = Field(default=\"\", description=\"Editorial guidance\")"
        },
        {
          "line": 159,
          "text": "\"editorial_recommendations\": flow_request.editorial_recommendations,"
        },
        {
          "line": 429,
          "text": "\"editorial_recommendations\": request_data.get(\"editorial_recommendations\", \"\"),"
        },
        {
          "line": 557,
          "text": "Can be used with Flask, Django, or custom HTTP servers"
        },
        {
          "line": 568,
          "text": "method: HTTP method (GET, POST, etc.)"
        }
      ]
    },
    {
      "file": "/Users/hretheum/dev/bezrobocie/vector-wave/kolegium/ai_writing_flow/deployment/backups/20250804_131201/src/ai_writing_flow/monitoring/flow_metrics.py",
      "exists": true,
      "hits": [],
      "integration_points": []
    },
    {
      "file": "/Users/hretheum/dev/bezrobocie/vector-wave/kolegium/ai_writing_flow/deployment/backups/20250804_131201/src/ai_writing_flow/monitoring/__init__.py",
      "exists": true,
      "hits": [],
      "integration_points": []
    },
    {
      "file": "/Users/hretheum/dev/bezrobocie/vector-wave/kolegium/ai_writing_flow/deployment/backups/20250804_131201/src/ai_writing_flow/monitoring/storage.py",
      "exists": true,
      "hits": [],
      "integration_points": []
    },
    {
      "file": "/Users/hretheum/dev/bezrobocie/vector-wave/kolegium/ai_writing_flow/deployment/backups/20250804_131201/src/ai_writing_flow/monitoring/dashboard_api.py",
      "exists": true,
      "hits": [],
      "integration_points": [
        {
          "line": 92,
          "text": "self._websocket_clients: List[Any] = []  # Would be WebSocket objects in real implementation"
        }
      ]
    },
    {
      "file": "/Users/hretheum/dev/bezrobocie/vector-wave/kolegium/ai_writing_flow/deployment/backups/20250804_131201/src/ai_writing_flow/monitoring/alerting.py",
      "exists": true,
      "hits": [],
      "integration_points": [
        {
          "line": 496,
          "text": "\"dashboard_url\": \"http://localhost:8080/dashboard\"  # Could be configurable"
        }
      ]
    },
    {
      "file": "/Users/hretheum/dev/bezrobocie/vector-wave/kolegium/ai_writing_flow/deployment/backups/20250804_131201/src/ai_writing_flow/validation/__init__.py",
      "exists": true,
      "hits": [],
      "integration_points": []
    },
    {
      "file": "/Users/hretheum/dev/bezrobocie/vector-wave/kolegium/ai_writing_flow/deployment/backups/20250804_131201/src/ai_writing_flow/validation/quality_gate.py",
      "exists": true,
      "hits": [
        {
          "type": "directive_line",
          "start_line": 390,
          "end_line": 390,
          "snippet": "# Validate throughput (should be > 0 if system is active)",
          "values_preview": [],
          "priority_guess": "medium",
          "category_guess": "style"
        }
      ],
      "integration_points": []
    }
  ],
  "total_hits": 1250
}