{
  "files": [
    {
      "file": "/Users/hretheum/dev/bezrobocie/vector-wave/publisher/PROJECT_CONTEXT.md",
      "exists": true,
      "hits": [
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 7,
          "snippet": "**KRYTYCZNE OSIĄGNIĘCIE**: Publisher successfully integrated z nową architekturą Vector Wave\n- **Enhanced Orchestrator API** (commit: 0862b77) - Multi-platform publishing coordination na port 8050\n- **LinkedIn PPT Generator Service** (commit: e53ddb5) - Presenton proxy z LinkedIn optimization na port 8002\n- **Analytics Blackbox Interface** (commit: a154ed6) - Future-ready analytics API na port 8081\n- **Circuit Breaker Patterns**: Fault-tolerant service integrations implemented",
          "values": {
            "strings": [],
            "numbers": [
              862,
              77,
              8050,
              53,
              5,
              8002,
              154,
              6,
              8081
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 14,
          "snippet": "## 🎯 Project Overview\n\nMulti-Channel Publisher to zaawansowany system orkiestracji publikacji treści na różne platformy społecznościowe. System umożliwia automatyczną publikację treści generowanych przez AI Writing Flow na LinkedIn, Twitter/X, Substack, Ghost i inne platformy. **Now integrated with Vector Wave ChromaDB-centric architecture**.\n\n## 📊 Current Implementation Status",
          "values": {
            "strings": [],
            "numbers": []
          }
        },
        {
          "type": "forbidden_phrases",
          "platform": "universal",
          "line": 32,
          "snippet": "- **Implementacja**: Complete FastAPI service z Docker integration\n- **Features**: Health checks, service info, adapter monitoring, OpenAPI docs\n- **Port**: 8085:8080 (mapped for conflict avoidance)\n- **Performance**: <5ms response time\n- **Testing**: ✅ Comprehensive test suite",
          "values": {
            "strings": [],
            "numbers": [
              8085,
              8080,
              5
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 39,
          "snippet": "- **Implementacja**: Complete multi-platform publishing endpoint\n- **Features**: Multi-platform support, Pydantic validation, UUID-based IDs, scheduling\n- **Platforms**: Twitter, LinkedIn, Substack, Ghost (Beehiiv → Ghost migration)\n- **Performance**: <20ms average response time\n- **Testing**: ✅ Comprehensive test suite w demo",
          "values": {
            "strings": [],
            "numbers": [
              20
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "twitter",
          "line": 90,
          "snippet": "\n### Platform Support Status  \n- **Twitter/X**: ✅ Production ready with health monitoring (port 8083)\n- **Ghost**: ✅ Production ready with health monitoring (port 8086)\n- **Substack**: ✅ Adapter skeleton ready",
          "values": {
            "strings": [],
            "numbers": [
              8083,
              8086
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 91,
          "snippet": "### Platform Support Status  \n- **Twitter/X**: ✅ Production ready with health monitoring (port 8083)\n- **Ghost**: ✅ Production ready with health monitoring (port 8086)\n- **Substack**: ✅ Adapter skeleton ready\n- **LinkedIn**: 🔄 Integration planned (existing production module)",
          "values": {
            "strings": [],
            "numbers": [
              8083,
              8086
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 92,
          "snippet": "- **Twitter/X**: ✅ Production ready with health monitoring (port 8083)\n- **Ghost**: ✅ Production ready with health monitoring (port 8086)\n- **Substack**: ✅ Adapter skeleton ready\n- **LinkedIn**: 🔄 Integration planned (existing production module)\n- **Beehiiv**: ✅ Complete health monitoring implementation",
          "values": {
            "strings": [],
            "numbers": [
              8083,
              8086
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 93,
          "snippet": "- **Ghost**: ✅ Production ready with health monitoring (port 8086)\n- **Substack**: ✅ Adapter skeleton ready\n- **LinkedIn**: 🔄 Integration planned (existing production module)\n- **Beehiiv**: ✅ Complete health monitoring implementation\n",
          "values": {
            "strings": [],
            "numbers": [
              8086
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 94,
          "snippet": "- **Substack**: ✅ Adapter skeleton ready\n- **LinkedIn**: 🔄 Integration planned (existing production module)\n- **Beehiiv**: ✅ Complete health monitoring implementation\n\n### Integration Points",
          "values": {
            "strings": [],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 98,
          "snippet": "### Integration Points\n- **AI Writing Flow**: ✅ Ready for integration (http://localhost:8003)\n- **LinkedIn Module**: ✅ Production ready (Node.js + Browserbase)\n- **Vector Wave Ecosystem**: ✅ Integrated with main project structure\n- **Alert System**: ✅ PRODUCTION READY - Telegram, Discord, Webhook notifications",
          "values": {
            "strings": [],
            "numbers": [
              8003
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "twitter",
          "line": 125,
          "snippet": "│   └── versioning.py          # API versioning\n├── src/adapters/              # Platform adapters\n│   ├── twitter/               # Twitter/X adapter\n│   ├── ghost/                 # Ghost CMS adapter\n│   └── substack/              # Substack adapter (skeleton)",
          "values": {
            "strings": [],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "twitter",
          "line": 126,
          "snippet": "├── src/adapters/              # Platform adapters\n│   ├── twitter/               # Twitter/X adapter\n│   ├── ghost/                 # Ghost CMS adapter\n│   └── substack/              # Substack adapter (skeleton)\n├── docs/                      # Comprehensive documentation",
          "values": {
            "strings": [],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "twitter",
          "line": 127,
          "snippet": "│   ├── twitter/               # Twitter/X adapter\n│   ├── ghost/                 # Ghost CMS adapter\n│   └── substack/              # Substack adapter (skeleton)\n├── docs/                      # Comprehensive documentation\n│   ├── phase-4-orchestrator-api.md",
          "values": {
            "strings": [],
            "numbers": [
              4
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 130,
          "snippet": "├── docs/                      # Comprehensive documentation\n│   ├── phase-4-orchestrator-api.md\n│   ├── phase-4-ghost-adapter.md\n│   └── masterplan.md\n├── docker-compose.yml         # Service orchestration",
          "values": {
            "strings": [],
            "numbers": [
              4,
              4
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "twitter",
          "line": 185,
          "snippet": "  -d '{\n    \"type\": \"platform_down\",\n    \"platform\": \"twitter\", \n    \"severity\": \"critical\"\n  }'",
          "values": {
            "strings": [
              "{\n    ",
              ": ",
              ",\n    ",
              ": ",
              ", \n    ",
              ": ",
              "\n  }"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 210,
          "snippet": "### Pending Integrations  \n- 🔄 **AI Writing Flow Client**: Phase 6 integration\n- 🔄 **LinkedIn Module Wrapper**: Phase 7 integration  \n- ✅ **Advanced Platform Health Monitoring**: Phase 8 COMPLETED\n- 🔄 **Content Optimization**: Phase 9 features",
          "values": {
            "strings": [],
            "numbers": [
              6,
              7,
              8,
              9
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 250,
          "snippet": "### Medium Term (Phase 6-7)  \n1. **AI Writing Flow Integration**: Content generation pipeline\n2. **LinkedIn Module Integration**: Production wrapper implementation\n3. **End-to-End Testing**: Complete workflow validation\n",
          "values": {
            "strings": [],
            "numbers": [
              6,
              7,
              1,
              2,
              3
            ]
          }
        }
      ]
    },
    {
      "file": "/Users/hretheum/dev/bezrobocie/vector-wave/publisher/docker-compose.enhanced.yml",
      "exists": true,
      "hits": []
    },
    {
      "file": "/Users/hretheum/dev/bezrobocie/vector-wave/publisher/SHARED_VOLUME_INTEGRATION.md",
      "exists": true,
      "hits": [
        {
          "type": "platform_specific",
          "platform": "twitter",
          "line": 31,
          "snippet": "|---------|----------------|--------------|-------------|\n| **Orchestrator** | publisher-orchestrator | `/tmp/publisher_images` | SHARED_IMAGES_PATH |\n| **Twitter Adapter** | publisher-twitter-adapter | `/tmp/publisher_images` | SHARED_IMAGES_PATH |\n| **Ghost Adapter** | publisher-ghost-adapter | `/tmp/publisher_images` | SHARED_IMAGES_PATH |\n| **Beehiiv Adapter** | publisher-beehiiv-adapter | `/tmp/publisher_images` | SHARED_IMAGES_PATH |",
          "values": {
            "strings": [],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "twitter",
          "line": 32,
          "snippet": "| **Orchestrator** | publisher-orchestrator | `/tmp/publisher_images` | SHARED_IMAGES_PATH |\n| **Twitter Adapter** | publisher-twitter-adapter | `/tmp/publisher_images` | SHARED_IMAGES_PATH |\n| **Ghost Adapter** | publisher-ghost-adapter | `/tmp/publisher_images` | SHARED_IMAGES_PATH |\n| **Beehiiv Adapter** | publisher-beehiiv-adapter | `/tmp/publisher_images` | SHARED_IMAGES_PATH |\n",
          "values": {
            "strings": [],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "twitter",
          "line": 33,
          "snippet": "| **Twitter Adapter** | publisher-twitter-adapter | `/tmp/publisher_images` | SHARED_IMAGES_PATH |\n| **Ghost Adapter** | publisher-ghost-adapter | `/tmp/publisher_images` | SHARED_IMAGES_PATH |\n| **Beehiiv Adapter** | publisher-beehiiv-adapter | `/tmp/publisher_images` | SHARED_IMAGES_PATH |\n\n---",
          "values": {
            "strings": [],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "twitter",
          "line": 48,
          "snippet": "      - publisher_images:/tmp/publisher_images\n      \n  twitter-adapter:\n    environment:\n      - SHARED_IMAGES_PATH=/tmp/publisher_images",
          "values": {
            "strings": [],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 54,
          "snippet": "      - publisher_images:/tmp/publisher_images\n      \n  ghost-adapter:\n    environment:\n      - SHARED_IMAGES_PATH=/tmp/publisher_images",
          "values": {
            "strings": [],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "beehiiv",
          "line": 60,
          "snippet": "      - publisher_images:/tmp/publisher_images\n      \n  beehiiv-adapter:\n    environment:\n      - SHARED_IMAGES_PATH=/tmp/publisher_images",
          "values": {
            "strings": [],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "twitter",
          "line": 105,
          "snippet": "# Test Files Created:\n- test_cross_container_access.txt (orchestrator → all readable)\n- test_from_twitter.txt (twitter → all readable)\n- test_from_beehiiv.txt (beehiiv → all readable)  \n- test_from_ghost.txt (ghost → all readable)",
          "values": {
            "strings": [],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "twitter",
          "line": 106,
          "snippet": "- test_cross_container_access.txt (orchestrator → all readable)\n- test_from_twitter.txt (twitter → all readable)\n- test_from_beehiiv.txt (beehiiv → all readable)  \n- test_from_ghost.txt (ghost → all readable)\n",
          "values": {
            "strings": [],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "twitter",
          "line": 107,
          "snippet": "- test_from_twitter.txt (twitter → all readable)\n- test_from_beehiiv.txt (beehiiv → all readable)  \n- test_from_ghost.txt (ghost → all readable)\n\n# Result: ✅ Perfect cross-container read/write access",
          "values": {
            "strings": [],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "twitter",
          "line": 145,
          "snippet": "```\n\n### From Twitter Adapter\n```python\n# Access shared images for posting",
          "values": {
            "strings": [],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "twitter",
          "line": 150,
          "snippet": "image_path = \"/tmp/publisher_images/business-meeting_1754573408_33339862.jpg\"\nwith open(image_path, 'rb') as img_file:\n    # Post to Twitter with image\n```\n",
          "values": {
            "strings": [
              "/tmp/publisher_images/business-meeting_1754573408_33339862.jpg",
              "rb"
            ],
            "numbers": [
              1754573408,
              33339862
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 153,
          "snippet": "```\n\n### From Ghost Adapter  \n```python\n# Upload shared images to Ghost CMS",
          "values": {
            "strings": [],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 155,
          "snippet": "### From Ghost Adapter  \n```python\n# Upload shared images to Ghost CMS\nshared_images = glob.glob(\"/tmp/publisher_images/*.jpg\")\nfor image_path in shared_images:",
          "values": {
            "strings": [
              "/tmp/publisher_images/*.jpg"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 158,
          "snippet": "shared_images = glob.glob(\"/tmp/publisher_images/*.jpg\")\nfor image_path in shared_images:\n    # Upload to Ghost media library\n```\n",
          "values": {
            "strings": [
              "/tmp/publisher_images/*.jpg"
            ],
            "numbers": []
          }
        }
      ]
    },
    {
      "file": "/Users/hretheum/dev/bezrobocie/vector-wave/publisher/ARCHITECTURE.md",
      "exists": true,
      "hits": [
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 5,
          "snippet": "## 🎯 System Overview\n\nMulti-Channel Publisher to warstwa orkiestrująca publikację treści na różnych platformach, która integruje się z istniejącym AI Writing Flow i rozszerza możliwości publikacji poza LinkedIn.\n\n### 🏗️ Zaimplementowane Komponenty (Production Ready)",
          "values": {
            "strings": [],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 15,
          "snippet": "   - Real-time streaming i conversation memory\n\n2. **LinkedIn Module** (production ready):\n   - Browser automation z Stagehand + Browserbase\n   - Session management (30+ dni)",
          "values": {
            "strings": [],
            "numbers": [
              2,
              30
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 18,
          "snippet": "   - Browser automation z Stagehand + Browserbase\n   - Session management (30+ dni)\n   - CLI interface: `node scripts/linkedin-cli.js publish`\n   - Support dla immediate i scheduled posts\n   - PDF upload capability",
          "values": {
            "strings": [],
            "numbers": [
              30
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "twitter",
          "line": 31,
          "snippet": "\n4. **Platform Adapters** ✅ **READY FOR INTEGRATION**:\n   - **Twitter/X Adapter**: Typefully API integration (port 8083)\n   - **Ghost CMS Adapter**: Complete CMS integration (port 8086)\n   - **Substack Adapter**: Skeleton implementation ready",
          "values": {
            "strings": [],
            "numbers": [
              4,
              8083,
              8086
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 32,
          "snippet": "4. **Platform Adapters** ✅ **READY FOR INTEGRATION**:\n   - **Twitter/X Adapter**: Typefully API integration (port 8083)\n   - **Ghost CMS Adapter**: Complete CMS integration (port 8086)\n   - **Substack Adapter**: Skeleton implementation ready\n   - **LinkedIn Integration**: Wrapper for existing LinkedIn module",
          "values": {
            "strings": [],
            "numbers": [
              4,
              8083,
              8086
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 33,
          "snippet": "   - **Twitter/X Adapter**: Typefully API integration (port 8083)\n   - **Ghost CMS Adapter**: Complete CMS integration (port 8086)\n   - **Substack Adapter**: Skeleton implementation ready\n   - **LinkedIn Integration**: Wrapper for existing LinkedIn module\n",
          "values": {
            "strings": [],
            "numbers": [
              8083,
              8086
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 34,
          "snippet": "   - **Ghost CMS Adapter**: Complete CMS integration (port 8086)\n   - **Substack Adapter**: Skeleton implementation ready\n   - **LinkedIn Integration**: Wrapper for existing LinkedIn module\n\n### 📊 Current Implementation Status: **PHASE 8 COMPLETED**",
          "values": {
            "strings": [],
            "numbers": [
              8086,
              8
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 93,
          "snippet": "    \n    subgraph \"Channel Adapters\"\n        LINKEDIN[LinkedIn Adapter :8081]\n        TWITTER[Twitter/X Adapter :8082] \n        SUBSTACK[Substack Adapter :8083]",
          "values": {
            "strings": [
              "Channel Adapters"
            ],
            "numbers": [
              8081,
              8082,
              8083
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 94,
          "snippet": "    subgraph \"Channel Adapters\"\n        LINKEDIN[LinkedIn Adapter :8081]\n        TWITTER[Twitter/X Adapter :8082] \n        SUBSTACK[Substack Adapter :8083]\n        BEEHIIV[Beehiiv Adapter :8084]",
          "values": {
            "strings": [
              "Channel Adapters"
            ],
            "numbers": [
              8081,
              8082,
              8083,
              8084
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 95,
          "snippet": "        LINKEDIN[LinkedIn Adapter :8081]\n        TWITTER[Twitter/X Adapter :8082] \n        SUBSTACK[Substack Adapter :8083]\n        BEEHIIV[Beehiiv Adapter :8084]\n    end",
          "values": {
            "strings": [],
            "numbers": [
              8081,
              8082,
              8083,
              8084
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "twitter",
          "line": 96,
          "snippet": "        TWITTER[Twitter/X Adapter :8082] \n        SUBSTACK[Substack Adapter :8083]\n        BEEHIIV[Beehiiv Adapter :8084]\n    end\n    ",
          "values": {
            "strings": [],
            "numbers": [
              8082,
              8083,
              8084
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 111,
          "snippet": "    ORCHESTRATOR --> QUEUE\n    SCHEDULER --> QUEUE\n    QUEUE --> LINKEDIN\n    QUEUE --> TWITTER\n    QUEUE --> SUBSTACK",
          "values": {
            "strings": [],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 112,
          "snippet": "    SCHEDULER --> QUEUE\n    QUEUE --> LINKEDIN\n    QUEUE --> TWITTER\n    QUEUE --> SUBSTACK\n    QUEUE --> BEEHIIV",
          "values": {
            "strings": [],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 113,
          "snippet": "    QUEUE --> LINKEDIN\n    QUEUE --> TWITTER\n    QUEUE --> SUBSTACK\n    QUEUE --> BEEHIIV\n    ",
          "values": {
            "strings": [],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 114,
          "snippet": "    QUEUE --> TWITTER\n    QUEUE --> SUBSTACK\n    QUEUE --> BEEHIIV\n    \n    LINKEDIN --> BROWSER",
          "values": {
            "strings": [],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 116,
          "snippet": "    QUEUE --> BEEHIIV\n    \n    LINKEDIN --> BROWSER\n    SUBSTACK --> BROWSER\n    TWITTER --> TYPEFULLY[Typefully API]",
          "values": {
            "strings": [],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 117,
          "snippet": "    \n    LINKEDIN --> BROWSER\n    SUBSTACK --> BROWSER\n    TWITTER --> TYPEFULLY[Typefully API]\n    ",
          "values": {
            "strings": [],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 118,
          "snippet": "    LINKEDIN --> BROWSER\n    SUBSTACK --> BROWSER\n    TWITTER --> TYPEFULLY[Typefully API]\n    \n    ORCHESTRATOR --> POSTGRES",
          "values": {
            "strings": [],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 128,
          "snippet": "    PROMETHEUS --> GRAFANA[Grafana :3000]\n    \n    HEALTH_SYS --> LINKEDIN\n    HEALTH_SYS --> TWITTER\n    HEALTH_SYS --> SUBSTACK",
          "values": {
            "strings": [],
            "numbers": [
              3000
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 129,
          "snippet": "    \n    HEALTH_SYS --> LINKEDIN\n    HEALTH_SYS --> TWITTER\n    HEALTH_SYS --> SUBSTACK\n    HEALTH_SYS --> BEEHIIV",
          "values": {
            "strings": [],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 130,
          "snippet": "    HEALTH_SYS --> LINKEDIN\n    HEALTH_SYS --> TWITTER\n    HEALTH_SYS --> SUBSTACK\n    HEALTH_SYS --> BEEHIIV\n    RATE_MONITOR --> HEALTH_SYS",
          "values": {
            "strings": [],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "twitter",
          "line": 131,
          "snippet": "    HEALTH_SYS --> TWITTER\n    HEALTH_SYS --> SUBSTACK\n    HEALTH_SYS --> BEEHIIV\n    RATE_MONITOR --> HEALTH_SYS\n    SESSION_MONITOR --> HEALTH_SYS",
          "values": {
            "strings": [],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 148,
          "snippet": "    participant Sched as Scheduler\n    participant Queue as Redis Queue\n    participant LinkedIn as LinkedIn Adapter\n    participant Twitter as Twitter Adapter\n    participant AlertMgr as Alert Manager",
          "values": {
            "strings": [],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 149,
          "snippet": "    participant Queue as Redis Queue\n    participant LinkedIn as LinkedIn Adapter\n    participant Twitter as Twitter Adapter\n    participant AlertMgr as Alert Manager\n    participant Telegram as Telegram Bot",
          "values": {
            "strings": [],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 160,
          "snippet": "    Sched->>Queue: Schedule future posts\n    \n    Queue->>LinkedIn: Publish to LinkedIn\n    Queue->>Twitter: Publish to Twitter\n    ",
          "values": {
            "strings": [],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 161,
          "snippet": "    \n    Queue->>LinkedIn: Publish to LinkedIn\n    Queue->>Twitter: Publish to Twitter\n    \n    LinkedIn->>MCP: Status update",
          "values": {
            "strings": [],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 163,
          "snippet": "    Queue->>Twitter: Publish to Twitter\n    \n    LinkedIn->>MCP: Status update\n    Twitter->>MCP: Status update\n    ",
          "values": {
            "strings": [],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 164,
          "snippet": "    \n    LinkedIn->>MCP: Status update\n    Twitter->>MCP: Status update\n    \n    alt Publication Error",
          "values": {
            "strings": [],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "twitter",
          "line": 167,
          "snippet": "    \n    alt Publication Error\n        Twitter->>AlertMgr: Platform error\n        AlertMgr->>Telegram: Critical alert\n    end",
          "values": {
            "strings": [],
            "numbers": []
          }
        },
        {
          "type": "required_elements",
          "platform": "universal",
          "line": 178,
          "snippet": "### 1. Multi-Channel Publisher Orchestrator (Port 8085) ✅ **IMPLEMENTED**\n\n**Includes Alert System (Task 5.4)** ✅ **PRODUCTION READY**\n\n**Technology Stack**: FastAPI + Python 3.11 + Pydantic v2  ",
          "values": {
            "strings": [],
            "numbers": [
              1,
              8085,
              5,
              4,
              3,
              11,
              2
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "twitter",
          "line": 240,
          "snippet": "        # Platform adapter endpoints\n        self.platform_adapters = {\n            'twitter': 'http://localhost:8083',\n            'ghost': 'http://localhost:8086', \n            'substack': 'http://localhost:8087',",
          "values": {
            "strings": [
              "twitter",
              "http://localhost:8083",
              "ghost",
              "http://localhost:8086",
              "substack",
              "http://localhost:8087"
            ],
            "numbers": [
              8083,
              8086,
              8087
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 241,
          "snippet": "        self.platform_adapters = {\n            'twitter': 'http://localhost:8083',\n            'ghost': 'http://localhost:8086', \n            'substack': 'http://localhost:8087',\n            'linkedin': 'http://localhost:8088'",
          "values": {
            "strings": [
              "twitter",
              "http://localhost:8083",
              "ghost",
              "http://localhost:8086",
              "substack",
              "http://localhost:8087",
              "linkedin",
              "http://localhost:8088"
            ],
            "numbers": [
              8083,
              8086,
              8087,
              8088
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 242,
          "snippet": "            'twitter': 'http://localhost:8083',\n            'ghost': 'http://localhost:8086', \n            'substack': 'http://localhost:8087',\n            'linkedin': 'http://localhost:8088'\n        }",
          "values": {
            "strings": [
              "twitter",
              "http://localhost:8083",
              "ghost",
              "http://localhost:8086",
              "substack",
              "http://localhost:8087",
              "linkedin",
              "http://localhost:8088"
            ],
            "numbers": [
              8083,
              8086,
              8087,
              8088
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 243,
          "snippet": "            'ghost': 'http://localhost:8086', \n            'substack': 'http://localhost:8087',\n            'linkedin': 'http://localhost:8088'\n        }\n    ",
          "values": {
            "strings": [
              "ghost",
              "http://localhost:8086",
              "substack",
              "http://localhost:8087",
              "linkedin",
              "http://localhost:8088"
            ],
            "numbers": [
              8086,
              8087,
              8088
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 322,
          "snippet": "### 2. Channel Adapters\n\n#### LinkedIn Adapter (Port 8088) ✅ **READY FOR INTEGRATION**\n**Integration**: Wrapper around existing LinkedIn module  \n**Technology**: Node.js + existing LinkedIn automation  ",
          "values": {
            "strings": [],
            "numbers": [
              2,
              8088
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 323,
          "snippet": "\n#### LinkedIn Adapter (Port 8088) ✅ **READY FOR INTEGRATION**\n**Integration**: Wrapper around existing LinkedIn module  \n**Technology**: Node.js + existing LinkedIn automation  \n**Status**: Production LinkedIn module exists, needs wrapper adapter",
          "values": {
            "strings": [],
            "numbers": [
              8088
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 324,
          "snippet": "#### LinkedIn Adapter (Port 8088) ✅ **READY FOR INTEGRATION**\n**Integration**: Wrapper around existing LinkedIn module  \n**Technology**: Node.js + existing LinkedIn automation  \n**Status**: Production LinkedIn module exists, needs wrapper adapter\n",
          "values": {
            "strings": [],
            "numbers": [
              8088
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 325,
          "snippet": "**Integration**: Wrapper around existing LinkedIn module  \n**Technology**: Node.js + existing LinkedIn automation  \n**Status**: Production LinkedIn module exists, needs wrapper adapter\n\n```typescript",
          "values": {
            "strings": [],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 328,
          "snippet": "\n```typescript\nclass LinkedInAdapter implements ChannelAdapter {\n    async publish(content: PublicationJob): Promise<PublicationResult> {\n        const linkedinCli = new LinkedInCLI();",
          "values": {
            "strings": [],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 330,
          "snippet": "class LinkedInAdapter implements ChannelAdapter {\n    async publish(content: PublicationJob): Promise<PublicationResult> {\n        const linkedinCli = new LinkedInCLI();\n        \n        const result = await linkedinCli.publish({",
          "values": {
            "strings": [],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 332,
          "snippet": "        const linkedinCli = new LinkedInCLI();\n        \n        const result = await linkedinCli.publish({\n            content: content.text,\n            mediaPath: content.mediaUrl ? await this.downloadMedia(content.mediaUrl) : null,",
          "values": {
            "strings": [],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "twitter",
          "line": 349,
          "snippet": "```\n\n#### Twitter/X Adapter (Port 8083) ✅ **IMPLEMENTED**\n**Integration**: Typefully API  \n**Technology**: FastAPI + Python + Typefully HTTP API  ",
          "values": {
            "strings": [],
            "numbers": [
              8083
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "twitter",
          "line": 357,
          "snippet": "- ✅ Scheduled publication (automatic when `schedule_time` provided)\n- ✅ Draft creation for manual publishing\n- ✅ Status tracking with Twitter URL retrieval\n- ✅ Comprehensive error handling\n",
          "values": {
            "strings": [],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "twitter",
          "line": 361,
          "snippet": "\n```typescript\nclass TwitterAdapter implements ChannelAdapter {\n    constructor() {\n        this.typefully = new TypefullyAPI(process.env.TYPEFULLY_API_KEY);",
          "values": {
            "strings": [],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 395,
          "snippet": "```\n\n#### Ghost CMS Adapter (Port 8086) ✅ **IMPLEMENTED**\n**Integration**: Ghost Admin API  \n**Technology**: FastAPI + Python + Ghost API  ",
          "values": {
            "strings": [],
            "numbers": [
              8086
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 396,
          "snippet": "\n#### Ghost CMS Adapter (Port 8086) ✅ **IMPLEMENTED**\n**Integration**: Ghost Admin API  \n**Technology**: FastAPI + Python + Ghost API  \n**Status**: ✅ **PRODUCTION READY** - Complete CMS integration",
          "values": {
            "strings": [],
            "numbers": [
              8086
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 397,
          "snippet": "#### Ghost CMS Adapter (Port 8086) ✅ **IMPLEMENTED**\n**Integration**: Ghost Admin API  \n**Technology**: FastAPI + Python + Ghost API  \n**Status**: ✅ **PRODUCTION READY** - Complete CMS integration\n**Features**:",
          "values": {
            "strings": [],
            "numbers": [
              8086
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 406,
          "snippet": "- ✅ Scheduled publishing\n\n#### Substack Adapter (Port 8087) 🔄 **SKELETON READY**\n**Integration**: Browser automation (similar to LinkedIn)  \n**Technology**: Node.js + Stagehand + Browserbase (planned)  ",
          "values": {
            "strings": [],
            "numbers": [
              8087
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 407,
          "snippet": "\n#### Substack Adapter (Port 8087) 🔄 **SKELETON READY**\n**Integration**: Browser automation (similar to LinkedIn)  \n**Technology**: Node.js + Stagehand + Browserbase (planned)  \n**Status**: 🔄 Basic structure implemented, needs browser automation",
          "values": {
            "strings": [],
            "numbers": [
              8087
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "substack",
          "line": 412,
          "snippet": "\n```typescript\nclass SubstackAdapter implements ChannelAdapter {\n    constructor() {\n        this.browserbase = new Browserbase(process.env.BROWSERBASE_API_KEY);",
          "values": {
            "strings": [],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "substack",
          "line": 415,
          "snippet": "    constructor() {\n        this.browserbase = new Browserbase(process.env.BROWSERBASE_API_KEY);\n        this.sessionManager = new SubstackSessionManager();\n    }\n    ",
          "values": {
            "strings": [],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "substack",
          "line": 423,
          "snippet": "        \n        try {\n            // Navigate to Substack editor\n            await browser.goto('https://substack.com/publish');\n            ",
          "values": {
            "strings": [
              "https://substack.com/publish"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "substack",
          "line": 424,
          "snippet": "        try {\n            // Navigate to Substack editor\n            await browser.goto('https://substack.com/publish');\n            \n            // Fill newsletter content",
          "values": {
            "strings": [
              "https://substack.com/publish"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "beehiiv",
          "line": 456,
          "snippet": "```\n\n#### Beehiiv → Ghost Migration ✅ **COMPLETED**\n**Previous**: Beehiiv API integration planned  \n**Current**: **Migrated to Ghost CMS** for better API stability and feature completeness  ",
          "values": {
            "strings": [],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "beehiiv",
          "line": 457,
          "snippet": "\n#### Beehiiv → Ghost Migration ✅ **COMPLETED**\n**Previous**: Beehiiv API integration planned  \n**Current**: **Migrated to Ghost CMS** for better API stability and feature completeness  \n**Reason**: Ghost provides more reliable API, better content management, and easier self-hosting",
          "values": {
            "strings": [],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "beehiiv",
          "line": 458,
          "snippet": "#### Beehiiv → Ghost Migration ✅ **COMPLETED**\n**Previous**: Beehiiv API integration planned  \n**Current**: **Migrated to Ghost CMS** for better API stability and feature completeness  \n**Reason**: Ghost provides more reliable API, better content management, and easier self-hosting\n",
          "values": {
            "strings": [],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "beehiiv",
          "line": 459,
          "snippet": "**Previous**: Beehiiv API integration planned  \n**Current**: **Migrated to Ghost CMS** for better API stability and feature completeness  \n**Reason**: Ghost provides more reliable API, better content management, and easier self-hosting\n\n```typescript",
          "values": {
            "strings": [],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "beehiiv",
          "line": 462,
          "snippet": "\n```typescript\nclass BeehiivAdapter implements ChannelAdapter {\n    constructor() {\n        this.api = new BeehiivAPI(process.env.BEEHIIV_API_KEY);",
          "values": {
            "strings": [],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "beehiiv",
          "line": 464,
          "snippet": "class BeehiivAdapter implements ChannelAdapter {\n    constructor() {\n        this.api = new BeehiivAPI(process.env.BEEHIIV_API_KEY);\n        this.browserFallback = new BeehiivBrowserAutomation();\n    }",
          "values": {
            "strings": [],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "beehiiv",
          "line": 465,
          "snippet": "    constructor() {\n        this.api = new BeehiivAPI(process.env.BEEHIIV_API_KEY);\n        this.browserFallback = new BeehiivBrowserAutomation();\n    }\n    ",
          "values": {
            "strings": [],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "twitter",
          "line": 514,
          "snippet": "```python\nPLATFORM_ADAPTERS = {\n    'twitter': 'http://localhost:8083',\n    'ghost': 'http://localhost:8086',\n    'substack': 'http://localhost:8087', ",
          "values": {
            "strings": [
              "twitter",
              "http://localhost:8083",
              "ghost",
              "http://localhost:8086",
              "substack",
              "http://localhost:8087"
            ],
            "numbers": [
              8083,
              8086,
              8087
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 515,
          "snippet": "PLATFORM_ADAPTERS = {\n    'twitter': 'http://localhost:8083',\n    'ghost': 'http://localhost:8086',\n    'substack': 'http://localhost:8087', \n    'linkedin': 'http://localhost:8088'",
          "values": {
            "strings": [
              "twitter",
              "http://localhost:8083",
              "ghost",
              "http://localhost:8086",
              "substack",
              "http://localhost:8087",
              "linkedin",
              "http://localhost:8088"
            ],
            "numbers": [
              8083,
              8086,
              8087,
              8088
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 516,
          "snippet": "    'twitter': 'http://localhost:8083',\n    'ghost': 'http://localhost:8086',\n    'substack': 'http://localhost:8087', \n    'linkedin': 'http://localhost:8088'\n}",
          "values": {
            "strings": [
              "twitter",
              "http://localhost:8083",
              "ghost",
              "http://localhost:8086",
              "substack",
              "http://localhost:8087",
              "linkedin",
              "http://localhost:8088"
            ],
            "numbers": [
              8083,
              8086,
              8087,
              8088
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 517,
          "snippet": "    'ghost': 'http://localhost:8086',\n    'substack': 'http://localhost:8087', \n    'linkedin': 'http://localhost:8088'\n}\n```",
          "values": {
            "strings": [
              "ghost",
              "http://localhost:8086",
              "substack",
              "http://localhost:8087",
              "linkedin",
              "http://localhost:8088"
            ],
            "numbers": [
              8086,
              8087,
              8088
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "twitter",
          "line": 533,
          "snippet": "        # Platform adapter endpoints\n        self.platform_adapters = {\n            'twitter': 'http://localhost:8083',\n            'ghost': 'http://localhost:8086',\n            'substack': 'http://localhost:8087',",
          "values": {
            "strings": [
              "twitter",
              "http://localhost:8083",
              "ghost",
              "http://localhost:8086",
              "substack",
              "http://localhost:8087"
            ],
            "numbers": [
              8083,
              8086,
              8087
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 534,
          "snippet": "        self.platform_adapters = {\n            'twitter': 'http://localhost:8083',\n            'ghost': 'http://localhost:8086',\n            'substack': 'http://localhost:8087',\n            'linkedin': 'http://localhost:8088'",
          "values": {
            "strings": [
              "twitter",
              "http://localhost:8083",
              "ghost",
              "http://localhost:8086",
              "substack",
              "http://localhost:8087",
              "linkedin",
              "http://localhost:8088"
            ],
            "numbers": [
              8083,
              8086,
              8087,
              8088
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 535,
          "snippet": "            'twitter': 'http://localhost:8083',\n            'ghost': 'http://localhost:8086',\n            'substack': 'http://localhost:8087',\n            'linkedin': 'http://localhost:8088'\n        }",
          "values": {
            "strings": [
              "twitter",
              "http://localhost:8083",
              "ghost",
              "http://localhost:8086",
              "substack",
              "http://localhost:8087",
              "linkedin",
              "http://localhost:8088"
            ],
            "numbers": [
              8083,
              8086,
              8087,
              8088
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 536,
          "snippet": "            'ghost': 'http://localhost:8086',\n            'substack': 'http://localhost:8087',\n            'linkedin': 'http://localhost:8088'\n        }\n    ",
          "values": {
            "strings": [
              "ghost",
              "http://localhost:8086",
              "substack",
              "http://localhost:8087",
              "linkedin",
              "http://localhost:8088"
            ],
            "numbers": [
              8086,
              8087,
              8088
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 956,
          "snippet": "    async def get_platform_health(self) -> Dict[str, PlatformHealth]:\n        \"\"\"Get health status for each platform\"\"\"\n        platforms = ['linkedin', 'twitter', 'substack', 'beehiiv']\n        health_data = {}\n        ",
          "values": {
            "strings": [
              "Get health status for each platform",
              "\n        platforms = [",
              ", ",
              ", ",
              ", "
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 996,
          "snippet": "- ✅ **Redis Queue Management**: Redis 7.x - Port 6381:6379\n- ✅ **Redis Worker**: Python async worker - Background processing\n- ✅ **Twitter Adapter**: FastAPI + Typefully API - Port 8083\n- ✅ **Ghost CMS Adapter**: FastAPI + Ghost Admin API - Port 8086\n- 🔄 **LinkedIn Adapter**: Node.js wrapper (ready) - Port 8088",
          "values": {
            "strings": [],
            "numbers": [
              7,
              6381,
              6379,
              8083,
              8086,
              8088
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 997,
          "snippet": "- ✅ **Redis Worker**: Python async worker - Background processing\n- ✅ **Twitter Adapter**: FastAPI + Typefully API - Port 8083\n- ✅ **Ghost CMS Adapter**: FastAPI + Ghost Admin API - Port 8086\n- 🔄 **LinkedIn Adapter**: Node.js wrapper (ready) - Port 8088\n- 🔄 **Substack Adapter**: Skeleton implemented - Port 8087",
          "values": {
            "strings": [],
            "numbers": [
              8083,
              8086,
              8088,
              8087
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 998,
          "snippet": "- ✅ **Twitter Adapter**: FastAPI + Typefully API - Port 8083\n- ✅ **Ghost CMS Adapter**: FastAPI + Ghost Admin API - Port 8086\n- 🔄 **LinkedIn Adapter**: Node.js wrapper (ready) - Port 8088\n- 🔄 **Substack Adapter**: Skeleton implemented - Port 8087\n",
          "values": {
            "strings": [],
            "numbers": [
              8083,
              8086,
              8088,
              8087
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 999,
          "snippet": "- ✅ **Ghost CMS Adapter**: FastAPI + Ghost Admin API - Port 8086\n- 🔄 **LinkedIn Adapter**: Node.js wrapper (ready) - Port 8088\n- 🔄 **Substack Adapter**: Skeleton implemented - Port 8087\n\n### Infrastructure ✅ **IMPLEMENTED**",
          "values": {
            "strings": [],
            "numbers": [
              8086,
              8088,
              8087
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "substack",
          "line": 1009,
          "snippet": "- ✅ **Container Orchestration**: Docker Compose with health checks\n- 🔄 **Database**: PostgreSQL (planned for Phase 5 persistence)\n- 🔄 **Browser Automation**: Browserbase (planned for Substack)\n- 🔄 **Advanced Monitoring**: Prometheus + Grafana (Phase 5)\n",
          "values": {
            "strings": [],
            "numbers": [
              5,
              5
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 1014,
          "snippet": "### External Integrations ✅ **READY**\n- ✅ **AI Writing Flow**: http://localhost:8003 (production ready)\n- ✅ **LinkedIn Module**: Existing CLI interface (wrapper needed)\n- ✅ **Typefully API**: Twitter/X publishing (confirmed working)\n- ✅ **Ghost Admin API**: CMS integration (production ready)",
          "values": {
            "strings": [],
            "numbers": [
              8003
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 1015,
          "snippet": "- ✅ **AI Writing Flow**: http://localhost:8003 (production ready)\n- ✅ **LinkedIn Module**: Existing CLI interface (wrapper needed)\n- ✅ **Typefully API**: Twitter/X publishing (confirmed working)\n- ✅ **Ghost Admin API**: CMS integration (production ready)\n- 🔄 **Browserbase**: Cloud browser automation (planned)",
          "values": {
            "strings": [],
            "numbers": [
              8003
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 1016,
          "snippet": "- ✅ **LinkedIn Module**: Existing CLI interface (wrapper needed)\n- ✅ **Typefully API**: Twitter/X publishing (confirmed working)\n- ✅ **Ghost Admin API**: CMS integration (production ready)\n- 🔄 **Browserbase**: Cloud browser automation (planned)\n- ❌ **Beehiiv API**: Migrated to Ghost CMS for better stability",
          "values": {
            "strings": [],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "beehiiv",
          "line": 1018,
          "snippet": "- ✅ **Ghost Admin API**: CMS integration (production ready)\n- 🔄 **Browserbase**: Cloud browser automation (planned)\n- ❌ **Beehiiv API**: Migrated to Ghost CMS for better stability\n\n## 🌐 Network Architecture",
          "values": {
            "strings": [],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 1027,
          "snippet": "        AWF[AI Writing Flow :8003]\n        TYPEFULLY[Typefully API]\n        GHOST_API[Ghost Admin API]\n        BROWSERBASE[Browserbase Cloud]\n    end",
          "values": {
            "strings": [],
            "numbers": [
              8003
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "twitter",
          "line": 1043,
          "snippet": "        \n        subgraph \"Platform Adapters\"\n            TWITTER[Twitter :8083]\n            GHOST[Ghost CMS :8086]\n            SUBSTACK[Substack :8087] ",
          "values": {
            "strings": [
              "Platform Adapters"
            ],
            "numbers": [
              8083,
              8086,
              8087
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 1044,
          "snippet": "        subgraph \"Platform Adapters\"\n            TWITTER[Twitter :8083]\n            GHOST[Ghost CMS :8086]\n            SUBSTACK[Substack :8087] \n            LINKEDIN[LinkedIn :8088]",
          "values": {
            "strings": [
              "Platform Adapters"
            ],
            "numbers": [
              8083,
              8086,
              8087,
              8088
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 1045,
          "snippet": "            TWITTER[Twitter :8083]\n            GHOST[Ghost CMS :8086]\n            SUBSTACK[Substack :8087] \n            LINKEDIN[LinkedIn :8088]\n        end",
          "values": {
            "strings": [],
            "numbers": [
              8083,
              8086,
              8087,
              8088
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 1046,
          "snippet": "            GHOST[Ghost CMS :8086]\n            SUBSTACK[Substack :8087] \n            LINKEDIN[LinkedIn :8088]\n        end\n        ",
          "values": {
            "strings": [],
            "numbers": [
              8086,
              8087,
              8088
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 1051,
          "snippet": "        subgraph \"Infrastructure\"\n            REDIS_DB[(Redis Database :6381)]\n            GHOST_API[Ghost Admin API]\n            TYPEFULLY[Typefully API]\n        end",
          "values": {
            "strings": [
              "Infrastructure"
            ],
            "numbers": [
              6381
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "twitter",
          "line": 1059,
          "snippet": "    MCP --> WORKER\n    MCP --> QUEUE\n    WORKER --> TWITTER\n    WORKER --> GHOST\n    WORKER --> SUBSTACK",
          "values": {
            "strings": [],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 1060,
          "snippet": "    MCP --> QUEUE\n    WORKER --> TWITTER\n    WORKER --> GHOST\n    WORKER --> SUBSTACK\n    WORKER --> LINKEDIN",
          "values": {
            "strings": [],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 1061,
          "snippet": "    WORKER --> TWITTER\n    WORKER --> GHOST\n    WORKER --> SUBSTACK\n    WORKER --> LINKEDIN\n    ",
          "values": {
            "strings": [],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 1062,
          "snippet": "    WORKER --> GHOST\n    WORKER --> SUBSTACK\n    WORKER --> LINKEDIN\n    \n    MCP --> AWF",
          "values": {
            "strings": [],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "twitter",
          "line": 1073,
          "snippet": "    METRICS --> GRAFANA_DASH[Grafana :3000]\n    \n    TWITTER --> TYPEFULLY\n    GHOST --> GHOST_API\n```",
          "values": {
            "strings": [],
            "numbers": [
              3000
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "twitter",
          "line": 1074,
          "snippet": "    \n    TWITTER --> TYPEFULLY\n    GHOST --> GHOST_API\n```\n",
          "values": {
            "strings": [],
            "numbers": []
          }
        },
        {
          "type": "required_elements",
          "platform": "universal",
          "line": 1151,
          "snippet": "    INTERNAL_SERVER_ERROR = \"API_1000\"\n    INVALID_REQUEST_FORMAT = \"API_1001\"\n    MISSING_REQUIRED_FIELD = \"API_1002\"\n    \n    # Publication Errors (2000-2099)",
          "values": {
            "strings": [
              "API_1000",
              "API_1001",
              "API_1002"
            ],
            "numbers": [
              1000,
              1001,
              1002,
              2000,
              2099
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 1170,
          "snippet": "\n### Platform Authentication Status\n- ✅ **Twitter**: OAuth 2.0 via Typefully API (production ready)\n- ✅ **Ghost CMS**: API key authentication (production ready)\n- 🔄 **LinkedIn**: Session-based auth with existing module (wrapper needed)",
          "values": {
            "strings": [],
            "numbers": [
              2,
              0
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 1171,
          "snippet": "### Platform Authentication Status\n- ✅ **Twitter**: OAuth 2.0 via Typefully API (production ready)\n- ✅ **Ghost CMS**: API key authentication (production ready)\n- 🔄 **LinkedIn**: Session-based auth with existing module (wrapper needed)\n- 🔄 **Substack**: Session-based auth (to be implemented)",
          "values": {
            "strings": [],
            "numbers": [
              2,
              0
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 1172,
          "snippet": "- ✅ **Twitter**: OAuth 2.0 via Typefully API (production ready)\n- ✅ **Ghost CMS**: API key authentication (production ready)\n- 🔄 **LinkedIn**: Session-based auth with existing module (wrapper needed)\n- 🔄 **Substack**: Session-based auth (to be implemented)\n",
          "values": {
            "strings": [],
            "numbers": [
              2,
              0
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 1173,
          "snippet": "- ✅ **Ghost CMS**: API key authentication (production ready)\n- 🔄 **LinkedIn**: Session-based auth with existing module (wrapper needed)\n- 🔄 **Substack**: Session-based auth (to be implemented)\n\n### Security Implementation Status",
          "values": {
            "strings": [],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "twitter",
          "line": 1193,
          "snippet": "- ✅ **Memory Usage**: <100MB per service\n- ✅ **Test Success Rate**: 31/32 tests passing (97%) + Alert system fully tested\n- ✅ **Platform Success Rate**: 100% Twitter auto-publication confirmed\n- ✅ **Alert Response Time**: <2 seconds for critical alerts\n- ✅ **Monitoring Overhead**: <1% CPU impact from Prometheus metrics",
          "values": {
            "strings": [],
            "numbers": [
              100,
              31,
              32,
              97,
              100,
              2,
              1
            ]
          }
        },
        {
          "type": "required_elements",
          "platform": "universal",
          "line": 1282,
          "snippet": "            \n        elif isinstance(error, ContentValidationError):\n            # Content issue: requires human review\n            await self.move_to_review_queue(job, error)\n            ",
          "values": {
            "strings": [],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 1367,
          "snippet": "      replicas: 3\n      \n  linkedin-adapter:\n    build: ./linkedin-adapter  \n    ports:",
          "values": {
            "strings": [],
            "numbers": [
              3
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 1368,
          "snippet": "      \n  linkedin-adapter:\n    build: ./linkedin-adapter  \n    ports:\n      - \"8081\"",
          "values": {
            "strings": [
              "8081"
            ],
            "numbers": [
              8081
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "twitter",
          "line": 1374,
          "snippet": "      replicas: 2\n      \n  twitter-adapter:\n    build: ./twitter-adapter\n    ports:",
          "values": {
            "strings": [],
            "numbers": [
              2
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "twitter",
          "line": 1375,
          "snippet": "      \n  twitter-adapter:\n    build: ./twitter-adapter\n    ports:\n      - \"8082\" ",
          "values": {
            "strings": [
              "8082"
            ],
            "numbers": [
              8082
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 1438,
          "snippet": "        \"\"\"Automatically scale workers based on queue depth\"\"\"\n        \n        for platform in ['linkedin', 'twitter', 'substack', 'beehiiv']:\n            queue_depth = await self.get_queue_depth(platform)\n            current_workers = await self.get_active_workers(platform)",
          "values": {
            "strings": [
              "Automatically scale workers based on queue depth",
              "\n        \n        for platform in [",
              ", ",
              ", ",
              ", "
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 1491,
          "snippet": "\n**Phase 6**: AI Writing Flow Integration - **READY TO START**  \n**Phase 7**: LinkedIn Module Integration  \n**Phase 9**: Content Optimization & A/B Testing  \n**Phase 10**: Enterprise Features & Multi-Tenant Support  ",
          "values": {
            "strings": [],
            "numbers": [
              6,
              7,
              9,
              10
            ]
          }
        }
      ]
    },
    {
      "file": "/Users/hretheum/dev/bezrobocie/vector-wave/publisher/ENHANCED_ORCHESTRATOR_DEPLOYMENT_REPORT.md",
      "exists": true,
      "hits": [
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 32,
          "snippet": "- Multi-platform content processing pipeline\n- Concurrent processing using asyncio\n- Presenton integration for LinkedIn carousels\n- Image processing pipeline integration\n- Comprehensive error handling and recovery",
          "values": {
            "strings": [],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 49,
          "snippet": "- Async HTTP client for AI Writing Flow Enhanced API\n- Multi-platform content generation\n- LinkedIn prompt generation for Presenton\n- Timeout and retry handling\n- Health check integration",
          "values": {
            "strings": [],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 56,
          "snippet": "**Key Methods**:\n- `generate_multi_platform()` - Multi-platform content generation\n- `generate_linkedin_prompt()` - LinkedIn-specific prompt generation  \n- `health_check()` - Service health validation\n",
          "values": {
            "strings": [],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 64,
          "snippet": "**Capabilities**:\n- Async integration with Presenton microservice\n- LinkedIn carousel presentation generation\n- Template management (business, creative, minimal)\n- File download capabilities",
          "values": {
            "strings": [],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 71,
          "snippet": "\n**Key Methods**:\n- `generate_presentation()` - Generate LinkedIn carousel\n- `health_check()` - Service availability check\n- `get_templates()` - Available templates",
          "values": {
            "strings": [],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 150,
          "snippet": "- **Multi-platform Processing**: Concurrent execution using asyncio\n- **Average Processing Time**: 3-6 seconds per request (depending on platforms)\n- **Presenton Generation**: 3-5 seconds for LinkedIn carousels\n- **Image Processing**: On-demand with Pexels API integration\n- **Error Recovery**: Graceful degradation with detailed error reporting",
          "values": {
            "strings": [],
            "numbers": [
              3,
              6,
              3,
              5
            ]
          }
        },
        {
          "type": "required_elements",
          "platform": "universal",
          "line": 164,
          "snippet": "## 🔧 Configuration & Environment\n\n### Required Environment Variables\n```bash\n# Core Services",
          "values": {
            "strings": [],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 183,
          "snippet": "- **Redis**: Job queuing and state management\n- **AI Writing Flow Enhanced API**: Content generation service\n- **Presenton**: LinkedIn carousel generation service\n- **Pexels API**: Image processing (optional)\n",
          "values": {
            "strings": [],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 212,
          "snippet": "\n### Upstream Services\n- **AI Writing Flow Enhanced API**: `/generate/multi-platform`, `/generate/linkedin-prompt`\n- **Presenton Service**: `/generate`, `/health`, `/templates`\n- **Redis Queue**: Job state management and workflow coordination",
          "values": {
            "strings": [],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 232,
          "snippet": "\n### Business Value\n- **Multi-platform Support**: LinkedIn (Presenton), Twitter, Ghost, Substack\n- **Enhanced Content**: AI-generated + presentation integration\n- **Developer Experience**: Rich APIs with detailed responses",
          "values": {
            "strings": [],
            "numbers": []
          }
        }
      ]
    },
    {
      "file": "/Users/hretheum/dev/bezrobocie/vector-wave/publisher/INTEGRATION_PLAN.md",
      "exists": true,
      "hits": [
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 5,
          "snippet": "## 🎯 Integration Overview\n\nTen dokument opisuje plan integracji Multi-Channel Publisher z istniejącymi systemami Vector Wave, w szczególności z AI Writing Flow (production ready) i LinkedIn Module (production ready).\n\n## 🔗 Current System Integration Points",
          "values": {
            "strings": [],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 104,
          "snippet": "    \n    PLATFORM_CONFIGS = {\n        \"linkedin\": {\n            \"max_length\": 3000,\n            \"supports_hashtags\": True,",
          "values": {
            "strings": [
              "linkedin",
              "max_length",
              "supports_hashtags"
            ],
            "numbers": [
              3000
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "twitter",
          "line": 111,
          "snippet": "            \"optimal_hashtag_count\": 3\n        },\n        \"twitter\": {\n            \"max_length\": 280,\n            \"supports_hashtags\": True,",
          "values": {
            "strings": [
              "optimal_hashtag_count",
              "twitter",
              "max_length",
              "supports_hashtags"
            ],
            "numbers": [
              3,
              280
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "substack",
          "line": 118,
          "snippet": "            \"optimal_hashtag_count\": 2\n        },\n        \"substack\": {\n            \"max_length\": None,  # No limit\n            \"supports_hashtags\": False,",
          "values": {
            "strings": [
              "optimal_hashtag_count",
              "substack",
              "max_length",
              "supports_hashtags"
            ],
            "numbers": [
              2
            ]
          }
        },
        {
          "type": "required_elements",
          "platform": "beehiiv",
          "line": 123,
          "snippet": "            \"supports_media\": True,\n            \"format\": \"newsletter\",\n            \"requires_subject\": True\n        },\n        \"beehiiv\": {",
          "values": {
            "strings": [
              "supports_media",
              "format",
              "newsletter",
              "requires_subject",
              "beehiiv"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "beehiiv",
          "line": 125,
          "snippet": "            \"requires_subject\": True\n        },\n        \"beehiiv\": {\n            \"max_length\": None,\n            \"supports_hashtags\": False,",
          "values": {
            "strings": [
              "requires_subject",
              "beehiiv",
              "max_length",
              "supports_hashtags"
            ],
            "numbers": []
          }
        },
        {
          "type": "required_elements",
          "platform": "universal",
          "line": 135,
          "snippet": "    \n    def adapt_content_for_platform(self, content: dict, platform: str) -> dict:\n        \"\"\"Adapt content based on platform requirements\"\"\"\n        \n        config = self.PLATFORM_CONFIGS.get(platform, {})",
          "values": {
            "strings": [
              "Adapt content based on platform requirements"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "twitter",
          "line": 142,
          "snippet": "        # Length adaptation\n        if config.get(\"max_length\") and len(content[\"text\"]) > config[\"max_length\"]:\n            if platform == \"twitter\" and config.get(\"supports_threads\"):\n                adapted_content = self._split_into_thread(content, config[\"max_length\"])\n            else:",
          "values": {
            "strings": [
              "max_length",
              "text",
              "max_length",
              "twitter",
              "supports_threads",
              "max_length"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "substack",
          "line": 157,
          "snippet": "        \n        # Platform-specific formatting\n        if platform == \"substack\" and config.get(\"requires_subject\"):\n            adapted_content[\"subject\"] = content.get(\"title\", \"Newsletter Update\")\n            ",
          "values": {
            "strings": [
              "substack",
              "requires_subject",
              "subject",
              "title",
              "Newsletter Update"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "twitter",
          "line": 163,
          "snippet": "    \n    def _split_into_thread(self, content: dict, max_length: int) -> dict:\n        \"\"\"Split long content into Twitter thread\"\"\"\n        text = content[\"text\"]\n        sentences = text.split(\". \")",
          "values": {
            "strings": [
              "Split long content into Twitter thread",
              "\n        text = content[",
              "]\n        sentences = text.split("
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 195,
          "snippet": "```\n\n### 2. LinkedIn Module Integration\n\n**Current Status**: ✅ Production Ready",
          "values": {
            "strings": [],
            "numbers": [
              2
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 199,
          "snippet": "**Current Status**: ✅ Production Ready\n**Technology**: Node.js + Stagehand + Browserbase\n**CLI Interface**: `node scripts/linkedin-cli.js`\n\n#### Wrapper Service Implementation",
          "values": {
            "strings": [],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 204,
          "snippet": "\n```python\nclass LinkedInModuleWrapper:\n    \"\"\"Python wrapper for existing LinkedIn Node.js module\"\"\"\n    ",
          "values": {
            "strings": [
              "Python wrapper for existing LinkedIn Node.js module"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 205,
          "snippet": "```python\nclass LinkedInModuleWrapper:\n    \"\"\"Python wrapper for existing LinkedIn Node.js module\"\"\"\n    \n    def __init__(self, linkedin_module_path: str):",
          "values": {
            "strings": [
              "Python wrapper for existing LinkedIn Node.js module"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 207,
          "snippet": "    \"\"\"Python wrapper for existing LinkedIn Node.js module\"\"\"\n    \n    def __init__(self, linkedin_module_path: str):\n        self.module_path = linkedin_module_path\n        self.cli_path = os.path.join(linkedin_module_path, \"scripts\", \"linkedin-cli.js\")",
          "values": {
            "strings": [
              "Python wrapper for existing LinkedIn Node.js module",
              "\n    \n    def __init__(self, linkedin_module_path: str):\n        self.module_path = linkedin_module_path\n        self.cli_path = os.path.join(linkedin_module_path, ",
              ", "
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 208,
          "snippet": "    \n    def __init__(self, linkedin_module_path: str):\n        self.module_path = linkedin_module_path\n        self.cli_path = os.path.join(linkedin_module_path, \"scripts\", \"linkedin-cli.js\")\n        ",
          "values": {
            "strings": [
              "scripts",
              "linkedin-cli.js"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 209,
          "snippet": "    def __init__(self, linkedin_module_path: str):\n        self.module_path = linkedin_module_path\n        self.cli_path = os.path.join(linkedin_module_path, \"scripts\", \"linkedin-cli.js\")\n        \n    async def publish_content(self, content_data: dict) -> dict:",
          "values": {
            "strings": [
              "scripts",
              "linkedin-cli.js"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 212,
          "snippet": "        \n    async def publish_content(self, content_data: dict) -> dict:\n        \"\"\"Publish content using existing LinkedIn CLI\"\"\"\n        \n        # Prepare command",
          "values": {
            "strings": [
              "Publish content using existing LinkedIn CLI"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 235,
          "snippet": "        \n        try:\n            # Execute LinkedIn CLI\n            result = await asyncio.create_subprocess_exec(\n                *command,",
          "values": {
            "strings": [],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 255,
          "snippet": "            return {\n                \"success\": False,\n                \"error\": f\"LinkedIn module execution failed: {str(e)}\",\n                \"error_type\": \"execution_error\"\n            }",
          "values": {
            "strings": [
              "success",
              "error",
              "LinkedIn module execution failed: {str(e)}",
              "error_type",
              "execution_error"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 260,
          "snippet": "    \n    def _parse_success_output(self, output: str, content_data: dict) -> dict:\n        \"\"\"Parse successful LinkedIn CLI output\"\"\"\n        \n        # LinkedIn CLI outputs structured success message",
          "values": {
            "strings": [
              "Parse successful LinkedIn CLI output"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 262,
          "snippet": "        \"\"\"Parse successful LinkedIn CLI output\"\"\"\n        \n        # LinkedIn CLI outputs structured success message\n        if \"PUBLICATION COMPLETED!\" in output:\n            return {",
          "values": {
            "strings": [
              "Parse successful LinkedIn CLI output",
              "\n        \n        # LinkedIn CLI outputs structured success message\n        if "
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 266,
          "snippet": "            return {\n                \"success\": True,\n                \"platform\": \"linkedin\",\n                \"method\": \"immediate\" if not content_data.get(\"schedule_time\") else \"scheduled\",\n                \"scheduled_for\": content_data.get(\"schedule_time\"),",
          "values": {
            "strings": [
              "success",
              "platform",
              "linkedin",
              "method",
              "immediate",
              "schedule_time",
              "scheduled",
              "scheduled_for",
              "schedule_time"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 280,
          "snippet": "    \n    def _handle_error(self, error: str, content_data: dict) -> dict:\n        \"\"\"Handle LinkedIn CLI errors with specific error types\"\"\"\n        \n        if \"selector\" in error.lower() or \"not found\" in error.lower():",
          "values": {
            "strings": [
              "Handle LinkedIn CLI errors with specific error types",
              "\n        \n        if ",
              " in error.lower() or "
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 285,
          "snippet": "            return {\n                \"success\": False,\n                \"error\": \"LinkedIn interface changed - selectors need update\",\n                \"error_type\": \"selector_error\",\n                \"suggested_action\": \"run_diagnostics\",",
          "values": {
            "strings": [
              "success",
              "error",
              "LinkedIn interface changed - selectors need update",
              "error_type",
              "selector_error",
              "suggested_action",
              "run_diagnostics"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 293,
          "snippet": "            return {\n                \"success\": False,\n                \"error\": \"LinkedIn session expired - manual renewal required\",\n                \"error_type\": \"session_expired\",\n                \"suggested_action\": \"renew_session\",",
          "values": {
            "strings": [
              "success",
              "error",
              "LinkedIn session expired - manual renewal required",
              "error_type",
              "session_expired",
              "suggested_action",
              "renew_session"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 301,
          "snippet": "            return {\n                \"success\": False,\n                \"error\": \"LinkedIn publishing failed\",\n                \"error_type\": \"unknown_error\",\n                \"cli_error\": error",
          "values": {
            "strings": [
              "success",
              "error",
              "LinkedIn publishing failed",
              "error_type",
              "unknown_error",
              "cli_error"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 307,
          "snippet": "    \n    async def validate_session(self, account_id: str) -> dict:\n        \"\"\"Validate LinkedIn session\"\"\"\n        \n        command = [\"node\", self.cli_path, \"session\", \"validate\", \"--account\", account_id]",
          "values": {
            "strings": [
              "Validate LinkedIn session",
              "\n        \n        command = [",
              ", self.cli_path, ",
              ", ",
              ", "
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "substack",
          "line": 327,
          "snippet": "```\n\n### 3. Substack Integration (New Implementation)\n\n**Status**: 🚧 New Development Required",
          "values": {
            "strings": [],
            "numbers": [
              3
            ]
          }
        },
        {
          "type": "required_elements",
          "platform": "linkedin",
          "line": 329,
          "snippet": "### 3. Substack Integration (New Implementation)\n\n**Status**: 🚧 New Development Required\n**Technology**: Node.js + Stagehand (analogia do LinkedIn)\n",
          "values": {
            "strings": [],
            "numbers": [
              3
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 330,
          "snippet": "\n**Status**: 🚧 New Development Required\n**Technology**: Node.js + Stagehand (analogia do LinkedIn)\n\n#### Substack Adapter Architecture",
          "values": {
            "strings": [],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 332,
          "snippet": "**Technology**: Node.js + Stagehand (analogia do LinkedIn)\n\n#### Substack Adapter Architecture\n\n```typescript",
          "values": {
            "strings": [],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "substack",
          "line": 335,
          "snippet": "\n```typescript\n// substack-adapter/src/SubstackPublisher.ts\nimport { Stagehand } from \"@browserbasehq/stagehand\";\nimport { SessionManager } from \"./SessionManager\";",
          "values": {
            "strings": [
              "@browserbasehq/stagehand",
              "./SessionManager"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "substack",
          "line": 339,
          "snippet": "import { SessionManager } from \"./SessionManager\";\n\nexport class SubstackPublisher {\n    private stagehand: Stagehand;\n    private sessionManager: SessionManager;",
          "values": {
            "strings": [
              "./SessionManager"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "substack",
          "line": 349,
          "snippet": "            projectId: process.env.BROWSERBASE_PROJECT_ID,\n        });\n        this.sessionManager = new SessionManager('substack');\n    }\n    ",
          "values": {
            "strings": [
              "substack"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "substack",
          "line": 361,
          "snippet": "        \n        try {\n            // Navigate to Substack publish page\n            await this.stagehand.page.goto('https://substack.com/publish');\n            ",
          "values": {
            "strings": [
              "https://substack.com/publish"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "substack",
          "line": 362,
          "snippet": "        try {\n            // Navigate to Substack publish page\n            await this.stagehand.page.goto('https://substack.com/publish');\n            \n            // Fill newsletter form",
          "values": {
            "strings": [
              "https://substack.com/publish"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "substack",
          "line": 389,
          "snippet": "            return {\n                success: true,\n                platform: 'substack',\n                publishedAt: content.scheduleTime ? null : new Date(),\n                scheduledFor: content.scheduleTime,",
          "values": {
            "strings": [
              "substack"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "twitter",
          "line": 445,
          "snippet": "```\n\n### 4. Twitter/X Integration (New Implementation)\n\n**Status**: 🚧 New Development Required  ",
          "values": {
            "strings": [],
            "numbers": [
              4
            ]
          }
        },
        {
          "type": "required_elements",
          "platform": "twitter",
          "line": 447,
          "snippet": "### 4. Twitter/X Integration (New Implementation)\n\n**Status**: 🚧 New Development Required  \n**Technology**: Node.js + Typefully API\n",
          "values": {
            "strings": [],
            "numbers": [
              4
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "twitter",
          "line": 450,
          "snippet": "**Technology**: Node.js + Typefully API\n\n#### Twitter Adapter Architecture\n\n```typescript",
          "values": {
            "strings": [],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "twitter",
          "line": 453,
          "snippet": "\n```typescript\n// twitter-adapter/src/TwitterPublisher.ts\nimport { TypefullyClient } from 'typefully-api';\n",
          "values": {
            "strings": [
              "typefully-api"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "twitter",
          "line": 456,
          "snippet": "import { TypefullyClient } from 'typefully-api';\n\nexport class TwitterPublisher {\n    private typefully: TypefullyClient;\n    ",
          "values": {
            "strings": [
              "typefully-api"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "twitter",
          "line": 476,
          "snippet": "            return {\n                success: false,\n                platform: 'twitter',\n                error: error.message,\n                errorType: this.categorizeError(error)",
          "values": {
            "strings": [
              "twitter"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "twitter",
          "line": 497,
          "snippet": "        return {\n            success: true,\n            platform: 'twitter',\n            platformId: tweet.id,\n            postUrl: tweet.url,",
          "values": {
            "strings": [
              "twitter"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "twitter",
          "line": 519,
          "snippet": "        return {\n            success: true,\n            platform: 'twitter',\n            platformId: thread.id,\n            postUrl: thread.url,",
          "values": {
            "strings": [
              "twitter"
            ],
            "numbers": []
          }
        },
        {
          "type": "max_length",
          "platform": "universal",
          "line": 532,
          "snippet": "    \n    private splitIntoTweets(text: string): string[] {\n        const maxLength = 250; // Conservative for hashtags and numbering\n        const sentences = text.split('. ');\n        const tweets: string[] = [];",
          "values": {
            "strings": [
              ". "
            ],
            "numbers": [
              250
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 574,
          "snippet": "    def __init__(self):\n        self.ai_writing_flow = AIWritingFlowClient()\n        self.linkedin_wrapper = LinkedInModuleWrapper(\"/path/to/linkedin/module\")\n        self.platform_adapters = {\n            \"linkedin\": self.linkedin_wrapper,",
          "values": {
            "strings": [
              "/path/to/linkedin/module",
              "linkedin"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 576,
          "snippet": "        self.linkedin_wrapper = LinkedInModuleWrapper(\"/path/to/linkedin/module\")\n        self.platform_adapters = {\n            \"linkedin\": self.linkedin_wrapper,\n            \"twitter\": TwitterAdapter(),\n            \"substack\": SubstackAdapter(),",
          "values": {
            "strings": [
              "/path/to/linkedin/module",
              "linkedin",
              "twitter",
              "substack"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 577,
          "snippet": "        self.platform_adapters = {\n            \"linkedin\": self.linkedin_wrapper,\n            \"twitter\": TwitterAdapter(),\n            \"substack\": SubstackAdapter(),\n            \"beehiiv\": BeehiivAdapter()",
          "values": {
            "strings": [
              "linkedin",
              "twitter",
              "substack",
              "beehiiv"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 578,
          "snippet": "            \"linkedin\": self.linkedin_wrapper,\n            \"twitter\": TwitterAdapter(),\n            \"substack\": SubstackAdapter(),\n            \"beehiiv\": BeehiivAdapter()\n        }",
          "values": {
            "strings": [
              "linkedin",
              "twitter",
              "substack",
              "beehiiv"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "twitter",
          "line": 579,
          "snippet": "            \"twitter\": TwitterAdapter(),\n            \"substack\": SubstackAdapter(),\n            \"beehiiv\": BeehiivAdapter()\n        }\n        self.content_mapper = ContentPlatformMapper()",
          "values": {
            "strings": [
              "twitter",
              "substack",
              "beehiiv"
            ],
            "numbers": []
          }
        },
        {
          "type": "required_elements",
          "platform": "universal",
          "line": 605,
          "snippet": "                continue\n            \n            # Adapt content for platform-specific requirements\n            adapted_content = self.content_mapper.adapt_content_for_platform(\n                platform_content, platform",
          "values": {
            "strings": [],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 696,
          "snippet": "        \n        variations = await client.generate_platform_variations(\n            topic, [\"linkedin\", \"twitter\"]\n        )\n        ",
          "values": {
            "strings": [
              "linkedin",
              "twitter"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 699,
          "snippet": "        )\n        \n        assert \"linkedin\" in variations\n        assert \"twitter\" in variations\n        assert variations[\"linkedin\"][\"text\"]",
          "values": {
            "strings": [
              "linkedin",
              "twitter",
              "linkedin",
              "text"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 700,
          "snippet": "        \n        assert \"linkedin\" in variations\n        assert \"twitter\" in variations\n        assert variations[\"linkedin\"][\"text\"]\n        assert variations[\"twitter\"][\"text\"]",
          "values": {
            "strings": [
              "linkedin",
              "twitter",
              "linkedin",
              "text",
              "twitter",
              "text"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 701,
          "snippet": "        assert \"linkedin\" in variations\n        assert \"twitter\" in variations\n        assert variations[\"linkedin\"][\"text\"]\n        assert variations[\"twitter\"][\"text\"]\n        ",
          "values": {
            "strings": [
              "linkedin",
              "twitter",
              "linkedin",
              "text",
              "twitter",
              "text"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 702,
          "snippet": "        assert \"twitter\" in variations\n        assert variations[\"linkedin\"][\"text\"]\n        assert variations[\"twitter\"][\"text\"]\n        \n    async def test_linkedin_module_integration(self):",
          "values": {
            "strings": [
              "twitter",
              "linkedin",
              "text",
              "twitter",
              "text"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 704,
          "snippet": "        assert variations[\"twitter\"][\"text\"]\n        \n    async def test_linkedin_module_integration(self):\n        \"\"\"Test LinkedIn module wrapper\"\"\"\n        ",
          "values": {
            "strings": [
              "twitter",
              "text",
              "Test LinkedIn module wrapper"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 705,
          "snippet": "        \n    async def test_linkedin_module_integration(self):\n        \"\"\"Test LinkedIn module wrapper\"\"\"\n        \n        wrapper = LinkedInModuleWrapper(\"/path/to/linkedin\")",
          "values": {
            "strings": [
              "Test LinkedIn module wrapper",
              "\n        \n        wrapper = LinkedInModuleWrapper("
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 707,
          "snippet": "        \"\"\"Test LinkedIn module wrapper\"\"\"\n        \n        wrapper = LinkedInModuleWrapper(\"/path/to/linkedin\")\n        \n        # Test session validation",
          "values": {
            "strings": [
              "Test LinkedIn module wrapper",
              "\n        \n        wrapper = LinkedInModuleWrapper("
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 731,
          "snippet": "            topic={\"title\": \"Integration Test\", \"content_type\": \"TEST\"},\n            platforms={\n                \"linkedin\": {\"enabled\": True, \"account_id\": \"test\"},\n                \"twitter\": {\"enabled\": True, \"account_id\": \"test\"}\n            }",
          "values": {
            "strings": [
              "title",
              "Integration Test",
              "content_type",
              "TEST",
              "linkedin",
              "enabled",
              "account_id",
              "test",
              "twitter",
              "enabled"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 732,
          "snippet": "            platforms={\n                \"linkedin\": {\"enabled\": True, \"account_id\": \"test\"},\n                \"twitter\": {\"enabled\": True, \"account_id\": \"test\"}\n            }\n        )",
          "values": {
            "strings": [
              "linkedin",
              "enabled",
              "account_id",
              "test",
              "twitter",
              "enabled",
              "account_id",
              "test"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 754,
          "snippet": "        \"Setup Multi-Channel Publisher API infrastructure\",\n        \"Implement AI Writing Flow client integration\",\n        \"Create LinkedIn module wrapper\",\n        \"Setup Redis queue system\",\n        \"Configure PostgreSQL database\",",
          "values": {
            "strings": [
              "Setup Multi-Channel Publisher API infrastructure",
              "Implement AI Writing Flow client integration",
              "Create LinkedIn module wrapper",
              "Setup Redis queue system",
              "Configure PostgreSQL database"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 762,
          "snippet": "    success_criteria = [\n        \"AI Writing Flow integration working\",\n        \"LinkedIn wrapper publishing successfully\",\n        \"Queue system processing jobs\",\n        \"Database storing publication data\",",
          "values": {
            "strings": [
              "AI Writing Flow integration working",
              "LinkedIn wrapper publishing successfully",
              "Queue system processing jobs",
              "Database storing publication data"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "twitter",
          "line": 776,
          "snippet": "    \n    tasks = [\n        \"Develop Twitter/Typefully adapter\",\n        \"Develop Substack browser automation\",\n        \"Develop Beehiiv adapter\",",
          "values": {
            "strings": [
              "Develop Twitter/Typefully adapter",
              "Develop Substack browser automation",
              "Develop Beehiiv adapter"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "twitter",
          "line": 777,
          "snippet": "    tasks = [\n        \"Develop Twitter/Typefully adapter\",\n        \"Develop Substack browser automation\",\n        \"Develop Beehiiv adapter\",\n        \"Implement error handling and retry logic\",",
          "values": {
            "strings": [
              "Develop Twitter/Typefully adapter",
              "Develop Substack browser automation",
              "Develop Beehiiv adapter",
              "Implement error handling and retry logic"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "twitter",
          "line": 778,
          "snippet": "        \"Develop Twitter/Typefully adapter\",\n        \"Develop Substack browser automation\",\n        \"Develop Beehiiv adapter\",\n        \"Implement error handling and retry logic\",\n        \"Setup platform health monitoring\"",
          "values": {
            "strings": [
              "Develop Twitter/Typefully adapter",
              "Develop Substack browser automation",
              "Develop Beehiiv adapter",
              "Implement error handling and retry logic",
              "Setup platform health monitoring"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 833,
          "snippet": "            },\n            \"platforms\": {\n                \"linkedin\": {\n                    \"enabled\": True,\n                    \"account_id\": \"production\",",
          "values": {
            "strings": [
              "platforms",
              "linkedin",
              "enabled",
              "account_id",
              "production"
            ],
            "numbers": []
          }
        },
        {
          "type": "required_elements",
          "platform": "twitter",
          "line": 836,
          "snippet": "                    \"enabled\": True,\n                    \"account_id\": \"production\",\n                    \"options\": {\"include_pdf\": False, \"hashtags\": [\"#AI\", \"#ContentCreation\"]}\n                },\n                \"twitter\": {",
          "values": {
            "strings": [
              "enabled",
              "account_id",
              "production",
              "options",
              "include_pdf",
              "hashtags",
              "#AI",
              "#ContentCreation",
              "twitter"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "twitter",
          "line": 838,
          "snippet": "                    \"options\": {\"include_pdf\": False, \"hashtags\": [\"#AI\", \"#ContentCreation\"]}\n                },\n                \"twitter\": {\n                    \"enabled\": True,\n                    \"account_id\": \"main\",",
          "values": {
            "strings": [
              "options",
              "include_pdf",
              "hashtags",
              "#AI",
              "#ContentCreation",
              "twitter",
              "enabled",
              "account_id",
              "main"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "substack",
          "line": 874,
          "snippet": "            },\n            \"platforms\": {\n                \"substack\": {\n                    \"enabled\": True,\n                    \"account_id\": \"newsletter_ai\",",
          "values": {
            "strings": [
              "platforms",
              "substack",
              "enabled",
              "account_id",
              "newsletter_ai"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "beehiiv",
          "line": 883,
          "snippet": "                    }\n                },\n                \"beehiiv\": {\n                    \"enabled\": True,\n                    \"account_id\": \"tech_newsletter\",",
          "values": {
            "strings": [
              "beehiiv",
              "enabled",
              "account_id",
              "tech_newsletter"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 904,
          "snippet": "        \"\"\"Test error recovery and retry mechanisms\"\"\"\n        \n        # Simulate LinkedIn session expired\n        self.mock_linkedin_session_expired()\n        ",
          "values": {
            "strings": [
              "Test error recovery and retry mechanisms"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 905,
          "snippet": "        \n        # Simulate LinkedIn session expired\n        self.mock_linkedin_session_expired()\n        \n        request = {",
          "values": {
            "strings": [],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 910,
          "snippet": "            \"topic\": {\"title\": \"Error Recovery Test\"},\n            \"platforms\": {\n                \"linkedin\": {\"enabled\": True, \"account_id\": \"test\"}\n            }\n        }",
          "values": {
            "strings": [
              "topic",
              "title",
              "Error Recovery Test",
              "platforms",
              "linkedin",
              "enabled",
              "account_id",
              "test"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 920,
          "snippet": "        \n        status = await self.publisher.get_publication_status(response.publication_id)\n        linkedin_job = status.jobs[\"linkedin\"]\n        \n        assert linkedin_job[\"status\"] == \"failed\"",
          "values": {
            "strings": [
              "linkedin",
              "status",
              "failed"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 922,
          "snippet": "        linkedin_job = status.jobs[\"linkedin\"]\n        \n        assert linkedin_job[\"status\"] == \"failed\"\n        assert linkedin_job[\"error\"][\"error_type\"] == \"session_expired\"\n        assert linkedin_job[\"retry_scheduled\"] == True",
          "values": {
            "strings": [
              "linkedin",
              "status",
              "failed",
              "error",
              "error_type",
              "session_expired",
              "retry_scheduled"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 923,
          "snippet": "        \n        assert linkedin_job[\"status\"] == \"failed\"\n        assert linkedin_job[\"error\"][\"error_type\"] == \"session_expired\"\n        assert linkedin_job[\"retry_scheduled\"] == True\n        ",
          "values": {
            "strings": [
              "status",
              "failed",
              "error",
              "error_type",
              "session_expired",
              "retry_scheduled"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 924,
          "snippet": "        assert linkedin_job[\"status\"] == \"failed\"\n        assert linkedin_job[\"error\"][\"error_type\"] == \"session_expired\"\n        assert linkedin_job[\"retry_scheduled\"] == True\n        \n        # Restore session and verify retry succeeds",
          "values": {
            "strings": [
              "status",
              "failed",
              "error",
              "error_type",
              "session_expired",
              "retry_scheduled"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 927,
          "snippet": "        \n        # Restore session and verify retry succeeds\n        self.restore_linkedin_session()\n        \n        # Wait for retry",
          "values": {
            "strings": [],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 933,
          "snippet": "        \n        final_status = await self.publisher.get_publication_status(response.publication_id)\n        linkedin_job_final = final_status.jobs[\"linkedin\"]\n        \n        assert linkedin_job_final[\"status\"] == \"completed\"",
          "values": {
            "strings": [
              "linkedin",
              "status",
              "completed"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 935,
          "snippet": "        linkedin_job_final = final_status.jobs[\"linkedin\"]\n        \n        assert linkedin_job_final[\"status\"] == \"completed\"\n```\n",
          "values": {
            "strings": [
              "linkedin",
              "status",
              "completed"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 957,
          "snippet": "}'\n\n# Step 3: Restore LinkedIn module direct access\n# Re-enable direct LinkedIn CLI access for critical publications\n",
          "values": {
            "strings": [],
            "numbers": [
              3
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 958,
          "snippet": "\n# Step 3: Restore LinkedIn module direct access\n# Re-enable direct LinkedIn CLI access for critical publications\n\n# Step 4: Verify core systems are operational",
          "values": {
            "strings": [],
            "numbers": [
              3,
              4
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 962,
          "snippet": "# Step 4: Verify core systems are operational\ncurl -f http://localhost:8003/health  # AI Writing Flow\ncd /path/to/linkedin && node scripts/linkedin-cli.js diagnose\n\necho \"✅ Emergency rollback completed\"",
          "values": {
            "strings": [
              "✅ Emergency rollback completed"
            ],
            "numbers": [
              4,
              8003
            ]
          }
        },
        {
          "type": "forbidden_phrases",
          "platform": "universal",
          "line": 978,
          "snippet": "        self.migration_percentage = 0  # Start with 0% traffic to new system\n        self.whitelist_accounts = []   # Accounts explicitly using new system\n        self.blacklist_accounts = []   # Accounts explicitly avoiding new system\n        \n    async def should_use_new_system(self, request: PublishRequest) -> bool:",
          "values": {
            "strings": [],
            "numbers": [
              0,
              0
            ]
          }
        }
      ]
    },
    {
      "file": "/Users/hretheum/dev/bezrobocie/vector-wave/publisher/ALERT_TESTING_RESULTS.md",
      "exists": true,
      "hits": [
        {
          "type": "required_elements",
          "platform": "universal",
          "line": 35,
          "snippet": "- **Implementation**: ✅ Complete\n- **Format**: Markdown with emoji indicators\n- **Testing**: ⚠️ Requires bot token for full testing\n- **Rate limiting**: ✅ Implemented\n",
          "values": {
            "strings": [],
            "numbers": []
          }
        },
        {
          "type": "required_elements",
          "platform": "universal",
          "line": 41,
          "snippet": "- **Implementation**: ✅ Complete\n- **Format**: Rich embeds with color coding\n- **Testing**: ⚠️ Requires webhook URL for full testing\n- **Rate limiting**: ✅ Implemented\n",
          "values": {
            "strings": [],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "twitter",
          "line": 68,
          "snippet": "{\n  \"type\": \"platform_down\",\n  \"platform\": \"twitter\", \n  \"severity\": \"critical\"\n}",
          "values": {
            "strings": [
              "type",
              "platform_down",
              "platform",
              "twitter",
              "severity",
              "critical"
            ],
            "numbers": []
          }
        }
      ]
    },
    {
      "file": "/Users/hretheum/dev/bezrobocie/vector-wave/publisher/PHASE_7_LINKEDIN_COMPLETION_SUMMARY.md",
      "exists": true,
      "hits": [
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 1,
          "snippet": "# 🎯 PHASE 7 COMPLETION SUMMARY - LinkedIn Module Integration\n\n## **🎉 STATUS: 100% COMPLETED**",
          "values": {
            "strings": [],
            "numbers": [
              7,
              100
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 7,
          "snippet": "**Data:** 2025-08-07  \n**Czas realizacji:** ~3 godziny  \n**Wynik:** LinkedIn FastAPI Adapter fully implemented and integrated z Orchestrator\n\n---",
          "values": {
            "strings": [],
            "numbers": [
              2025,
              8,
              7,
              3
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 13,
          "snippet": "## **✅ ZREALIZOWANE ZADANIA**\n\n### **Task 7.1: LinkedInModuleWrapper Class ✅**\n- ✅ Python wrapper dla existing LinkedIn Node.js CLI\n- ✅ Execution `node scripts/linkedin-cli.js --help` i output parsing",
          "values": {
            "strings": [],
            "numbers": [
              7,
              1
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 14,
          "snippet": "\n### **Task 7.1: LinkedInModuleWrapper Class ✅**\n- ✅ Python wrapper dla existing LinkedIn Node.js CLI\n- ✅ Execution `node scripts/linkedin-cli.js --help` i output parsing\n- ✅ Auto-detection LinkedIn module path (Docker + local)",
          "values": {
            "strings": [],
            "numbers": [
              7,
              1
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 15,
          "snippet": "### **Task 7.1: LinkedInModuleWrapper Class ✅**\n- ✅ Python wrapper dla existing LinkedIn Node.js CLI\n- ✅ Execution `node scripts/linkedin-cli.js --help` i output parsing\n- ✅ Auto-detection LinkedIn module path (Docker + local)\n- ✅ Basic command execution z timeout handling",
          "values": {
            "strings": [],
            "numbers": [
              7,
              1
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 16,
          "snippet": "- ✅ Python wrapper dla existing LinkedIn Node.js CLI\n- ✅ Execution `node scripts/linkedin-cli.js --help` i output parsing\n- ✅ Auto-detection LinkedIn module path (Docker + local)\n- ✅ Basic command execution z timeout handling\n",
          "values": {
            "strings": [],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 20,
          "snippet": "\n### **Task 7.2: Enhanced CLI Command Execution ✅**\n- ✅ Structured response models (`LinkedInPublishResponse`)\n- ✅ Comprehensive error categorization (session_error, network_error, etc.)\n- ✅ Enhanced output parsing dla różnych command types",
          "values": {
            "strings": [],
            "numbers": [
              7,
              2
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 31,
          "snippet": "- ✅ Integration z `publish_post()` dla pre-publication validation\n\n### **Task 7.4: Error Handling dla LinkedIn-Specific Issues ✅**\n- ✅ Comprehensive error analysis (`analyze_linkedin_error()`)\n- ✅ Error type detection (session, selector, rate limit, network)",
          "values": {
            "strings": [],
            "numbers": [
              7,
              4
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 32,
          "snippet": "\n### **Task 7.4: Error Handling dla LinkedIn-Specific Issues ✅**\n- ✅ Comprehensive error analysis (`analyze_linkedin_error()`)\n- ✅ Error type detection (session, selector, rate limit, network)\n- ✅ Error code mapping (LN_S_001, LN_SEL_001, etc.)",
          "values": {
            "strings": [],
            "numbers": [
              7,
              4,
              1,
              1
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 38,
          "snippet": "- ✅ Error statistics tracking i pattern recognition\n\n### **Task 7.5: Content Adaptation for LinkedIn Format ✅**\n- ✅ `adapt_content_for_linkedin()` z hashtag generation\n- ✅ LinkedIn content validation (character limits, formatting)",
          "values": {
            "strings": [],
            "numbers": [
              7,
              5
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 39,
          "snippet": "\n### **Task 7.5: Content Adaptation for LinkedIn Format ✅**\n- ✅ `adapt_content_for_linkedin()` z hashtag generation\n- ✅ LinkedIn content validation (character limits, formatting)\n- ✅ Smart hashtag generation z content analysis",
          "values": {
            "strings": [],
            "numbers": [
              7,
              5
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 40,
          "snippet": "### **Task 7.5: Content Adaptation for LinkedIn Format ✅**\n- ✅ `adapt_content_for_linkedin()` z hashtag generation\n- ✅ LinkedIn content validation (character limits, formatting)\n- ✅ Smart hashtag generation z content analysis\n- ✅ Mention processing (@username validation)",
          "values": {
            "strings": [],
            "numbers": [
              7,
              5
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 46,
          "snippet": "\n### **Task 7.6: Scheduled Publication Support ✅**\n- ✅ `schedule_linkedin_post()` z time validation\n- ✅ Business hours recommendations\n- ✅ Scheduled posts management (list, cancel, update)",
          "values": {
            "strings": [],
            "numbers": [
              7,
              6
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 52,
          "snippet": "\n### **Task 7.7: Media Upload Integration ✅**\n- ✅ `upload_media_to_linkedin()` z file validation\n- ✅ Media type support (images, PDFs, documents)\n- ✅ `publish_with_media()` dla multi-media posts",
          "values": {
            "strings": [],
            "numbers": [
              7,
              7
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 65,
          "snippet": "---\n\n## **🚀 LINKEDIN FASTAPI ADAPTER IMPLEMENTATION**\n\n### **FastAPI Microservice ✅**",
          "values": {
            "strings": [],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 69,
          "snippet": "### **FastAPI Microservice ✅**\n```\n├── LinkedIn Adapter (Port 8088)\n│   ├── POST /publish     - Publication z content adaptation\n│   ├── GET /health      - Service health z session validation",
          "values": {
            "strings": [],
            "numbers": [
              8088
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 72,
          "snippet": "│   ├── POST /publish     - Publication z content adaptation\n│   ├── GET /health      - Service health z session validation\n│   ├── GET /config      - LinkedIn module configuration\n│   ├── GET /scheduled/{account} - Scheduled posts management\n│   ├── POST /upload     - Media upload support",
          "values": {
            "strings": [],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 80,
          "snippet": "### **Docker Integration ✅**\n- ✅ Dockerfile z Node.js + Python environment\n- ✅ Volume mount dla LinkedIn module (`../linkedin:/app/linkedin:ro`)\n- ✅ Health checks z curl validation\n- ✅ Environment variables configuration",
          "values": {
            "strings": [],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 85,
          "snippet": "\n### **Orchestrator Integration ✅**\n- ✅ Added LinkedIn adapter URL (`http://localhost:8088`)\n- ✅ Platform routing w `redis_worker.py`\n- ✅ Health monitoring integration",
          "values": {
            "strings": [],
            "numbers": [
              8088
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 105,
          "snippet": "### **Orchestrator Integration ✅**\n```bash\n✅ LinkedIn job creation przez Orchestrator\n✅ Publication request acceptance\n✅ Job queueing w Redis",
          "values": {
            "strings": [],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 112,
          "snippet": "\n### **Production Status**\n- **LinkedIn CLI**: ✅ Available i executable\n- **LinkedIn Module**: ✅ Mounted correctly w Docker\n- **Session Status**: ⚠️ Invalid (requires manual login)",
          "values": {
            "strings": [],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 113,
          "snippet": "### **Production Status**\n- **LinkedIn CLI**: ✅ Available i executable\n- **LinkedIn Module**: ✅ Mounted correctly w Docker\n- **Session Status**: ⚠️ Invalid (requires manual login)\n- **Error Handling**: ✅ Comprehensive z recovery suggestions",
          "values": {
            "strings": [],
            "numbers": []
          }
        },
        {
          "type": "required_elements",
          "platform": "linkedin",
          "line": 114,
          "snippet": "- **LinkedIn CLI**: ✅ Available i executable\n- **LinkedIn Module**: ✅ Mounted correctly w Docker\n- **Session Status**: ⚠️ Invalid (requires manual login)\n- **Error Handling**: ✅ Comprehensive z recovery suggestions\n- **Metrics Collection**: ✅ Active w Prometheus format",
          "values": {
            "strings": [],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 124,
          "snippet": "| Component | Status | Details |\n|-----------|--------|---------|\n| **LinkedInModuleWrapper** | ✅ WORKING | All Tasks 7.1-7.8 implemented |\n| **FastAPI Adapter** | ✅ WORKING | All endpoints operational |\n| **Docker Service** | ✅ HEALTHY | Port 8088, volume mounts correct |",
          "values": {
            "strings": [],
            "numbers": [
              7,
              1,
              7,
              8,
              8088
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 142,
          "snippet": "  -H \"Content-Type: application/json\" \\\n  -d '{\n    \"content\": \"Test LinkedIn integration!\",\n    \"adapt_content\": true,\n    \"adaptation_options\": {\"hashtags\": [\"Test\", \"Integration\"]}",
          "values": {
            "strings": [
              "Content-Type: application/json",
              "{\n    ",
              ": ",
              ",\n    ",
              ": true,\n    ",
              ": {",
              ": [",
              ", "
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 156,
          "snippet": "  -d '{\n    \"topic\": {\n      \"title\": \"LinkedIn Integration Test\",\n      \"description\": \"Testing complete pipeline\",\n      \"content_type\": \"ANNOUNCEMENT\"",
          "values": {
            "strings": [
              "{\n    ",
              ": {\n      ",
              ": ",
              ",\n      ",
              ": ",
              ",\n      ",
              ": "
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 161,
          "snippet": "    },\n    \"platforms\": {\n      \"linkedin\": {\n        \"enabled\": true,\n        \"platform_specific\": {\"adapt_content\": true}",
          "values": {
            "strings": [
              "platforms",
              "linkedin",
              "enabled",
              "platform_specific",
              "adapt_content"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 168,
          "snippet": "  }'\n\n# Response: Job created successfully (linkedin_job_4d9e07ef)\n```\n",
          "values": {
            "strings": [],
            "numbers": [
              4,
              9,
              7
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 175,
          "snippet": "## **💡 KEY ACHIEVEMENTS**\n\n1. **Complete LinkedIn Integration**: Od LinkedIn CLI → Python Wrapper → FastAPI → Orchestrator\n2. **Robust Error Handling**: Comprehensive error analysis z automated recovery\n3. **Production-Ready**: Docker deployment, health monitoring, metrics collection",
          "values": {
            "strings": [],
            "numbers": [
              1,
              2,
              3
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 178,
          "snippet": "2. **Robust Error Handling**: Comprehensive error analysis z automated recovery\n3. **Production-Ready**: Docker deployment, health monitoring, metrics collection\n4. **Content Intelligence**: Smart content adaptation dla LinkedIn requirements\n5. **Session Management**: Health monitoring z automatic recreation capabilities\n6. **Extensible Architecture**: Ready dla future LinkedIn features",
          "values": {
            "strings": [],
            "numbers": [
              2,
              3,
              4,
              5,
              6
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 180,
          "snippet": "4. **Content Intelligence**: Smart content adaptation dla LinkedIn requirements\n5. **Session Management**: Health monitoring z automatic recreation capabilities\n6. **Extensible Architecture**: Ready dla future LinkedIn features\n\n---",
          "values": {
            "strings": [],
            "numbers": [
              4,
              5,
              6
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 186,
          "snippet": "## **🚀 NEXT STEPS (OPTIONAL)**\n\n- **LinkedIn Session Setup**: Manual session creation dla active testing\n- **Advanced Media Support**: Image processing pipeline integration\n- **Enhanced Analytics**: LinkedIn-specific performance metrics",
          "values": {
            "strings": [],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 188,
          "snippet": "- **LinkedIn Session Setup**: Manual session creation dla active testing\n- **Advanced Media Support**: Image processing pipeline integration\n- **Enhanced Analytics**: LinkedIn-specific performance metrics\n- **Multi-Account Support**: Multiple LinkedIn accounts management\n",
          "values": {
            "strings": [],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 189,
          "snippet": "- **Advanced Media Support**: Image processing pipeline integration\n- **Enhanced Analytics**: LinkedIn-specific performance metrics\n- **Multi-Account Support**: Multiple LinkedIn accounts management\n\n---",
          "values": {
            "strings": [],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 195,
          "snippet": "## **📈 FINAL STATUS**\n\n**PHASE 7: LINKEDIN MODULE INTEGRATION = 100% COMPLETED** ✅\n\nLinkedIn FastAPI Adapter jest w pełni functional i ready dla production use. Integration z Orchestrator działa poprawnie, wszystkie endpoints są operational, error handling jest comprehensive, a metrics collection jest active.",
          "values": {
            "strings": [],
            "numbers": [
              7,
              100
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 197,
          "snippet": "**PHASE 7: LINKEDIN MODULE INTEGRATION = 100% COMPLETED** ✅\n\nLinkedIn FastAPI Adapter jest w pełni functional i ready dla production use. Integration z Orchestrator działa poprawnie, wszystkie endpoints są operational, error handling jest comprehensive, a metrics collection jest active.\n\n**The LinkedIn Module is ready to publish content when a valid LinkedIn session is available!** 🎉",
          "values": {
            "strings": [],
            "numbers": [
              7,
              100
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 199,
          "snippet": "LinkedIn FastAPI Adapter jest w pełni functional i ready dla production use. Integration z Orchestrator działa poprawnie, wszystkie endpoints są operational, error handling jest comprehensive, a metrics collection jest active.\n\n**The LinkedIn Module is ready to publish content when a valid LinkedIn session is available!** 🎉",
          "values": {
            "strings": [],
            "numbers": []
          }
        }
      ]
    },
    {
      "file": "/Users/hretheum/dev/bezrobocie/vector-wave/publisher/ENV_VARIABLES_GUIDE.md",
      "exists": true,
      "hits": [
        {
          "type": "platform_specific",
          "platform": "twitter",
          "line": 5,
          "snippet": "## 📋 Wszystkie wymagane zmienne środowiskowe\n\n### 🐦 Twitter Adapter (Typefully API)\n\n| Zmienna | Wymagana | Opis | Przykład |",
          "values": {
            "strings": [],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "substack",
          "line": 22,
          "snippet": "---\n\n### 📰 Substack Adapter (Browser Automation)\n\n| Zmienna | Wymagana | Opis | Przykład |",
          "values": {
            "strings": [],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "substack",
          "line": 27,
          "snippet": "|---------|----------|------|----------|\n| `OPENAI_API_KEY` | ✅ | OpenAI API key dla Stagehand AI | `sk-xxx123xxx` |\n| `SUBSTACK_SUBDOMAIN` | ✅ | Twoja subdomena Substack | `mojblog` |\n| `BROWSERBASE_API_KEY` | ❌ | API key Browserbase (cloud) | `bb_live_xxx` |\n| `BROWSERBASE_PROJECT_ID` | ❌ | Project ID Browserbase | `proj_xxx` |",
          "values": {
            "strings": [],
            "numbers": [
              123
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "substack",
          "line": 40,
          "snippet": "     ```\n\n2. **Substack Subdomain**:\n   - Dla https://mojblog.substack.com ustaw:\n     ```bash",
          "values": {
            "strings": [],
            "numbers": [
              2
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "substack",
          "line": 41,
          "snippet": "\n2. **Substack Subdomain**:\n   - Dla https://mojblog.substack.com ustaw:\n     ```bash\n     SUBSTACK_SUBDOMAIN=mojblog",
          "values": {
            "strings": [],
            "numbers": [
              2
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "substack",
          "line": 43,
          "snippet": "   - Dla https://mojblog.substack.com ustaw:\n     ```bash\n     SUBSTACK_SUBDOMAIN=mojblog\n     ```\n",
          "values": {
            "strings": [],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "substack",
          "line": 75,
          "snippet": "# Minimum configuration dla testowania:\nOPENAI_API_KEY=sk-your_actual_openai_key_here\nSUBSTACK_SUBDOMAIN=twoja-subdomena\nTYPEFULLY_API_KEY=Bearer_your_typefully_key_here\n```",
          "values": {
            "strings": [],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "twitter",
          "line": 81,
          "snippet": "### 3. Test konfiguracji:\n```bash\n# Test Twitter Adapter\ncurl -X POST http://localhost:8083/publish -d '{\"text\":\"Test\"}' -H 'Content-Type: application/json'\n",
          "values": {
            "strings": [
              "text",
              "Test",
              " -H "
            ],
            "numbers": [
              3,
              8083
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "substack",
          "line": 84,
          "snippet": "curl -X POST http://localhost:8083/publish -d '{\"text\":\"Test\"}' -H 'Content-Type: application/json'\n\n# Test Substack Adapter\nnode scripts/test-substack-adapter.js\n```",
          "values": {
            "strings": [
              "text",
              "Test",
              " -H "
            ],
            "numbers": [
              8083
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "substack",
          "line": 85,
          "snippet": "\n# Test Substack Adapter\nnode scripts/test-substack-adapter.js\n```\n",
          "values": {
            "strings": [],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "substack",
          "line": 90,
          "snippet": "---\n\n## 🔧 Session Management (Substack)\n\nSubstack adapter używa persystentnych sesji przeglądarki:",
          "values": {
            "strings": [],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "substack",
          "line": 92,
          "snippet": "## 🔧 Session Management (Substack)\n\nSubstack adapter używa persystentnych sesji przeglądarki:\n\n### Utwórz nową sesję:",
          "values": {
            "strings": [],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "substack",
          "line": 96,
          "snippet": "### Utwórz nową sesję:\n```bash\nnode scripts/substack-cli.js session create --account my-account\n```\n",
          "values": {
            "strings": [],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "substack",
          "line": 101,
          "snippet": "### Sprawdź status sesji:\n```bash\nnode scripts/substack-cli.js session status --account my-account\n```\n",
          "values": {
            "strings": [],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "substack",
          "line": 106,
          "snippet": "### Sesje są zapisane w:\n```\ndata/sessions/my-account_substack.json\n```\n",
          "values": {
            "strings": [],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "substack",
          "line": 117,
          "snippet": "- **Rozwiązanie**: Ustaw `OPENAI_API_KEY=sk-xxx` w `.env`\n\n### 2. `Brak SUBSTACK_SUBDOMAIN w .env!`\n- **Przyczyna**: Brak subdomeny Substack\n- **Rozwiązanie**: Ustaw `SUBSTACK_SUBDOMAIN=twoja-nazwa` w `.env`",
          "values": {
            "strings": [],
            "numbers": [
              2
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "substack",
          "line": 118,
          "snippet": "\n### 2. `Brak SUBSTACK_SUBDOMAIN w .env!`\n- **Przyczyna**: Brak subdomeny Substack\n- **Rozwiązanie**: Ustaw `SUBSTACK_SUBDOMAIN=twoja-nazwa` w `.env`\n",
          "values": {
            "strings": [],
            "numbers": [
              2
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "twitter",
          "line": 119,
          "snippet": "### 2. `Brak SUBSTACK_SUBDOMAIN w .env!`\n- **Przyczyna**: Brak subdomeny Substack\n- **Rozwiązanie**: Ustaw `SUBSTACK_SUBDOMAIN=twoja-nazwa` w `.env`\n\n### 3. `503 API_KEY_MISSING` dla Twitter",
          "values": {
            "strings": [],
            "numbers": [
              2,
              3,
              503
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "twitter",
          "line": 121,
          "snippet": "- **Rozwiązanie**: Ustaw `SUBSTACK_SUBDOMAIN=twoja-nazwa` w `.env`\n\n### 3. `503 API_KEY_MISSING` dla Twitter\n- **Przyczyna**: Zakomentowany lub błędny klucz Typefully\n- **Rozwiązanie**: Odkomentuj i ustaw `TYPEFULLY_API_KEY=Bearer_xxx`",
          "values": {
            "strings": [],
            "numbers": [
              3,
              503
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "substack",
          "line": 126,
          "snippet": "\n### 4. `Nie znaleziono pliku sesji`\n- **Przyczyna**: Brak sesji Substack dla danego konta\n- **Rozwiązanie**: Utwórz sesję: `node scripts/substack-cli.js session create --account nazwa`\n",
          "values": {
            "strings": [],
            "numbers": [
              4
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "substack",
          "line": 127,
          "snippet": "### 4. `Nie znaleziono pliku sesji`\n- **Przyczyna**: Brak sesji Substack dla danego konta\n- **Rozwiązanie**: Utwórz sesję: `node scripts/substack-cli.js session create --account nazwa`\n\n---",
          "values": {
            "strings": [],
            "numbers": [
              4
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "substack",
          "line": 138,
          "snippet": "├── .env.template          # Template z instrukcjami\n├── data/\n│   └── sessions/          # Zapisane sesje Substack\n│       └── account_substack.json\n└── src/adapters/",
          "values": {
            "strings": [],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "twitter",
          "line": 139,
          "snippet": "├── data/\n│   └── sessions/          # Zapisane sesje Substack\n│       └── account_substack.json\n└── src/adapters/\n    ├── twitter/",
          "values": {
            "strings": [],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "twitter",
          "line": 141,
          "snippet": "│       └── account_substack.json\n└── src/adapters/\n    ├── twitter/\n    │   └── env.template   # Template dla Twitter adapter\n    └── substack-adapter.js",
          "values": {
            "strings": [],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "twitter",
          "line": 142,
          "snippet": "└── src/adapters/\n    ├── twitter/\n    │   └── env.template   # Template dla Twitter adapter\n    └── substack-adapter.js\n```",
          "values": {
            "strings": [],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "twitter",
          "line": 143,
          "snippet": "    ├── twitter/\n    │   └── env.template   # Template dla Twitter adapter\n    └── substack-adapter.js\n```\n",
          "values": {
            "strings": [],
            "numbers": []
          }
        }
      ]
    },
    {
      "file": "/Users/hretheum/dev/bezrobocie/vector-wave/publisher/END_TO_END_INTEGRATION_REPORT.md",
      "exists": true,
      "hits": [
        {
          "type": "required_elements",
          "platform": "universal",
          "line": 20,
          "snippet": "- ✅ **Load Testing & Performance Benchmarks**: 10+ concurrent requests, >80% success rate validated\n- ✅ **Production Startup Scripts**: Automated deployment with health checks and monitoring\n- ✅ **Performance Validation**: All performance requirements met in testing\n\n---",
          "values": {
            "strings": [],
            "numbers": [
              10,
              80
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 32,
          "snippet": "**Test Scenarios Completed**:\n\n#### 1. LinkedIn Carousel Pipeline Test\n```python\nasync def test_linkedin_carousel_pipeline(self)",
          "values": {
            "strings": [],
            "numbers": [
              1
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 34,
          "snippet": "#### 1. LinkedIn Carousel Pipeline Test\n```python\nasync def test_linkedin_carousel_pipeline(self)\n```\n- **Flow**: AI Writing Flow → Orchestrator → Presenton → LinkedIn",
          "values": {
            "strings": [],
            "numbers": [
              1
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 36,
          "snippet": "async def test_linkedin_carousel_pipeline(self)\n```\n- **Flow**: AI Writing Flow → Orchestrator → Presenton → LinkedIn\n- **Validates**: Complete carousel generation pipeline\n- **Verifies**: Presentation ID, slides count, PDF generation",
          "values": {
            "strings": [],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 46,
          "snippet": "async def test_multi_platform_with_images(self) \n```\n- **Platforms**: Twitter, Ghost, LinkedIn (direct content)\n- **Features**: Image placeholder processing via Pexels API\n- **Validates**: Image replacement, platform-specific handling",
          "values": {
            "strings": [],
            "numbers": []
          }
        },
        {
          "type": "required_elements",
          "platform": "universal",
          "line": 84,
          "snippet": "**Load Test Results**:\n- **Concurrent Requests**: 10 simultaneous requests\n- **Success Rate**: >80% requirement validated\n- **Performance**: Processing time within limits\n- **System Stability**: No degradation observed",
          "values": {
            "strings": [],
            "numbers": [
              10,
              80
            ]
          }
        },
        {
          "type": "required_elements",
          "platform": "universal",
          "line": 96,
          "snippet": "- Content processing simulation  \n- Error handling scenarios\n- Performance requirements validation\n- Enhanced publish response validation\n- Load testing simulation",
          "values": {
            "strings": [],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 112,
          "snippet": "- **Redis**: Data persistence, queue management\n- **Enhanced Orchestrator**: Main API with resource limits\n- **Presenton Service**: LinkedIn carousel generation\n- **Platform Adapters**: Ghost, Twitter, Substack\n- **Monitoring Stack**: Prometheus, Grafana, Loki",
          "values": {
            "strings": [],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 113,
          "snippet": "- **Enhanced Orchestrator**: Main API with resource limits\n- **Presenton Service**: LinkedIn carousel generation\n- **Platform Adapters**: Ghost, Twitter, Substack\n- **Monitoring Stack**: Prometheus, Grafana, Loki\n- **Load Balancer**: Nginx reverse proxy",
          "values": {
            "strings": [],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "twitter",
          "line": 132,
          "snippet": "- **Core Services**: Redis, API keys, URLs\n- **Enhanced Features**: Feature toggles, performance tuning\n- **Platform APIs**: Ghost, Twitter, Substack, Pexels\n- **Monitoring**: Prometheus, Grafana, logging\n- **Performance**: Timeouts, concurrency, resource limits",
          "values": {
            "strings": [],
            "numbers": []
          }
        },
        {
          "type": "required_elements",
          "platform": "universal",
          "line": 184,
          "snippet": "**Startup Process**:\n1. **Prerequisites Check**: Docker, Docker Compose, environment\n2. **Environment Validation**: Required API keys and configuration\n3. **Directory Setup**: Monitoring, SSL, logs directories  \n4. **Infrastructure First**: Redis → Monitoring → Application services",
          "values": {
            "strings": [],
            "numbers": [
              1,
              2,
              3,
              4
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 256,
          "snippet": "### ✅ Content Quality\n- **Manual Review Scores**: >8/10 for all content types\n- **AI Quality Scores**: LinkedIn 8.9, Twitter 8.4, Ghost 8.7\n- **Presenton Generation**: Business template quality validated\n",
          "values": {
            "strings": [],
            "numbers": [
              8,
              10,
              8,
              9,
              8,
              4,
              8,
              7
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 260,
          "snippet": "\n### ✅ Processing Speed  \n- **LinkedIn Carousel Pipeline**: 120s (target: <150s) ✅\n- **Multi-platform Processing**: 156s for 3 platforms ✅\n- **API Responsiveness**: <5s for all endpoints ✅",
          "values": {
            "strings": [],
            "numbers": [
              120,
              150,
              156,
              3,
              5
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 265,
          "snippet": "\n### ✅ Platform Coverage\n- **Supported Platforms**: 4+ (LinkedIn, Twitter, Ghost, Substack) ✅\n- **Specialized Handling**: LinkedIn carousels via Presenton ✅\n- **Image Processing**: Pexels API integration across all platforms ✅",
          "values": {
            "strings": [],
            "numbers": [
              4
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 266,
          "snippet": "### ✅ Platform Coverage\n- **Supported Platforms**: 4+ (LinkedIn, Twitter, Ghost, Substack) ✅\n- **Specialized Handling**: LinkedIn carousels via Presenton ✅\n- **Image Processing**: Pexels API integration across all platforms ✅\n",
          "values": {
            "strings": [],
            "numbers": [
              4
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 313,
          "snippet": "\n### ✅ Presenton Integration  \n- **LinkedIn Pipeline**: Prompt → carousel → PDF ✅\n- **Template Support**: Business, creative, minimal templates ✅\n- **File Generation**: PPTX and PDF outputs ✅",
          "values": {
            "strings": [],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 319,
          "snippet": "\n### ✅ Platform Differentiation\n- **LinkedIn Prompts**: vs direct content working ✅\n- **User Control**: \"direct_content\" flag functional ✅\n- **Content Optimization**: Platform-specific formatting ✅",
          "values": {
            "strings": [
              "direct_content"
            ],
            "numbers": []
          }
        },
        {
          "type": "required_elements",
          "platform": "universal",
          "line": 337,
          "snippet": "- [x] All core components implemented and tested\n- [x] End-to-end integration tests passing (100% success rate)\n- [x] Load testing validates performance requirements\n- [x] Production Docker Compose configuration complete\n- [x] Environment configuration template provided",
          "values": {
            "strings": [],
            "numbers": [
              100
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 362,
          "snippet": "**Feature Success Criteria**:\n- ✅ Image processing: Pexels placeholder→real images working\n- ✅ Presenton integration: LinkedIn prompt→carousel→PDF pipeline operational\n- ✅ Platform differentiation: LinkedIn prompts vs direct content working\n- ✅ User control: \"direct_content\" checkbox functional",
          "values": {
            "strings": [
              "direct_content"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 363,
          "snippet": "- ✅ Image processing: Pexels placeholder→real images working\n- ✅ Presenton integration: LinkedIn prompt→carousel→PDF pipeline operational\n- ✅ Platform differentiation: LinkedIn prompts vs direct content working\n- ✅ User control: \"direct_content\" checkbox functional\n- ✅ Backward compatibility: All existing functionality preserved",
          "values": {
            "strings": [
              "direct_content"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 398,
          "snippet": "### System Capabilities:\n\n- **Multi-Platform Publishing**: LinkedIn (carousels), Twitter, Ghost, Substack\n- **Enhanced Content Processing**: AI Writing Flow integration with Presenton\n- **Image Processing**: Automatic placeholder→real image conversion",
          "values": {
            "strings": [],
            "numbers": []
          }
        },
        {
          "type": "required_elements",
          "platform": "universal",
          "line": 417,
          "snippet": "## 📈 Next Steps (Optional Enhancements)\n\nWhile the system is fully functional and production-ready, potential future enhancements could include:\n\n1. **Advanced Analytics**: ML-based content optimization",
          "values": {
            "strings": [],
            "numbers": [
              1
            ]
          }
        }
      ]
    },
    {
      "file": "/Users/hretheum/dev/bezrobocie/vector-wave/publisher/TASK_4_5_FINAL_SUMMARY.md",
      "exists": true,
      "hits": [
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 6,
          "snippet": "\n### 🔍 **DIAGNOZA:**\nProblem był z **formatem test image** - Ghost wymaga **prawdziwego JPEG** z pełnymi headers i metadata, nie base64 dummy data.\n\n### 🛠️ **SYSTEMOWE ROZWIĄZANIE:**",
          "values": {
            "strings": [],
            "numbers": [
              64
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 11,
          "snippet": "1. **Zastąpiono dummy image** prawdziwym obrazem z `picsum.photos`\n2. **Naprawiono wszystkie shell quote issues** używając `printf` i plików zamiast `echo`\n3. **Przetestowano z oficjalnym Ghost API client** - potwierdził problem z formatem obrazu\n\n### 📊 **OBECNY STAN TASK 4.5:**",
          "values": {
            "strings": [],
            "numbers": [
              1,
              2,
              3,
              4,
              5
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 20,
          "snippet": "- **Post creation** z obrazami - ✅ DZIAŁA\n- **Real image handling** - ✅ DZIAŁA\n- **Ghost API integration** - ✅ DZIAŁA\n\n#### ⚠️ **WYMAGAJĄ NAPRAWY:**",
          "values": {
            "strings": [],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 23,
          "snippet": "\n#### ⚠️ **WYMAGAJĄ NAPRAWY:**\n- **Image processing w content** - lokalne obrazy nie są konwertowane na Ghost URLs\n- **File validation error handling** - generic error zamiast proper 400\n",
          "values": {
            "strings": [],
            "numbers": [
              400
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 40,
          "snippet": "3. Complete final validation\n\n## 🎉 **MAJOR SUCCESS: GHOST IMAGE UPLOAD WORKING!**\n\nTask 4.5 is **~80% COMPLETED** with the main image upload functionality fully working.",
          "values": {
            "strings": [],
            "numbers": [
              3,
              4,
              5,
              80
            ]
          }
        }
      ]
    },
    {
      "file": "/Users/hretheum/dev/bezrobocie/vector-wave/publisher/test_retry_mechanism.py",
      "exists": true,
      "hits": [
        {
          "type": "platform_specific",
          "platform": "twitter",
          "line": 22,
          "snippet": "    def __init__(self):\n        self.orchestrator_url = \"http://localhost:8085\"\n        self.twitter_adapter_url = \"http://localhost:8083\"\n        self.ghost_adapter_url = \"http://localhost:8086\"\n        ",
          "values": {
            "strings": [
              "http://localhost:8085",
              "http://localhost:8083",
              "http://localhost:8086"
            ],
            "numbers": [
              8085,
              8083,
              8086
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "twitter",
          "line": 23,
          "snippet": "        self.orchestrator_url = \"http://localhost:8085\"\n        self.twitter_adapter_url = \"http://localhost:8083\"\n        self.ghost_adapter_url = \"http://localhost:8086\"\n        \n    def test_orchestrator_health(self):",
          "values": {
            "strings": [
              "http://localhost:8085",
              "http://localhost:8083",
              "http://localhost:8086"
            ],
            "numbers": [
              8085,
              8083,
              8086
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 50,
          "snippet": "            logger.info(f\"✅ Orchestrator retry metrics found: {retry_metrics_found}\")\n            \n            # Test Ghost adapter metrics\n            response = requests.get(f\"{self.ghost_adapter_url}/metrics\", timeout=5)\n            ghost_metrics_data = response.text",
          "values": {
            "strings": [
              "✅ Orchestrator retry metrics found: {retry_metrics_found}",
              "{self.ghost_adapter_url}/metrics"
            ],
            "numbers": [
              5
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 51,
          "snippet": "            \n            # Test Ghost adapter metrics\n            response = requests.get(f\"{self.ghost_adapter_url}/metrics\", timeout=5)\n            ghost_metrics_data = response.text\n            ",
          "values": {
            "strings": [
              "{self.ghost_adapter_url}/metrics"
            ],
            "numbers": [
              5
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 52,
          "snippet": "            # Test Ghost adapter metrics\n            response = requests.get(f\"{self.ghost_adapter_url}/metrics\", timeout=5)\n            ghost_metrics_data = response.text\n            \n            ghost_retry_metrics = []",
          "values": {
            "strings": [
              "{self.ghost_adapter_url}/metrics"
            ],
            "numbers": [
              5
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 54,
          "snippet": "            ghost_metrics_data = response.text\n            \n            ghost_retry_metrics = []\n            if \"ghost_retry_attempts_total\" in ghost_metrics_data:\n                ghost_retry_metrics.append(\"ghost_retry_attempts_total\")",
          "values": {
            "strings": [
              "ghost_retry_attempts_total",
              "ghost_retry_attempts_total"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 55,
          "snippet": "            \n            ghost_retry_metrics = []\n            if \"ghost_retry_attempts_total\" in ghost_metrics_data:\n                ghost_retry_metrics.append(\"ghost_retry_attempts_total\")\n            if \"ghost_retry_delay_seconds\" in ghost_metrics_data:",
          "values": {
            "strings": [
              "ghost_retry_attempts_total",
              "ghost_retry_attempts_total",
              "ghost_retry_delay_seconds"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 56,
          "snippet": "            ghost_retry_metrics = []\n            if \"ghost_retry_attempts_total\" in ghost_metrics_data:\n                ghost_retry_metrics.append(\"ghost_retry_attempts_total\")\n            if \"ghost_retry_delay_seconds\" in ghost_metrics_data:\n                ghost_retry_metrics.append(\"ghost_retry_delay_seconds\")",
          "values": {
            "strings": [
              "ghost_retry_attempts_total",
              "ghost_retry_attempts_total",
              "ghost_retry_delay_seconds",
              "ghost_retry_delay_seconds"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 57,
          "snippet": "            if \"ghost_retry_attempts_total\" in ghost_metrics_data:\n                ghost_retry_metrics.append(\"ghost_retry_attempts_total\")\n            if \"ghost_retry_delay_seconds\" in ghost_metrics_data:\n                ghost_retry_metrics.append(\"ghost_retry_delay_seconds\")\n            ",
          "values": {
            "strings": [
              "ghost_retry_attempts_total",
              "ghost_retry_attempts_total",
              "ghost_retry_delay_seconds",
              "ghost_retry_delay_seconds"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 58,
          "snippet": "                ghost_retry_metrics.append(\"ghost_retry_attempts_total\")\n            if \"ghost_retry_delay_seconds\" in ghost_metrics_data:\n                ghost_retry_metrics.append(\"ghost_retry_delay_seconds\")\n            \n            logger.info(f\"✅ Ghost retry metrics found: {ghost_retry_metrics}\")",
          "values": {
            "strings": [
              "ghost_retry_attempts_total",
              "ghost_retry_delay_seconds",
              "ghost_retry_delay_seconds",
              "✅ Ghost retry metrics found: {ghost_retry_metrics}"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 60,
          "snippet": "                ghost_retry_metrics.append(\"ghost_retry_delay_seconds\")\n            \n            logger.info(f\"✅ Ghost retry metrics found: {ghost_retry_metrics}\")\n            \n            return len(retry_metrics_found) > 0 and len(ghost_retry_metrics) > 0",
          "values": {
            "strings": [
              "ghost_retry_delay_seconds",
              "✅ Ghost retry metrics found: {ghost_retry_metrics}"
            ],
            "numbers": [
              0,
              0
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 62,
          "snippet": "            logger.info(f\"✅ Ghost retry metrics found: {ghost_retry_metrics}\")\n            \n            return len(retry_metrics_found) > 0 and len(ghost_retry_metrics) > 0\n            \n        except Exception as e:",
          "values": {
            "strings": [
              "✅ Ghost retry metrics found: {ghost_retry_metrics}"
            ],
            "numbers": [
              0,
              0
            ]
          }
        }
      ]
    },
    {
      "file": "/Users/hretheum/dev/bezrobocie/vector-wave/publisher/test_accuracy.json",
      "exists": true,
      "hits": [
        {
          "type": "platform_specific",
          "platform": "twitter",
          "line": 7,
          "snippet": "  },\n  \"platforms\": {\n    \"twitter\": {\n      \"enabled\": true,\n      \"process_images\": true",
          "values": {
            "strings": [
              "platforms",
              "twitter",
              "enabled",
              "process_images"
            ],
            "numbers": []
          }
        }
      ]
    },
    {
      "file": "/Users/hretheum/dev/bezrobocie/vector-wave/publisher/ALERTING_SETUP.md",
      "exists": true,
      "hits": [
        {
          "type": "platform_specific",
          "platform": "twitter",
          "line": 79,
          "snippet": "### Telegram Format\n```\n🔴 **Platform TWITTER Down**\n\n**Severity:** CRITICAL",
          "values": {
            "strings": [],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "twitter",
          "line": 83,
          "snippet": "**Severity:** CRITICAL\n**Component:** adapter\n**Platform:** twitter\n**Job ID:** `job_12345`\n**Time:** 2025-01-15 14:30:00 UTC",
          "values": {
            "strings": [],
            "numbers": [
              12345,
              2025,
              1,
              15,
              14,
              30,
              0
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "twitter",
          "line": 87,
          "snippet": "**Time:** 2025-01-15 14:30:00 UTC\n\nPlatform twitter is not responding. Error: Connection timeout\n\n**Details:** `{\"job_id\": \"job_12345\", \"timestamp\": \"2025-01-15T14:30:00Z\"}`",
          "values": {
            "strings": [
              "job_id",
              "job_12345",
              "timestamp",
              "2025-01-15T14:30:00Z"
            ],
            "numbers": [
              2025,
              1,
              15,
              14,
              30,
              0,
              12345,
              2025,
              1,
              15
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "twitter",
          "line": 100,
          "snippet": "  \"alert_type\": \"platform_down\",\n  \"severity\": \"critical\", \n  \"title\": \"Platform TWITTER Down\",\n  \"message\": \"Platform twitter is not responding...\",\n  \"component\": \"adapter\",",
          "values": {
            "strings": [
              "alert_type",
              "platform_down",
              "severity",
              "critical",
              "title",
              "Platform TWITTER Down",
              "message",
              "Platform twitter is not responding...",
              "component",
              "adapter"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "twitter",
          "line": 101,
          "snippet": "  \"severity\": \"critical\", \n  \"title\": \"Platform TWITTER Down\",\n  \"message\": \"Platform twitter is not responding...\",\n  \"component\": \"adapter\",\n  \"platform\": \"twitter\",",
          "values": {
            "strings": [
              "severity",
              "critical",
              "title",
              "Platform TWITTER Down",
              "message",
              "Platform twitter is not responding...",
              "component",
              "adapter",
              "platform",
              "twitter"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "twitter",
          "line": 103,
          "snippet": "  \"message\": \"Platform twitter is not responding...\",\n  \"component\": \"adapter\",\n  \"platform\": \"twitter\",\n  \"job_id\": \"job_12345\",\n  \"timestamp\": \"2025-01-15T14:30:00Z\",",
          "values": {
            "strings": [
              "message",
              "Platform twitter is not responding...",
              "component",
              "adapter",
              "platform",
              "twitter",
              "job_id",
              "job_12345",
              "timestamp",
              "2025-01-15T14:30:00Z"
            ],
            "numbers": [
              12345,
              2025,
              1,
              15,
              14,
              30,
              0
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "twitter",
          "line": 117,
          "snippet": "curl -X POST http://localhost:8085/test-alert \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\"type\": \"platform_down\", \"platform\": \"twitter\"}'\n```\n",
          "values": {
            "strings": [
              "Content-Type: application/json",
              "type",
              "platform_down",
              "platform",
              "twitter"
            ],
            "numbers": [
              8085
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "twitter",
          "line": 123,
          "snippet": "```bash\n# Zatrzymaj adapter\ndocker stop publisher-twitter-adapter\n\n# Worker automatycznie wykryje i wyśle alert",
          "values": {
            "strings": [],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "twitter",
          "line": 134,
          "snippet": "  curl -X POST http://localhost:8085/publish \\\n    -H \"Content-Type: application/json\" \\\n    -d '{\"platform\": \"twitter\", \"content\": \"Test '$i'\", \"schedule_time\": \"immediate\"}'\ndone\n```",
          "values": {
            "strings": [
              "Content-Type: application/json",
              "platform",
              "twitter",
              "content",
              "Test ",
              ", ",
              ": "
            ],
            "numbers": [
              8085
            ]
          }
        },
        {
          "type": "forbidden_phrases",
          "platform": "universal",
          "line": 168,
          "snippet": "## Security Notes\n\n- **Never commit** `.env` file z tokenami\n- Użyj environment variables w produkcji\n- Webhook secret weryfikuje autentyczność",
          "values": {
            "strings": [],
            "numbers": []
          }
        }
      ]
    },
    {
      "file": "/Users/hretheum/dev/bezrobocie/vector-wave/publisher/test_payload.json",
      "exists": true,
      "hits": [
        {
          "type": "platform_specific",
          "platform": "twitter",
          "line": 7,
          "snippet": "  },\n  \"platforms\": {\n    \"twitter\": {\n      \"enabled\": true,\n      \"process_images\": true",
          "values": {
            "strings": [
              "platforms",
              "twitter",
              "enabled",
              "process_images"
            ],
            "numbers": []
          }
        }
      ]
    },
    {
      "file": "/Users/hretheum/dev/bezrobocie/vector-wave/publisher/final_integration_test.json",
      "exists": true,
      "hits": [
        {
          "type": "platform_specific",
          "platform": "twitter",
          "line": 7,
          "snippet": "  },\n  \"platforms\": {\n    \"twitter\": {\n      \"enabled\": true,\n      \"process_images\": true",
          "values": {
            "strings": [
              "platforms",
              "twitter",
              "enabled",
              "process_images"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 11,
          "snippet": "      \"process_images\": true\n    },\n    \"ghost\": {\n      \"enabled\": true,\n      \"process_images\": true",
          "values": {
            "strings": [
              "process_images",
              "ghost",
              "enabled",
              "process_images"
            ],
            "numbers": []
          }
        }
      ]
    },
    {
      "file": "/Users/hretheum/dev/bezrobocie/vector-wave/publisher/README.md",
      "exists": true,
      "hits": [
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 8,
          "snippet": "**Publisher successfully integrated with new Vector Wave architecture:**\n- ✅ **Enhanced Orchestrator API** (commit: 0862b77) - Multi-platform publishing coordination\n- ✅ **LinkedIn PPT Generator Service** (commit: e53ddb5) - Presenton proxy with LinkedIn optimization\n- ✅ **Analytics Blackbox Interface** (commit: a154ed6) - Future-ready analytics API\n- ✅ **Circuit Breaker Integration**: Fault-tolerant connections to all Vector Wave services",
          "values": {
            "strings": [],
            "numbers": [
              862,
              77,
              53,
              5,
              154,
              6
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "twitter",
          "line": 14,
          "snippet": "\n### ✅ Co działa (Production Ready):\n- **Substack Adapter** (Faza 1) - ✅ COMPLETED - Pełna funkcjonalność\n- **Twitter Adapter** (Faza 2, Tasks 2.1-2.7) - ✅ COMPLETED - **Auto-publikacja przez Typefully**\n- **Ghost Adapter** (Faza 3) - ✅ COMPLETED - Complete CMS integration z image upload",
          "values": {
            "strings": [],
            "numbers": [
              1,
              2,
              2,
              1,
              2,
              7,
              3
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "twitter",
          "line": 15,
          "snippet": "### ✅ Co działa (Production Ready):\n- **Substack Adapter** (Faza 1) - ✅ COMPLETED - Pełna funkcjonalność\n- **Twitter Adapter** (Faza 2, Tasks 2.1-2.7) - ✅ COMPLETED - **Auto-publikacja przez Typefully**\n- **Ghost Adapter** (Faza 3) - ✅ COMPLETED - Complete CMS integration z image upload\n- **Orchestrator** (Faza 4, Tasks 4.1-4.6) - ✅ COMPLETED - **COMPLETE MULTI-PLATFORM API** 🎉",
          "values": {
            "strings": [],
            "numbers": [
              1,
              2,
              2,
              1,
              2,
              7,
              3,
              4,
              4,
              1
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "twitter",
          "line": 16,
          "snippet": "- **Substack Adapter** (Faza 1) - ✅ COMPLETED - Pełna funkcjonalność\n- **Twitter Adapter** (Faza 2, Tasks 2.1-2.7) - ✅ COMPLETED - **Auto-publikacja przez Typefully**\n- **Ghost Adapter** (Faza 3) - ✅ COMPLETED - Complete CMS integration z image upload\n- **Orchestrator** (Faza 4, Tasks 4.1-4.6) - ✅ COMPLETED - **COMPLETE MULTI-PLATFORM API** 🎉\n- **Alert System** (Faza 5, Task 5.4) - ✅ COMPLETED - **TELEGRAM, DISCORD & WEBHOOK ALERTS** 🚨",
          "values": {
            "strings": [],
            "numbers": [
              1,
              2,
              2,
              1,
              2,
              7,
              3,
              4,
              4,
              1
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "twitter",
          "line": 51,
          "snippet": "    },\n    \"platforms\": {\n      \"twitter\": {\"enabled\": true},\n      \"ghost\": {\"enabled\": true},\n      \"substack\": {\"enabled\": true}",
          "values": {
            "strings": [
              "platforms",
              "twitter",
              "enabled",
              "ghost",
              "enabled",
              "substack",
              "enabled"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "twitter",
          "line": 52,
          "snippet": "    \"platforms\": {\n      \"twitter\": {\"enabled\": true},\n      \"ghost\": {\"enabled\": true},\n      \"substack\": {\"enabled\": true}\n    }",
          "values": {
            "strings": [
              "platforms",
              "twitter",
              "enabled",
              "ghost",
              "enabled",
              "substack",
              "enabled"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "twitter",
          "line": 53,
          "snippet": "      \"twitter\": {\"enabled\": true},\n      \"ghost\": {\"enabled\": true},\n      \"substack\": {\"enabled\": true}\n    }\n  }'",
          "values": {
            "strings": [
              "twitter",
              "enabled",
              "ghost",
              "enabled",
              "substack",
              "enabled"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "twitter",
          "line": 84,
          "snippet": "  -d '{\n    \"type\": \"platform_down\",\n    \"platform\": \"twitter\", \n    \"severity\": \"critical\"\n  }'",
          "values": {
            "strings": [
              "{\n    ",
              ": ",
              ",\n    ",
              ": ",
              ", \n    ",
              ": ",
              "\n  }"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "twitter",
          "line": 126,
          "snippet": "```json\n{\n  \"platform\": \"twitter\",\n  \"status\": \"healthy\",\n  \"connection_status\": \"connected\", ",
          "values": {
            "strings": [
              "platform",
              "twitter",
              "status",
              "healthy",
              "connection_status",
              "connected"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "substack",
          "line": 171,
          "snippet": "```\n\n### 2. Wymagane zmienne dla Substack:\n```bash\nOPENAI_API_KEY=sk-your_openai_api_key_here",
          "values": {
            "strings": [],
            "numbers": [
              2
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "substack",
          "line": 174,
          "snippet": "```bash\nOPENAI_API_KEY=sk-your_openai_api_key_here\nSUBSTACK_SUBDOMAIN=twoja-subdomena  # np. dla https://twoja-subdomena.substack.com\n```\n",
          "values": {
            "strings": [],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "twitter",
          "line": 177,
          "snippet": "```\n\n### 3. Opcjonalne dla Twitter:\n```bash\nTYPEFULLY_API_KEY=Bearer_your_typefully_api_key_here",
          "values": {
            "strings": [],
            "numbers": [
              3
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "twitter",
          "line": 194,
          "snippet": "## Quick Start\n\n### 1. Uruchom Twitter Adapter\n```bash\ncd /Users/hretheum/dev/bezrobocie/vector-wave/publisher",
          "values": {
            "strings": [],
            "numbers": [
              1
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "twitter",
          "line": 233,
          "snippet": "  -H \"Content-Type: application/json\" \\\n  -d '{\n    \"text\": \"To jest bardzo długi tweet, który przekracza limit 280 znaków i zostanie automatycznie podzielony na wątek przez Multi-Channel Publisher. System używa Typefully API do zarządzania publikacją na Twitter/X. Dzięki temu możemy publikować długie treści bez ograniczeń platform społecznościowych.\",\n    \"thread_mode\": true,\n    \"schedule_time\": \"'$(date -u -d '+3 minutes' +\"%Y-%m-%dT%H:%M:%SZ\")'\"",
          "values": {
            "strings": [
              "Content-Type: application/json",
              "{\n    ",
              ": ",
              ",\n    ",
              ": true,\n    ",
              ": ",
              "$(date -u -d ",
              " +"
            ],
            "numbers": [
              280,
              3
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "twitter",
          "line": 253,
          "snippet": "| `\"draft\"` | Draft utworzony, nie opublikowany | Ręczna publikacja w UI Typefully |\n| `\"scheduled\"` | Draft zaplanowany | ⏳ Czeka na auto-publikację |\n| `\"published\"` | Draft opublikowany | ✅ Tweet widoczny na Twitter + twitter_url |\n\n---",
          "values": {
            "strings": [
              "draft",
              "scheduled",
              "published"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "twitter",
          "line": 260,
          "snippet": "\n### Porty\n- **Twitter Adapter**: http://localhost:8083\n- **Nginx Proxy**: http://localhost:8081\n",
          "values": {
            "strings": [],
            "numbers": [
              8083,
              8081
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "twitter",
          "line": 321,
          "snippet": "## 📚 Dokumentacja\n\n- **Faza 1**: `docs/substack-adapter-technical.md`\n- **Faza 2**: `docs/twitter-adapter-technical.md` \n- **Tasks**: `docs/phase-2-twitter-adapter.md`",
          "values": {
            "strings": [],
            "numbers": [
              1,
              2,
              2
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "twitter",
          "line": 322,
          "snippet": "\n- **Faza 1**: `docs/substack-adapter-technical.md`\n- **Faza 2**: `docs/twitter-adapter-technical.md` \n- **Tasks**: `docs/phase-2-twitter-adapter.md`\n- **Main Project**: `../PROJECT_CONTEXT.md`",
          "values": {
            "strings": [],
            "numbers": [
              1,
              2,
              2
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "twitter",
          "line": 323,
          "snippet": "- **Faza 1**: `docs/substack-adapter-technical.md`\n- **Faza 2**: `docs/twitter-adapter-technical.md` \n- **Tasks**: `docs/phase-2-twitter-adapter.md`\n- **Main Project**: `../PROJECT_CONTEXT.md`\n",
          "values": {
            "strings": [],
            "numbers": [
              1,
              2,
              2
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 331,
          "snippet": "\n1. **Faza 6** - AI Writing Flow integration\n2. **Faza 7** - LinkedIn module wrapper  \n3. **Faza 9** - Content optimization & A/B testing\n4. **Faza 10** - Enterprise features & multi-tenant support",
          "values": {
            "strings": [],
            "numbers": [
              1,
              6,
              2,
              7,
              3,
              9,
              4,
              10
            ]
          }
        }
      ]
    },
    {
      "file": "/Users/hretheum/dev/bezrobocie/vector-wave/publisher/docker-compose.production.yml",
      "exists": true,
      "hits": [
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 52,
          "snippet": "      - PRESENTON_URL=http://presenton:8089\n      - AI_WRITING_FLOW_URL=${AI_WRITING_FLOW_URL:-http://localhost:8003}\n      - GHOST_API_KEY=${GHOST_API_KEY}\n      - GHOST_API_URL=${GHOST_API_URL}\n      - TYPEFULLY_API_KEY=${TYPEFULLY_API_KEY}",
          "values": {
            "strings": [],
            "numbers": [
              8089,
              8003
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 53,
          "snippet": "      - AI_WRITING_FLOW_URL=${AI_WRITING_FLOW_URL:-http://localhost:8003}\n      - GHOST_API_KEY=${GHOST_API_KEY}\n      - GHOST_API_URL=${GHOST_API_URL}\n      - TYPEFULLY_API_KEY=${TYPEFULLY_API_KEY}\n      - ENVIRONMENT=production",
          "values": {
            "strings": [],
            "numbers": [
              8003
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 111,
          "snippet": "\n  # Platform Adapters\n  ghost-adapter:\n    build: \n      context: ./src/adapters/ghost",
          "values": {
            "strings": [],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 113,
          "snippet": "  ghost-adapter:\n    build: \n      context: ./src/adapters/ghost\n      dockerfile: Dockerfile\n    ports:",
          "values": {
            "strings": [],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 118,
          "snippet": "      - \"8086:8082\"\n    environment:\n      - GHOST_API_KEY=${GHOST_API_KEY}\n      - GHOST_API_URL=${GHOST_API_URL}\n      - REDIS_URL=redis://redis:6379",
          "values": {
            "strings": [
              "8086:8082"
            ],
            "numbers": [
              8086,
              8082,
              6379
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 119,
          "snippet": "    environment:\n      - GHOST_API_KEY=${GHOST_API_KEY}\n      - GHOST_API_URL=${GHOST_API_URL}\n      - REDIS_URL=redis://redis:6379\n      - ENVIRONMENT=production",
          "values": {
            "strings": [],
            "numbers": [
              6379
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "twitter",
          "line": 141,
          "snippet": "          cpus: '0.5'\n\n  twitter-adapter:\n    build: \n      context: ./src/adapters/twitter",
          "values": {
            "strings": [
              "0.5"
            ],
            "numbers": [
              0,
              5
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "twitter",
          "line": 143,
          "snippet": "  twitter-adapter:\n    build: \n      context: ./src/adapters/twitter\n      dockerfile: Dockerfile\n    ports:",
          "values": {
            "strings": [],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "substack",
          "line": 170,
          "snippet": "          cpus: '0.5'\n\n  substack-adapter:\n    build: \n      context: ./src/adapters/substack",
          "values": {
            "strings": [
              "0.5"
            ],
            "numbers": [
              0,
              5
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "substack",
          "line": 172,
          "snippet": "  substack-adapter:\n    build: \n      context: ./src/adapters/substack\n      dockerfile: Dockerfile\n    ports:",
          "values": {
            "strings": [],
            "numbers": []
          }
        }
      ]
    },
    {
      "file": "/Users/hretheum/dev/bezrobocie/vector-wave/publisher/DEPLOYMENT_GUIDE.md",
      "exists": true,
      "hits": [
        {
          "type": "required_elements",
          "platform": "universal",
          "line": 9,
          "snippet": "## 📋 Prerequisites\n\n### System Requirements\n\n**Minimum Production Setup**:",
          "values": {
            "strings": [],
            "numbers": []
          }
        },
        {
          "type": "required_elements",
          "platform": "universal",
          "line": 17,
          "snippet": "- OS: Ubuntu 20.04+ / CentOS 8+ / Docker-compatible Linux\n\n**Network Requirements**:\n- Outbound HTTPS (443) - AI Writing Flow, APIs zewnętrzne\n- Outbound HTTP (80) - Updates, repositories",
          "values": {
            "strings": [],
            "numbers": [
              20,
              4,
              8,
              443,
              80
            ]
          }
        },
        {
          "type": "required_elements",
          "platform": "universal",
          "line": 26,
          "snippet": "\n```bash\n# Core requirements\ndocker >= 20.10.0\ndocker-compose >= 2.0.0",
          "values": {
            "strings": [],
            "numbers": [
              20,
              10,
              0,
              2,
              0,
              0
            ]
          }
        },
        {
          "type": "required_elements",
          "platform": "twitter",
          "line": 40,
          "snippet": "\n```bash\n# Required API keys/accounts\nBROWSERBASE_API_KEY=     # Cloud browser automation\nTYPEFULLY_API_KEY=       # Twitter/X publishing ",
          "values": {
            "strings": [],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "twitter",
          "line": 42,
          "snippet": "# Required API keys/accounts\nBROWSERBASE_API_KEY=     # Cloud browser automation\nTYPEFULLY_API_KEY=       # Twitter/X publishing \nBEEHIIV_API_KEY=         # Newsletter publishing\nOPENAI_API_KEY=          # AI Writing Flow integration",
          "values": {
            "strings": [],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "twitter",
          "line": 43,
          "snippet": "BROWSERBASE_API_KEY=     # Cloud browser automation\nTYPEFULLY_API_KEY=       # Twitter/X publishing \nBEEHIIV_API_KEY=         # Newsletter publishing\nOPENAI_API_KEY=          # AI Writing Flow integration\n",
          "values": {
            "strings": [],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 73,
          "snippet": "    \n    subgraph \"Channel Adapters\"\n        LINKEDIN[LinkedIn Adapter :8081]\n        TWITTER[Twitter Adapter :8082]\n        SUBSTACK[Substack Adapter :8083]",
          "values": {
            "strings": [
              "Channel Adapters"
            ],
            "numbers": [
              8081,
              8082,
              8083
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 74,
          "snippet": "    subgraph \"Channel Adapters\"\n        LINKEDIN[LinkedIn Adapter :8081]\n        TWITTER[Twitter Adapter :8082]\n        SUBSTACK[Substack Adapter :8083]\n        BEEHIIV[Beehiiv Adapter :8084]",
          "values": {
            "strings": [
              "Channel Adapters"
            ],
            "numbers": [
              8081,
              8082,
              8083,
              8084
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 75,
          "snippet": "        LINKEDIN[LinkedIn Adapter :8081]\n        TWITTER[Twitter Adapter :8082]\n        SUBSTACK[Substack Adapter :8083]\n        BEEHIIV[Beehiiv Adapter :8084]\n    end",
          "values": {
            "strings": [],
            "numbers": [
              8081,
              8082,
              8083,
              8084
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "twitter",
          "line": 76,
          "snippet": "        TWITTER[Twitter Adapter :8082]\n        SUBSTACK[Substack Adapter :8083]\n        BEEHIIV[Beehiiv Adapter :8084]\n    end\n    ",
          "values": {
            "strings": [],
            "numbers": [
              8082,
              8083,
              8084
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 143,
          "snippet": "\n  # Channel Adapters\n  linkedin-adapter:\n    build: ./linkedin-adapter\n    deploy:",
          "values": {
            "strings": [],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 144,
          "snippet": "  # Channel Adapters\n  linkedin-adapter:\n    build: ./linkedin-adapter\n    deploy:\n      replicas: 2",
          "values": {
            "strings": [],
            "numbers": [
              2
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 151,
          "snippet": "      - REDIS_URL=redis://:${REDIS_PASSWORD}@redis:6379/1\n    volumes:\n      - ./data/linkedin:/app/data\n    restart: unless-stopped\n    ",
          "values": {
            "strings": [],
            "numbers": [
              6379,
              1
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "twitter",
          "line": 154,
          "snippet": "    restart: unless-stopped\n    \n  twitter-adapter:\n    build: ./twitter-adapter\n    deploy:",
          "values": {
            "strings": [],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "twitter",
          "line": 155,
          "snippet": "    \n  twitter-adapter:\n    build: ./twitter-adapter\n    deploy:\n      replicas: 2",
          "values": {
            "strings": [],
            "numbers": [
              2
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "substack",
          "line": 163,
          "snippet": "    restart: unless-stopped\n    \n  substack-adapter:\n    build: ./substack-adapter\n    environment:",
          "values": {
            "strings": [],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "substack",
          "line": 164,
          "snippet": "    \n  substack-adapter:\n    build: ./substack-adapter\n    environment:\n      - BROWSERBASE_API_KEY=${BROWSERBASE_API_KEY}",
          "values": {
            "strings": [],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "substack",
          "line": 169,
          "snippet": "      - REDIS_URL=redis://:${REDIS_PASSWORD}@redis:6379/3\n    volumes:\n      - ./data/substack:/app/data\n    restart: unless-stopped\n    ",
          "values": {
            "strings": [],
            "numbers": [
              6379,
              3
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "beehiiv",
          "line": 172,
          "snippet": "    restart: unless-stopped\n    \n  beehiiv-adapter:\n    build: ./beehiiv-adapter\n    environment:",
          "values": {
            "strings": [],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "beehiiv",
          "line": 173,
          "snippet": "    \n  beehiiv-adapter:\n    build: ./beehiiv-adapter\n    environment:\n      - BEEHIIV_API_KEY=${BEEHIIV_API_KEY}",
          "values": {
            "strings": [],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "beehiiv",
          "line": 175,
          "snippet": "    build: ./beehiiv-adapter\n    environment:\n      - BEEHIIV_API_KEY=${BEEHIIV_API_KEY}\n      - BROWSERBASE_API_KEY=${BROWSERBASE_API_KEY}\n      - REDIS_URL=redis://:${REDIS_PASSWORD}@redis:6379/4",
          "values": {
            "strings": [],
            "numbers": [
              6379,
              4
            ]
          }
        },
        {
          "type": "required_elements",
          "platform": "universal",
          "line": 218,
          "snippet": "  redis:\n    image: redis:7-alpine\n    command: redis-server --requirepass ${REDIS_PASSWORD} --appendonly yes\n    volumes:\n      - redis_data:/data",
          "values": {
            "strings": [],
            "numbers": [
              7
            ]
          }
        },
        {
          "type": "required_elements",
          "platform": "universal",
          "line": 294,
          "snippet": "\n# Python dependencies\nCOPY requirements.txt .\nRUN pip install --no-cache-dir -r requirements.txt\n",
          "values": {
            "strings": [],
            "numbers": []
          }
        },
        {
          "type": "required_elements",
          "platform": "universal",
          "line": 295,
          "snippet": "# Python dependencies\nCOPY requirements.txt .\nRUN pip install --no-cache-dir -r requirements.txt\n\n# Application code",
          "values": {
            "strings": [],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "twitter",
          "line": 315,
          "snippet": "\n```dockerfile\n# twitter-adapter/Dockerfile\nFROM node:18-alpine\n",
          "values": {
            "strings": [],
            "numbers": [
              18
            ]
          }
        },
        {
          "type": "required_elements",
          "platform": "universal",
          "line": 374,
          "snippet": "    \n    # Security Headers\n    add_header Strict-Transport-Security \"max-age=63072000; includeSubDomains; preload\";\n    add_header X-Frame-Options DENY;\n    add_header X-Content-Type-Options nosniff;",
          "values": {
            "strings": [
              "max-age=63072000; includeSubDomains; preload"
            ],
            "numbers": [
              63072000
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 579,
          "snippet": "    scrape_interval: 30s\n    \n  - job_name: 'mcp-linkedin-adapter'\n    static_configs:\n      - targets: ['linkedin-adapter:8081']",
          "values": {
            "strings": [
              "mcp-linkedin-adapter",
              "linkedin-adapter:8081"
            ],
            "numbers": [
              30,
              8081
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 581,
          "snippet": "  - job_name: 'mcp-linkedin-adapter'\n    static_configs:\n      - targets: ['linkedin-adapter:8081']\n    metrics_path: '/metrics'\n    ",
          "values": {
            "strings": [
              "mcp-linkedin-adapter",
              "linkedin-adapter:8081",
              "/metrics"
            ],
            "numbers": [
              8081
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "twitter",
          "line": 584,
          "snippet": "    metrics_path: '/metrics'\n    \n  - job_name: 'mcp-twitter-adapter'\n    static_configs:\n      - targets: ['twitter-adapter:8082']",
          "values": {
            "strings": [
              "/metrics",
              "mcp-twitter-adapter",
              "twitter-adapter:8082"
            ],
            "numbers": [
              8082
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "twitter",
          "line": 586,
          "snippet": "  - job_name: 'mcp-twitter-adapter'\n    static_configs:\n      - targets: ['twitter-adapter:8082']\n    metrics_path: '/metrics'\n    ",
          "values": {
            "strings": [
              "mcp-twitter-adapter",
              "twitter-adapter:8082",
              "/metrics"
            ],
            "numbers": [
              8082
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "substack",
          "line": 589,
          "snippet": "    metrics_path: '/metrics'\n    \n  - job_name: 'mcp-substack-adapter'\n    static_configs:\n      - targets: ['substack-adapter:8083']",
          "values": {
            "strings": [
              "/metrics",
              "mcp-substack-adapter",
              "substack-adapter:8083"
            ],
            "numbers": [
              8083
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "substack",
          "line": 591,
          "snippet": "  - job_name: 'mcp-substack-adapter'\n    static_configs:\n      - targets: ['substack-adapter:8083']\n    metrics_path: '/metrics'\n    ",
          "values": {
            "strings": [
              "mcp-substack-adapter",
              "substack-adapter:8083",
              "/metrics"
            ],
            "numbers": [
              8083
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "beehiiv",
          "line": 594,
          "snippet": "    metrics_path: '/metrics'\n    \n  - job_name: 'mcp-beehiiv-adapter'\n    static_configs:\n      - targets: ['beehiiv-adapter:8084']",
          "values": {
            "strings": [
              "/metrics",
              "mcp-beehiiv-adapter",
              "beehiiv-adapter:8084"
            ],
            "numbers": [
              8084
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "beehiiv",
          "line": 596,
          "snippet": "  - job_name: 'mcp-beehiiv-adapter'\n    static_configs:\n      - targets: ['beehiiv-adapter:8084']\n    metrics_path: '/metrics'\n",
          "values": {
            "strings": [
              "mcp-beehiiv-adapter",
              "beehiiv-adapter:8084",
              "/metrics"
            ],
            "numbers": [
              8084
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 698,
          "snippet": "\n# Create data directories\nmkdir -p {data,logs,backups}/{linkedin,substack,beehiiv}\nmkdir -p monitoring/grafana/dashboards\n",
          "values": {
            "strings": [],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "beehiiv",
          "line": 734,
          "snippet": "BROWSERBASE_API_KEY=bb_your-browserbase-key-here\nTYPEFULLY_API_KEY=tf_your-typefully-key-here\nBEEHIIV_API_KEY=bh_your-beehiiv-key-here\n\n# AI Writing Flow",
          "values": {
            "strings": [],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 889,
          "snippet": "\n# Platform adapters\nfor platform in linkedin twitter substack beehiiv; do\n    echo \"Checking $platform adapter...\"\n    curl -f --connect-timeout $TIMEOUT \"http://localhost:808$(echo $platform | wc -c | xargs expr 1 +)/health\" > /dev/null",
          "values": {
            "strings": [
              "Checking $platform adapter...",
              "http://localhost:808$(echo $platform | wc -c | xargs expr 1 +)/health"
            ],
            "numbers": [
              808,
              1
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 979,
          "snippet": "\n# Update adapters one by one\nfor adapter in linkedin-adapter twitter-adapter substack-adapter beehiiv-adapter; do\n    echo \"Updating $adapter...\"\n    docker-compose up -d --no-deps $adapter",
          "values": {
            "strings": [
              "Updating $adapter..."
            ],
            "numbers": []
          }
        }
      ]
    },
    {
      "file": "/Users/hretheum/dev/bezrobocie/vector-wave/publisher/test_performance.json",
      "exists": true,
      "hits": [
        {
          "type": "platform_specific",
          "platform": "twitter",
          "line": 7,
          "snippet": "  },\n  \"platforms\": {\n    \"twitter\": {\"enabled\": true, \"process_images\": true}\n  },\n  \"content\": \"Large test with placeholder:performance1 and placeholder:performance2 and placeholder:performance3 and placeholder:performance4 and placeholder:performance5 and placeholder:performance6 and placeholder:performance7 end.\"",
          "values": {
            "strings": [
              "platforms",
              "twitter",
              "enabled",
              "process_images",
              "content",
              "Large test with placeholder:performance1 and placeholder:performance2 and placeholder:performance3 and placeholder:performance4 and placeholder:performance5 and placeholder:performance6 and placeholder:performance7 end."
            ],
            "numbers": [
              1,
              2,
              3,
              4,
              5,
              6,
              7
            ]
          }
        }
      ]
    },
    {
      "file": "/Users/hretheum/dev/bezrobocie/vector-wave/publisher/PHASE_5_COMPLETION_SUMMARY.md",
      "exists": true,
      "hits": []
    },
    {
      "file": "/Users/hretheum/dev/bezrobocie/vector-wave/publisher/API_SPECIFICATION.md",
      "exists": true,
      "hits": [
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 28,
          "snippet": "  },\n  \"platforms\": {\n    \"linkedin\": {\n      \"enabled\": true,\n      \"account_id\": \"production\",",
          "values": {
            "strings": [
              "platforms",
              "linkedin",
              "enabled",
              "account_id",
              "production"
            ],
            "numbers": []
          }
        },
        {
          "type": "required_elements",
          "platform": "universal",
          "line": 33,
          "snippet": "      \"schedule_time\": null,\n      \"options\": {\n        \"include_pdf\": true,\n        \"hashtags\": [\"#AI\", \"#Marketing\", \"#Innovation\"]\n      }",
          "values": {
            "strings": [
              "schedule_time",
              "options",
              "include_pdf",
              "hashtags",
              "#AI",
              "#Marketing",
              "#Innovation"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "twitter",
          "line": 37,
          "snippet": "      }\n    },\n    \"twitter\": {\n      \"enabled\": true,\n      \"account_id\": \"main_account\",",
          "values": {
            "strings": [
              "twitter",
              "enabled",
              "account_id",
              "main_account"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "substack",
          "line": 47,
          "snippet": "      }\n    },\n    \"substack\": {\n      \"enabled\": true,\n      \"account_id\": \"newsletter_ai\",",
          "values": {
            "strings": [
              "substack",
              "enabled",
              "account_id",
              "newsletter_ai"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 56,
          "snippet": "      }\n    },\n    \"ghost\": {\n      \"enabled\": true\n    }",
          "values": {
            "strings": [
              "ghost",
              "enabled"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 77,
          "snippet": "  \"status\": \"processing\",\n  \"platforms\": {\n    \"linkedin\": {\n      \"job_id\": \"linkedin_job_12345\",\n      \"status\": \"queued\",",
          "values": {
            "strings": [
              "status",
              "processing",
              "platforms",
              "linkedin",
              "job_id",
              "linkedin_job_12345",
              "status",
              "queued"
            ],
            "numbers": [
              12345
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 78,
          "snippet": "  \"platforms\": {\n    \"linkedin\": {\n      \"job_id\": \"linkedin_job_12345\",\n      \"status\": \"queued\",\n      \"estimated_completion\": \"2025-01-30T10:05:00Z\"",
          "values": {
            "strings": [
              "platforms",
              "linkedin",
              "job_id",
              "linkedin_job_12345",
              "status",
              "queued",
              "estimated_completion",
              "2025-01-30T10:05:00Z"
            ],
            "numbers": [
              12345,
              2025,
              1,
              30,
              10,
              5,
              0
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "twitter",
          "line": 82,
          "snippet": "      \"estimated_completion\": \"2025-01-30T10:05:00Z\"\n    },\n    \"twitter\": {\n      \"job_id\": \"twitter_job_12346\", \n      \"status\": \"scheduled\",",
          "values": {
            "strings": [
              "estimated_completion",
              "2025-01-30T10:05:00Z",
              "twitter",
              "job_id",
              "twitter_job_12346",
              "status",
              "scheduled"
            ],
            "numbers": [
              2025,
              1,
              30,
              10,
              5,
              0,
              12346
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "twitter",
          "line": 83,
          "snippet": "    },\n    \"twitter\": {\n      \"job_id\": \"twitter_job_12346\", \n      \"status\": \"scheduled\",\n      \"scheduled_for\": \"2025-01-30T14:00:00Z\"",
          "values": {
            "strings": [
              "twitter",
              "job_id",
              "twitter_job_12346",
              "status",
              "scheduled",
              "scheduled_for",
              "2025-01-30T14:00:00Z"
            ],
            "numbers": [
              12346,
              2025,
              1,
              30,
              14,
              0,
              0
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "substack",
          "line": 87,
          "snippet": "      \"scheduled_for\": \"2025-01-30T14:00:00Z\"\n    },\n    \"substack\": {\n      \"job_id\": \"substack_job_12347\",\n      \"status\": \"scheduled\", ",
          "values": {
            "strings": [
              "scheduled_for",
              "2025-01-30T14:00:00Z",
              "substack",
              "job_id",
              "substack_job_12347",
              "status",
              "scheduled"
            ],
            "numbers": [
              2025,
              1,
              30,
              14,
              0,
              0,
              12347
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "substack",
          "line": 88,
          "snippet": "    },\n    \"substack\": {\n      \"job_id\": \"substack_job_12347\",\n      \"status\": \"scheduled\", \n      \"scheduled_for\": \"2025-01-30T09:00:00Z\"",
          "values": {
            "strings": [
              "substack",
              "job_id",
              "substack_job_12347",
              "status",
              "scheduled",
              "scheduled_for",
              "2025-01-30T09:00:00Z"
            ],
            "numbers": [
              12347,
              2025,
              1,
              30,
              9,
              0,
              0
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 110,
          "snippet": "  \"overall_status\": \"partially_completed\",\n  \"platforms\": {\n    \"linkedin\": {\n      \"job_id\": \"linkedin_job_12345\",\n      \"status\": \"completed\",",
          "values": {
            "strings": [
              "overall_status",
              "partially_completed",
              "platforms",
              "linkedin",
              "job_id",
              "linkedin_job_12345",
              "status",
              "completed"
            ],
            "numbers": [
              12345
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 111,
          "snippet": "  \"platforms\": {\n    \"linkedin\": {\n      \"job_id\": \"linkedin_job_12345\",\n      \"status\": \"completed\",\n      \"result\": {",
          "values": {
            "strings": [
              "platforms",
              "linkedin",
              "job_id",
              "linkedin_job_12345",
              "status",
              "completed",
              "result"
            ],
            "numbers": [
              12345
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 114,
          "snippet": "      \"status\": \"completed\",\n      \"result\": {\n        \"platform_post_id\": \"linkedin_post_abc123\",\n        \"post_url\": \"https://linkedin.com/posts/...\",\n        \"published_at\": \"2025-01-30T10:03:42Z\",",
          "values": {
            "strings": [
              "status",
              "completed",
              "result",
              "platform_post_id",
              "linkedin_post_abc123",
              "post_url",
              "https://linkedin.com/posts/...",
              "published_at",
              "2025-01-30T10:03:42Z"
            ],
            "numbers": [
              123,
              2025,
              1,
              30,
              10,
              3,
              42
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 115,
          "snippet": "      \"result\": {\n        \"platform_post_id\": \"linkedin_post_abc123\",\n        \"post_url\": \"https://linkedin.com/posts/...\",\n        \"published_at\": \"2025-01-30T10:03:42Z\",\n        \"engagement_tracking\": true",
          "values": {
            "strings": [
              "result",
              "platform_post_id",
              "linkedin_post_abc123",
              "post_url",
              "https://linkedin.com/posts/...",
              "published_at",
              "2025-01-30T10:03:42Z",
              "engagement_tracking"
            ],
            "numbers": [
              123,
              2025,
              1,
              30,
              10,
              3,
              42
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "twitter",
          "line": 120,
          "snippet": "      }\n    },\n    \"twitter\": {\n      \"job_id\": \"twitter_job_12346\",\n      \"status\": \"scheduled\",",
          "values": {
            "strings": [
              "twitter",
              "job_id",
              "twitter_job_12346",
              "status",
              "scheduled"
            ],
            "numbers": [
              12346
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "twitter",
          "line": 121,
          "snippet": "    },\n    \"twitter\": {\n      \"job_id\": \"twitter_job_12346\",\n      \"status\": \"scheduled\",\n      \"scheduled_for\": \"2025-01-30T14:00:00Z\",",
          "values": {
            "strings": [
              "twitter",
              "job_id",
              "twitter_job_12346",
              "status",
              "scheduled",
              "scheduled_for",
              "2025-01-30T14:00:00Z"
            ],
            "numbers": [
              12346,
              2025,
              1,
              30,
              14,
              0,
              0
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "substack",
          "line": 129,
          "snippet": "      }\n    },\n    \"substack\": {\n      \"job_id\": \"substack_job_12347\",\n      \"status\": \"failed\",",
          "values": {
            "strings": [
              "substack",
              "job_id",
              "substack_job_12347",
              "status",
              "failed"
            ],
            "numbers": [
              12347
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "substack",
          "line": 130,
          "snippet": "    },\n    \"substack\": {\n      \"job_id\": \"substack_job_12347\",\n      \"status\": \"failed\",\n      \"error\": {",
          "values": {
            "strings": [
              "substack",
              "job_id",
              "substack_job_12347",
              "status",
              "failed",
              "error"
            ],
            "numbers": [
              12347
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "substack",
          "line": 134,
          "snippet": "      \"error\": {\n        \"code\": \"SESSION_EXPIRED\",\n        \"message\": \"Substack session expired, manual renewal required\",\n        \"retry_possible\": true,\n        \"next_retry\": \"2025-01-30T11:00:00Z\"",
          "values": {
            "strings": [
              "error",
              "code",
              "SESSION_EXPIRED",
              "message",
              "Substack session expired, manual renewal required",
              "retry_possible",
              "next_retry",
              "2025-01-30T11:00:00Z"
            ],
            "numbers": [
              2025,
              1,
              30,
              11,
              0,
              0
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 164,
          "snippet": "    \"media_url\": \"https://example.com/image.jpg\"\n  },\n  \"platforms\": [\"linkedin\", \"twitter\"],\n  \"account_ids\": {\n    \"linkedin\": \"production\",",
          "values": {
            "strings": [
              "media_url",
              "https://example.com/image.jpg",
              "platforms",
              "linkedin",
              "twitter",
              "account_ids",
              "linkedin",
              "production"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 166,
          "snippet": "  \"platforms\": [\"linkedin\", \"twitter\"],\n  \"account_ids\": {\n    \"linkedin\": \"production\",\n    \"twitter\": \"main_account\"\n  }",
          "values": {
            "strings": [
              "platforms",
              "linkedin",
              "twitter",
              "account_ids",
              "linkedin",
              "production",
              "twitter",
              "main_account"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 167,
          "snippet": "  \"account_ids\": {\n    \"linkedin\": \"production\",\n    \"twitter\": \"main_account\"\n  }\n}",
          "values": {
            "strings": [
              "account_ids",
              "linkedin",
              "production",
              "twitter",
              "main_account"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 185,
          "snippet": "  },\n  \"schedule_time\": \"2025-02-01T09:00:00Z\",\n  \"platforms\": [\"linkedin\", \"substack\", \"beehiiv\"],\n  \"recurrence\": {\n    \"enabled\": true,",
          "values": {
            "strings": [
              "schedule_time",
              "2025-02-01T09:00:00Z",
              "platforms",
              "linkedin",
              "substack",
              "beehiiv",
              "recurrence",
              "enabled"
            ],
            "numbers": [
              2025,
              2,
              1,
              9,
              0,
              0
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 204,
          "snippet": "  \"publication_id\": \"pub_7d4f8c9a-1234-5678-9abc-def123456789\",\n  \"cancellation_status\": {\n    \"linkedin\": \"cancelled\",\n    \"twitter\": \"cancelled\", \n    \"substack\": \"too_late_to_cancel\"",
          "values": {
            "strings": [
              "publication_id",
              "pub_7d4f8c9a-1234-5678-9abc-def123456789",
              "cancellation_status",
              "linkedin",
              "cancelled",
              "twitter",
              "cancelled",
              "substack",
              "too_late_to_cancel"
            ],
            "numbers": [
              7,
              4,
              8,
              9,
              1234,
              5678,
              9,
              123456789
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 205,
          "snippet": "  \"cancellation_status\": {\n    \"linkedin\": \"cancelled\",\n    \"twitter\": \"cancelled\", \n    \"substack\": \"too_late_to_cancel\"\n  },",
          "values": {
            "strings": [
              "cancellation_status",
              "linkedin",
              "cancelled",
              "twitter",
              "cancelled",
              "substack",
              "too_late_to_cancel"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 206,
          "snippet": "    \"linkedin\": \"cancelled\",\n    \"twitter\": \"cancelled\", \n    \"substack\": \"too_late_to_cancel\"\n  },\n  \"cancelled_at\": \"2025-01-30T10:30:00Z\"",
          "values": {
            "strings": [
              "linkedin",
              "cancelled",
              "twitter",
              "cancelled",
              "substack",
              "too_late_to_cancel",
              "cancelled_at",
              "2025-01-30T10:30:00Z"
            ],
            "numbers": [
              2025,
              1,
              30,
              10,
              30,
              0
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 223,
          "snippet": "{\n  \"platforms\": {\n    \"linkedin\": {\n      \"name\": \"LinkedIn\",\n      \"status\": \"operational\",",
          "values": {
            "strings": [
              "platforms",
              "linkedin",
              "name",
              "LinkedIn",
              "status",
              "operational"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 224,
          "snippet": "  \"platforms\": {\n    \"linkedin\": {\n      \"name\": \"LinkedIn\",\n      \"status\": \"operational\",\n      \"features\": [\"text\", \"images\", \"pdf\", \"scheduling\"],",
          "values": {
            "strings": [
              "platforms",
              "linkedin",
              "name",
              "LinkedIn",
              "status",
              "operational",
              "features",
              "text",
              "images",
              "pdf"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "twitter",
          "line": 233,
          "snippet": "      \"accounts\": [\"production\", \"test_account\"]\n    },\n    \"twitter\": {\n      \"name\": \"Twitter/X\", \n      \"status\": \"operational\",",
          "values": {
            "strings": [
              "accounts",
              "production",
              "test_account",
              "twitter",
              "name",
              "Twitter/X",
              "status",
              "operational"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "twitter",
          "line": 234,
          "snippet": "    },\n    \"twitter\": {\n      \"name\": \"Twitter/X\", \n      \"status\": \"operational\",\n      \"features\": [\"text\", \"images\", \"threads\", \"scheduling\"],",
          "values": {
            "strings": [
              "twitter",
              "name",
              "Twitter/X",
              "status",
              "operational",
              "features",
              "text",
              "images",
              "threads",
              "scheduling"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "substack",
          "line": 243,
          "snippet": "      \"integration\": \"typefully_api\"\n    },\n    \"substack\": {\n      \"name\": \"Substack\",\n      \"status\": \"degraded\",",
          "values": {
            "strings": [
              "integration",
              "typefully_api",
              "substack",
              "name",
              "Substack",
              "status",
              "degraded"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "substack",
          "line": 244,
          "snippet": "    },\n    \"substack\": {\n      \"name\": \"Substack\",\n      \"status\": \"degraded\",\n      \"features\": [\"newsletters\", \"scheduling\", \"subscriber_management\"],",
          "values": {
            "strings": [
              "substack",
              "name",
              "Substack",
              "status",
              "degraded",
              "features",
              "newsletters",
              "scheduling",
              "subscriber_management"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "beehiiv",
          "line": 250,
          "snippet": "      \"integration\": \"browser_automation\"\n    },\n    \"beehiiv\": {\n      \"name\": \"Beehiiv\",\n      \"status\": \"maintenance\",",
          "values": {
            "strings": [
              "integration",
              "browser_automation",
              "beehiiv",
              "name",
              "Beehiiv",
              "status",
              "maintenance"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "beehiiv",
          "line": 251,
          "snippet": "    },\n    \"beehiiv\": {\n      \"name\": \"Beehiiv\",\n      \"status\": \"maintenance\",\n      \"features\": [\"newsletters\", \"analytics\", \"api_integration\"],",
          "values": {
            "strings": [
              "beehiiv",
              "name",
              "Beehiiv",
              "status",
              "maintenance",
              "features",
              "newsletters",
              "analytics",
              "api_integration"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 268,
          "snippet": "```json\n{\n  \"platform\": \"linkedin\",\n  \"status\": \"operational\",\n  \"last_successful_post\": \"2025-01-30T09:45:32Z\",",
          "values": {
            "strings": [
              "platform",
              "linkedin",
              "status",
              "operational",
              "last_successful_post",
              "2025-01-30T09:45:32Z"
            ],
            "numbers": [
              2025,
              1,
              30,
              9,
              45,
              32
            ]
          }
        },
        {
          "type": "required_elements",
          "platform": "universal",
          "line": 282,
          "snippet": "      \"valid\": false,\n      \"error\": \"session_expired\",\n      \"requires_renewal\": true\n    }\n  },",
          "values": {
            "strings": [
              "valid",
              "error",
              "session_expired",
              "requires_renewal"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 310,
          "snippet": "```json\n{\n  \"platform\": \"linkedin\",\n  \"account_id\": \"production\", \n  \"test_result\": \"success\",",
          "values": {
            "strings": [
              "platform",
              "linkedin",
              "account_id",
              "production",
              "test_result",
              "success"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 347,
          "snippet": "  },\n  \"by_platform\": {\n    \"linkedin\": {\n      \"total\": 45,\n      \"successful\": 44,",
          "values": {
            "strings": [
              "by_platform",
              "linkedin",
              "total",
              "successful"
            ],
            "numbers": [
              45,
              44
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "twitter",
          "line": 354,
          "snippet": "      \"avg_response_time\": \"4.2s\"\n    },\n    \"twitter\": {\n      \"total\": 67,\n      \"successful\": 65,",
          "values": {
            "strings": [
              "avg_response_time",
              "4.2s",
              "twitter",
              "total",
              "successful"
            ],
            "numbers": [
              4,
              2,
              67,
              65
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "substack",
          "line": 361,
          "snippet": "      \"threads_created\": 12\n    },\n    \"substack\": {\n      \"total\": 28,\n      \"successful\": 25,",
          "values": {
            "strings": [
              "threads_created",
              "substack",
              "total",
              "successful"
            ],
            "numbers": [
              12,
              28,
              25
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "beehiiv",
          "line": 368,
          "snippet": "      \"newsletters_sent\": 25\n    },\n    \"beehiiv\": {\n      \"total\": 16,\n      \"successful\": 15,",
          "values": {
            "strings": [
              "newsletters_sent",
              "beehiiv",
              "total",
              "successful"
            ],
            "numbers": [
              25,
              16,
              15
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 393,
          "snippet": "```json\n{\n  \"platform\": \"linkedin\",\n  \"period\": {\n    \"start\": \"2025-01-23T00:00:00Z\",",
          "values": {
            "strings": [
              "platform",
              "linkedin",
              "period",
              "start",
              "2025-01-23T00:00:00Z"
            ],
            "numbers": [
              2025,
              1,
              23,
              0,
              0,
              0
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 475,
          "snippet": "  },\n  \"workers\": {\n    \"linkedin\": {\n      \"active_workers\": 2,\n      \"processing\": [\"linkedin_job_12345\", \"linkedin_job_12348\"]",
          "values": {
            "strings": [
              "workers",
              "linkedin",
              "active_workers",
              "processing",
              "linkedin_job_12345",
              "linkedin_job_12348"
            ],
            "numbers": [
              2,
              12345,
              12348
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 477,
          "snippet": "    \"linkedin\": {\n      \"active_workers\": 2,\n      \"processing\": [\"linkedin_job_12345\", \"linkedin_job_12348\"]\n    },\n    \"twitter\": {",
          "values": {
            "strings": [
              "linkedin",
              "active_workers",
              "processing",
              "linkedin_job_12345",
              "linkedin_job_12348",
              "twitter"
            ],
            "numbers": [
              2,
              12345,
              12348
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 479,
          "snippet": "      \"processing\": [\"linkedin_job_12345\", \"linkedin_job_12348\"]\n    },\n    \"twitter\": {\n      \"active_workers\": 1,\n      \"processing\": [\"twitter_job_12346\"]",
          "values": {
            "strings": [
              "processing",
              "linkedin_job_12345",
              "linkedin_job_12348",
              "twitter",
              "active_workers",
              "processing",
              "twitter_job_12346"
            ],
            "numbers": [
              12345,
              12348,
              1,
              12346
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "twitter",
          "line": 481,
          "snippet": "    \"twitter\": {\n      \"active_workers\": 1,\n      \"processing\": [\"twitter_job_12346\"]\n    }\n  }",
          "values": {
            "strings": [
              "twitter",
              "active_workers",
              "processing",
              "twitter_job_12346"
            ],
            "numbers": [
              1,
              12346
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 495,
          "snippet": "```json\n{\n  \"platform\": \"linkedin\",\n  \"queue_stats\": {\n    \"pending\": 5,",
          "values": {
            "strings": [
              "platform",
              "linkedin",
              "queue_stats",
              "pending"
            ],
            "numbers": [
              5
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 504,
          "snippet": "  \"recent_jobs\": [\n    {\n      \"job_id\": \"linkedin_job_12345\",\n      \"status\": \"processing\",\n      \"started_at\": \"2025-01-30T10:02:00Z\",",
          "values": {
            "strings": [
              "recent_jobs",
              "job_id",
              "linkedin_job_12345",
              "status",
              "processing",
              "started_at",
              "2025-01-30T10:02:00Z"
            ],
            "numbers": [
              12345,
              2025,
              1,
              30,
              10,
              2,
              0
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 510,
          "snippet": "    },\n    {\n      \"job_id\": \"linkedin_job_12344\",\n      \"status\": \"completed\", \n      \"completed_at\": \"2025-01-30T09:58:23Z\",",
          "values": {
            "strings": [
              "job_id",
              "linkedin_job_12344",
              "status",
              "completed",
              "completed_at",
              "2025-01-30T09:58:23Z"
            ],
            "numbers": [
              12344,
              2025,
              1,
              30,
              9,
              58,
              23
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 527,
          "snippet": "```json\n{\n  \"job_id\": \"linkedin_job_12343\",\n  \"retry_attempt\": 2,\n  \"status\": \"queued_for_retry\",",
          "values": {
            "strings": [
              "job_id",
              "linkedin_job_12343",
              "retry_attempt",
              "status",
              "queued_for_retry"
            ],
            "numbers": [
              12343,
              2
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 555,
          "snippet": "  },\n  \"platform_settings\": {\n    \"linkedin\": {\n      \"rate_limit\": \"10/hour\",\n      \"session_refresh_interval\": \"24h\",",
          "values": {
            "strings": [
              "platform_settings",
              "linkedin",
              "rate_limit",
              "10/hour",
              "session_refresh_interval",
              "24h"
            ],
            "numbers": [
              10,
              24
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "twitter",
          "line": 560,
          "snippet": "      \"default_account\": \"production\"\n    },\n    \"twitter\": {\n      \"thread_threshold\": 280,\n      \"auto_thread_split\": true,",
          "values": {
            "strings": [
              "default_account",
              "production",
              "twitter",
              "thread_threshold",
              "auto_thread_split"
            ],
            "numbers": [
              280
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 587,
          "snippet": "  },\n  \"platform_settings\": {\n    \"linkedin\": {\n      \"rate_limit\": \"15/hour\"\n    }",
          "values": {
            "strings": [
              "platform_settings",
              "linkedin",
              "rate_limit",
              "15/hour"
            ],
            "numbers": [
              15
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 685,
          "snippet": "  \"timestamp\": \"2025-01-30T10:03:42Z\",\n  \"publication_id\": \"pub_7d4f8c9a-1234-5678-9abc-def123456789\",\n  \"platform\": \"linkedin\",\n  \"job_id\": \"linkedin_job_12345\",\n  \"result\": {",
          "values": {
            "strings": [
              "timestamp",
              "2025-01-30T10:03:42Z",
              "publication_id",
              "pub_7d4f8c9a-1234-5678-9abc-def123456789",
              "platform",
              "linkedin",
              "job_id",
              "linkedin_job_12345",
              "result"
            ],
            "numbers": [
              2025,
              1,
              30,
              10,
              3,
              42,
              7,
              4,
              8,
              9
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 686,
          "snippet": "  \"publication_id\": \"pub_7d4f8c9a-1234-5678-9abc-def123456789\",\n  \"platform\": \"linkedin\",\n  \"job_id\": \"linkedin_job_12345\",\n  \"result\": {\n    \"platform_post_id\": \"linkedin_post_abc123\",",
          "values": {
            "strings": [
              "publication_id",
              "pub_7d4f8c9a-1234-5678-9abc-def123456789",
              "platform",
              "linkedin",
              "job_id",
              "linkedin_job_12345",
              "result",
              "platform_post_id",
              "linkedin_post_abc123"
            ],
            "numbers": [
              7,
              4,
              8,
              9,
              1234,
              5678,
              9,
              123456789,
              12345,
              123
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 688,
          "snippet": "  \"job_id\": \"linkedin_job_12345\",\n  \"result\": {\n    \"platform_post_id\": \"linkedin_post_abc123\",\n    \"post_url\": \"https://linkedin.com/posts/...\",\n    \"published_at\": \"2025-01-30T10:03:42Z\"",
          "values": {
            "strings": [
              "job_id",
              "linkedin_job_12345",
              "result",
              "platform_post_id",
              "linkedin_post_abc123",
              "post_url",
              "https://linkedin.com/posts/...",
              "published_at",
              "2025-01-30T10:03:42Z"
            ],
            "numbers": [
              12345,
              123,
              2025,
              1,
              30,
              10,
              3,
              42
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 689,
          "snippet": "  \"result\": {\n    \"platform_post_id\": \"linkedin_post_abc123\",\n    \"post_url\": \"https://linkedin.com/posts/...\",\n    \"published_at\": \"2025-01-30T10:03:42Z\"\n  }",
          "values": {
            "strings": [
              "result",
              "platform_post_id",
              "linkedin_post_abc123",
              "post_url",
              "https://linkedin.com/posts/...",
              "published_at",
              "2025-01-30T10:03:42Z"
            ],
            "numbers": [
              123,
              2025,
              1,
              30,
              10,
              3,
              42
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "substack",
          "line": 702,
          "snippet": "  \"timestamp\": \"2025-01-30T10:05:12Z\",\n  \"publication_id\": \"pub_7d4f8c9a-1234-5678-9abc-def123456789\",\n  \"platform\": \"substack\",\n  \"job_id\": \"substack_job_12347\",\n  \"error\": {",
          "values": {
            "strings": [
              "timestamp",
              "2025-01-30T10:05:12Z",
              "publication_id",
              "pub_7d4f8c9a-1234-5678-9abc-def123456789",
              "platform",
              "substack",
              "job_id",
              "substack_job_12347",
              "error"
            ],
            "numbers": [
              2025,
              1,
              30,
              10,
              5,
              12,
              7,
              4,
              8,
              9
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "substack",
          "line": 703,
          "snippet": "  \"publication_id\": \"pub_7d4f8c9a-1234-5678-9abc-def123456789\",\n  \"platform\": \"substack\",\n  \"job_id\": \"substack_job_12347\",\n  \"error\": {\n    \"code\": \"SESSION_EXPIRED\",",
          "values": {
            "strings": [
              "publication_id",
              "pub_7d4f8c9a-1234-5678-9abc-def123456789",
              "platform",
              "substack",
              "job_id",
              "substack_job_12347",
              "error",
              "code",
              "SESSION_EXPIRED"
            ],
            "numbers": [
              7,
              4,
              8,
              9,
              1234,
              5678,
              9,
              123456789,
              12347
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "substack",
          "line": 706,
          "snippet": "  \"error\": {\n    \"code\": \"SESSION_EXPIRED\",\n    \"message\": \"Substack session expired, manual renewal required\",\n    \"retry_scheduled\": true,\n    \"next_retry\": \"2025-01-30T11:00:00Z\"",
          "values": {
            "strings": [
              "error",
              "code",
              "SESSION_EXPIRED",
              "message",
              "Substack session expired, manual renewal required",
              "retry_scheduled",
              "next_retry",
              "2025-01-30T11:00:00Z"
            ],
            "numbers": [
              2025,
              1,
              30,
              11,
              0,
              0
            ]
          }
        },
        {
          "type": "required_elements",
          "platform": "universal",
          "line": 720,
          "snippet": "{\n  \"type\": \"object\",\n  \"required\": [\"topic\", \"platforms\"],\n  \"properties\": {\n    \"topic\": {",
          "values": {
            "strings": [
              "type",
              "object",
              "required",
              "topic",
              "platforms",
              "properties",
              "topic"
            ],
            "numbers": []
          }
        },
        {
          "type": "required_elements",
          "platform": "universal",
          "line": 724,
          "snippet": "    \"topic\": {\n      \"type\": \"object\",\n      \"required\": [\"title\"],\n      \"properties\": {\n        \"title\": {\"type\": \"string\", \"minLength\": 1, \"maxLength\": 200},",
          "values": {
            "strings": [
              "topic",
              "type",
              "object",
              "required",
              "title",
              "properties",
              "title",
              "type",
              "string",
              "minLength"
            ],
            "numbers": [
              1,
              200
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 739,
          "snippet": "      \"minProperties\": 1,\n      \"properties\": {\n        \"linkedin\": {\"$ref\": \"#/definitions/LinkedInConfig\"},\n        \"twitter\": {\"$ref\": \"#/definitions/TwitterConfig\"},\n        \"substack\": {\"$ref\": \"#/definitions/SubstackConfig\"},",
          "values": {
            "strings": [
              "minProperties",
              "properties",
              "linkedin",
              "$ref",
              "#/definitions/LinkedInConfig",
              "twitter",
              "$ref",
              "#/definitions/TwitterConfig",
              "substack",
              "$ref"
            ],
            "numbers": [
              1
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 740,
          "snippet": "      \"properties\": {\n        \"linkedin\": {\"$ref\": \"#/definitions/LinkedInConfig\"},\n        \"twitter\": {\"$ref\": \"#/definitions/TwitterConfig\"},\n        \"substack\": {\"$ref\": \"#/definitions/SubstackConfig\"},\n        \"beehiiv\": {\"$ref\": \"#/definitions/BeehiivConfig\"}",
          "values": {
            "strings": [
              "properties",
              "linkedin",
              "$ref",
              "#/definitions/LinkedInConfig",
              "twitter",
              "$ref",
              "#/definitions/TwitterConfig",
              "substack",
              "$ref",
              "#/definitions/SubstackConfig"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 741,
          "snippet": "        \"linkedin\": {\"$ref\": \"#/definitions/LinkedInConfig\"},\n        \"twitter\": {\"$ref\": \"#/definitions/TwitterConfig\"},\n        \"substack\": {\"$ref\": \"#/definitions/SubstackConfig\"},\n        \"beehiiv\": {\"$ref\": \"#/definitions/BeehiivConfig\"}\n      }",
          "values": {
            "strings": [
              "linkedin",
              "$ref",
              "#/definitions/LinkedInConfig",
              "twitter",
              "$ref",
              "#/definitions/TwitterConfig",
              "substack",
              "$ref",
              "#/definitions/SubstackConfig",
              "beehiiv"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "twitter",
          "line": 742,
          "snippet": "        \"twitter\": {\"$ref\": \"#/definitions/TwitterConfig\"},\n        \"substack\": {\"$ref\": \"#/definitions/SubstackConfig\"},\n        \"beehiiv\": {\"$ref\": \"#/definitions/BeehiivConfig\"}\n      }\n    },",
          "values": {
            "strings": [
              "twitter",
              "$ref",
              "#/definitions/TwitterConfig",
              "substack",
              "$ref",
              "#/definitions/SubstackConfig",
              "beehiiv",
              "$ref",
              "#/definitions/BeehiivConfig"
            ],
            "numbers": []
          }
        },
        {
          "type": "required_elements",
          "platform": "universal",
          "line": 763,
          "snippet": "{\n  \"type\": \"object\",\n  \"required\": [\"error\", \"message\"],\n  \"properties\": {\n    \"error\": {",
          "values": {
            "strings": [
              "type",
              "object",
              "required",
              "error",
              "message",
              "properties",
              "error"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 801,
          "snippet": "### Platform Filtering\n\n- **platforms**: Comma-separated list (e.g., \"linkedin,twitter\")\n- **status**: Filter by status (\"completed\", \"failed\", \"processing\")\n",
          "values": {
            "strings": [
              "linkedin,twitter",
              "completed",
              "failed",
              "processing"
            ],
            "numbers": []
          }
        },
        {
          "type": "required_elements",
          "platform": "universal",
          "line": 838,
          "snippet": "## 🔒 Security Headers\n\n### Required Request Headers\n\n```",
          "values": {
            "strings": [],
            "numbers": []
          }
        },
        {
          "type": "required_elements",
          "platform": "universal",
          "line": 855,
          "snippet": "X-Frame-Options: DENY\nX-XSS-Protection: 1; mode=block\nStrict-Transport-Security: max-age=31536000; includeSubDomains\n```\n",
          "values": {
            "strings": [],
            "numbers": [
              1,
              31536000
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 867,
          "snippet": "# HELP mcp_publications_total Total number of publications\n# TYPE mcp_publications_total counter\nmcp_publications_total{platform=\"linkedin\",status=\"success\"} 149\nmcp_publications_total{platform=\"linkedin\",status=\"failed\"} 1\n",
          "values": {
            "strings": [
              "linkedin",
              "success",
              "linkedin",
              "failed"
            ],
            "numbers": [
              149,
              1
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 868,
          "snippet": "# TYPE mcp_publications_total counter\nmcp_publications_total{platform=\"linkedin\",status=\"success\"} 149\nmcp_publications_total{platform=\"linkedin\",status=\"failed\"} 1\n\n# HELP mcp_response_time_seconds Response time in seconds",
          "values": {
            "strings": [
              "linkedin",
              "success",
              "linkedin",
              "failed"
            ],
            "numbers": [
              149,
              1
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 889,
          "snippet": "    \"redis_queue\": \"healthy\", \n    \"postgresql\": \"healthy\",\n    \"linkedin_adapter\": \"healthy\",\n    \"twitter_adapter\": \"healthy\",\n    \"substack_adapter\": \"degraded\",",
          "values": {
            "strings": [
              "redis_queue",
              "healthy",
              "postgresql",
              "healthy",
              "linkedin_adapter",
              "healthy",
              "twitter_adapter",
              "healthy",
              "substack_adapter",
              "degraded"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 890,
          "snippet": "    \"postgresql\": \"healthy\",\n    \"linkedin_adapter\": \"healthy\",\n    \"twitter_adapter\": \"healthy\",\n    \"substack_adapter\": \"degraded\",\n    \"beehiiv_adapter\": \"healthy\"",
          "values": {
            "strings": [
              "postgresql",
              "healthy",
              "linkedin_adapter",
              "healthy",
              "twitter_adapter",
              "healthy",
              "substack_adapter",
              "degraded",
              "beehiiv_adapter",
              "healthy"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 891,
          "snippet": "    \"linkedin_adapter\": \"healthy\",\n    \"twitter_adapter\": \"healthy\",\n    \"substack_adapter\": \"degraded\",\n    \"beehiiv_adapter\": \"healthy\"\n  }",
          "values": {
            "strings": [
              "linkedin_adapter",
              "healthy",
              "twitter_adapter",
              "healthy",
              "substack_adapter",
              "degraded",
              "beehiiv_adapter",
              "healthy"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "twitter",
          "line": 892,
          "snippet": "    \"twitter_adapter\": \"healthy\",\n    \"substack_adapter\": \"degraded\",\n    \"beehiiv_adapter\": \"healthy\"\n  }\n}",
          "values": {
            "strings": [
              "twitter_adapter",
              "healthy",
              "substack_adapter",
              "degraded",
              "beehiiv_adapter",
              "healthy"
            ],
            "numbers": []
          }
        }
      ]
    },
    {
      "file": "/Users/hretheum/dev/bezrobocie/vector-wave/publisher/single_test.json",
      "exists": true,
      "hits": [
        {
          "type": "platform_specific",
          "platform": "twitter",
          "line": 7,
          "snippet": "  },\n  \"platforms\": {\n    \"twitter\": {\"enabled\": true, \"process_images\": true}\n  },\n  \"content\": \"Single test placeholder:single-performance-test\"",
          "values": {
            "strings": [
              "platforms",
              "twitter",
              "enabled",
              "process_images",
              "content",
              "Single test placeholder:single-performance-test"
            ],
            "numbers": []
          }
        }
      ]
    },
    {
      "file": "/Users/hretheum/dev/bezrobocie/vector-wave/publisher/docker-compose.yml",
      "exists": true,
      "hits": [
        {
          "type": "platform_specific",
          "platform": "twitter",
          "line": 20,
          "snippet": "      - DOCKER_ENV=true\n      - REDIS_URL=redis://redis:6379\n      - TWITTER_ADAPTER_URL=http://twitter-adapter:8082\n      - BEEHIIV_ADAPTER_URL=http://beehiiv-adapter:8084\n      - GHOST_ADAPTER_URL=http://ghost-adapter:8082",
          "values": {
            "strings": [],
            "numbers": [
              6379,
              8082,
              8084,
              8082
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "twitter",
          "line": 21,
          "snippet": "      - REDIS_URL=redis://redis:6379\n      - TWITTER_ADAPTER_URL=http://twitter-adapter:8082\n      - BEEHIIV_ADAPTER_URL=http://beehiiv-adapter:8084\n      - GHOST_ADAPTER_URL=http://ghost-adapter:8082\n      # Task 4.5.1.1: Image Processing",
          "values": {
            "strings": [],
            "numbers": [
              6379,
              8082,
              8084,
              8082,
              4,
              5,
              1,
              1
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "twitter",
          "line": 22,
          "snippet": "      - TWITTER_ADAPTER_URL=http://twitter-adapter:8082\n      - BEEHIIV_ADAPTER_URL=http://beehiiv-adapter:8084\n      - GHOST_ADAPTER_URL=http://ghost-adapter:8082\n      # Task 4.5.1.1: Image Processing\n      - SHARED_IMAGES_PATH=/tmp/publisher_images",
          "values": {
            "strings": [],
            "numbers": [
              8082,
              8084,
              8082,
              4,
              5,
              1,
              1
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 27,
          "snippet": "      # Task 4.5.2.1: Presenton Integration\n      - PRESENTON_URL=http://presenton:8089\n      - LINKEDIN_ADAPTER_URL=http://linkedin-runner:8098\n    volumes:\n      - ./src/orchestrator:/app",
          "values": {
            "strings": [],
            "numbers": [
              4,
              5,
              2,
              1,
              8089,
              8098
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "twitter",
          "line": 40,
          "snippet": "    depends_on:\n      - redis\n      - twitter-adapter\n      - beehiiv-adapter\n      - ghost-adapter",
          "values": {
            "strings": [],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "twitter",
          "line": 41,
          "snippet": "      - redis\n      - twitter-adapter\n      - beehiiv-adapter\n      - ghost-adapter\n      - presenton",
          "values": {
            "strings": [],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "twitter",
          "line": 42,
          "snippet": "      - twitter-adapter\n      - beehiiv-adapter\n      - ghost-adapter\n      - presenton\n",
          "values": {
            "strings": [],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "twitter",
          "line": 45,
          "snippet": "      - presenton\n\n  # Twitter Adapter Service\n  twitter-adapter:\n    build:",
          "values": {
            "strings": [],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "twitter",
          "line": 46,
          "snippet": "\n  # Twitter Adapter Service\n  twitter-adapter:\n    build:\n      context: ./src/adapters/twitter",
          "values": {
            "strings": [],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "twitter",
          "line": 48,
          "snippet": "  twitter-adapter:\n    build:\n      context: ./src/adapters/twitter\n      dockerfile: Dockerfile\n    container_name: publisher-twitter-adapter",
          "values": {
            "strings": [],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "twitter",
          "line": 50,
          "snippet": "      context: ./src/adapters/twitter\n      dockerfile: Dockerfile\n    container_name: publisher-twitter-adapter\n    ports:\n      - \"8083:8082\"",
          "values": {
            "strings": [
              "8083:8082"
            ],
            "numbers": [
              8083,
              8082
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "twitter",
          "line": 61,
          "snippet": "      - SHARED_IMAGES_PATH=/tmp/publisher_images\n    volumes:\n      - ./src/adapters/twitter:/app\n      - publisher_images:/tmp/publisher_images\n    restart: unless-stopped",
          "values": {
            "strings": [],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "beehiiv",
          "line": 71,
          "snippet": "      start_period: 40s\n\n  # Beehiiv Adapter Service\n  beehiiv-adapter:\n    build:",
          "values": {
            "strings": [],
            "numbers": [
              40
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "beehiiv",
          "line": 72,
          "snippet": "\n  # Beehiiv Adapter Service\n  beehiiv-adapter:\n    build:\n      context: ./src/adapters/beehiiv",
          "values": {
            "strings": [],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "beehiiv",
          "line": 74,
          "snippet": "  beehiiv-adapter:\n    build:\n      context: ./src/adapters/beehiiv\n      dockerfile: Dockerfile\n    container_name: publisher-beehiiv-adapter",
          "values": {
            "strings": [],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "beehiiv",
          "line": 76,
          "snippet": "      context: ./src/adapters/beehiiv\n      dockerfile: Dockerfile\n    container_name: publisher-beehiiv-adapter\n    ports:\n      - \"8084:8084\"",
          "values": {
            "strings": [
              "8084:8084"
            ],
            "numbers": [
              8084,
              8084
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "beehiiv",
          "line": 87,
          "snippet": "      - SHARED_IMAGES_PATH=/tmp/publisher_images\n    volumes:\n      - ./src/adapters/beehiiv:/app\n      - publisher_images:/tmp/publisher_images\n    restart: unless-stopped",
          "values": {
            "strings": [],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 97,
          "snippet": "      start_period: 40s\n\n  # Ghost Adapter Service\n  ghost-adapter:\n    build:",
          "values": {
            "strings": [],
            "numbers": [
              40
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 98,
          "snippet": "\n  # Ghost Adapter Service\n  ghost-adapter:\n    build:\n      context: ./src/adapters/ghost",
          "values": {
            "strings": [],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 100,
          "snippet": "  ghost-adapter:\n    build:\n      context: ./src/adapters/ghost\n      dockerfile: Dockerfile\n    container_name: publisher-ghost-adapter",
          "values": {
            "strings": [],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 102,
          "snippet": "      context: ./src/adapters/ghost\n      dockerfile: Dockerfile\n    container_name: publisher-ghost-adapter\n    ports:\n      - \"8086:8082\"",
          "values": {
            "strings": [
              "8086:8082"
            ],
            "numbers": [
              8086,
              8082
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 113,
          "snippet": "      - SHARED_IMAGES_PATH=/tmp/publisher_images\n    volumes:\n      - ./src/adapters/ghost:/app\n      - publisher_images:/tmp/publisher_images\n    restart: unless-stopped",
          "values": {
            "strings": [],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 123,
          "snippet": "      start_period: 40s\n\n  # LinkedIn Adapter Service\n  linkedin-adapter:\n    build:",
          "values": {
            "strings": [],
            "numbers": [
              40
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 124,
          "snippet": "\n  # LinkedIn Adapter Service\n  linkedin-adapter:\n    build:\n      context: ./src/adapters/linkedin",
          "values": {
            "strings": [],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 126,
          "snippet": "  linkedin-adapter:\n    build:\n      context: ./src/adapters/linkedin\n      dockerfile: Dockerfile\n    container_name: publisher-linkedin-adapter",
          "values": {
            "strings": [],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 128,
          "snippet": "      context: ./src/adapters/linkedin\n      dockerfile: Dockerfile\n    container_name: publisher-linkedin-adapter\n    ports:\n      - \"8088:8088\"",
          "values": {
            "strings": [
              "8088:8088"
            ],
            "numbers": [
              8088,
              8088
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 132,
          "snippet": "      - \"8088:8088\"\n    env_file:\n      - ../linkedin/.env\n    environment:\n      - HOST=0.0.0.0",
          "values": {
            "strings": [
              "8088:8088"
            ],
            "numbers": [
              8088,
              8088,
              0,
              0,
              0,
              0
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 138,
          "snippet": "      - DEBUG=true\n      - SHARED_IMAGES_PATH=/tmp/publisher_images\n      - LINKEDIN_MODULE_PATH=/app/linkedin\n    volumes:\n      - ./src/adapters/linkedin:/app",
          "values": {
            "strings": [],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 140,
          "snippet": "      - LINKEDIN_MODULE_PATH=/app/linkedin\n    volumes:\n      - ./src/adapters/linkedin:/app\n      - ../linkedin:/app/linkedin:ro  # Mount existing LinkedIn module (correct path)\n      - ../linkedin/data:/app/linkedin/data  # Mount sessions directory for persistence",
          "values": {
            "strings": [],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 141,
          "snippet": "    volumes:\n      - ./src/adapters/linkedin:/app\n      - ../linkedin:/app/linkedin:ro  # Mount existing LinkedIn module (correct path)\n      - ../linkedin/data:/app/linkedin/data  # Mount sessions directory for persistence\n      - publisher_images:/tmp/publisher_images",
          "values": {
            "strings": [],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 142,
          "snippet": "      - ./src/adapters/linkedin:/app\n      - ../linkedin:/app/linkedin:ro  # Mount existing LinkedIn module (correct path)\n      - ../linkedin/data:/app/linkedin/data  # Mount sessions directory for persistence\n      - publisher_images:/tmp/publisher_images\n    restart: unless-stopped",
          "values": {
            "strings": [],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "twitter",
          "line": 187,
          "snippet": "    depends_on:\n      - orchestrator\n      - twitter-adapter\n      - ghost-adapter\n    healthcheck:",
          "values": {
            "strings": [],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "twitter",
          "line": 188,
          "snippet": "      - orchestrator\n      - twitter-adapter\n      - ghost-adapter\n    healthcheck:\n      test: [\"CMD\", \"wget\", \"--quiet\", \"--tries=1\", \"--spider\", \"http://localhost:9090/-/healthy\"]",
          "values": {
            "strings": [
              "CMD",
              "wget",
              "--quiet",
              "--tries=1",
              "--spider",
              "http://localhost:9090/-/healthy"
            ],
            "numbers": [
              1,
              9090
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 243,
          "snippet": "      start_period: 40s\n\n  # LinkedIn Local Runner as a service\n  linkedin-runner:\n    build:",
          "values": {
            "strings": [],
            "numbers": [
              40
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 244,
          "snippet": "\n  # LinkedIn Local Runner as a service\n  linkedin-runner:\n    build:\n      context: ../linkedin",
          "values": {
            "strings": [],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 246,
          "snippet": "  linkedin-runner:\n    build:\n      context: ../linkedin\n      dockerfile: Dockerfile.playwright\n    container_name: publisher-linkedin-runner",
          "values": {
            "strings": [],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 248,
          "snippet": "      context: ../linkedin\n      dockerfile: Dockerfile.playwright\n    container_name: publisher-linkedin-runner\n    ports:\n      - \"8098:8098\"",
          "values": {
            "strings": [
              "8098:8098"
            ],
            "numbers": [
              8098,
              8098
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 252,
          "snippet": "      - \"8098:8098\"\n    env_file:\n      - ../linkedin/.env\n    environment:\n      - LN_TRACE_NAV=0",
          "values": {
            "strings": [
              "8098:8098"
            ],
            "numbers": [
              8098,
              8098,
              0
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 257,
          "snippet": "      - PORT=8098\n      - HOST=0.0.0.0\n      - LINKEDIN_LOCAL_RUNNER_HOST=0.0.0.0\n      - LINKEDIN_LOCAL_RUNNER_PORT=8098\n      - FORCE_HEADLESS=true",
          "values": {
            "strings": [],
            "numbers": [
              8098,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              8098
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 258,
          "snippet": "      - HOST=0.0.0.0\n      - LINKEDIN_LOCAL_RUNNER_HOST=0.0.0.0\n      - LINKEDIN_LOCAL_RUNNER_PORT=8098\n      - FORCE_HEADLESS=true\n      - SESSIONS_DIR=/app/data/sessions",
          "values": {
            "strings": [],
            "numbers": [
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              8098
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 262,
          "snippet": "      - SESSIONS_DIR=/app/data/sessions\n    volumes:\n      - ../linkedin:/app:ro\n      - ../linkedin/data:/app/data/sessions\n    restart: unless-stopped",
          "values": {
            "strings": [],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 263,
          "snippet": "    volumes:\n      - ../linkedin:/app:ro\n      - ../linkedin/data:/app/data/sessions\n    restart: unless-stopped\n    healthcheck:",
          "values": {
            "strings": [],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "twitter",
          "line": 282,
          "snippet": "    depends_on:\n      - orchestrator\n      - twitter-adapter\n      - beehiiv-adapter\n      - ghost-adapter",
          "values": {
            "strings": [],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "twitter",
          "line": 283,
          "snippet": "      - orchestrator\n      - twitter-adapter\n      - beehiiv-adapter\n      - ghost-adapter\n    restart: unless-stopped",
          "values": {
            "strings": [],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "twitter",
          "line": 284,
          "snippet": "      - twitter-adapter\n      - beehiiv-adapter\n      - ghost-adapter\n    restart: unless-stopped\n",
          "values": {
            "strings": [],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "twitter",
          "line": 294,
          "snippet": "volumes:\n  orchestrator_data:\n  twitter_data:\n  beehiiv_data:\n  ghost_data:",
          "values": {
            "strings": [],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "twitter",
          "line": 295,
          "snippet": "  orchestrator_data:\n  twitter_data:\n  beehiiv_data:\n  ghost_data:\n  redis_data:",
          "values": {
            "strings": [],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "twitter",
          "line": 296,
          "snippet": "  twitter_data:\n  beehiiv_data:\n  ghost_data:\n  redis_data:\n  prometheus_data:",
          "values": {
            "strings": [],
            "numbers": []
          }
        }
      ]
    },
    {
      "file": "/Users/hretheum/dev/bezrobocie/vector-wave/publisher/FINAL_SUMMARY.md",
      "exists": true,
      "hits": [
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 1,
          "snippet": "# 🎯 FINAL VALIDATION SUMMARY - Ghost Adapter\n\n## ✅ WSZYSTKIE TESTY PRZESZŁY POMYŚLNIE",
          "values": {
            "strings": [],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 21,
          "snippet": "✅ Publiczne URLs dla published posts\n\n## 🚀 GHOST ADAPTER W PEŁNI FUNKCJONALNY!\n\n### 📋 DODATKOWO ZAIMPLEMENTOWANO:",
          "values": {
            "strings": [],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 44,
          "snippet": "- [x] Error handling poprawny\n\n## 🎉 GHOST ADAPTER - GOTOWY DO PRODUKCJI!",
          "values": {
            "strings": [],
            "numbers": []
          }
        }
      ]
    },
    {
      "file": "/Users/hretheum/dev/bezrobocie/vector-wave/publisher/prometheus.yml",
      "exists": true,
      "hits": [
        {
          "type": "platform_specific",
          "platform": "twitter",
          "line": 27,
          "snippet": "      format: ['prometheus']\n\n  # Twitter Adapter\n  - job_name: 'twitter-adapter'\n    static_configs:",
          "values": {
            "strings": [
              "prometheus",
              "twitter-adapter"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "twitter",
          "line": 28,
          "snippet": "\n  # Twitter Adapter\n  - job_name: 'twitter-adapter'\n    static_configs:\n      - targets: ['twitter-adapter:8082']",
          "values": {
            "strings": [
              "twitter-adapter",
              "twitter-adapter:8082"
            ],
            "numbers": [
              8082
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "twitter",
          "line": 30,
          "snippet": "  - job_name: 'twitter-adapter'\n    static_configs:\n      - targets: ['twitter-adapter:8082']\n    metrics_path: '/metrics'\n    scrape_interval: 15s",
          "values": {
            "strings": [
              "twitter-adapter",
              "twitter-adapter:8082",
              "/metrics"
            ],
            "numbers": [
              8082,
              15
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 37,
          "snippet": "      format: ['prometheus']\n\n  # Ghost CMS Adapter\n  - job_name: 'ghost-adapter'\n    static_configs:",
          "values": {
            "strings": [
              "prometheus",
              "ghost-adapter"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 38,
          "snippet": "\n  # Ghost CMS Adapter\n  - job_name: 'ghost-adapter'\n    static_configs:\n      - targets: ['ghost-adapter:8082']",
          "values": {
            "strings": [
              "ghost-adapter",
              "ghost-adapter:8082"
            ],
            "numbers": [
              8082
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 40,
          "snippet": "  - job_name: 'ghost-adapter'\n    static_configs:\n      - targets: ['ghost-adapter:8082']\n    metrics_path: '/metrics'\n    scrape_interval: 15s",
          "values": {
            "strings": [
              "ghost-adapter",
              "ghost-adapter:8082",
              "/metrics"
            ],
            "numbers": [
              8082,
              15
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "beehiiv",
          "line": 47,
          "snippet": "      format: ['prometheus']\n\n  # Beehiiv Adapter (when implemented)\n  - job_name: 'beehiiv-adapter'\n    static_configs:",
          "values": {
            "strings": [
              "prometheus",
              "beehiiv-adapter"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "beehiiv",
          "line": 48,
          "snippet": "\n  # Beehiiv Adapter (when implemented)\n  - job_name: 'beehiiv-adapter'\n    static_configs:\n      - targets: ['beehiiv-adapter:8084']",
          "values": {
            "strings": [
              "beehiiv-adapter",
              "beehiiv-adapter:8084"
            ],
            "numbers": [
              8084
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "beehiiv",
          "line": 50,
          "snippet": "  - job_name: 'beehiiv-adapter'\n    static_configs:\n      - targets: ['beehiiv-adapter:8084']\n    metrics_path: '/metrics'\n    scrape_interval: 15s",
          "values": {
            "strings": [
              "beehiiv-adapter",
              "beehiiv-adapter:8084",
              "/metrics"
            ],
            "numbers": [
              8084,
              15
            ]
          }
        }
      ]
    },
    {
      "file": "/Users/hretheum/dev/bezrobocie/vector-wave/publisher/.pytest_cache/README.md",
      "exists": true,
      "hits": []
    },
    {
      "file": "/Users/hretheum/dev/bezrobocie/vector-wave/publisher/tests/test_enhanced_integration_simple.py",
      "exists": true,
      "hits": [
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 32,
          "snippet": "    \"\"\"Test platform configuration validation\"\"\"\n    \n    linkedin_config = {\n        \"enabled\": True,\n        \"direct_content\": False,  # Use Presenton",
          "values": {
            "strings": [
              "Test platform configuration validation",
              "\n    \n    linkedin_config = {\n        ",
              ": True,\n        "
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "twitter",
          "line": 39,
          "snippet": "    }\n    \n    twitter_config = {\n        \"enabled\": True,\n        \"direct_content\": True  # Direct content",
          "values": {
            "strings": [
              "enabled",
              "direct_content"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 44,
          "snippet": "    }\n    \n    assert linkedin_config[\"enabled\"] is True\n    assert linkedin_config[\"direct_content\"] is False\n    assert linkedin_config[\"slides_count\"] == 8",
          "values": {
            "strings": [
              "enabled",
              "direct_content",
              "slides_count"
            ],
            "numbers": [
              8
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 45,
          "snippet": "    \n    assert linkedin_config[\"enabled\"] is True\n    assert linkedin_config[\"direct_content\"] is False\n    assert linkedin_config[\"slides_count\"] == 8\n    ",
          "values": {
            "strings": [
              "enabled",
              "direct_content",
              "slides_count"
            ],
            "numbers": [
              8
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 46,
          "snippet": "    assert linkedin_config[\"enabled\"] is True\n    assert linkedin_config[\"direct_content\"] is False\n    assert linkedin_config[\"slides_count\"] == 8\n    \n    assert twitter_config[\"enabled\"] is True",
          "values": {
            "strings": [
              "enabled",
              "direct_content",
              "slides_count",
              "enabled"
            ],
            "numbers": [
              8
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 48,
          "snippet": "    assert linkedin_config[\"slides_count\"] == 8\n    \n    assert twitter_config[\"enabled\"] is True\n    assert twitter_config[\"direct_content\"] is True\n",
          "values": {
            "strings": [
              "slides_count",
              "enabled",
              "direct_content"
            ],
            "numbers": [
              8
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "twitter",
          "line": 49,
          "snippet": "    \n    assert twitter_config[\"enabled\"] is True\n    assert twitter_config[\"direct_content\"] is True\n\ndef test_content_processing_result_structure():",
          "values": {
            "strings": [
              "enabled",
              "direct_content"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 57,
          "snippet": "        \"publication_id\": \"pub_test_12345\",\n        \"platforms\": {\n            \"linkedin\": {\n                \"type\": \"presenton_carousel\",\n                \"content\": \"LinkedIn prompt for presentation generation...\",",
          "values": {
            "strings": [
              "publication_id",
              "pub_test_12345",
              "platforms",
              "linkedin",
              "type",
              "presenton_carousel",
              "content",
              "LinkedIn prompt for presentation generation..."
            ],
            "numbers": [
              12345
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 59,
          "snippet": "            \"linkedin\": {\n                \"type\": \"presenton_carousel\",\n                \"content\": \"LinkedIn prompt for presentation generation...\",\n                \"ready_for_publication\": True,\n                \"processing_time\": 2.5,",
          "values": {
            "strings": [
              "linkedin",
              "type",
              "presenton_carousel",
              "content",
              "LinkedIn prompt for presentation generation...",
              "ready_for_publication",
              "processing_time"
            ],
            "numbers": [
              2,
              5
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "twitter",
          "line": 66,
          "snippet": "                \"quality_score\": 8.7\n            },\n            \"twitter\": {\n                \"type\": \"direct_content\",\n                \"content\": \"🚀 AI Technology Trends 2025 thread:\\n\\n1/ Innovation acceleration...\",",
          "values": {
            "strings": [
              "quality_score",
              "twitter",
              "type",
              "direct_content",
              "content",
              "🚀 AI Technology Trends 2025 thread:\\n\\n1/ Innovation acceleration..."
            ],
            "numbers": [
              8,
              7,
              2025,
              1
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 87,
          "snippet": "    assert mock_result[\"publication_id\"].startswith(\"pub_\")\n    assert len(mock_result[\"platforms\"]) == 2\n    assert mock_result[\"platforms\"][\"linkedin\"][\"type\"] == \"presenton_carousel\"\n    assert mock_result[\"platforms\"][\"twitter\"][\"type\"] == \"direct_content\"\n    assert mock_result[\"ready_for_publication\"] is True",
          "values": {
            "strings": [
              "publication_id",
              "pub_",
              "platforms",
              "platforms",
              "linkedin",
              "type",
              "presenton_carousel",
              "platforms",
              "twitter",
              "type"
            ],
            "numbers": [
              2
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 88,
          "snippet": "    assert len(mock_result[\"platforms\"]) == 2\n    assert mock_result[\"platforms\"][\"linkedin\"][\"type\"] == \"presenton_carousel\"\n    assert mock_result[\"platforms\"][\"twitter\"][\"type\"] == \"direct_content\"\n    assert mock_result[\"ready_for_publication\"] is True\n    assert mock_result[\"enhanced_features\"][\"presenton_integration\"] is True",
          "values": {
            "strings": [
              "platforms",
              "platforms",
              "linkedin",
              "type",
              "presenton_carousel",
              "platforms",
              "twitter",
              "type",
              "direct_content",
              "ready_for_publication"
            ],
            "numbers": [
              2
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 102,
          "snippet": "        },\n        \"platforms\": {\n            \"linkedin\": {\"enabled\": True, \"direct_content\": False},\n            \"twitter\": {\"enabled\": True, \"direct_content\": True}\n        }",
          "values": {
            "strings": [
              "platforms",
              "linkedin",
              "enabled",
              "direct_content",
              "twitter",
              "enabled",
              "direct_content"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 103,
          "snippet": "        \"platforms\": {\n            \"linkedin\": {\"enabled\": True, \"direct_content\": False},\n            \"twitter\": {\"enabled\": True, \"direct_content\": True}\n        }\n    }",
          "values": {
            "strings": [
              "platforms",
              "linkedin",
              "enabled",
              "direct_content",
              "twitter",
              "enabled",
              "direct_content"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 113,
          "snippet": "        \"generation_time\": 1.5,\n        \"platform_content\": {\n            \"linkedin\": {\n                \"content\": \"Create comprehensive LinkedIn carousel about Enhanced Orchestrator Testing...\",\n                \"ready_for_presenton\": True,",
          "values": {
            "strings": [
              "generation_time",
              "platform_content",
              "linkedin",
              "content",
              "Create comprehensive LinkedIn carousel about Enhanced Orchestrator Testing...",
              "ready_for_presenton"
            ],
            "numbers": [
              1,
              5
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 114,
          "snippet": "        \"platform_content\": {\n            \"linkedin\": {\n                \"content\": \"Create comprehensive LinkedIn carousel about Enhanced Orchestrator Testing...\",\n                \"ready_for_presenton\": True,\n                \"quality_score\": 8.5,",
          "values": {
            "strings": [
              "platform_content",
              "linkedin",
              "content",
              "Create comprehensive LinkedIn carousel about Enhanced Orchestrator Testing...",
              "ready_for_presenton",
              "quality_score"
            ],
            "numbers": [
              8,
              5
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "twitter",
          "line": 119,
          "snippet": "                \"topic_title\": \"Enhanced Orchestrator Testing\"\n            },\n            \"twitter\": {\n                \"content\": \"🧪 Testing Enhanced Orchestrator Integration:\\n\\n• AI Writing Flow ✅\\n• Presenton Integration ✅\\n• Content Processing ✅\",\n                \"ready_for_presenton\": False,",
          "values": {
            "strings": [
              "topic_title",
              "Enhanced Orchestrator Testing",
              "twitter",
              "content",
              "🧪 Testing Enhanced Orchestrator Integration:\\n\\n• AI Writing Flow ✅\\n• Presenton Integration ✅\\n• Content Processing ✅",
              "ready_for_presenton"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 129,
          "snippet": "    # Validate mock response\n    assert mock_response[\"success_count\"] == 2\n    assert \"linkedin\" in mock_response[\"platform_content\"]\n    assert \"twitter\" in mock_response[\"platform_content\"]\n    assert mock_response[\"platform_content\"][\"linkedin\"][\"ready_for_presenton\"] is True",
          "values": {
            "strings": [
              "success_count",
              "linkedin",
              "platform_content",
              "twitter",
              "platform_content",
              "platform_content",
              "linkedin",
              "ready_for_presenton"
            ],
            "numbers": [
              2
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 130,
          "snippet": "    assert mock_response[\"success_count\"] == 2\n    assert \"linkedin\" in mock_response[\"platform_content\"]\n    assert \"twitter\" in mock_response[\"platform_content\"]\n    assert mock_response[\"platform_content\"][\"linkedin\"][\"ready_for_presenton\"] is True\n    assert mock_response[\"platform_content\"][\"twitter\"][\"ready_for_presenton\"] is False",
          "values": {
            "strings": [
              "success_count",
              "linkedin",
              "platform_content",
              "twitter",
              "platform_content",
              "platform_content",
              "linkedin",
              "ready_for_presenton",
              "platform_content",
              "twitter"
            ],
            "numbers": [
              2
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 131,
          "snippet": "    assert \"linkedin\" in mock_response[\"platform_content\"]\n    assert \"twitter\" in mock_response[\"platform_content\"]\n    assert mock_response[\"platform_content\"][\"linkedin\"][\"ready_for_presenton\"] is True\n    assert mock_response[\"platform_content\"][\"twitter\"][\"ready_for_presenton\"] is False\n",
          "values": {
            "strings": [
              "linkedin",
              "platform_content",
              "twitter",
              "platform_content",
              "platform_content",
              "linkedin",
              "ready_for_presenton",
              "platform_content",
              "twitter",
              "ready_for_presenton"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 132,
          "snippet": "    assert \"twitter\" in mock_response[\"platform_content\"]\n    assert mock_response[\"platform_content\"][\"linkedin\"][\"ready_for_presenton\"] is True\n    assert mock_response[\"platform_content\"][\"twitter\"][\"ready_for_presenton\"] is False\n\n@pytest.mark.asyncio ",
          "values": {
            "strings": [
              "twitter",
              "platform_content",
              "platform_content",
              "linkedin",
              "ready_for_presenton",
              "platform_content",
              "twitter",
              "ready_for_presenton"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 176,
          "snippet": "        },\n        \"platforms\": {\n            \"linkedin\": {\n                \"enabled\": True,\n                \"direct_content\": False,",
          "values": {
            "strings": [
              "platforms",
              "linkedin",
              "enabled",
              "direct_content"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "twitter",
          "line": 182,
          "snippet": "                \"template\": \"business\"\n            },\n            \"twitter\": {\n                \"enabled\": True,\n                \"direct_content\": True",
          "values": {
            "strings": [
              "template",
              "business",
              "twitter",
              "enabled",
              "direct_content"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 193,
          "snippet": "    ai_flow_result = {\n        \"platform_content\": {\n            \"linkedin\": {\n                \"content\": \"Create comprehensive LinkedIn carousel about Advanced AI Architecture Patterns...\",\n                \"ready_for_presenton\": True,",
          "values": {
            "strings": [
              "platform_content",
              "linkedin",
              "content",
              "Create comprehensive LinkedIn carousel about Advanced AI Architecture Patterns...",
              "ready_for_presenton"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 194,
          "snippet": "        \"platform_content\": {\n            \"linkedin\": {\n                \"content\": \"Create comprehensive LinkedIn carousel about Advanced AI Architecture Patterns...\",\n                \"ready_for_presenton\": True,\n                \"quality_score\": 9.1,",
          "values": {
            "strings": [
              "platform_content",
              "linkedin",
              "content",
              "Create comprehensive LinkedIn carousel about Advanced AI Architecture Patterns...",
              "ready_for_presenton",
              "quality_score"
            ],
            "numbers": [
              9,
              1
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "twitter",
          "line": 199,
          "snippet": "                \"topic_title\": \"Advanced AI Architecture Patterns\"\n            },\n            \"twitter\": {\n                \"content\": \"🏗️ Advanced AI Architecture Patterns thread:\\n\\n1/ Microservices for AI systems...\",\n                \"ready_for_presenton\": False,",
          "values": {
            "strings": [
              "topic_title",
              "Advanced AI Architecture Patterns",
              "twitter",
              "content",
              "🏗️ Advanced AI Architecture Patterns thread:\\n\\n1/ Microservices for AI systems...",
              "ready_for_presenton"
            ],
            "numbers": [
              1
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 207,
          "snippet": "    }\n    \n    # Step 3: Simulate Presenton processing for LinkedIn\n    presenton_result = {\n        \"presentation_id\": \"pres_ai_arch_patterns\",",
          "values": {
            "strings": [
              "presentation_id",
              "pres_ai_arch_patterns"
            ],
            "numbers": [
              3
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 220,
          "snippet": "        \"publication_id\": \"pub_integration_test\",\n        \"platforms\": {\n            \"linkedin\": {\n                \"type\": \"presenton_carousel\",\n                \"content\": ai_flow_result[\"platform_content\"][\"linkedin\"][\"content\"],",
          "values": {
            "strings": [
              "publication_id",
              "pub_integration_test",
              "platforms",
              "linkedin",
              "type",
              "presenton_carousel",
              "content",
              "platform_content",
              "linkedin",
              "content"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 222,
          "snippet": "            \"linkedin\": {\n                \"type\": \"presenton_carousel\",\n                \"content\": ai_flow_result[\"platform_content\"][\"linkedin\"][\"content\"],\n                \"ready_for_publication\": True,\n                \"processing_time\": 4.8,",
          "values": {
            "strings": [
              "linkedin",
              "type",
              "presenton_carousel",
              "content",
              "platform_content",
              "linkedin",
              "content",
              "ready_for_publication",
              "processing_time"
            ],
            "numbers": [
              4,
              8
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 227,
          "snippet": "                \"presentation_id\": presenton_result[\"presentation_id\"],\n                \"slides_count\": presenton_result[\"slide_count\"],\n                \"quality_score\": ai_flow_result[\"platform_content\"][\"linkedin\"][\"quality_score\"]\n            },\n            \"twitter\": {",
          "values": {
            "strings": [
              "presentation_id",
              "presentation_id",
              "slides_count",
              "slide_count",
              "quality_score",
              "platform_content",
              "linkedin",
              "quality_score",
              "twitter"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 229,
          "snippet": "                \"quality_score\": ai_flow_result[\"platform_content\"][\"linkedin\"][\"quality_score\"]\n            },\n            \"twitter\": {\n                \"type\": \"direct_content\",\n                \"content\": ai_flow_result[\"platform_content\"][\"twitter\"][\"content\"],",
          "values": {
            "strings": [
              "quality_score",
              "platform_content",
              "linkedin",
              "quality_score",
              "twitter",
              "type",
              "direct_content",
              "content",
              "platform_content",
              "twitter"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "twitter",
          "line": 231,
          "snippet": "            \"twitter\": {\n                \"type\": \"direct_content\",\n                \"content\": ai_flow_result[\"platform_content\"][\"twitter\"][\"content\"],\n                \"ready_for_publication\": True,\n                \"processing_time\": 1.3,",
          "values": {
            "strings": [
              "twitter",
              "type",
              "direct_content",
              "content",
              "platform_content",
              "twitter",
              "content",
              "ready_for_publication",
              "processing_time"
            ],
            "numbers": [
              1,
              3
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "twitter",
          "line": 234,
          "snippet": "                \"ready_for_publication\": True,\n                \"processing_time\": 1.3,\n                \"quality_score\": ai_flow_result[\"platform_content\"][\"twitter\"][\"quality_score\"]\n            }\n        },",
          "values": {
            "strings": [
              "ready_for_publication",
              "processing_time",
              "quality_score",
              "platform_content",
              "twitter",
              "quality_score"
            ],
            "numbers": [
              1,
              3
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 251,
          "snippet": "    assert len(processing_result[\"platforms\"]) == 2\n    \n    linkedin_result = processing_result[\"platforms\"][\"linkedin\"]\n    assert linkedin_result[\"type\"] == \"presenton_carousel\"\n    assert linkedin_result[\"ready_for_publication\"] is True",
          "values": {
            "strings": [
              "platforms",
              "platforms",
              "linkedin",
              "type",
              "presenton_carousel",
              "ready_for_publication"
            ],
            "numbers": [
              2
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 252,
          "snippet": "    \n    linkedin_result = processing_result[\"platforms\"][\"linkedin\"]\n    assert linkedin_result[\"type\"] == \"presenton_carousel\"\n    assert linkedin_result[\"ready_for_publication\"] is True\n    assert linkedin_result[\"presentation_id\"] == \"pres_ai_arch_patterns\"",
          "values": {
            "strings": [
              "platforms",
              "linkedin",
              "type",
              "presenton_carousel",
              "ready_for_publication",
              "presentation_id",
              "pres_ai_arch_patterns"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 253,
          "snippet": "    linkedin_result = processing_result[\"platforms\"][\"linkedin\"]\n    assert linkedin_result[\"type\"] == \"presenton_carousel\"\n    assert linkedin_result[\"ready_for_publication\"] is True\n    assert linkedin_result[\"presentation_id\"] == \"pres_ai_arch_patterns\"\n    assert linkedin_result[\"slides_count\"] == 8",
          "values": {
            "strings": [
              "platforms",
              "linkedin",
              "type",
              "presenton_carousel",
              "ready_for_publication",
              "presentation_id",
              "pres_ai_arch_patterns",
              "slides_count"
            ],
            "numbers": [
              8
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 254,
          "snippet": "    assert linkedin_result[\"type\"] == \"presenton_carousel\"\n    assert linkedin_result[\"ready_for_publication\"] is True\n    assert linkedin_result[\"presentation_id\"] == \"pres_ai_arch_patterns\"\n    assert linkedin_result[\"slides_count\"] == 8\n    ",
          "values": {
            "strings": [
              "type",
              "presenton_carousel",
              "ready_for_publication",
              "presentation_id",
              "pres_ai_arch_patterns",
              "slides_count"
            ],
            "numbers": [
              8
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 255,
          "snippet": "    assert linkedin_result[\"ready_for_publication\"] is True\n    assert linkedin_result[\"presentation_id\"] == \"pres_ai_arch_patterns\"\n    assert linkedin_result[\"slides_count\"] == 8\n    \n    twitter_result = processing_result[\"platforms\"][\"twitter\"]",
          "values": {
            "strings": [
              "ready_for_publication",
              "presentation_id",
              "pres_ai_arch_patterns",
              "slides_count",
              "platforms",
              "twitter"
            ],
            "numbers": [
              8
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 257,
          "snippet": "    assert linkedin_result[\"slides_count\"] == 8\n    \n    twitter_result = processing_result[\"platforms\"][\"twitter\"]\n    assert twitter_result[\"type\"] == \"direct_content\"\n    assert twitter_result[\"ready_for_publication\"] is True",
          "values": {
            "strings": [
              "slides_count",
              "platforms",
              "twitter",
              "type",
              "direct_content",
              "ready_for_publication"
            ],
            "numbers": [
              8
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "twitter",
          "line": 258,
          "snippet": "    \n    twitter_result = processing_result[\"platforms\"][\"twitter\"]\n    assert twitter_result[\"type\"] == \"direct_content\"\n    assert twitter_result[\"ready_for_publication\"] is True\n    assert \"🏗️ Advanced AI Architecture Patterns\" in twitter_result[\"content\"]",
          "values": {
            "strings": [
              "platforms",
              "twitter",
              "type",
              "direct_content",
              "ready_for_publication",
              "🏗️ Advanced AI Architecture Patterns",
              "content"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "twitter",
          "line": 259,
          "snippet": "    twitter_result = processing_result[\"platforms\"][\"twitter\"]\n    assert twitter_result[\"type\"] == \"direct_content\"\n    assert twitter_result[\"ready_for_publication\"] is True\n    assert \"🏗️ Advanced AI Architecture Patterns\" in twitter_result[\"content\"]\n    ",
          "values": {
            "strings": [
              "platforms",
              "twitter",
              "type",
              "direct_content",
              "ready_for_publication",
              "🏗️ Advanced AI Architecture Patterns",
              "content"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "twitter",
          "line": 260,
          "snippet": "    assert twitter_result[\"type\"] == \"direct_content\"\n    assert twitter_result[\"ready_for_publication\"] is True\n    assert \"🏗️ Advanced AI Architecture Patterns\" in twitter_result[\"content\"]\n    \n    assert processing_result[\"enhanced_features\"][\"presenton_integration\"] is True",
          "values": {
            "strings": [
              "type",
              "direct_content",
              "ready_for_publication",
              "🏗️ Advanced AI Architecture Patterns",
              "content",
              "enhanced_features",
              "presenton_integration"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 271,
          "snippet": "        \"publication_id\": \"pub_enhanced_test\",\n        \"platform_jobs\": {\n            \"linkedin\": \"linkedin_enhanced_job_abc123\",\n            \"twitter\": \"twitter_enhanced_job_def456\"\n        },",
          "values": {
            "strings": [
              "publication_id",
              "pub_enhanced_test",
              "platform_jobs",
              "linkedin",
              "linkedin_enhanced_job_abc123",
              "twitter",
              "twitter_enhanced_job_def456"
            ],
            "numbers": [
              123,
              456
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 272,
          "snippet": "        \"platform_jobs\": {\n            \"linkedin\": \"linkedin_enhanced_job_abc123\",\n            \"twitter\": \"twitter_enhanced_job_def456\"\n        },\n        \"processing_time\": 5.2,",
          "values": {
            "strings": [
              "platform_jobs",
              "linkedin",
              "linkedin_enhanced_job_abc123",
              "twitter",
              "twitter_enhanced_job_def456",
              "processing_time"
            ],
            "numbers": [
              123,
              456,
              5,
              2
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 284,
          "snippet": "        \"errors\": None,\n        \"content_summary\": {\n            \"linkedin\": {\n                \"type\": \"presenton_carousel\",\n                \"content_length\": 247,",
          "values": {
            "strings": [
              "errors",
              "content_summary",
              "linkedin",
              "type",
              "presenton_carousel",
              "content_length"
            ],
            "numbers": [
              247
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 291,
          "snippet": "                \"presentation_id\": \"pres_test_123\",\n                \"slides_count\": 8,\n                \"ready_for_linkedin\": True\n            },\n            \"twitter\": {",
          "values": {
            "strings": [
              "presentation_id",
              "pres_test_123",
              "slides_count",
              "ready_for_linkedin",
              "twitter"
            ],
            "numbers": [
              123,
              8
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 293,
          "snippet": "                \"ready_for_linkedin\": True\n            },\n            \"twitter\": {\n                \"type\": \"direct_content\",\n                \"content_length\": 156,",
          "values": {
            "strings": [
              "ready_for_linkedin",
              "twitter",
              "type",
              "direct_content",
              "content_length"
            ],
            "numbers": [
              156
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 310,
          "snippet": "    \n    # Validate content summary\n    linkedin_summary = mock_response[\"content_summary\"][\"linkedin\"]\n    assert linkedin_summary[\"type\"] == \"presenton_carousel\"\n    assert linkedin_summary[\"slides_count\"] == 8",
          "values": {
            "strings": [
              "content_summary",
              "linkedin",
              "type",
              "presenton_carousel",
              "slides_count"
            ],
            "numbers": [
              8
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 311,
          "snippet": "    # Validate content summary\n    linkedin_summary = mock_response[\"content_summary\"][\"linkedin\"]\n    assert linkedin_summary[\"type\"] == \"presenton_carousel\"\n    assert linkedin_summary[\"slides_count\"] == 8\n    assert linkedin_summary[\"ready_for_linkedin\"] is True",
          "values": {
            "strings": [
              "content_summary",
              "linkedin",
              "type",
              "presenton_carousel",
              "slides_count",
              "ready_for_linkedin"
            ],
            "numbers": [
              8
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 312,
          "snippet": "    linkedin_summary = mock_response[\"content_summary\"][\"linkedin\"]\n    assert linkedin_summary[\"type\"] == \"presenton_carousel\"\n    assert linkedin_summary[\"slides_count\"] == 8\n    assert linkedin_summary[\"ready_for_linkedin\"] is True\n    ",
          "values": {
            "strings": [
              "content_summary",
              "linkedin",
              "type",
              "presenton_carousel",
              "slides_count",
              "ready_for_linkedin"
            ],
            "numbers": [
              8
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 313,
          "snippet": "    assert linkedin_summary[\"type\"] == \"presenton_carousel\"\n    assert linkedin_summary[\"slides_count\"] == 8\n    assert linkedin_summary[\"ready_for_linkedin\"] is True\n    \n    twitter_summary = mock_response[\"content_summary\"][\"twitter\"]",
          "values": {
            "strings": [
              "type",
              "presenton_carousel",
              "slides_count",
              "ready_for_linkedin",
              "content_summary",
              "twitter"
            ],
            "numbers": [
              8
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 315,
          "snippet": "    assert linkedin_summary[\"ready_for_linkedin\"] is True\n    \n    twitter_summary = mock_response[\"content_summary\"][\"twitter\"]\n    assert twitter_summary[\"type\"] == \"direct_content\"\n    assert twitter_summary[\"content_length\"] > 0",
          "values": {
            "strings": [
              "ready_for_linkedin",
              "content_summary",
              "twitter",
              "type",
              "direct_content",
              "content_length"
            ],
            "numbers": [
              0
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "twitter",
          "line": 316,
          "snippet": "    \n    twitter_summary = mock_response[\"content_summary\"][\"twitter\"]\n    assert twitter_summary[\"type\"] == \"direct_content\"\n    assert twitter_summary[\"content_length\"] > 0\n",
          "values": {
            "strings": [
              "content_summary",
              "twitter",
              "type",
              "direct_content",
              "content_length"
            ],
            "numbers": [
              0
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "twitter",
          "line": 317,
          "snippet": "    twitter_summary = mock_response[\"content_summary\"][\"twitter\"]\n    assert twitter_summary[\"type\"] == \"direct_content\"\n    assert twitter_summary[\"content_length\"] > 0\n\ndef test_health_check_response_format():",
          "values": {
            "strings": [
              "content_summary",
              "twitter",
              "type",
              "direct_content",
              "content_length"
            ],
            "numbers": [
              0
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 350,
          "snippet": "            \"image_processing_requests\": 12,\n            \"platform_processing\": {\n                \"linkedin\": 52,\n                \"twitter\": 48,\n                \"ghost\": 15,",
          "values": {
            "strings": [
              "image_processing_requests",
              "platform_processing",
              "linkedin",
              "twitter",
              "ghost"
            ],
            "numbers": [
              12,
              52,
              48,
              15
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 351,
          "snippet": "            \"platform_processing\": {\n                \"linkedin\": 52,\n                \"twitter\": 48,\n                \"ghost\": 15,\n                \"substack\": 12",
          "values": {
            "strings": [
              "platform_processing",
              "linkedin",
              "twitter",
              "ghost",
              "substack"
            ],
            "numbers": [
              52,
              48,
              15,
              12
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 352,
          "snippet": "                \"linkedin\": 52,\n                \"twitter\": 48,\n                \"ghost\": 15,\n                \"substack\": 12\n            }",
          "values": {
            "strings": [
              "linkedin",
              "twitter",
              "ghost",
              "substack"
            ],
            "numbers": [
              52,
              48,
              15,
              12
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "twitter",
          "line": 353,
          "snippet": "                \"twitter\": 48,\n                \"ghost\": 15,\n                \"substack\": 12\n            }\n        },",
          "values": {
            "strings": [
              "twitter",
              "ghost",
              "substack"
            ],
            "numbers": [
              48,
              15,
              12
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 373,
          "snippet": "    ai_flow_error = {\n        \"platform_content\": {\n            \"linkedin\": {\"error\": \"AI Writing Flow service unavailable\"},\n            \"twitter\": {\"error\": \"AI Writing Flow service unavailable\"}\n        }",
          "values": {
            "strings": [
              "platform_content",
              "linkedin",
              "error",
              "AI Writing Flow service unavailable",
              "twitter",
              "error",
              "AI Writing Flow service unavailable"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 374,
          "snippet": "        \"platform_content\": {\n            \"linkedin\": {\"error\": \"AI Writing Flow service unavailable\"},\n            \"twitter\": {\"error\": \"AI Writing Flow service unavailable\"}\n        }\n    }",
          "values": {
            "strings": [
              "platform_content",
              "linkedin",
              "error",
              "AI Writing Flow service unavailable",
              "twitter",
              "error",
              "AI Writing Flow service unavailable"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "twitter",
          "line": 383,
          "snippet": "        assert \"unavailable\" in content[\"error\"]\n    \n    # Scenario 2: Presenton fails, Twitter succeeds\n    mixed_result = {\n        \"platforms\": {",
          "values": {
            "strings": [
              "unavailable",
              "error",
              "platforms"
            ],
            "numbers": [
              2
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 386,
          "snippet": "    mixed_result = {\n        \"platforms\": {\n            \"linkedin\": {\n                \"type\": \"error\",\n                \"error\": \"Presenton service down\",",
          "values": {
            "strings": [
              "platforms",
              "linkedin",
              "type",
              "error",
              "error",
              "Presenton service down"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "twitter",
          "line": 391,
          "snippet": "                \"ready_for_publication\": False\n            },\n            \"twitter\": {\n                \"type\": \"direct_content\",\n                \"content\": \"Twitter content processed successfully\",",
          "values": {
            "strings": [
              "ready_for_publication",
              "twitter",
              "type",
              "direct_content",
              "content",
              "Twitter content processed successfully"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "twitter",
          "line": 393,
          "snippet": "            \"twitter\": {\n                \"type\": \"direct_content\",\n                \"content\": \"Twitter content processed successfully\",\n                \"ready_for_publication\": True\n            }",
          "values": {
            "strings": [
              "twitter",
              "type",
              "direct_content",
              "content",
              "Twitter content processed successfully",
              "ready_for_publication"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 400,
          "snippet": "    \n    # Should have partial success\n    linkedin_failed = not mixed_result[\"platforms\"][\"linkedin\"][\"ready_for_publication\"]\n    twitter_success = mixed_result[\"platforms\"][\"twitter\"][\"ready_for_publication\"]\n    ",
          "values": {
            "strings": [
              "platforms",
              "linkedin",
              "ready_for_publication",
              "platforms",
              "twitter",
              "ready_for_publication"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 401,
          "snippet": "    # Should have partial success\n    linkedin_failed = not mixed_result[\"platforms\"][\"linkedin\"][\"ready_for_publication\"]\n    twitter_success = mixed_result[\"platforms\"][\"twitter\"][\"ready_for_publication\"]\n    \n    assert linkedin_failed",
          "values": {
            "strings": [
              "platforms",
              "linkedin",
              "ready_for_publication",
              "platforms",
              "twitter",
              "ready_for_publication"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 403,
          "snippet": "    twitter_success = mixed_result[\"platforms\"][\"twitter\"][\"ready_for_publication\"]\n    \n    assert linkedin_failed\n    assert twitter_success\n",
          "values": {
            "strings": [
              "platforms",
              "twitter",
              "ready_for_publication"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 404,
          "snippet": "    \n    assert linkedin_failed\n    assert twitter_success\n\nif __name__ == \"__main__\":",
          "values": {
            "strings": [
              "__main__"
            ],
            "numbers": []
          }
        }
      ]
    },
    {
      "file": "/Users/hretheum/dev/bezrobocie/vector-wave/publisher/tests/test_enhanced_orchestrator.py",
      "exists": true,
      "hits": [
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 47,
          "snippet": "        \"generation_time\": 1.5,\n        \"platform_content\": {\n            \"linkedin\": {\n                \"content\": \"Test LinkedIn content with detailed insights about AI technology...\",\n                \"ready_for_presenton\": True,",
          "values": {
            "strings": [
              "generation_time",
              "platform_content",
              "linkedin",
              "content",
              "Test LinkedIn content with detailed insights about AI technology...",
              "ready_for_presenton"
            ],
            "numbers": [
              1,
              5
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 48,
          "snippet": "        \"platform_content\": {\n            \"linkedin\": {\n                \"content\": \"Test LinkedIn content with detailed insights about AI technology...\",\n                \"ready_for_presenton\": True,\n                \"quality_score\": 8.5,",
          "values": {
            "strings": [
              "platform_content",
              "linkedin",
              "content",
              "Test LinkedIn content with detailed insights about AI technology...",
              "ready_for_presenton",
              "quality_score"
            ],
            "numbers": [
              8,
              5
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "twitter",
          "line": 53,
          "snippet": "                \"topic_title\": \"AI Technology Insights\"\n            },\n            \"twitter\": {\n                \"content\": \"🚀 Exciting AI developments in 2025!\\n\\nKey insights:\\n• Innovation acceleration\\n• Market trends\\n• Future implications\\n\\n#AI #Technology\",\n                \"ready_for_presenton\": False,",
          "values": {
            "strings": [
              "topic_title",
              "AI Technology Insights",
              "twitter",
              "content",
              "🚀 Exciting AI developments in 2025!\\n\\nKey insights:\\n• Innovation acceleration\\n• Market trends\\n• Future implications\\n\\n#AI #Technology",
              "ready_for_presenton"
            ],
            "numbers": [
              2025
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 85,
          "snippet": "        ),\n        platforms={\n            \"linkedin\": PlatformConfig(\n                enabled=True,\n                direct_content=False,  # Will use Presenton",
          "values": {
            "strings": [
              "linkedin"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "twitter",
          "line": 91,
          "snippet": "                template=\"business\"\n            ),\n            \"twitter\": PlatformConfig(\n                enabled=True,\n                direct_content=True  # Will use direct content",
          "values": {
            "strings": [
              "business",
              "twitter"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 124,
          "snippet": "                },\n                platforms={\n                    \"linkedin\": {\"enabled\": True, \"direct_content\": False},\n                    \"twitter\": {\"enabled\": True, \"direct_content\": True}\n                },",
          "values": {
            "strings": [
              "linkedin",
              "enabled",
              "direct_content",
              "twitter",
              "enabled",
              "direct_content"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 125,
          "snippet": "                platforms={\n                    \"linkedin\": {\"enabled\": True, \"direct_content\": False},\n                    \"twitter\": {\"enabled\": True, \"direct_content\": True}\n                },\n                request_id=\"test-001\"",
          "values": {
            "strings": [
              "linkedin",
              "enabled",
              "direct_content",
              "twitter",
              "enabled",
              "direct_content",
              "test-001"
            ],
            "numbers": [
              1
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 131,
          "snippet": "            \n            assert result[\"success_count\"] == 2\n            assert \"linkedin\" in result[\"platform_content\"]\n            assert \"twitter\" in result[\"platform_content\"]\n            assert result[\"platform_content\"][\"linkedin\"][\"ready_for_presenton\"] is True",
          "values": {
            "strings": [
              "success_count",
              "linkedin",
              "platform_content",
              "twitter",
              "platform_content",
              "platform_content",
              "linkedin",
              "ready_for_presenton"
            ],
            "numbers": [
              2
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 132,
          "snippet": "            assert result[\"success_count\"] == 2\n            assert \"linkedin\" in result[\"platform_content\"]\n            assert \"twitter\" in result[\"platform_content\"]\n            assert result[\"platform_content\"][\"linkedin\"][\"ready_for_presenton\"] is True\n            assert result[\"platform_content\"][\"twitter\"][\"ready_for_presenton\"] is False",
          "values": {
            "strings": [
              "success_count",
              "linkedin",
              "platform_content",
              "twitter",
              "platform_content",
              "platform_content",
              "linkedin",
              "ready_for_presenton",
              "platform_content",
              "twitter"
            ],
            "numbers": [
              2
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 133,
          "snippet": "            assert \"linkedin\" in result[\"platform_content\"]\n            assert \"twitter\" in result[\"platform_content\"]\n            assert result[\"platform_content\"][\"linkedin\"][\"ready_for_presenton\"] is True\n            assert result[\"platform_content\"][\"twitter\"][\"ready_for_presenton\"] is False\n",
          "values": {
            "strings": [
              "linkedin",
              "platform_content",
              "twitter",
              "platform_content",
              "platform_content",
              "linkedin",
              "ready_for_presenton",
              "platform_content",
              "twitter",
              "ready_for_presenton"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 134,
          "snippet": "            assert \"twitter\" in result[\"platform_content\"]\n            assert result[\"platform_content\"][\"linkedin\"][\"ready_for_presenton\"] is True\n            assert result[\"platform_content\"][\"twitter\"][\"ready_for_presenton\"] is False\n\n    @pytest.mark.asyncio",
          "values": {
            "strings": [
              "twitter",
              "platform_content",
              "platform_content",
              "linkedin",
              "ready_for_presenton",
              "platform_content",
              "twitter",
              "ready_for_presenton"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 164,
          "snippet": "                await client.generate_multi_platform(\n                    topic={\"title\": \"Test\"},\n                    platforms={\"linkedin\": {\"enabled\": True}}\n                )\n            ",
          "values": {
            "strings": [
              "title",
              "Test",
              "linkedin",
              "enabled"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 250,
          "snippet": "                    assert result.ready_for_publication is True\n                    assert len(result.platforms) == 2\n                    assert \"linkedin\" in result.platforms\n                    assert \"twitter\" in result.platforms\n                    ",
          "values": {
            "strings": [
              "linkedin",
              "twitter"
            ],
            "numbers": [
              2
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 251,
          "snippet": "                    assert len(result.platforms) == 2\n                    assert \"linkedin\" in result.platforms\n                    assert \"twitter\" in result.platforms\n                    \n                    # LinkedIn should use Presenton",
          "values": {
            "strings": [
              "linkedin",
              "twitter"
            ],
            "numbers": [
              2
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 253,
          "snippet": "                    assert \"twitter\" in result.platforms\n                    \n                    # LinkedIn should use Presenton\n                    linkedin_result = result.platforms[\"linkedin\"]\n                    assert linkedin_result[\"type\"] == \"presenton_carousel\"",
          "values": {
            "strings": [
              "twitter",
              "linkedin",
              "type",
              "presenton_carousel"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 254,
          "snippet": "                    \n                    # LinkedIn should use Presenton\n                    linkedin_result = result.platforms[\"linkedin\"]\n                    assert linkedin_result[\"type\"] == \"presenton_carousel\"\n                    assert linkedin_result[\"presentation_id\"] == \"pres_abc123\"",
          "values": {
            "strings": [
              "linkedin",
              "type",
              "presenton_carousel",
              "presentation_id",
              "pres_abc123"
            ],
            "numbers": [
              123
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 255,
          "snippet": "                    # LinkedIn should use Presenton\n                    linkedin_result = result.platforms[\"linkedin\"]\n                    assert linkedin_result[\"type\"] == \"presenton_carousel\"\n                    assert linkedin_result[\"presentation_id\"] == \"pres_abc123\"\n                    ",
          "values": {
            "strings": [
              "linkedin",
              "type",
              "presenton_carousel",
              "presentation_id",
              "pres_abc123"
            ],
            "numbers": [
              123
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 256,
          "snippet": "                    linkedin_result = result.platforms[\"linkedin\"]\n                    assert linkedin_result[\"type\"] == \"presenton_carousel\"\n                    assert linkedin_result[\"presentation_id\"] == \"pres_abc123\"\n                    \n                    # Twitter should use direct content",
          "values": {
            "strings": [
              "linkedin",
              "type",
              "presenton_carousel",
              "presentation_id",
              "pres_abc123"
            ],
            "numbers": [
              123
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 258,
          "snippet": "                    assert linkedin_result[\"presentation_id\"] == \"pres_abc123\"\n                    \n                    # Twitter should use direct content\n                    twitter_result = result.platforms[\"twitter\"]\n                    assert twitter_result[\"type\"] == \"direct_content\"",
          "values": {
            "strings": [
              "presentation_id",
              "pres_abc123",
              "twitter",
              "type",
              "direct_content"
            ],
            "numbers": [
              123
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "twitter",
          "line": 259,
          "snippet": "                    \n                    # Twitter should use direct content\n                    twitter_result = result.platforms[\"twitter\"]\n                    assert twitter_result[\"type\"] == \"direct_content\"\n                    assert \"🚀 Exciting AI developments\" in twitter_result[\"content\"]",
          "values": {
            "strings": [
              "twitter",
              "type",
              "direct_content",
              "🚀 Exciting AI developments",
              "content"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "twitter",
          "line": 260,
          "snippet": "                    # Twitter should use direct content\n                    twitter_result = result.platforms[\"twitter\"]\n                    assert twitter_result[\"type\"] == \"direct_content\"\n                    assert \"🚀 Exciting AI developments\" in twitter_result[\"content\"]\n",
          "values": {
            "strings": [
              "twitter",
              "type",
              "direct_content",
              "🚀 Exciting AI developments",
              "content"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "twitter",
          "line": 261,
          "snippet": "                    twitter_result = result.platforms[\"twitter\"]\n                    assert twitter_result[\"type\"] == \"direct_content\"\n                    assert \"🚀 Exciting AI developments\" in twitter_result[\"content\"]\n\n    @pytest.mark.asyncio",
          "values": {
            "strings": [
              "twitter",
              "type",
              "direct_content",
              "🚀 Exciting AI developments",
              "content"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 275,
          "snippet": "            \n            assert result.ready_for_publication is False\n            assert \"error\" in result.platforms[\"linkedin\"]\n            assert \"error\" in result.platforms[\"twitter\"]\n",
          "values": {
            "strings": [
              "error",
              "linkedin",
              "error",
              "twitter"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 276,
          "snippet": "            assert result.ready_for_publication is False\n            assert \"error\" in result.platforms[\"linkedin\"]\n            assert \"error\" in result.platforms[\"twitter\"]\n\n    @pytest.mark.asyncio",
          "values": {
            "strings": [
              "error",
              "linkedin",
              "error",
              "twitter"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 300,
          "snippet": "                    result = await processor.process_content_request(sample_enhanced_request)\n                    \n                    # LinkedIn should have error\n                    linkedin_result = result.platforms[\"linkedin\"]\n                    assert linkedin_result[\"type\"] == \"error\"",
          "values": {
            "strings": [
              "linkedin",
              "type",
              "error"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 301,
          "snippet": "                    \n                    # LinkedIn should have error\n                    linkedin_result = result.platforms[\"linkedin\"]\n                    assert linkedin_result[\"type\"] == \"error\"\n                    assert \"Presenton\" in linkedin_result[\"error\"]",
          "values": {
            "strings": [
              "linkedin",
              "type",
              "error",
              "Presenton",
              "error"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 302,
          "snippet": "                    # LinkedIn should have error\n                    linkedin_result = result.platforms[\"linkedin\"]\n                    assert linkedin_result[\"type\"] == \"error\"\n                    assert \"Presenton\" in linkedin_result[\"error\"]\n                    ",
          "values": {
            "strings": [
              "linkedin",
              "type",
              "error",
              "Presenton",
              "error"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 303,
          "snippet": "                    linkedin_result = result.platforms[\"linkedin\"]\n                    assert linkedin_result[\"type\"] == \"error\"\n                    assert \"Presenton\" in linkedin_result[\"error\"]\n                    \n                    # Twitter should still work",
          "values": {
            "strings": [
              "linkedin",
              "type",
              "error",
              "Presenton",
              "error"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 305,
          "snippet": "                    assert \"Presenton\" in linkedin_result[\"error\"]\n                    \n                    # Twitter should still work\n                    twitter_result = result.platforms[\"twitter\"]\n                    assert twitter_result[\"type\"] == \"direct_content\"",
          "values": {
            "strings": [
              "Presenton",
              "error",
              "twitter",
              "type",
              "direct_content"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "twitter",
          "line": 306,
          "snippet": "                    \n                    # Twitter should still work\n                    twitter_result = result.platforms[\"twitter\"]\n                    assert twitter_result[\"type\"] == \"direct_content\"\n                    assert twitter_result[\"ready_for_publication\"] is True",
          "values": {
            "strings": [
              "twitter",
              "type",
              "direct_content",
              "ready_for_publication"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "twitter",
          "line": 307,
          "snippet": "                    # Twitter should still work\n                    twitter_result = result.platforms[\"twitter\"]\n                    assert twitter_result[\"type\"] == \"direct_content\"\n                    assert twitter_result[\"ready_for_publication\"] is True\n",
          "values": {
            "strings": [
              "twitter",
              "type",
              "direct_content",
              "ready_for_publication"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "twitter",
          "line": 308,
          "snippet": "                    twitter_result = result.platforms[\"twitter\"]\n                    assert twitter_result[\"type\"] == \"direct_content\"\n                    assert twitter_result[\"ready_for_publication\"] is True\n\n    @pytest.mark.asyncio",
          "values": {
            "strings": [
              "twitter",
              "type",
              "direct_content",
              "ready_for_publication"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 409,
          "snippet": "            },\n            \"platforms\": {\n                \"linkedin\": {\n                    \"enabled\": True,\n                    \"direct_content\": False,",
          "values": {
            "strings": [
              "platforms",
              "linkedin",
              "enabled",
              "direct_content"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "twitter",
          "line": 415,
          "snippet": "                    \"template\": \"business\"\n                },\n                \"twitter\": {\n                    \"enabled\": True,\n                    \"direct_content\": True",
          "values": {
            "strings": [
              "template",
              "business",
              "twitter",
              "enabled",
              "direct_content"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 427,
          "snippet": "            publication_id=\"pub_test123\",\n            platforms={\n                \"linkedin\": {\n                    \"type\": \"presenton_carousel\",\n                    \"content\": \"LinkedIn content\",",
          "values": {
            "strings": [
              "pub_test123",
              "linkedin",
              "type",
              "presenton_carousel",
              "content",
              "LinkedIn content"
            ],
            "numbers": [
              123
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 429,
          "snippet": "                \"linkedin\": {\n                    \"type\": \"presenton_carousel\",\n                    \"content\": \"LinkedIn content\",\n                    \"ready_for_publication\": True,\n                    \"processing_time\": 2.5,",
          "values": {
            "strings": [
              "linkedin",
              "type",
              "presenton_carousel",
              "content",
              "LinkedIn content",
              "ready_for_publication",
              "processing_time"
            ],
            "numbers": [
              2,
              5
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "twitter",
          "line": 434,
          "snippet": "                    \"presentation_id\": \"pres_123\"\n                },\n                \"twitter\": {\n                    \"type\": \"direct_content\", \n                    \"content\": \"Twitter content\",",
          "values": {
            "strings": [
              "presentation_id",
              "pres_123",
              "twitter",
              "type",
              "direct_content",
              "content",
              "Twitter content"
            ],
            "numbers": [
              123
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "twitter",
          "line": 436,
          "snippet": "                \"twitter\": {\n                    \"type\": \"direct_content\", \n                    \"content\": \"Twitter content\",\n                    \"ready_for_publication\": True,\n                    \"processing_time\": 1.0",
          "values": {
            "strings": [
              "twitter",
              "type",
              "direct_content",
              "content",
              "Twitter content",
              "ready_for_publication",
              "processing_time"
            ],
            "numbers": [
              1,
              0
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 462,
          "snippet": "                data = response.json()\n                assert data[\"publication_id\"] == \"pub_test123\"\n                assert \"linkedin\" in data[\"platform_jobs\"]\n                assert \"twitter\" in data[\"platform_jobs\"]\n                assert data[\"enhanced_features\"][\"presenton_integration\"] is True",
          "values": {
            "strings": [
              "publication_id",
              "pub_test123",
              "linkedin",
              "platform_jobs",
              "twitter",
              "platform_jobs",
              "enhanced_features",
              "presenton_integration"
            ],
            "numbers": [
              123
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 463,
          "snippet": "                assert data[\"publication_id\"] == \"pub_test123\"\n                assert \"linkedin\" in data[\"platform_jobs\"]\n                assert \"twitter\" in data[\"platform_jobs\"]\n                assert data[\"enhanced_features\"][\"presenton_integration\"] is True\n",
          "values": {
            "strings": [
              "publication_id",
              "pub_test123",
              "linkedin",
              "platform_jobs",
              "twitter",
              "platform_jobs",
              "enhanced_features",
              "presenton_integration"
            ],
            "numbers": [
              123
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 475,
          "snippet": "            },\n            \"platforms\": {\n                \"linkedin\": {\"enabled\": True}\n            }\n        }",
          "values": {
            "strings": [
              "platforms",
              "linkedin",
              "enabled"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 482,
          "snippet": "            publication_id=\"pub_failed\",\n            platforms={\n                \"linkedin\": {\n                    \"type\": \"error\",\n                    \"error\": \"AI Writing Flow service unavailable\",",
          "values": {
            "strings": [
              "pub_failed",
              "linkedin",
              "type",
              "error",
              "error",
              "AI Writing Flow service unavailable"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 519,
          "snippet": "        ),\n        platforms={\n            \"linkedin\": PlatformConfig(\n                enabled=True,\n                direct_content=False,  # Use Presenton",
          "values": {
            "strings": [
              "linkedin"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "twitter",
          "line": 525,
          "snippet": "                template=\"business\"\n            ),\n            \"twitter\": PlatformConfig(\n                enabled=True,\n                direct_content=True",
          "values": {
            "strings": [
              "business",
              "twitter"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 536,
          "snippet": "    ai_flow_response = {\n        \"platform_content\": {\n            \"linkedin\": {\n                \"content\": \"Comprehensive guide to AI architecture patterns...\",\n                \"ready_for_presenton\": True,",
          "values": {
            "strings": [
              "platform_content",
              "linkedin",
              "content",
              "Comprehensive guide to AI architecture patterns...",
              "ready_for_presenton"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "twitter",
          "line": 542,
          "snippet": "                \"topic_title\": \"AI Architecture Patterns\"\n            },\n            \"twitter\": {\n                \"content\": \"🏗️ AI Architecture Patterns thread:\\n\\n1/ Microservices for AI systems\\n2/ Event-driven architectures\\n3/ Model serving strategies\\n\\n#AI #Architecture #SystemDesign\",\n                \"ready_for_presenton\": False,",
          "values": {
            "strings": [
              "topic_title",
              "AI Architecture Patterns",
              "twitter",
              "content",
              "🏗️ AI Architecture Patterns thread:\\n\\n1/ Microservices for AI systems\\n2/ Event-driven architectures\\n3/ Model serving strategies\\n\\n#AI #Architecture #SystemDesign",
              "ready_for_presenton"
            ],
            "numbers": [
              1,
              2,
              3
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 577,
          "snippet": "                assert len(result.platforms) == 2\n                \n                # Verify LinkedIn processing (Presenton pipeline)\n                linkedin_result = result.platforms[\"linkedin\"]\n                assert linkedin_result[\"type\"] == \"presenton_carousel\"",
          "values": {
            "strings": [
              "linkedin",
              "type",
              "presenton_carousel"
            ],
            "numbers": [
              2
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 578,
          "snippet": "                \n                # Verify LinkedIn processing (Presenton pipeline)\n                linkedin_result = result.platforms[\"linkedin\"]\n                assert linkedin_result[\"type\"] == \"presenton_carousel\"\n                assert linkedin_result[\"ready_for_publication\"] is True",
          "values": {
            "strings": [
              "linkedin",
              "type",
              "presenton_carousel",
              "ready_for_publication"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 579,
          "snippet": "                # Verify LinkedIn processing (Presenton pipeline)\n                linkedin_result = result.platforms[\"linkedin\"]\n                assert linkedin_result[\"type\"] == \"presenton_carousel\"\n                assert linkedin_result[\"ready_for_publication\"] is True\n                assert linkedin_result[\"presentation_id\"] == \"pres_ai_arch_001\"",
          "values": {
            "strings": [
              "linkedin",
              "type",
              "presenton_carousel",
              "ready_for_publication",
              "presentation_id",
              "pres_ai_arch_001"
            ],
            "numbers": [
              1
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 580,
          "snippet": "                linkedin_result = result.platforms[\"linkedin\"]\n                assert linkedin_result[\"type\"] == \"presenton_carousel\"\n                assert linkedin_result[\"ready_for_publication\"] is True\n                assert linkedin_result[\"presentation_id\"] == \"pres_ai_arch_001\"\n                assert linkedin_result[\"slides_count\"] == 8",
          "values": {
            "strings": [
              "linkedin",
              "type",
              "presenton_carousel",
              "ready_for_publication",
              "presentation_id",
              "pres_ai_arch_001",
              "slides_count"
            ],
            "numbers": [
              1,
              8
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 581,
          "snippet": "                assert linkedin_result[\"type\"] == \"presenton_carousel\"\n                assert linkedin_result[\"ready_for_publication\"] is True\n                assert linkedin_result[\"presentation_id\"] == \"pres_ai_arch_001\"\n                assert linkedin_result[\"slides_count\"] == 8\n                ",
          "values": {
            "strings": [
              "type",
              "presenton_carousel",
              "ready_for_publication",
              "presentation_id",
              "pres_ai_arch_001",
              "slides_count"
            ],
            "numbers": [
              1,
              8
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 582,
          "snippet": "                assert linkedin_result[\"ready_for_publication\"] is True\n                assert linkedin_result[\"presentation_id\"] == \"pres_ai_arch_001\"\n                assert linkedin_result[\"slides_count\"] == 8\n                \n                # Verify Twitter processing (Direct content pipeline)",
          "values": {
            "strings": [
              "ready_for_publication",
              "presentation_id",
              "pres_ai_arch_001",
              "slides_count"
            ],
            "numbers": [
              1,
              8
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 584,
          "snippet": "                assert linkedin_result[\"slides_count\"] == 8\n                \n                # Verify Twitter processing (Direct content pipeline)\n                twitter_result = result.platforms[\"twitter\"]\n                assert twitter_result[\"type\"] == \"direct_content\"",
          "values": {
            "strings": [
              "slides_count",
              "twitter",
              "type",
              "direct_content"
            ],
            "numbers": [
              8
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "twitter",
          "line": 585,
          "snippet": "                \n                # Verify Twitter processing (Direct content pipeline)\n                twitter_result = result.platforms[\"twitter\"]\n                assert twitter_result[\"type\"] == \"direct_content\"\n                assert twitter_result[\"ready_for_publication\"] is True",
          "values": {
            "strings": [
              "twitter",
              "type",
              "direct_content",
              "ready_for_publication"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "twitter",
          "line": 586,
          "snippet": "                # Verify Twitter processing (Direct content pipeline)\n                twitter_result = result.platforms[\"twitter\"]\n                assert twitter_result[\"type\"] == \"direct_content\"\n                assert twitter_result[\"ready_for_publication\"] is True\n                assert \"🏗️ AI Architecture Patterns\" in twitter_result[\"content\"]",
          "values": {
            "strings": [
              "twitter",
              "type",
              "direct_content",
              "ready_for_publication",
              "🏗️ AI Architecture Patterns",
              "content"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "twitter",
          "line": 587,
          "snippet": "                twitter_result = result.platforms[\"twitter\"]\n                assert twitter_result[\"type\"] == \"direct_content\"\n                assert twitter_result[\"ready_for_publication\"] is True\n                assert \"🏗️ AI Architecture Patterns\" in twitter_result[\"content\"]\n                ",
          "values": {
            "strings": [
              "twitter",
              "type",
              "direct_content",
              "ready_for_publication",
              "🏗️ AI Architecture Patterns",
              "content"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "twitter",
          "line": 588,
          "snippet": "                assert twitter_result[\"type\"] == \"direct_content\"\n                assert twitter_result[\"ready_for_publication\"] is True\n                assert \"🏗️ AI Architecture Patterns\" in twitter_result[\"content\"]\n                \n                # Verify enhanced features were tracked",
          "values": {
            "strings": [
              "type",
              "direct_content",
              "ready_for_publication",
              "🏗️ AI Architecture Patterns",
              "content"
            ],
            "numbers": []
          }
        }
      ]
    },
    {
      "file": "/Users/hretheum/dev/bezrobocie/vector-wave/publisher/tests/integration/test_enhanced_pipeline.py",
      "exists": true,
      "hits": [
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 72,
          "snippet": "    \n    @pytest.mark.asyncio\n    async def test_linkedin_carousel_pipeline(self, client, mock_dependencies):\n        \"\"\"\n        Test complete LinkedIn carousel pipeline:",
          "values": {
            "strings": [],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 74,
          "snippet": "    async def test_linkedin_carousel_pipeline(self, client, mock_dependencies):\n        \"\"\"\n        Test complete LinkedIn carousel pipeline:\n        AI Writing Flow → Orchestrator → Presenton → LinkedIn\n        \"\"\"",
          "values": {
            "strings": [
              "\n        Test complete LinkedIn carousel pipeline:\n        AI Writing Flow → Orchestrator → Presenton → LinkedIn\n        "
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 75,
          "snippet": "        \"\"\"\n        Test complete LinkedIn carousel pipeline:\n        AI Writing Flow → Orchestrator → Presenton → LinkedIn\n        \"\"\"\n        ",
          "values": {
            "strings": [
              "\n        Test complete LinkedIn carousel pipeline:\n        AI Writing Flow → Orchestrator → Presenton → LinkedIn\n        "
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 81,
          "snippet": "        from models import ContentProcessingResult\n        mock_result = ContentProcessingResult(\n            publication_id=\"pub_linkedin_test_001\",\n            platforms={\n                \"linkedin\": {",
          "values": {
            "strings": [
              "pub_linkedin_test_001",
              "linkedin"
            ],
            "numbers": [
              1
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 83,
          "snippet": "            publication_id=\"pub_linkedin_test_001\",\n            platforms={\n                \"linkedin\": {\n                    \"type\": \"presenton_carousel\",\n                    \"content\": \"LinkedIn carousel prompt for Future of Remote Work presentation...\",",
          "values": {
            "strings": [
              "pub_linkedin_test_001",
              "linkedin",
              "type",
              "presenton_carousel",
              "content",
              "LinkedIn carousel prompt for Future of Remote Work presentation..."
            ],
            "numbers": [
              1
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 85,
          "snippet": "                \"linkedin\": {\n                    \"type\": \"presenton_carousel\",\n                    \"content\": \"LinkedIn carousel prompt for Future of Remote Work presentation...\",\n                    \"ready_for_publication\": True,\n                    \"processing_time\": 4.2,",
          "values": {
            "strings": [
              "linkedin",
              "type",
              "presenton_carousel",
              "content",
              "LinkedIn carousel prompt for Future of Remote Work presentation...",
              "ready_for_publication",
              "processing_time"
            ],
            "numbers": [
              4,
              2
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 93,
          "snippet": "                    \"slides_count\": 5,\n                    \"quality_score\": 8.9,\n                    \"ready_for_linkedin\": True\n                }\n            },",
          "values": {
            "strings": [
              "slides_count",
              "quality_score",
              "ready_for_linkedin"
            ],
            "numbers": [
              5,
              8,
              9
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 115,
          "snippet": "            },\n            \"platforms\": {\n                \"linkedin\": {\n                    \"enabled\": True,\n                    \"direct_content\": False,  # Use Presenton",
          "values": {
            "strings": [
              "platforms",
              "linkedin",
              "enabled",
              "direct_content"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 134,
          "snippet": "        assert result[\"status\"] == \"processing\"  # Updated from spec\n        assert result[\"enhanced_features\"][\"presenton_integration\"] is True\n        assert \"linkedin\" in result[\"platform_jobs\"]\n        \n        publication_id = result[\"publication_id\"]",
          "values": {
            "strings": [
              "status",
              "processing",
              "enhanced_features",
              "presenton_integration",
              "linkedin",
              "platform_jobs",
              "publication_id"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 138,
          "snippet": "        publication_id = result[\"publication_id\"]\n        \n        # Verify content summary for LinkedIn carousel\n        assert \"content_summary\" in result\n        linkedin_summary = result[\"content_summary\"][\"linkedin\"]",
          "values": {
            "strings": [
              "publication_id",
              "content_summary",
              "content_summary",
              "linkedin"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 140,
          "snippet": "        # Verify content summary for LinkedIn carousel\n        assert \"content_summary\" in result\n        linkedin_summary = result[\"content_summary\"][\"linkedin\"]\n        assert linkedin_summary[\"type\"] == \"presenton_carousel\"\n        assert linkedin_summary[\"presentation_id\"] == \"pres_remote_work_001\"",
          "values": {
            "strings": [
              "content_summary",
              "content_summary",
              "linkedin",
              "type",
              "presenton_carousel",
              "presentation_id",
              "pres_remote_work_001"
            ],
            "numbers": [
              1
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 141,
          "snippet": "        assert \"content_summary\" in result\n        linkedin_summary = result[\"content_summary\"][\"linkedin\"]\n        assert linkedin_summary[\"type\"] == \"presenton_carousel\"\n        assert linkedin_summary[\"presentation_id\"] == \"pres_remote_work_001\"\n        assert linkedin_summary[\"slides_count\"] == 5",
          "values": {
            "strings": [
              "content_summary",
              "content_summary",
              "linkedin",
              "type",
              "presenton_carousel",
              "presentation_id",
              "pres_remote_work_001",
              "slides_count"
            ],
            "numbers": [
              1,
              5
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 142,
          "snippet": "        linkedin_summary = result[\"content_summary\"][\"linkedin\"]\n        assert linkedin_summary[\"type\"] == \"presenton_carousel\"\n        assert linkedin_summary[\"presentation_id\"] == \"pres_remote_work_001\"\n        assert linkedin_summary[\"slides_count\"] == 5\n        assert linkedin_summary[\"ready_for_linkedin\"] is True",
          "values": {
            "strings": [
              "content_summary",
              "linkedin",
              "type",
              "presenton_carousel",
              "presentation_id",
              "pres_remote_work_001",
              "slides_count",
              "ready_for_linkedin"
            ],
            "numbers": [
              1,
              5
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 143,
          "snippet": "        assert linkedin_summary[\"type\"] == \"presenton_carousel\"\n        assert linkedin_summary[\"presentation_id\"] == \"pres_remote_work_001\"\n        assert linkedin_summary[\"slides_count\"] == 5\n        assert linkedin_summary[\"ready_for_linkedin\"] is True\n        ",
          "values": {
            "strings": [
              "type",
              "presenton_carousel",
              "presentation_id",
              "pres_remote_work_001",
              "slides_count",
              "ready_for_linkedin"
            ],
            "numbers": [
              1,
              5
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 144,
          "snippet": "        assert linkedin_summary[\"presentation_id\"] == \"pres_remote_work_001\"\n        assert linkedin_summary[\"slides_count\"] == 5\n        assert linkedin_summary[\"ready_for_linkedin\"] is True\n        \n        # Verify job was queued with enhanced metadata",
          "values": {
            "strings": [
              "presentation_id",
              "pres_remote_work_001",
              "slides_count",
              "ready_for_linkedin"
            ],
            "numbers": [
              1,
              5
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "twitter",
          "line": 165,
          "snippet": "            publication_id=\"pub_multi_images_001\",\n            platforms={\n                \"twitter\": {\n                    \"type\": \"direct_content\",\n                    \"content\": \"🤖 AI Innovation Trends thread:\\n\\n1/ Latest developments in AI...\",",
          "values": {
            "strings": [
              "pub_multi_images_001",
              "twitter",
              "type",
              "direct_content",
              "content",
              "🤖 AI Innovation Trends thread:\\n\\n1/ Latest developments in AI..."
            ],
            "numbers": [
              1,
              1
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 173,
          "snippet": "                    \"images\": [\"/tmp/publisher_images/ai-technology_1691234567_12345.jpg\"]\n                },\n                \"ghost\": {\n                    \"type\": \"direct_content\",\n                    \"content\": \"# AI Innovation Trends\\n\\n<img src=\\\"https://ghost.io/images/ai-technology.jpg\\\" alt=\\\"AI Technology\\\">\\n\\nLatest developments...\",",
          "values": {
            "strings": [
              "images",
              "/tmp/publisher_images/ai-technology_1691234567_12345.jpg",
              "ghost",
              "type",
              "direct_content",
              "content",
              "# AI Innovation Trends\\n\\n<img src=\\",
              " alt=\\",
              ">\\n\\nLatest developments..."
            ],
            "numbers": [
              1691234567,
              12345
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 175,
          "snippet": "                \"ghost\": {\n                    \"type\": \"direct_content\",\n                    \"content\": \"# AI Innovation Trends\\n\\n<img src=\\\"https://ghost.io/images/ai-technology.jpg\\\" alt=\\\"AI Technology\\\">\\n\\nLatest developments...\",\n                    \"ready_for_publication\": True,\n                    \"processing_time\": 2.3,",
          "values": {
            "strings": [
              "ghost",
              "type",
              "direct_content",
              "content",
              "# AI Innovation Trends\\n\\n<img src=\\",
              " alt=\\",
              ">\\n\\nLatest developments...",
              "ready_for_publication",
              "processing_time"
            ],
            "numbers": [
              2,
              3
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 181,
          "snippet": "                    \"html_content\": \"<h1>AI Innovation Trends</h1><p>Content with uploaded images...</p>\"\n                },\n                \"linkedin\": {\n                    \"type\": \"direct_content\",\n                    \"content\": \"🚀 AI Innovation Trends 2025\\n\\nKey insights from the latest AI developments...\",",
          "values": {
            "strings": [
              "html_content",
              "<h1>AI Innovation Trends</h1><p>Content with uploaded images...</p>",
              "linkedin",
              "type",
              "direct_content",
              "content",
              "🚀 AI Innovation Trends 2025\\n\\nKey insights from the latest AI developments..."
            ],
            "numbers": [
              1,
              1,
              2025
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 208,
          "snippet": "            },\n            \"platforms\": {\n                \"twitter\": {\"enabled\": True, \"direct_content\": True},\n                \"ghost\": {\"enabled\": True, \"direct_content\": True},\n                \"linkedin\": {\"enabled\": True, \"direct_content\": True}  # Direct, not carousel",
          "values": {
            "strings": [
              "platforms",
              "twitter",
              "enabled",
              "direct_content",
              "ghost",
              "enabled",
              "direct_content",
              "linkedin",
              "enabled",
              "direct_content"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 209,
          "snippet": "            \"platforms\": {\n                \"twitter\": {\"enabled\": True, \"direct_content\": True},\n                \"ghost\": {\"enabled\": True, \"direct_content\": True},\n                \"linkedin\": {\"enabled\": True, \"direct_content\": True}  # Direct, not carousel\n            }",
          "values": {
            "strings": [
              "platforms",
              "twitter",
              "enabled",
              "direct_content",
              "ghost",
              "enabled",
              "direct_content",
              "linkedin",
              "enabled",
              "direct_content"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 210,
          "snippet": "                \"twitter\": {\"enabled\": True, \"direct_content\": True},\n                \"ghost\": {\"enabled\": True, \"direct_content\": True},\n                \"linkedin\": {\"enabled\": True, \"direct_content\": True}  # Direct, not carousel\n            }\n        }",
          "values": {
            "strings": [
              "twitter",
              "enabled",
              "direct_content",
              "ghost",
              "enabled",
              "direct_content",
              "linkedin",
              "enabled",
              "direct_content"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 226,
          "snippet": "        # 2. Check all platforms were queued\n        assert len(result[\"platform_jobs\"]) == 3\n        assert \"twitter\" in result[\"platform_jobs\"]\n        assert \"ghost\" in result[\"platform_jobs\"]\n        assert \"linkedin\" in result[\"platform_jobs\"]",
          "values": {
            "strings": [
              "platform_jobs",
              "twitter",
              "platform_jobs",
              "ghost",
              "platform_jobs",
              "linkedin",
              "platform_jobs"
            ],
            "numbers": [
              2,
              3
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 227,
          "snippet": "        assert len(result[\"platform_jobs\"]) == 3\n        assert \"twitter\" in result[\"platform_jobs\"]\n        assert \"ghost\" in result[\"platform_jobs\"]\n        assert \"linkedin\" in result[\"platform_jobs\"]\n        ",
          "values": {
            "strings": [
              "platform_jobs",
              "twitter",
              "platform_jobs",
              "ghost",
              "platform_jobs",
              "linkedin",
              "platform_jobs"
            ],
            "numbers": [
              3
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 228,
          "snippet": "        assert \"twitter\" in result[\"platform_jobs\"]\n        assert \"ghost\" in result[\"platform_jobs\"]\n        assert \"linkedin\" in result[\"platform_jobs\"]\n        \n        # 3. Verify image processing results in content summary",
          "values": {
            "strings": [
              "twitter",
              "platform_jobs",
              "ghost",
              "platform_jobs",
              "linkedin",
              "platform_jobs"
            ],
            "numbers": [
              3
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "twitter",
          "line": 233,
          "snippet": "        content_summary = result[\"content_summary\"]\n        \n        # Twitter should have images processed\n        assert content_summary[\"twitter\"][\"images_processed\"] == 1\n        ",
          "values": {
            "strings": [
              "content_summary",
              "twitter",
              "images_processed"
            ],
            "numbers": [
              1
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "twitter",
          "line": 234,
          "snippet": "        \n        # Twitter should have images processed\n        assert content_summary[\"twitter\"][\"images_processed\"] == 1\n        \n        # Ghost should have uploaded images (no local images in summary)",
          "values": {
            "strings": [
              "twitter",
              "images_processed"
            ],
            "numbers": [
              1
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "twitter",
          "line": 236,
          "snippet": "        assert content_summary[\"twitter\"][\"images_processed\"] == 1\n        \n        # Ghost should have uploaded images (no local images in summary)\n        assert \"images_processed\" not in content_summary[\"ghost\"]  # Ghost uploads to CDN\n        ",
          "values": {
            "strings": [
              "twitter",
              "images_processed",
              "images_processed",
              "ghost"
            ],
            "numbers": [
              1
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 237,
          "snippet": "        \n        # Ghost should have uploaded images (no local images in summary)\n        assert \"images_processed\" not in content_summary[\"ghost\"]  # Ghost uploads to CDN\n        \n        # LinkedIn should have images processed",
          "values": {
            "strings": [
              "images_processed",
              "ghost"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 239,
          "snippet": "        assert \"images_processed\" not in content_summary[\"ghost\"]  # Ghost uploads to CDN\n        \n        # LinkedIn should have images processed\n        assert content_summary[\"linkedin\"][\"images_processed\"] == 1\n    ",
          "values": {
            "strings": [
              "images_processed",
              "ghost",
              "linkedin",
              "images_processed"
            ],
            "numbers": [
              1
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 240,
          "snippet": "        \n        # LinkedIn should have images processed\n        assert content_summary[\"linkedin\"][\"images_processed\"] == 1\n    \n    @pytest.mark.asyncio",
          "values": {
            "strings": [
              "linkedin",
              "images_processed"
            ],
            "numbers": [
              1
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 251,
          "snippet": "            publication_id=\"pub_error_fallback_001\",\n            platforms={\n                \"linkedin\": {\n                    \"type\": \"error\",\n                    \"error\": \"Presenton processing failed: Invalid slides count (50) - must be between 1 and 20\",",
          "values": {
            "strings": [
              "pub_error_fallback_001",
              "linkedin",
              "type",
              "error",
              "error",
              "Presenton processing failed: Invalid slides count (50) - must be between 1 and 20"
            ],
            "numbers": [
              1,
              50,
              1,
              20
            ]
          }
        },
        {
          "type": "required_elements",
          "platform": "linkedin",
          "line": 253,
          "snippet": "                \"linkedin\": {\n                    \"type\": \"error\",\n                    \"error\": \"Presenton processing failed: Invalid slides count (50) - must be between 1 and 20\",\n                    \"ready_for_publication\": False,\n                    \"processing_time\": 1.2",
          "values": {
            "strings": [
              "linkedin",
              "type",
              "error",
              "error",
              "Presenton processing failed: Invalid slides count (50) - must be between 1 and 20",
              "ready_for_publication",
              "processing_time"
            ],
            "numbers": [
              50,
              1,
              20,
              1,
              2
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 277,
          "snippet": "            },\n            \"platforms\": {\n                \"linkedin\": {\n                    \"enabled\": True,\n                    \"direct_content\": False,  # Force Presenton",
          "values": {
            "strings": [
              "platforms",
              "linkedin",
              "enabled",
              "direct_content"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "twitter",
          "line": 302,
          "snippet": "            publication_id=\"pub_partial_success_001\",\n            platforms={\n                \"twitter\": {\n                    \"type\": \"direct_content\",\n                    \"content\": \"🐦 Test content for Twitter...\",",
          "values": {
            "strings": [
              "pub_partial_success_001",
              "twitter",
              "type",
              "direct_content",
              "content",
              "🐦 Test content for Twitter..."
            ],
            "numbers": [
              1
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "twitter",
          "line": 304,
          "snippet": "                \"twitter\": {\n                    \"type\": \"direct_content\",\n                    \"content\": \"🐦 Test content for Twitter...\",\n                    \"ready_for_publication\": True,\n                    \"processing_time\": 1.1,",
          "values": {
            "strings": [
              "twitter",
              "type",
              "direct_content",
              "content",
              "🐦 Test content for Twitter...",
              "ready_for_publication",
              "processing_time"
            ],
            "numbers": [
              1,
              1
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 309,
          "snippet": "                    \"quality_score\": 7.8\n                },\n                \"ghost\": {\n                    \"type\": \"direct_content\", \n                    \"content\": \"# Test Content\\n\\nTest article content for Ghost...\",",
          "values": {
            "strings": [
              "quality_score",
              "ghost",
              "type",
              "direct_content",
              "content",
              "# Test Content\\n\\nTest article content for Ghost..."
            ],
            "numbers": [
              7,
              8
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 311,
          "snippet": "                \"ghost\": {\n                    \"type\": \"direct_content\", \n                    \"content\": \"# Test Content\\n\\nTest article content for Ghost...\",\n                    \"ready_for_publication\": True,\n                    \"processing_time\": 1.5,",
          "values": {
            "strings": [
              "ghost",
              "type",
              "direct_content",
              "content",
              "# Test Content\\n\\nTest article content for Ghost...",
              "ready_for_publication",
              "processing_time"
            ],
            "numbers": [
              1,
              5
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "twitter",
          "line": 335,
          "snippet": "            },\n            \"platforms\": {\n                \"twitter\": {\"enabled\": True},  # Should succeed\n                \"ghost\": {\"enabled\": True}  # Should succeed\n                # Note: 'invalid_platform' would be caught by validation before reaching ContentProcessor",
          "values": {
            "strings": [
              "platforms",
              "twitter",
              "enabled",
              "ghost",
              "enabled",
              "invalid_platform"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "twitter",
          "line": 336,
          "snippet": "            \"platforms\": {\n                \"twitter\": {\"enabled\": True},  # Should succeed\n                \"ghost\": {\"enabled\": True}  # Should succeed\n                # Note: 'invalid_platform' would be caught by validation before reaching ContentProcessor\n            }",
          "values": {
            "strings": [
              "platforms",
              "twitter",
              "enabled",
              "ghost",
              "enabled",
              "invalid_platform"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "twitter",
          "line": 352,
          "snippet": "        # Should have successful jobs for valid platforms  \n        assert len(result[\"platform_jobs\"]) == 2\n        assert \"twitter\" in result[\"platform_jobs\"]\n        assert \"ghost\" in result[\"platform_jobs\"]\n    ",
          "values": {
            "strings": [
              "platform_jobs",
              "twitter",
              "platform_jobs",
              "ghost",
              "platform_jobs"
            ],
            "numbers": [
              2
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "twitter",
          "line": 353,
          "snippet": "        assert len(result[\"platform_jobs\"]) == 2\n        assert \"twitter\" in result[\"platform_jobs\"]\n        assert \"ghost\" in result[\"platform_jobs\"]\n    \n    @pytest.mark.asyncio",
          "values": {
            "strings": [
              "platform_jobs",
              "twitter",
              "platform_jobs",
              "ghost",
              "platform_jobs"
            ],
            "numbers": [
              2
            ]
          }
        },
        {
          "type": "required_elements",
          "platform": "universal",
          "line": 357,
          "snippet": "    @pytest.mark.asyncio\n    async def test_performance_benchmarks(self, client, mock_dependencies):\n        \"\"\"Test performance meets requirements\"\"\"\n        \n        # Mock fast processing result",
          "values": {
            "strings": [
              "Test performance meets requirements"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "twitter",
          "line": 364,
          "snippet": "            publication_id=\"pub_performance_test_001\",\n            platforms={\n                \"twitter\": {\n                    \"type\": \"direct_content\",\n                    \"content\": \"Performance test content for Twitter\",",
          "values": {
            "strings": [
              "pub_performance_test_001",
              "twitter",
              "type",
              "direct_content",
              "content",
              "Performance test content for Twitter"
            ],
            "numbers": [
              1
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "twitter",
          "line": 366,
          "snippet": "                \"twitter\": {\n                    \"type\": \"direct_content\",\n                    \"content\": \"Performance test content for Twitter\",\n                    \"ready_for_publication\": True,\n                    \"processing_time\": 0.8,",
          "values": {
            "strings": [
              "twitter",
              "type",
              "direct_content",
              "content",
              "Performance test content for Twitter",
              "ready_for_publication",
              "processing_time"
            ],
            "numbers": [
              0,
              8
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 371,
          "snippet": "                    \"quality_score\": 8.0\n                },\n                \"ghost\": {\n                    \"type\": \"direct_content\",\n                    \"content\": \"Performance test content for Ghost\",",
          "values": {
            "strings": [
              "quality_score",
              "ghost",
              "type",
              "direct_content",
              "content",
              "Performance test content for Ghost"
            ],
            "numbers": [
              8,
              0
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 373,
          "snippet": "                \"ghost\": {\n                    \"type\": \"direct_content\",\n                    \"content\": \"Performance test content for Ghost\",\n                    \"ready_for_publication\": True,\n                    \"processing_time\": 1.2,",
          "values": {
            "strings": [
              "ghost",
              "type",
              "direct_content",
              "content",
              "Performance test content for Ghost",
              "ready_for_publication",
              "processing_time"
            ],
            "numbers": [
              1,
              2
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 378,
          "snippet": "                    \"quality_score\": 8.2\n                },\n                \"linkedin\": {\n                    \"type\": \"direct_content\",\n                    \"content\": \"Performance test content for LinkedIn\",",
          "values": {
            "strings": [
              "quality_score",
              "linkedin",
              "type",
              "direct_content",
              "content",
              "Performance test content for LinkedIn"
            ],
            "numbers": [
              8,
              2
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 380,
          "snippet": "                \"linkedin\": {\n                    \"type\": \"direct_content\",\n                    \"content\": \"Performance test content for LinkedIn\",\n                    \"ready_for_publication\": True,\n                    \"processing_time\": 1.0,",
          "values": {
            "strings": [
              "linkedin",
              "type",
              "direct_content",
              "content",
              "Performance test content for LinkedIn",
              "ready_for_publication",
              "processing_time"
            ],
            "numbers": [
              1,
              0
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 404,
          "snippet": "            },\n            \"platforms\": {\n                \"twitter\": {\"enabled\": True},\n                \"ghost\": {\"enabled\": True},\n                \"linkedin\": {\"enabled\": True, \"direct_content\": True}",
          "values": {
            "strings": [
              "platforms",
              "twitter",
              "enabled",
              "ghost",
              "enabled",
              "linkedin",
              "enabled",
              "direct_content"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 405,
          "snippet": "            \"platforms\": {\n                \"twitter\": {\"enabled\": True},\n                \"ghost\": {\"enabled\": True},\n                \"linkedin\": {\"enabled\": True, \"direct_content\": True}\n            }",
          "values": {
            "strings": [
              "platforms",
              "twitter",
              "enabled",
              "ghost",
              "enabled",
              "linkedin",
              "enabled",
              "direct_content"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 406,
          "snippet": "                \"twitter\": {\"enabled\": True},\n                \"ghost\": {\"enabled\": True},\n                \"linkedin\": {\"enabled\": True, \"direct_content\": True}\n            }\n        }",
          "values": {
            "strings": [
              "twitter",
              "enabled",
              "ghost",
              "enabled",
              "linkedin",
              "enabled",
              "direct_content"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 520,
          "snippet": "                },\n                \"platforms\": {\n                    \"twitter\": {\"enabled\": True},\n                    \"linkedin\": {\"enabled\": True, \"direct_content\": True}\n                }",
          "values": {
            "strings": [
              "platforms",
              "twitter",
              "enabled",
              "linkedin",
              "enabled",
              "direct_content"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 521,
          "snippet": "                \"platforms\": {\n                    \"twitter\": {\"enabled\": True},\n                    \"linkedin\": {\"enabled\": True, \"direct_content\": True}\n                }\n            }",
          "values": {
            "strings": [
              "platforms",
              "twitter",
              "enabled",
              "linkedin",
              "enabled",
              "direct_content"
            ],
            "numbers": []
          }
        },
        {
          "type": "required_elements",
          "platform": "universal",
          "line": 546,
          "snippet": "                    failed_requests.append(f\"HTTP {status_code}: {data}\")\n        \n        # All requests should succeed (>80% success rate required)\n        success_rate = len(successful_requests) / len(results) * 100\n        assert success_rate >= 80, f\"Success rate {success_rate:.1f}% below 80% threshold\"",
          "values": {
            "strings": [
              "HTTP {status_code}: {data}",
              "Success rate {success_rate:.1f}% below 80% threshold"
            ],
            "numbers": [
              80,
              100,
              80,
              1,
              80
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "twitter",
          "line": 634,
          "snippet": "            {\"topic\": {}},  # Missing topic fields\n            {\"topic\": {\"title\": \"Test\"}, \"platforms\": {}},  # Empty platforms\n            {\"topic\": {\"title\": \"\"}, \"platforms\": {\"twitter\": {\"enabled\": True}}},  # Empty title\n        ]\n        ",
          "values": {
            "strings": [
              "topic",
              "topic",
              "title",
              "Test",
              "platforms",
              "topic",
              "title",
              "}, ",
              ": {",
              ": {"
            ],
            "numbers": []
          }
        }
      ]
    },
    {
      "file": "/Users/hretheum/dev/bezrobocie/vector-wave/publisher/tests/integration/test_enhanced_pipeline_standalone.py",
      "exists": true,
      "hits": [
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 25,
          "snippet": "        \"\"\"Test enhanced publication request validation and structure\"\"\"\n        \n        # Valid LinkedIn carousel request\n        linkedin_carousel_request = {\n            \"topic\": {",
          "values": {
            "strings": [
              "Test enhanced publication request validation and structure",
              "\n        \n        # Valid LinkedIn carousel request\n        linkedin_carousel_request = {\n            "
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 26,
          "snippet": "        \n        # Valid LinkedIn carousel request\n        linkedin_carousel_request = {\n            \"topic\": {\n                \"title\": \"Future of Remote Work\",",
          "values": {
            "strings": [
              "topic",
              "title",
              "Future of Remote Work"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 34,
          "snippet": "            },\n            \"platforms\": {\n                \"linkedin\": {\n                    \"enabled\": True,\n                    \"direct_content\": False,  # Use Presenton",
          "values": {
            "strings": [
              "platforms",
              "linkedin",
              "enabled",
              "direct_content"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 46,
          "snippet": "        \n        # Validate request structure\n        assert \"topic\" in linkedin_carousel_request\n        assert \"platforms\" in linkedin_carousel_request\n        ",
          "values": {
            "strings": [
              "topic",
              "platforms"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 47,
          "snippet": "        # Validate request structure\n        assert \"topic\" in linkedin_carousel_request\n        assert \"platforms\" in linkedin_carousel_request\n        \n        topic = linkedin_carousel_request[\"topic\"]",
          "values": {
            "strings": [
              "topic",
              "platforms",
              "topic"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 49,
          "snippet": "        assert \"platforms\" in linkedin_carousel_request\n        \n        topic = linkedin_carousel_request[\"topic\"]\n        assert len(topic[\"title\"]) > 0\n        assert len(topic[\"description\"]) > 0",
          "values": {
            "strings": [
              "platforms",
              "topic",
              "title",
              "description"
            ],
            "numbers": [
              0,
              0
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 54,
          "snippet": "        assert isinstance(topic[\"keywords\"], list)\n        \n        linkedin_config = linkedin_carousel_request[\"platforms\"][\"linkedin\"]\n        assert linkedin_config[\"enabled\"] is True\n        assert linkedin_config[\"direct_content\"] is False  # Forces Presenton usage",
          "values": {
            "strings": [
              "keywords",
              "platforms",
              "linkedin",
              "enabled",
              "direct_content"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 55,
          "snippet": "        \n        linkedin_config = linkedin_carousel_request[\"platforms\"][\"linkedin\"]\n        assert linkedin_config[\"enabled\"] is True\n        assert linkedin_config[\"direct_content\"] is False  # Forces Presenton usage\n        assert linkedin_config[\"slides_count\"] == 5",
          "values": {
            "strings": [
              "platforms",
              "linkedin",
              "enabled",
              "direct_content",
              "slides_count"
            ],
            "numbers": [
              5
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 56,
          "snippet": "        linkedin_config = linkedin_carousel_request[\"platforms\"][\"linkedin\"]\n        assert linkedin_config[\"enabled\"] is True\n        assert linkedin_config[\"direct_content\"] is False  # Forces Presenton usage\n        assert linkedin_config[\"slides_count\"] == 5\n        assert linkedin_config[\"template\"] == \"business\"",
          "values": {
            "strings": [
              "platforms",
              "linkedin",
              "enabled",
              "direct_content",
              "slides_count",
              "template",
              "business"
            ],
            "numbers": [
              5
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 57,
          "snippet": "        assert linkedin_config[\"enabled\"] is True\n        assert linkedin_config[\"direct_content\"] is False  # Forces Presenton usage\n        assert linkedin_config[\"slides_count\"] == 5\n        assert linkedin_config[\"template\"] == \"business\"\n    ",
          "values": {
            "strings": [
              "enabled",
              "direct_content",
              "slides_count",
              "template",
              "business"
            ],
            "numbers": [
              5
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 58,
          "snippet": "        assert linkedin_config[\"direct_content\"] is False  # Forces Presenton usage\n        assert linkedin_config[\"slides_count\"] == 5\n        assert linkedin_config[\"template\"] == \"business\"\n    \n    def test_multi_platform_request_structure(self):",
          "values": {
            "strings": [
              "direct_content",
              "slides_count",
              "template",
              "business"
            ],
            "numbers": [
              5
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 70,
          "snippet": "            },\n            \"platforms\": {\n                \"twitter\": {\"enabled\": True, \"direct_content\": True},\n                \"ghost\": {\"enabled\": True, \"direct_content\": True},\n                \"linkedin\": {\"enabled\": True, \"direct_content\": True}  # Direct, not carousel",
          "values": {
            "strings": [
              "platforms",
              "twitter",
              "enabled",
              "direct_content",
              "ghost",
              "enabled",
              "direct_content",
              "linkedin",
              "enabled",
              "direct_content"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 71,
          "snippet": "            \"platforms\": {\n                \"twitter\": {\"enabled\": True, \"direct_content\": True},\n                \"ghost\": {\"enabled\": True, \"direct_content\": True},\n                \"linkedin\": {\"enabled\": True, \"direct_content\": True}  # Direct, not carousel\n            }",
          "values": {
            "strings": [
              "platforms",
              "twitter",
              "enabled",
              "direct_content",
              "ghost",
              "enabled",
              "direct_content",
              "linkedin",
              "enabled",
              "direct_content"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 72,
          "snippet": "                \"twitter\": {\"enabled\": True, \"direct_content\": True},\n                \"ghost\": {\"enabled\": True, \"direct_content\": True},\n                \"linkedin\": {\"enabled\": True, \"direct_content\": True}  # Direct, not carousel\n            }\n        }",
          "values": {
            "strings": [
              "twitter",
              "enabled",
              "direct_content",
              "ghost",
              "enabled",
              "direct_content",
              "linkedin",
              "enabled",
              "direct_content"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 99,
          "snippet": "            },\n            \"platforms\": {\n                \"linkedin\": {\n                    \"enabled\": True,\n                    \"direct_content\": False,  # Use Presenton",
          "values": {
            "strings": [
              "platforms",
              "linkedin",
              "enabled",
              "direct_content"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "twitter",
          "line": 105,
          "snippet": "                    \"template\": \"business\"\n                },\n                \"twitter\": {\n                    \"enabled\": True,\n                    \"direct_content\": True",
          "values": {
            "strings": [
              "template",
              "business",
              "twitter",
              "enabled",
              "direct_content"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 116,
          "snippet": "        \n        assert \"platform_content\" in ai_flow_result\n        assert \"linkedin\" in ai_flow_result[\"platform_content\"]\n        assert \"twitter\" in ai_flow_result[\"platform_content\"]\n        ",
          "values": {
            "strings": [
              "platform_content",
              "linkedin",
              "platform_content",
              "twitter",
              "platform_content"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 117,
          "snippet": "        assert \"platform_content\" in ai_flow_result\n        assert \"linkedin\" in ai_flow_result[\"platform_content\"]\n        assert \"twitter\" in ai_flow_result[\"platform_content\"]\n        \n        linkedin_content = ai_flow_result[\"platform_content\"][\"linkedin\"]",
          "values": {
            "strings": [
              "platform_content",
              "linkedin",
              "platform_content",
              "twitter",
              "platform_content",
              "platform_content",
              "linkedin"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 119,
          "snippet": "        assert \"twitter\" in ai_flow_result[\"platform_content\"]\n        \n        linkedin_content = ai_flow_result[\"platform_content\"][\"linkedin\"]\n        assert linkedin_content[\"ready_for_presenton\"] is True\n        ",
          "values": {
            "strings": [
              "twitter",
              "platform_content",
              "platform_content",
              "linkedin",
              "ready_for_presenton"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 120,
          "snippet": "        \n        linkedin_content = ai_flow_result[\"platform_content\"][\"linkedin\"]\n        assert linkedin_content[\"ready_for_presenton\"] is True\n        \n        twitter_content = ai_flow_result[\"platform_content\"][\"twitter\"]",
          "values": {
            "strings": [
              "platform_content",
              "linkedin",
              "ready_for_presenton",
              "platform_content",
              "twitter"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 122,
          "snippet": "        assert linkedin_content[\"ready_for_presenton\"] is True\n        \n        twitter_content = ai_flow_result[\"platform_content\"][\"twitter\"]\n        assert twitter_content[\"ready_for_presenton\"] is False\n        ",
          "values": {
            "strings": [
              "ready_for_presenton",
              "platform_content",
              "twitter",
              "ready_for_presenton"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 123,
          "snippet": "        \n        twitter_content = ai_flow_result[\"platform_content\"][\"twitter\"]\n        assert twitter_content[\"ready_for_presenton\"] is False\n        \n        # Step 3: Simulate Presenton Processing (for LinkedIn)",
          "values": {
            "strings": [
              "platform_content",
              "twitter",
              "ready_for_presenton"
            ],
            "numbers": [
              3
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 125,
          "snippet": "        assert twitter_content[\"ready_for_presenton\"] is False\n        \n        # Step 3: Simulate Presenton Processing (for LinkedIn)\n        presenton_result = await self._simulate_presenton_processing(linkedin_content)\n        ",
          "values": {
            "strings": [
              "ready_for_presenton"
            ],
            "numbers": [
              3
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 126,
          "snippet": "        \n        # Step 3: Simulate Presenton Processing (for LinkedIn)\n        presenton_result = await self._simulate_presenton_processing(linkedin_content)\n        \n        assert \"presentation_id\" in presenton_result",
          "values": {
            "strings": [
              "presentation_id"
            ],
            "numbers": [
              3
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 134,
          "snippet": "        # Step 4: Simulate Final Content Processing Result\n        final_result = await self._simulate_content_processing_result(\n            request_data, ai_flow_result, {\"linkedin\": presenton_result}\n        )\n        ",
          "values": {
            "strings": [
              "linkedin"
            ],
            "numbers": [
              4
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 141,
          "snippet": "        assert len(final_result[\"platforms\"]) == 2\n        \n        # LinkedIn should be presenton_carousel\n        linkedin_result = final_result[\"platforms\"][\"linkedin\"]\n        assert linkedin_result[\"type\"] == \"presenton_carousel\"",
          "values": {
            "strings": [
              "platforms",
              "platforms",
              "linkedin",
              "type",
              "presenton_carousel"
            ],
            "numbers": [
              2
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 142,
          "snippet": "        \n        # LinkedIn should be presenton_carousel\n        linkedin_result = final_result[\"platforms\"][\"linkedin\"]\n        assert linkedin_result[\"type\"] == \"presenton_carousel\"\n        assert linkedin_result[\"ready_for_publication\"] is True",
          "values": {
            "strings": [
              "platforms",
              "linkedin",
              "type",
              "presenton_carousel",
              "ready_for_publication"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 143,
          "snippet": "        # LinkedIn should be presenton_carousel\n        linkedin_result = final_result[\"platforms\"][\"linkedin\"]\n        assert linkedin_result[\"type\"] == \"presenton_carousel\"\n        assert linkedin_result[\"ready_for_publication\"] is True\n        assert linkedin_result[\"presentation_id\"] == presenton_result[\"presentation_id\"]",
          "values": {
            "strings": [
              "platforms",
              "linkedin",
              "type",
              "presenton_carousel",
              "ready_for_publication",
              "presentation_id",
              "presentation_id"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 144,
          "snippet": "        linkedin_result = final_result[\"platforms\"][\"linkedin\"]\n        assert linkedin_result[\"type\"] == \"presenton_carousel\"\n        assert linkedin_result[\"ready_for_publication\"] is True\n        assert linkedin_result[\"presentation_id\"] == presenton_result[\"presentation_id\"]\n        ",
          "values": {
            "strings": [
              "platforms",
              "linkedin",
              "type",
              "presenton_carousel",
              "ready_for_publication",
              "presentation_id",
              "presentation_id"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 145,
          "snippet": "        assert linkedin_result[\"type\"] == \"presenton_carousel\"\n        assert linkedin_result[\"ready_for_publication\"] is True\n        assert linkedin_result[\"presentation_id\"] == presenton_result[\"presentation_id\"]\n        \n        # Twitter should be direct_content",
          "values": {
            "strings": [
              "type",
              "presenton_carousel",
              "ready_for_publication",
              "presentation_id",
              "presentation_id"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 147,
          "snippet": "        assert linkedin_result[\"presentation_id\"] == presenton_result[\"presentation_id\"]\n        \n        # Twitter should be direct_content\n        twitter_result = final_result[\"platforms\"][\"twitter\"]\n        assert twitter_result[\"type\"] == \"direct_content\"",
          "values": {
            "strings": [
              "presentation_id",
              "presentation_id",
              "platforms",
              "twitter",
              "type",
              "direct_content"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "twitter",
          "line": 148,
          "snippet": "        \n        # Twitter should be direct_content\n        twitter_result = final_result[\"platforms\"][\"twitter\"]\n        assert twitter_result[\"type\"] == \"direct_content\"\n        assert twitter_result[\"ready_for_publication\"] is True",
          "values": {
            "strings": [
              "platforms",
              "twitter",
              "type",
              "direct_content",
              "ready_for_publication"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "twitter",
          "line": 149,
          "snippet": "        # Twitter should be direct_content\n        twitter_result = final_result[\"platforms\"][\"twitter\"]\n        assert twitter_result[\"type\"] == \"direct_content\"\n        assert twitter_result[\"ready_for_publication\"] is True\n        ",
          "values": {
            "strings": [
              "platforms",
              "twitter",
              "type",
              "direct_content",
              "ready_for_publication"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "twitter",
          "line": 150,
          "snippet": "        twitter_result = final_result[\"platforms\"][\"twitter\"]\n        assert twitter_result[\"type\"] == \"direct_content\"\n        assert twitter_result[\"ready_for_publication\"] is True\n        \n        # Enhanced features should be correctly tracked",
          "values": {
            "strings": [
              "platforms",
              "twitter",
              "type",
              "direct_content",
              "ready_for_publication"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 164,
          "snippet": "            \"topic\": {\"title\": \"Test\", \"description\": \"Invalid test\"},\n            \"platforms\": {\n                \"linkedin\": {\n                    \"enabled\": True,\n                    \"direct_content\": False,",
          "values": {
            "strings": [
              "topic",
              "title",
              "Test",
              "description",
              "Invalid test",
              "platforms",
              "linkedin",
              "enabled",
              "direct_content"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 176,
          "snippet": "        ai_flow_result = {\n            \"platform_content\": {\n                \"linkedin\": {\n                    \"content\": \"Test LinkedIn prompt\",\n                    \"ready_for_presenton\": True,",
          "values": {
            "strings": [
              "platform_content",
              "linkedin",
              "content",
              "Test LinkedIn prompt",
              "ready_for_presenton"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 177,
          "snippet": "            \"platform_content\": {\n                \"linkedin\": {\n                    \"content\": \"Test LinkedIn prompt\",\n                    \"ready_for_presenton\": True,\n                    \"quality_score\": 7.0",
          "values": {
            "strings": [
              "platform_content",
              "linkedin",
              "content",
              "Test LinkedIn prompt",
              "ready_for_presenton",
              "quality_score"
            ],
            "numbers": [
              7,
              0
            ]
          }
        },
        {
          "type": "required_elements",
          "platform": "universal",
          "line": 186,
          "snippet": "        # Simulate Presenton failure\n        presenton_error = {\n            \"error\": \"Invalid slides count (50) - must be between 1 and 20\",\n            \"failed_at\": time.time()\n        }",
          "values": {
            "strings": [
              "error",
              "Invalid slides count (50) - must be between 1 and 20",
              "failed_at"
            ],
            "numbers": [
              50,
              1,
              20
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 194,
          "snippet": "            \"publication_id\": \"pub_error_test_001\",\n            \"platforms\": {\n                \"linkedin\": {\n                    \"type\": \"error\",\n                    \"error\": presenton_error[\"error\"],",
          "values": {
            "strings": [
              "publication_id",
              "pub_error_test_001",
              "platforms",
              "linkedin",
              "type",
              "error",
              "error",
              "error"
            ],
            "numbers": [
              1
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 213,
          "snippet": "        # Validate error handling\n        assert final_result[\"ready_for_publication\"] is False\n        assert final_result[\"platforms\"][\"linkedin\"][\"type\"] == \"error\"\n        assert \"Invalid slides count\" in final_result[\"platforms\"][\"linkedin\"][\"error\"]\n    ",
          "values": {
            "strings": [
              "ready_for_publication",
              "platforms",
              "linkedin",
              "type",
              "error",
              "Invalid slides count",
              "platforms",
              "linkedin",
              "error"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 214,
          "snippet": "        assert final_result[\"ready_for_publication\"] is False\n        assert final_result[\"platforms\"][\"linkedin\"][\"type\"] == \"error\"\n        assert \"Invalid slides count\" in final_result[\"platforms\"][\"linkedin\"][\"error\"]\n    \n    def test_performance_requirements_validation(self):",
          "values": {
            "strings": [
              "ready_for_publication",
              "platforms",
              "linkedin",
              "type",
              "error",
              "Invalid slides count",
              "platforms",
              "linkedin",
              "error"
            ],
            "numbers": []
          }
        },
        {
          "type": "required_elements",
          "platform": "linkedin",
          "line": 216,
          "snippet": "        assert \"Invalid slides count\" in final_result[\"platforms\"][\"linkedin\"][\"error\"]\n    \n    def test_performance_requirements_validation(self):\n        \"\"\"Test performance requirements are properly defined\"\"\"\n        ",
          "values": {
            "strings": [
              "Invalid slides count",
              "platforms",
              "linkedin",
              "error",
              "Test performance requirements are properly defined"
            ],
            "numbers": []
          }
        },
        {
          "type": "required_elements",
          "platform": "universal",
          "line": 217,
          "snippet": "    \n    def test_performance_requirements_validation(self):\n        \"\"\"Test performance requirements are properly defined\"\"\"\n        \n        # Performance targets from specification",
          "values": {
            "strings": [
              "Test performance requirements are properly defined"
            ],
            "numbers": []
          }
        },
        {
          "type": "required_elements",
          "platform": "universal",
          "line": 220,
          "snippet": "        \n        # Performance targets from specification\n        performance_requirements = {\n            \"api_response_time_max\": 5.0,  # seconds\n            \"direct_content_processing_max\": 120.0,  # seconds  ",
          "values": {
            "strings": [
              "api_response_time_max",
              "direct_content_processing_max"
            ],
            "numbers": [
              5,
              0,
              120,
              0
            ]
          }
        },
        {
          "type": "required_elements",
          "platform": "universal",
          "line": 229,
          "snippet": "        }\n        \n        # Test that all requirements are reasonable\n        assert performance_requirements[\"api_response_time_max\"] <= 10.0\n        assert performance_requirements[\"direct_content_processing_max\"] <= 180.0",
          "values": {
            "strings": [
              "api_response_time_max",
              "direct_content_processing_max"
            ],
            "numbers": [
              10,
              0,
              180,
              0
            ]
          }
        },
        {
          "type": "required_elements",
          "platform": "universal",
          "line": 230,
          "snippet": "        \n        # Test that all requirements are reasonable\n        assert performance_requirements[\"api_response_time_max\"] <= 10.0\n        assert performance_requirements[\"direct_content_processing_max\"] <= 180.0\n        assert performance_requirements[\"concurrent_requests_min\"] >= 5",
          "values": {
            "strings": [
              "api_response_time_max",
              "direct_content_processing_max",
              "concurrent_requests_min"
            ],
            "numbers": [
              10,
              0,
              180,
              0,
              5
            ]
          }
        },
        {
          "type": "required_elements",
          "platform": "universal",
          "line": 231,
          "snippet": "        # Test that all requirements are reasonable\n        assert performance_requirements[\"api_response_time_max\"] <= 10.0\n        assert performance_requirements[\"direct_content_processing_max\"] <= 180.0\n        assert performance_requirements[\"concurrent_requests_min\"] >= 5\n        assert performance_requirements[\"success_rate_min\"] >= 70.0",
          "values": {
            "strings": [
              "api_response_time_max",
              "direct_content_processing_max",
              "concurrent_requests_min",
              "success_rate_min"
            ],
            "numbers": [
              10,
              0,
              180,
              0,
              5,
              70,
              0
            ]
          }
        },
        {
          "type": "required_elements",
          "platform": "universal",
          "line": 232,
          "snippet": "        assert performance_requirements[\"api_response_time_max\"] <= 10.0\n        assert performance_requirements[\"direct_content_processing_max\"] <= 180.0\n        assert performance_requirements[\"concurrent_requests_min\"] >= 5\n        assert performance_requirements[\"success_rate_min\"] >= 70.0\n        ",
          "values": {
            "strings": [
              "api_response_time_max",
              "direct_content_processing_max",
              "concurrent_requests_min",
              "success_rate_min"
            ],
            "numbers": [
              10,
              0,
              180,
              0,
              5,
              70,
              0
            ]
          }
        },
        {
          "type": "required_elements",
          "platform": "universal",
          "line": 233,
          "snippet": "        assert performance_requirements[\"direct_content_processing_max\"] <= 180.0\n        assert performance_requirements[\"concurrent_requests_min\"] >= 5\n        assert performance_requirements[\"success_rate_min\"] >= 70.0\n        \n        # Mock performance metrics",
          "values": {
            "strings": [
              "direct_content_processing_max",
              "concurrent_requests_min",
              "success_rate_min"
            ],
            "numbers": [
              180,
              0,
              5,
              70,
              0
            ]
          }
        },
        {
          "type": "required_elements",
          "platform": "universal",
          "line": 245,
          "snippet": "        }\n        \n        # Validate against requirements\n        assert mock_metrics[\"api_response_time\"] < performance_requirements[\"api_response_time_max\"]\n        assert mock_metrics[\"direct_content_processing_time\"] < performance_requirements[\"direct_content_processing_max\"]",
          "values": {
            "strings": [
              "api_response_time",
              "api_response_time_max",
              "direct_content_processing_time",
              "direct_content_processing_max"
            ],
            "numbers": []
          }
        },
        {
          "type": "required_elements",
          "platform": "universal",
          "line": 246,
          "snippet": "        \n        # Validate against requirements\n        assert mock_metrics[\"api_response_time\"] < performance_requirements[\"api_response_time_max\"]\n        assert mock_metrics[\"direct_content_processing_time\"] < performance_requirements[\"direct_content_processing_max\"]\n        assert mock_metrics[\"presenton_generation_time\"] < performance_requirements[\"presenton_generation_max\"]",
          "values": {
            "strings": [
              "api_response_time",
              "api_response_time_max",
              "direct_content_processing_time",
              "direct_content_processing_max",
              "presenton_generation_time",
              "presenton_generation_max"
            ],
            "numbers": []
          }
        },
        {
          "type": "required_elements",
          "platform": "universal",
          "line": 247,
          "snippet": "        # Validate against requirements\n        assert mock_metrics[\"api_response_time\"] < performance_requirements[\"api_response_time_max\"]\n        assert mock_metrics[\"direct_content_processing_time\"] < performance_requirements[\"direct_content_processing_max\"]\n        assert mock_metrics[\"presenton_generation_time\"] < performance_requirements[\"presenton_generation_max\"]\n        assert mock_metrics[\"image_processing_time\"] < performance_requirements[\"image_processing_max\"]",
          "values": {
            "strings": [
              "api_response_time",
              "api_response_time_max",
              "direct_content_processing_time",
              "direct_content_processing_max",
              "presenton_generation_time",
              "presenton_generation_max",
              "image_processing_time",
              "image_processing_max"
            ],
            "numbers": []
          }
        },
        {
          "type": "required_elements",
          "platform": "universal",
          "line": 248,
          "snippet": "        assert mock_metrics[\"api_response_time\"] < performance_requirements[\"api_response_time_max\"]\n        assert mock_metrics[\"direct_content_processing_time\"] < performance_requirements[\"direct_content_processing_max\"]\n        assert mock_metrics[\"presenton_generation_time\"] < performance_requirements[\"presenton_generation_max\"]\n        assert mock_metrics[\"image_processing_time\"] < performance_requirements[\"image_processing_max\"]\n        assert mock_metrics[\"concurrent_requests_handled\"] >= performance_requirements[\"concurrent_requests_min\"]",
          "values": {
            "strings": [
              "api_response_time",
              "api_response_time_max",
              "direct_content_processing_time",
              "direct_content_processing_max",
              "presenton_generation_time",
              "presenton_generation_max",
              "image_processing_time",
              "image_processing_max",
              "concurrent_requests_handled",
              "concurrent_requests_min"
            ],
            "numbers": []
          }
        },
        {
          "type": "required_elements",
          "platform": "universal",
          "line": 249,
          "snippet": "        assert mock_metrics[\"direct_content_processing_time\"] < performance_requirements[\"direct_content_processing_max\"]\n        assert mock_metrics[\"presenton_generation_time\"] < performance_requirements[\"presenton_generation_max\"]\n        assert mock_metrics[\"image_processing_time\"] < performance_requirements[\"image_processing_max\"]\n        assert mock_metrics[\"concurrent_requests_handled\"] >= performance_requirements[\"concurrent_requests_min\"]\n        assert mock_metrics[\"success_rate\"] >= performance_requirements[\"success_rate_min\"]",
          "values": {
            "strings": [
              "direct_content_processing_time",
              "direct_content_processing_max",
              "presenton_generation_time",
              "presenton_generation_max",
              "image_processing_time",
              "image_processing_max",
              "concurrent_requests_handled",
              "concurrent_requests_min",
              "success_rate",
              "success_rate_min"
            ],
            "numbers": []
          }
        },
        {
          "type": "required_elements",
          "platform": "universal",
          "line": 250,
          "snippet": "        assert mock_metrics[\"presenton_generation_time\"] < performance_requirements[\"presenton_generation_max\"]\n        assert mock_metrics[\"image_processing_time\"] < performance_requirements[\"image_processing_max\"]\n        assert mock_metrics[\"concurrent_requests_handled\"] >= performance_requirements[\"concurrent_requests_min\"]\n        assert mock_metrics[\"success_rate\"] >= performance_requirements[\"success_rate_min\"]\n    ",
          "values": {
            "strings": [
              "presenton_generation_time",
              "presenton_generation_max",
              "image_processing_time",
              "image_processing_max",
              "concurrent_requests_handled",
              "concurrent_requests_min",
              "success_rate",
              "success_rate_min"
            ],
            "numbers": []
          }
        },
        {
          "type": "required_elements",
          "platform": "universal",
          "line": 251,
          "snippet": "        assert mock_metrics[\"image_processing_time\"] < performance_requirements[\"image_processing_max\"]\n        assert mock_metrics[\"concurrent_requests_handled\"] >= performance_requirements[\"concurrent_requests_min\"]\n        assert mock_metrics[\"success_rate\"] >= performance_requirements[\"success_rate_min\"]\n    \n    def test_enhanced_publish_response_structure(self):",
          "values": {
            "strings": [
              "image_processing_time",
              "image_processing_max",
              "concurrent_requests_handled",
              "concurrent_requests_min",
              "success_rate",
              "success_rate_min"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 260,
          "snippet": "            \"publication_id\": \"pub_enhanced_test_001\",\n            \"platform_jobs\": {\n                \"linkedin\": \"linkedin_enhanced_job_abc123\",\n                \"twitter\": \"twitter_enhanced_job_def456\"\n            },",
          "values": {
            "strings": [
              "publication_id",
              "pub_enhanced_test_001",
              "platform_jobs",
              "linkedin",
              "linkedin_enhanced_job_abc123",
              "twitter",
              "twitter_enhanced_job_def456"
            ],
            "numbers": [
              1,
              123,
              456
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 261,
          "snippet": "            \"platform_jobs\": {\n                \"linkedin\": \"linkedin_enhanced_job_abc123\",\n                \"twitter\": \"twitter_enhanced_job_def456\"\n            },\n            \"processing_time\": 3.8,",
          "values": {
            "strings": [
              "platform_jobs",
              "linkedin",
              "linkedin_enhanced_job_abc123",
              "twitter",
              "twitter_enhanced_job_def456",
              "processing_time"
            ],
            "numbers": [
              123,
              456,
              3,
              8
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 273,
          "snippet": "            \"errors\": None,\n            \"content_summary\": {\n                \"linkedin\": {\n                    \"type\": \"presenton_carousel\",\n                    \"content_length\": 247,",
          "values": {
            "strings": [
              "errors",
              "content_summary",
              "linkedin",
              "type",
              "presenton_carousel",
              "content_length"
            ],
            "numbers": [
              247
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 280,
          "snippet": "                    \"presentation_id\": \"pres_test_123\",\n                    \"slides_count\": 8,\n                    \"ready_for_linkedin\": True\n                },\n                \"twitter\": {",
          "values": {
            "strings": [
              "presentation_id",
              "pres_test_123",
              "slides_count",
              "ready_for_linkedin",
              "twitter"
            ],
            "numbers": [
              123,
              8
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 282,
          "snippet": "                    \"ready_for_linkedin\": True\n                },\n                \"twitter\": {\n                    \"type\": \"direct_content\",\n                    \"content_length\": 156,",
          "values": {
            "strings": [
              "ready_for_linkedin",
              "twitter",
              "type",
              "direct_content",
              "content_length"
            ],
            "numbers": [
              156
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 330,
          "snippet": "                },\n                \"platforms\": {\n                    \"twitter\": {\"enabled\": True},\n                    \"linkedin\": {\"enabled\": True, \"direct_content\": True}\n                },",
          "values": {
            "strings": [
              "platforms",
              "twitter",
              "enabled",
              "linkedin",
              "enabled",
              "direct_content"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 331,
          "snippet": "                \"platforms\": {\n                    \"twitter\": {\"enabled\": True},\n                    \"linkedin\": {\"enabled\": True, \"direct_content\": True}\n                },\n                \"submitted_at\": time.time() + (i * 0.1)  # Staggered submission",
          "values": {
            "strings": [
              "platforms",
              "twitter",
              "enabled",
              "linkedin",
              "enabled",
              "direct_content",
              "submitted_at"
            ],
            "numbers": [
              0,
              1
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 380,
          "snippet": "                continue\n            \n            if platform == \"linkedin\" and not config.get(\"direct_content\", True):\n                # LinkedIn with Presenton\n                content = {",
          "values": {
            "strings": [
              "linkedin",
              "direct_content"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 381,
          "snippet": "            \n            if platform == \"linkedin\" and not config.get(\"direct_content\", True):\n                # LinkedIn with Presenton\n                content = {\n                    \"content\": f\"Create comprehensive LinkedIn carousel about {request_data['topic']['title']}...\",",
          "values": {
            "strings": [
              "linkedin",
              "direct_content",
              "content",
              "Create comprehensive LinkedIn carousel about {request_data[",
              "][",
              "]}..."
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 383,
          "snippet": "                # LinkedIn with Presenton\n                content = {\n                    \"content\": f\"Create comprehensive LinkedIn carousel about {request_data['topic']['title']}...\",\n                    \"ready_for_presenton\": True,\n                    \"quality_score\": 8.5,",
          "values": {
            "strings": [
              "content",
              "Create comprehensive LinkedIn carousel about {request_data[",
              "][",
              "]}...",
              "ready_for_presenton",
              "quality_score"
            ],
            "numbers": [
              8,
              5
            ]
          }
        }
      ]
    },
    {
      "file": "/Users/hretheum/dev/bezrobocie/vector-wave/publisher/grafana/provisioning/datasources/prometheus.yml",
      "exists": true,
      "hits": []
    },
    {
      "file": "/Users/hretheum/dev/bezrobocie/vector-wave/publisher/grafana/provisioning/alerting/alerting.yml",
      "exists": true,
      "hits": []
    },
    {
      "file": "/Users/hretheum/dev/bezrobocie/vector-wave/publisher/grafana/provisioning/alerting/mcp-alerts.yml",
      "exists": true,
      "hits": []
    },
    {
      "file": "/Users/hretheum/dev/bezrobocie/vector-wave/publisher/grafana/provisioning/dashboards/publisher.yml",
      "exists": true,
      "hits": []
    },
    {
      "file": "/Users/hretheum/dev/bezrobocie/vector-wave/publisher/grafana/dashboards/multi-channel-publisher-comprehensive.json",
      "exists": true,
      "hits": [
        {
          "type": "required_elements",
          "platform": "universal",
          "line": 23,
          "snippet": "      \"asDropdown\": false,\n      \"icon\": \"external link\",\n      \"includeVars\": false,\n      \"keepTime\": false,\n      \"tags\": [],",
          "values": {
            "strings": [
              "asDropdown",
              "icon",
              "external link",
              "includeVars",
              "keepTime",
              "tags"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 364,
          "snippet": "            \"uid\": \"PBFA97CFB590B2093\"\n          },\n          \"expr\": \"ghost_api_response_time_ms\",\n          \"legendFormat\": \"Ghost API\",\n          \"refId\": \"A\"",
          "values": {
            "strings": [
              "uid",
              "PBFA97CFB590B2093",
              "expr",
              "ghost_api_response_time_ms",
              "legendFormat",
              "Ghost API",
              "refId"
            ],
            "numbers": [
              97,
              590,
              2093
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 365,
          "snippet": "          },\n          \"expr\": \"ghost_api_response_time_ms\",\n          \"legendFormat\": \"Ghost API\",\n          \"refId\": \"A\"\n        }",
          "values": {
            "strings": [
              "expr",
              "ghost_api_response_time_ms",
              "legendFormat",
              "Ghost API",
              "refId"
            ],
            "numbers": []
          }
        },
        {
          "type": "forbidden_phrases",
          "platform": "universal",
          "line": 401,
          "snippet": "              \"type\": \"linear\"\n            },\n            \"showPoints\": \"never\",\n            \"spanNulls\": false,\n            \"stacking\": {",
          "values": {
            "strings": [
              "type",
              "linear",
              "showPoints",
              "never",
              "spanNulls",
              "stacking"
            ],
            "numbers": []
          }
        },
        {
          "type": "forbidden_phrases",
          "platform": "universal",
          "line": 506,
          "snippet": "              \"type\": \"linear\"\n            },\n            \"showPoints\": \"never\",\n            \"spanNulls\": false,\n            \"stacking\": {",
          "values": {
            "strings": [
              "type",
              "linear",
              "showPoints",
              "never",
              "spanNulls",
              "stacking"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "twitter",
          "line": 567,
          "snippet": "            \"uid\": \"PBFA97CFB590B2093\"\n          },\n          \"expr\": \"rate(twitter_publications_total[5m])\",\n          \"legendFormat\": \"Twitter - {{status}}\",\n          \"refId\": \"B\"",
          "values": {
            "strings": [
              "uid",
              "PBFA97CFB590B2093",
              "expr",
              "rate(twitter_publications_total[5m])",
              "legendFormat",
              "Twitter - {{status}}",
              "refId"
            ],
            "numbers": [
              97,
              590,
              2093,
              5
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "twitter",
          "line": 568,
          "snippet": "          },\n          \"expr\": \"rate(twitter_publications_total[5m])\",\n          \"legendFormat\": \"Twitter - {{status}}\",\n          \"refId\": \"B\"\n        },",
          "values": {
            "strings": [
              "expr",
              "rate(twitter_publications_total[5m])",
              "legendFormat",
              "Twitter - {{status}}",
              "refId"
            ],
            "numbers": [
              5
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 576,
          "snippet": "            \"uid\": \"PBFA97CFB590B2093\"\n          },\n          \"expr\": \"rate(ghost_publications_total[5m])\",\n          \"legendFormat\": \"Ghost - {{status}}\",\n          \"refId\": \"C\"",
          "values": {
            "strings": [
              "uid",
              "PBFA97CFB590B2093",
              "expr",
              "rate(ghost_publications_total[5m])",
              "legendFormat",
              "Ghost - {{status}}",
              "refId"
            ],
            "numbers": [
              97,
              590,
              2093,
              5
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 577,
          "snippet": "          },\n          \"expr\": \"rate(ghost_publications_total[5m])\",\n          \"legendFormat\": \"Ghost - {{status}}\",\n          \"refId\": \"C\"\n        }",
          "values": {
            "strings": [
              "expr",
              "rate(ghost_publications_total[5m])",
              "legendFormat",
              "Ghost - {{status}}",
              "refId"
            ],
            "numbers": [
              5
            ]
          }
        },
        {
          "type": "forbidden_phrases",
          "platform": "universal",
          "line": 613,
          "snippet": "              \"type\": \"linear\"\n            },\n            \"showPoints\": \"never\",\n            \"spanNulls\": false,\n            \"stacking\": {",
          "values": {
            "strings": [
              "type",
              "linear",
              "showPoints",
              "never",
              "spanNulls",
              "stacking"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "twitter",
          "line": 665,
          "snippet": "            \"uid\": \"PBFA97CFB590B2093\"\n          },\n          \"expr\": \"rate(twitter_publication_duration_seconds_sum[5m]) / rate(twitter_publication_duration_seconds_count[5m])\",\n          \"legendFormat\": \"Twitter - {{type}}\",\n          \"refId\": \"A\"",
          "values": {
            "strings": [
              "uid",
              "PBFA97CFB590B2093",
              "expr",
              "rate(twitter_publication_duration_seconds_sum[5m]) / rate(twitter_publication_duration_seconds_count[5m])",
              "legendFormat",
              "Twitter - {{type}}",
              "refId"
            ],
            "numbers": [
              97,
              590,
              2093,
              5,
              5
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "twitter",
          "line": 666,
          "snippet": "          },\n          \"expr\": \"rate(twitter_publication_duration_seconds_sum[5m]) / rate(twitter_publication_duration_seconds_count[5m])\",\n          \"legendFormat\": \"Twitter - {{type}}\",\n          \"refId\": \"A\"\n        },",
          "values": {
            "strings": [
              "expr",
              "rate(twitter_publication_duration_seconds_sum[5m]) / rate(twitter_publication_duration_seconds_count[5m])",
              "legendFormat",
              "Twitter - {{type}}",
              "refId"
            ],
            "numbers": [
              5,
              5
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 674,
          "snippet": "            \"uid\": \"PBFA97CFB590B2093\"\n          },\n          \"expr\": \"rate(ghost_publication_duration_seconds_sum[5m]) / rate(ghost_publication_duration_seconds_count[5m])\",\n          \"legendFormat\": \"Ghost - {{operation}}\",\n          \"refId\": \"B\"",
          "values": {
            "strings": [
              "uid",
              "PBFA97CFB590B2093",
              "expr",
              "rate(ghost_publication_duration_seconds_sum[5m]) / rate(ghost_publication_duration_seconds_count[5m])",
              "legendFormat",
              "Ghost - {{operation}}",
              "refId"
            ],
            "numbers": [
              97,
              590,
              2093,
              5,
              5
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 675,
          "snippet": "          },\n          \"expr\": \"rate(ghost_publication_duration_seconds_sum[5m]) / rate(ghost_publication_duration_seconds_count[5m])\",\n          \"legendFormat\": \"Ghost - {{operation}}\",\n          \"refId\": \"B\"\n        }",
          "values": {
            "strings": [
              "expr",
              "rate(ghost_publication_duration_seconds_sum[5m]) / rate(ghost_publication_duration_seconds_count[5m])",
              "legendFormat",
              "Ghost - {{operation}}",
              "refId"
            ],
            "numbers": [
              5,
              5
            ]
          }
        },
        {
          "type": "forbidden_phrases",
          "platform": "universal",
          "line": 711,
          "snippet": "              \"type\": \"linear\"\n            },\n            \"showPoints\": \"never\",\n            \"spanNulls\": false,\n            \"stacking\": {",
          "values": {
            "strings": [
              "type",
              "linear",
              "showPoints",
              "never",
              "spanNulls",
              "stacking"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "twitter",
          "line": 772,
          "snippet": "            \"uid\": \"PBFA97CFB590B2093\"\n          },\n          \"expr\": \"rate(twitter_errors_total[5m])\",\n          \"legendFormat\": \"Twitter - {{error_code}}\",\n          \"refId\": \"B\"",
          "values": {
            "strings": [
              "uid",
              "PBFA97CFB590B2093",
              "expr",
              "rate(twitter_errors_total[5m])",
              "legendFormat",
              "Twitter - {{error_code}}",
              "refId"
            ],
            "numbers": [
              97,
              590,
              2093,
              5
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "twitter",
          "line": 773,
          "snippet": "          },\n          \"expr\": \"rate(twitter_errors_total[5m])\",\n          \"legendFormat\": \"Twitter - {{error_code}}\",\n          \"refId\": \"B\"\n        },",
          "values": {
            "strings": [
              "expr",
              "rate(twitter_errors_total[5m])",
              "legendFormat",
              "Twitter - {{error_code}}",
              "refId"
            ],
            "numbers": [
              5
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 781,
          "snippet": "            \"uid\": \"PBFA97CFB590B2093\"\n          },\n          \"expr\": \"rate(ghost_errors_total[5m])\",\n          \"legendFormat\": \"Ghost - {{error_type}}\",\n          \"refId\": \"C\"",
          "values": {
            "strings": [
              "uid",
              "PBFA97CFB590B2093",
              "expr",
              "rate(ghost_errors_total[5m])",
              "legendFormat",
              "Ghost - {{error_type}}",
              "refId"
            ],
            "numbers": [
              97,
              590,
              2093,
              5
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 782,
          "snippet": "          },\n          \"expr\": \"rate(ghost_errors_total[5m])\",\n          \"legendFormat\": \"Ghost - {{error_type}}\",\n          \"refId\": \"C\"\n        }",
          "values": {
            "strings": [
              "expr",
              "rate(ghost_errors_total[5m])",
              "legendFormat",
              "Ghost - {{error_type}}",
              "refId"
            ],
            "numbers": [
              5
            ]
          }
        },
        {
          "type": "forbidden_phrases",
          "platform": "universal",
          "line": 818,
          "snippet": "              \"type\": \"linear\"\n            },\n            \"showPoints\": \"never\",\n            \"spanNulls\": false,\n            \"stacking\": {",
          "values": {
            "strings": [
              "type",
              "linear",
              "showPoints",
              "never",
              "spanNulls",
              "stacking"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "twitter",
          "line": 999,
          "snippet": "            \"uid\": \"PBFA97CFB590B2093\"\n          },\n          \"expr\": \"twitter_adapter_health\",\n          \"format\": \"table\",\n          \"legendFormat\": \"\",",
          "values": {
            "strings": [
              "uid",
              "PBFA97CFB590B2093",
              "expr",
              "twitter_adapter_health",
              "format",
              "table",
              "legendFormat"
            ],
            "numbers": [
              97,
              590,
              2093
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 1009,
          "snippet": "            \"uid\": \"PBFA97CFB590B2093\"\n          },\n          \"expr\": \"ghost_adapter_health\",\n          \"format\": \"table\",\n          \"legendFormat\": \"\",",
          "values": {
            "strings": [
              "uid",
              "PBFA97CFB590B2093",
              "expr",
              "ghost_adapter_health",
              "format",
              "table",
              "legendFormat"
            ],
            "numbers": [
              97,
              590,
              2093
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "twitter",
          "line": 1158,
          "snippet": "            \"uid\": \"PBFA97CFB590B2093\"\n          },\n          \"expr\": \"twitter_typefully_rate_limit_hits_total\",\n          \"legendFormat\": \"Rate Limit Hits\",\n          \"refId\": \"D\"",
          "values": {
            "strings": [
              "uid",
              "PBFA97CFB590B2093",
              "expr",
              "twitter_typefully_rate_limit_hits_total",
              "legendFormat",
              "Rate Limit Hits",
              "refId"
            ],
            "numbers": [
              97,
              590,
              2093
            ]
          }
        }
      ]
    },
    {
      "file": "/Users/hretheum/dev/bezrobocie/vector-wave/publisher/grafana/dashboards/multi-channel-publisher.json",
      "exists": true,
      "hits": [
        {
          "type": "forbidden_phrases",
          "platform": "universal",
          "line": 46,
          "snippet": "              \"type\": \"linear\"\n            },\n            \"showPoints\": \"never\",\n            \"spanNulls\": true,\n            \"stacking\": {",
          "values": {
            "strings": [
              "type",
              "linear",
              "showPoints",
              "never",
              "spanNulls",
              "stacking"
            ],
            "numbers": []
          }
        },
        {
          "type": "forbidden_phrases",
          "platform": "universal",
          "line": 187,
          "snippet": "              \"type\": \"linear\"\n            },\n            \"showPoints\": \"never\",\n            \"spanNulls\": true,\n            \"stacking\": {",
          "values": {
            "strings": [
              "type",
              "linear",
              "showPoints",
              "never",
              "spanNulls",
              "stacking"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "twitter",
          "line": 241,
          "snippet": "        },\n        {\n          \"expr\": \"rate(twitter_publication_duration_seconds_sum[5m]) / rate(twitter_publication_duration_seconds_count[5m])\",\n          \"format\": \"time_series\",\n          \"intervalFactor\": 1,",
          "values": {
            "strings": [
              "expr",
              "rate(twitter_publication_duration_seconds_sum[5m]) / rate(twitter_publication_duration_seconds_count[5m])",
              "format",
              "time_series",
              "intervalFactor"
            ],
            "numbers": [
              5,
              5,
              1
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "twitter",
          "line": 244,
          "snippet": "          \"format\": \"time_series\",\n          \"intervalFactor\": 1,\n          \"legendFormat\": \"Twitter - {{type}}\",\n          \"refId\": \"B\"\n        },",
          "values": {
            "strings": [
              "format",
              "time_series",
              "intervalFactor",
              "legendFormat",
              "Twitter - {{type}}",
              "refId"
            ],
            "numbers": [
              1
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 248,
          "snippet": "        },\n        {\n          \"expr\": \"rate(ghost_publication_duration_seconds_sum[5m]) / rate(ghost_publication_duration_seconds_count[5m])\",\n          \"format\": \"time_series\",\n          \"intervalFactor\": 1,",
          "values": {
            "strings": [
              "expr",
              "rate(ghost_publication_duration_seconds_sum[5m]) / rate(ghost_publication_duration_seconds_count[5m])",
              "format",
              "time_series",
              "intervalFactor"
            ],
            "numbers": [
              5,
              5,
              1
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 251,
          "snippet": "          \"format\": \"time_series\",\n          \"intervalFactor\": 1,\n          \"legendFormat\": \"Ghost - {{operation}}\",\n          \"refId\": \"C\"\n        }",
          "values": {
            "strings": [
              "format",
              "time_series",
              "intervalFactor",
              "legendFormat",
              "Ghost - {{operation}}",
              "refId"
            ],
            "numbers": [
              1
            ]
          }
        }
      ]
    },
    {
      "file": "/Users/hretheum/dev/bezrobocie/vector-wave/publisher/docs/twitter-adapter-technical.md",
      "exists": true,
      "hits": [
        {
          "type": "platform_specific",
          "platform": "twitter",
          "line": 1,
          "snippet": "# Twitter Adapter - Dokumentacja Techniczna\n\n## Przegląd",
          "values": {
            "strings": [],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "twitter",
          "line": 4,
          "snippet": "\n## Przegląd\nTwitter Adapter to mikrousługa do publikacji na Twitter/X przez Typefully API, część Multi-Channel Publisher.\n\n## 🎯 Status: PRODUCTION READY (Tasks 2.1-2.5)",
          "values": {
            "strings": [],
            "numbers": [
              2,
              1,
              2,
              5
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "twitter",
          "line": 34,
          "snippet": "{\n  \"status\": \"ok\",\n  \"service\": \"twitter-adapter\",\n  \"endpoints\": {\n    \"health\": \"/health\",",
          "values": {
            "strings": [
              "status",
              "ok",
              "service",
              "twitter-adapter",
              "endpoints",
              "health",
              "/health"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "twitter",
          "line": 105,
          "snippet": "  \"scheduled_date\": \"2025-08-07T07:06:00Z\",\n  \"published_on\": \"2025-08-07T07:06:01.157300Z\",\n  \"twitter_url\": \"https://x.com/ErykO8529/status/1953351907545891240\",\n  \"source\": \"published\"\n}",
          "values": {
            "strings": [
              "scheduled_date",
              "2025-08-07T07:06:00Z",
              "published_on",
              "2025-08-07T07:06:01.157300Z",
              "twitter_url",
              "https://x.com/ErykO8529/status/1953351907545891240",
              "source",
              "published"
            ],
            "numbers": [
              2025,
              8,
              7,
              7,
              6,
              0,
              2025,
              8,
              7,
              7
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "twitter",
          "line": 140,
          "snippet": "- `status: \"scheduled\"` → `status: \"published\"`\n- `published_on: null` → `published_on: \"2025-01-08T13:17:01.157Z\"`\n- `twitter_url: null` → `twitter_url: \"https://x.com/...\"`\n\n---",
          "values": {
            "strings": [
              "scheduled",
              "published",
              "2025-01-08T13:17:01.157Z",
              "https://x.com/..."
            ],
            "numbers": [
              2025,
              1,
              8,
              13,
              17,
              1,
              157
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "twitter",
          "line": 211,
          "snippet": "  -H \"Content-Type: application/json\" \\\n  -d '{\n    \"text\": \"To jest bardzo długi tweet, który przekracza limit 280 znaków i powinien zostać automatycznie podzielony na wątek przez nasz Multi-Channel Publisher. System używa Typefully API do zarządzania publikacją na Twitter/X. Dzięki temu możemy publikować długie treści bez martwienia się o limity platform społecznościowych.\",\n    \"thread_mode\": true\n  }'",
          "values": {
            "strings": [
              "Content-Type: application/json",
              "{\n    ",
              ": ",
              ",\n    ",
              ": true\n  }"
            ],
            "numbers": [
              280
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "twitter",
          "line": 225,
          "snippet": "```yaml\nservices:\n  twitter-adapter:\n    build:\n      context: ./src/adapters/twitter",
          "values": {
            "strings": [],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "twitter",
          "line": 227,
          "snippet": "  twitter-adapter:\n    build:\n      context: ./src/adapters/twitter\n      dockerfile: Dockerfile\n    container_name: publisher-twitter-adapter",
          "values": {
            "strings": [],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "twitter",
          "line": 229,
          "snippet": "      context: ./src/adapters/twitter\n      dockerfile: Dockerfile\n    container_name: publisher-twitter-adapter\n    ports:\n      - \"8083:8082\"",
          "values": {
            "strings": [
              "8083:8082"
            ],
            "numbers": [
              8083,
              8082
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "twitter",
          "line": 233,
          "snippet": "      - \"8083:8082\"\n    env_file:\n      - ./.env  # ⚠️ UWAGA: Root .env nie w src/adapters/twitter/\n    environment:\n      - HOST=0.0.0.0",
          "values": {
            "strings": [
              "8083:8082"
            ],
            "numbers": [
              8083,
              8082,
              0,
              0,
              0,
              0
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "twitter",
          "line": 250,
          "snippet": "make up          # Uruchom usługi  \nmake restart     # Restart wszystkich usług\nmake logs-twitter # Pokaż logi Twitter Adapter\nmake test-health # Test healthcheck\n```",
          "values": {
            "strings": [],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "twitter",
          "line": 293,
          "snippet": "### Oczekiwane rezultaty\n- **Draft** → `\"status\": \"draft\"`, wymaga ręcznej publikacji\n- **Scheduled** → `\"status\": \"scheduled\"` → po czasie `\"status\": \"published\"` + twitter_url\n- **Thread** → `thread_ids: [\"...\"]` zamiast `tweet_id`\n",
          "values": {
            "strings": [
              "status",
              "draft",
              "status",
              "scheduled",
              "status",
              "published",
              "..."
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "twitter",
          "line": 318,
          "snippet": "### Sprawdzanie logów\n```bash\ndocker logs publisher-twitter-adapter --tail 20\n```\n",
          "values": {
            "strings": [],
            "numbers": [
              20
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "twitter",
          "line": 325,
          "snippet": "INFO:typefully_client:[Typefully] POST https://api.typefully.com/v1/drafts/\nINFO:typefully_client:[Typefully] Response: {'id': 6401696, 'status': 'scheduled', ...}\nINFO:main:[Twitter Adapter] Typefully publikacja zakończona: Tweet zaplanowany w Typefully (ID: 6401696)\n```\n",
          "values": {
            "strings": [
              "id",
              "status",
              "scheduled"
            ],
            "numbers": [
              1,
              6401696,
              6401696
            ]
          }
        },
        {
          "type": "required_elements",
          "platform": "twitter",
          "line": 331,
          "snippet": "```python\n# 400 Bad Request\n{\"detail\": \"Schedule date must be in the future\"}\n\n# 403 Forbidden  ",
          "values": {
            "strings": [
              "detail",
              "Schedule date must be in the future"
            ],
            "numbers": [
              400,
              403
            ]
          }
        },
        {
          "type": "forbidden_phrases",
          "platform": "twitter",
          "line": 333,
          "snippet": "{\"detail\": \"Schedule date must be in the future\"}\n\n# 403 Forbidden  \n{\"detail\": \"Błąd Typefully API: 403 Client Error: Forbidden\"}\n",
          "values": {
            "strings": [
              "detail",
              "Schedule date must be in the future",
              "detail",
              "Błąd Typefully API: 403 Client Error: Forbidden"
            ],
            "numbers": [
              403,
              403
            ]
          }
        },
        {
          "type": "forbidden_phrases",
          "platform": "twitter",
          "line": 334,
          "snippet": "\n# 403 Forbidden  \n{\"detail\": \"Błąd Typefully API: 403 Client Error: Forbidden\"}\n\n# API Key missing",
          "values": {
            "strings": [
              "detail",
              "Błąd Typefully API: 403 Client Error: Forbidden"
            ],
            "numbers": [
              403,
              403
            ]
          }
        }
      ]
    },
    {
      "file": "/Users/hretheum/dev/bezrobocie/vector-wave/publisher/docs/MASTER_PLAN_CONSOLIDATED.md",
      "exists": true,
      "hits": [
        {
          "type": "platform_specific",
          "platform": "twitter",
          "line": 6,
          "snippet": "\n### ✅ **COMPLETED PHASES (Production Ready)**\n- **Faza 1**: Substack Adapter ✅ **COMPLETED** - Full browserbase/stagehand integration\n- **Faza 2**: Twitter/X Adapter ✅ **COMPLETED** - Typefully API integration  \n- **Faza 3**: Ghost Adapter ✅ **COMPLETED** - Complete CMS with image upload",
          "values": {
            "strings": [],
            "numbers": [
              1,
              2,
              3
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "twitter",
          "line": 7,
          "snippet": "### ✅ **COMPLETED PHASES (Production Ready)**\n- **Faza 1**: Substack Adapter ✅ **COMPLETED** - Full browserbase/stagehand integration\n- **Faza 2**: Twitter/X Adapter ✅ **COMPLETED** - Typefully API integration  \n- **Faza 3**: Ghost Adapter ✅ **COMPLETED** - Complete CMS with image upload\n- **Faza 4**: Orchestrator API ✅ **COMPLETED** - Multi-platform publication system",
          "values": {
            "strings": [],
            "numbers": [
              1,
              2,
              3,
              4
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "twitter",
          "line": 8,
          "snippet": "- **Faza 1**: Substack Adapter ✅ **COMPLETED** - Full browserbase/stagehand integration\n- **Faza 2**: Twitter/X Adapter ✅ **COMPLETED** - Typefully API integration  \n- **Faza 3**: Ghost Adapter ✅ **COMPLETED** - Complete CMS with image upload\n- **Faza 4**: Orchestrator API ✅ **COMPLETED** - Multi-platform publication system\n",
          "values": {
            "strings": [],
            "numbers": [
              1,
              2,
              3,
              4
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 17,
          "snippet": "- **Faza 5**: Monitoring & Alerting\n- **Faza 6**: Enhanced E2E Integration  \n- **Faza 7**: LinkedIn Module Integration\n- **Faza 8+**: Advanced Features\n",
          "values": {
            "strings": [],
            "numbers": [
              5,
              6,
              2,
              7,
              8
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 31,
          "snippet": "       ↓                    ↓                    ↓              ↓\n[Content + Placeholders] [Process Images]  [Platform Adapt]  [Publish]\n[LinkedIn: Prompts]      [Presenton]       [LinkedIn: PDF]   [Success]\n[Others: Direct]         [Pexels Images]   [Others: Text]     [Tracking]\n```",
          "values": {
            "strings": [],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 37,
          "snippet": "**Key Innovations**:\n- **Image Processing Pipeline**: Pexels API + automatic placeholder→image conversion\n- **Presenton Integration**: LinkedIn prompt→presentation→PDF pipeline\n- **Content Differentiation**: LinkedIn carousel prompts vs direct content\n- **User Control**: Checkbox \"treści bezpośrednie\" dla manual override",
          "values": {
            "strings": [
              "treści bezpośrednie"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 38,
          "snippet": "- **Image Processing Pipeline**: Pexels API + automatic placeholder→image conversion\n- **Presenton Integration**: LinkedIn prompt→presentation→PDF pipeline\n- **Content Differentiation**: LinkedIn carousel prompts vs direct content\n- **User Control**: Checkbox \"treści bezpośrednie\" dla manual override\n",
          "values": {
            "strings": [
              "treści bezpośrednie"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 120,
          "snippet": "        \"\"\"Platform-specific image URL replacement\"\"\"\n        \n        if platform == \"ghost\":\n            # Upload to Ghost and replace with Ghost URLs\n            return await self.process_ghost_images(content, image_mapping)",
          "values": {
            "strings": [
              "Platform-specific image URL replacement",
              "\n        \n        if platform == "
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 121,
          "snippet": "        \n        if platform == \"ghost\":\n            # Upload to Ghost and replace with Ghost URLs\n            return await self.process_ghost_images(content, image_mapping)\n        ",
          "values": {
            "strings": [
              "ghost"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "twitter",
          "line": 122,
          "snippet": "        if platform == \"ghost\":\n            # Upload to Ghost and replace with Ghost URLs\n            return await self.process_ghost_images(content, image_mapping)\n        \n        elif platform == \"twitter\":",
          "values": {
            "strings": [
              "ghost",
              "twitter"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "twitter",
          "line": 124,
          "snippet": "            return await self.process_ghost_images(content, image_mapping)\n        \n        elif platform == \"twitter\":\n            # Keep local paths for Twitter media attachment\n            return content.replace(\"LOCAL_IMAGE:\", \"\")",
          "values": {
            "strings": [
              "twitter",
              "LOCAL_IMAGE:"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "twitter",
          "line": 125,
          "snippet": "        \n        elif platform == \"twitter\":\n            # Keep local paths for Twitter media attachment\n            return content.replace(\"LOCAL_IMAGE:\", \"\")\n        ",
          "values": {
            "strings": [
              "twitter",
              "LOCAL_IMAGE:"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 128,
          "snippet": "            return content.replace(\"LOCAL_IMAGE:\", \"\")\n        \n        elif platform == \"linkedin\":\n            # Keep local paths for Presenton processing  \n            return content.replace(\"LOCAL_IMAGE:\", \"\")",
          "values": {
            "strings": [
              "LOCAL_IMAGE:",
              ")\n        \n        elif platform == ",
              ":\n            # Keep local paths for Presenton processing  \n            return content.replace(",
              ", "
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 136,
          "snippet": "            return content.replace(\"LOCAL_IMAGE:\", \"\")\n    \n    async def process_ghost_images(self, content: str, image_mapping: Dict) -> str:\n        \"\"\"Upload images to Ghost and replace URLs\"\"\"\n        ",
          "values": {
            "strings": [
              "LOCAL_IMAGE:",
              ")\n    \n    async def process_ghost_images(self, content: str, image_mapping: Dict) -> str:\n        ",
              "Upload images to Ghost and replace URLs"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 137,
          "snippet": "    \n    async def process_ghost_images(self, content: str, image_mapping: Dict) -> str:\n        \"\"\"Upload images to Ghost and replace URLs\"\"\"\n        \n        # Use existing Ghost client logic",
          "values": {
            "strings": [
              "Upload images to Ghost and replace URLs"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 139,
          "snippet": "        \"\"\"Upload images to Ghost and replace URLs\"\"\"\n        \n        # Use existing Ghost client logic\n        from src.adapters.ghost.ghost_client import GhostClient\n        ",
          "values": {
            "strings": [
              "Upload images to Ghost and replace URLs"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 140,
          "snippet": "        \n        # Use existing Ghost client logic\n        from src.adapters.ghost.ghost_client import GhostClient\n        \n        ghost_client = GhostClient()",
          "values": {
            "strings": [],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 142,
          "snippet": "        from src.adapters.ghost.ghost_client import GhostClient\n        \n        ghost_client = GhostClient()\n        updated_content = content\n        ",
          "values": {
            "strings": [],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 147,
          "snippet": "        for keyword, local_path in image_mapping.items():\n            try:\n                # Upload to Ghost\n                upload_result = await ghost_client.upload_image(local_path)\n                ghost_url = upload_result['images'][0]['url']",
          "values": {
            "strings": [
              "images",
              "url"
            ],
            "numbers": [
              0
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 148,
          "snippet": "            try:\n                # Upload to Ghost\n                upload_result = await ghost_client.upload_image(local_path)\n                ghost_url = upload_result['images'][0]['url']\n                ",
          "values": {
            "strings": [
              "images",
              "url"
            ],
            "numbers": [
              0
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 149,
          "snippet": "                # Upload to Ghost\n                upload_result = await ghost_client.upload_image(local_path)\n                ghost_url = upload_result['images'][0]['url']\n                \n                # Replace local path with Ghost URL",
          "values": {
            "strings": [
              "images",
              "url"
            ],
            "numbers": [
              0
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 151,
          "snippet": "                ghost_url = upload_result['images'][0]['url']\n                \n                # Replace local path with Ghost URL\n                updated_content = updated_content.replace(\n                    f\"LOCAL_IMAGE:{local_path}\",",
          "values": {
            "strings": [
              "images",
              "url",
              "LOCAL_IMAGE:{local_path}"
            ],
            "numbers": [
              0
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 154,
          "snippet": "                updated_content = updated_content.replace(\n                    f\"LOCAL_IMAGE:{local_path}\",\n                    f'<img src=\"{ghost_url}\" alt=\"{keyword}\">'\n                )\n                ",
          "values": {
            "strings": [
              "LOCAL_IMAGE:{local_path}",
              "<img src=",
              " alt="
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 158,
          "snippet": "                \n            except Exception as e:\n                logger.error(f\"Ghost upload failed for {keyword}: {e}\")\n                # Keep local path as fallback\n                pass",
          "values": {
            "strings": [
              "Ghost upload failed for {keyword}: {e}"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 189,
          "snippet": "    assert Path(mapping['business-meeting']).exists()\n\ndef test_ghost_image_finalization():\n    content = \"LOCAL_IMAGE:/tmp/publisher_images/business_123.jpg\"\n    processor = ImageProcessor()",
          "values": {
            "strings": [
              "business-meeting",
              "LOCAL_IMAGE:/tmp/publisher_images/business_123.jpg"
            ],
            "numbers": [
              123
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 193,
          "snippet": "    processor = ImageProcessor()\n    \n    final_content = await processor.finalize_for_platform(content, \"ghost\", {})\n    \n    assert \"LOCAL_IMAGE:\" not in final_content",
          "values": {
            "strings": [
              "ghost",
              "LOCAL_IMAGE:"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 216,
          "snippet": "      - publisher_images:/tmp/publisher_images\n  \n  ghost-adapter:\n    volumes:\n      - publisher_images:/tmp/publisher_images",
          "values": {
            "strings": [],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "twitter",
          "line": 220,
          "snippet": "      - publisher_images:/tmp/publisher_images\n      \n  twitter-adapter:\n    volumes:\n      - publisher_images:/tmp/publisher_images",
          "values": {
            "strings": [],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 229,
          "snippet": "# Test shared volume accessibility\ndocker exec orchestrator ls -la /tmp/publisher_images\ndocker exec ghost-adapter ls -la /tmp/publisher_images\n```\n",
          "values": {
            "strings": [],
            "numbers": []
          }
        },
        {
          "type": "required_elements",
          "platform": "universal",
          "line": 248,
          "snippet": "│   └── templates/           # PowerPoint templates\n├── Dockerfile\n├── requirements.txt\n└── README.md\n```",
          "values": {
            "strings": [],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 480,
          "snippet": "        \"\"\"Convert PPTX to PDF using existing presenton logic\"\"\"\n        \n        # Integration with existing linkedin/services/presenton.py\n        # This should reuse the proven PPTX→PDF conversion logic\n        ",
          "values": {
            "strings": [
              "Convert PPTX to PDF using existing presenton logic"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 486,
          "snippet": "            # Import existing Presenton service logic\n            import sys\n            sys.path.append('/app/linkedin/services')\n            from presenton import convert_pptx_to_pdf\n            ",
          "values": {
            "strings": [
              "/app/linkedin/services"
            ],
            "numbers": []
          }
        },
        {
          "type": "required_elements",
          "platform": "universal",
          "line": 553,
          "snippet": "**Dependencies**:\n```txt\n# presenton/requirements.txt\nfastapi==0.104.1\nuvicorn==0.24.0",
          "values": {
            "strings": [],
            "numbers": [
              0,
              104,
              1,
              0,
              24,
              0
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 587,
          "snippet": "    def __init__(self):\n        self.platform_configs = {\n            \"linkedin\": {\n                \"prompt_mode\": True,  # Default for LinkedIn = carousel prompts\n                \"max_length\": 3000,",
          "values": {
            "strings": [
              "linkedin",
              "prompt_mode",
              "max_length"
            ],
            "numbers": [
              3000
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 588,
          "snippet": "        self.platform_configs = {\n            \"linkedin\": {\n                \"prompt_mode\": True,  # Default for LinkedIn = carousel prompts\n                \"max_length\": 3000,\n                \"focus\": \"professional, slide-friendly\",",
          "values": {
            "strings": [
              "linkedin",
              "prompt_mode",
              "max_length",
              "focus",
              "professional, slide-friendly"
            ],
            "numbers": [
              3000
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "twitter",
          "line": 594,
          "snippet": "                \"slides_count\": 5\n            },\n            \"twitter\": {\n                \"prompt_mode\": False,\n                \"max_length\": 280,",
          "values": {
            "strings": [
              "slides_count",
              "twitter",
              "prompt_mode",
              "max_length"
            ],
            "numbers": [
              5,
              280
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 600,
          "snippet": "                \"structure\": \"thread_ready\"\n            },\n            \"ghost\": {\n                \"prompt_mode\": False,\n                \"max_length\": 10000,",
          "values": {
            "strings": [
              "structure",
              "thread_ready",
              "ghost",
              "prompt_mode",
              "max_length"
            ],
            "numbers": [
              10000
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "substack",
          "line": 606,
          "snippet": "                \"structure\": \"blog_article\"\n            },\n            \"substack\": {\n                \"prompt_mode\": False,\n                \"max_length\": 8000,",
          "values": {
            "strings": [
              "structure",
              "blog_article",
              "substack",
              "prompt_mode",
              "max_length"
            ],
            "numbers": [
              8000
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 625,
          "snippet": "        Args:\n            topic: Topic object with title and description\n            platform: Target platform (linkedin, twitter, ghost, substack)\n            direct_content: User override for LinkedIn (True = skip carousel, False = carousel)\n        ",
          "values": {
            "strings": [],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 626,
          "snippet": "            topic: Topic object with title and description\n            platform: Target platform (linkedin, twitter, ghost, substack)\n            direct_content: User override for LinkedIn (True = skip carousel, False = carousel)\n        \n        Returns:",
          "values": {
            "strings": [],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 637,
          "snippet": "        config = self.platform_configs[platform].copy()\n        \n        # Handle user override for LinkedIn\n        if platform == \"linkedin\" and direct_content is not None:\n            config[\"prompt_mode\"] = not direct_content",
          "values": {
            "strings": [
              "linkedin",
              "prompt_mode"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 638,
          "snippet": "        \n        # Handle user override for LinkedIn\n        if platform == \"linkedin\" and direct_content is not None:\n            config[\"prompt_mode\"] = not direct_content\n        ",
          "values": {
            "strings": [
              "linkedin",
              "prompt_mode"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 641,
          "snippet": "            config[\"prompt_mode\"] = not direct_content\n        \n        if config[\"prompt_mode\"] and platform == \"linkedin\":\n            return await self.generate_presentation_prompt(topic, config)\n        else:",
          "values": {
            "strings": [
              "prompt_mode",
              "prompt_mode",
              "linkedin"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 647,
          "snippet": "    \n    async def generate_presentation_prompt(self, topic: \"Topic\", config: Dict) -> Dict:\n        \"\"\"Generate LinkedIn carousel prompt for Presenton\"\"\"\n        \n        system_prompt = f\"\"\"",
          "values": {
            "strings": [
              "Topic",
              "Generate LinkedIn carousel prompt for Presenton",
              "\n        \n        system_prompt = f"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 651,
          "snippet": "        system_prompt = f\"\"\"\n        Create a detailed prompt for generating a {config.get('slides_count', 5)}-slide \n        LinkedIn carousel presentation about: {topic.title}\n        \n        Topic description: {topic.description}",
          "values": {
            "strings": [
              "\n        Create a detailed prompt for generating a {config.get("
            ],
            "numbers": [
              5
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 674,
          "snippet": "                context={\n                    \"topic\": topic,\n                    \"platform\": \"linkedin_carousel\",\n                    \"output_type\": \"presentation_prompt\",\n                    \"slides_count\": config.get('slides_count', 5)",
          "values": {
            "strings": [
              "topic",
              "platform",
              "linkedin_carousel",
              "output_type",
              "presentation_prompt",
              "slides_count",
              "slides_count"
            ],
            "numbers": [
              5
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 684,
          "snippet": "                \"prompt\": result.content,\n                \"slides_count\": config.get(\"slides_count\", 5),\n                \"platform\": \"linkedin\",\n                \"ready_for_presenton\": True,\n                \"generation_time\": result.execution_time if hasattr(result, 'execution_time') else None",
          "values": {
            "strings": [
              "prompt",
              "slides_count",
              "slides_count",
              "platform",
              "linkedin",
              "ready_for_presenton",
              "generation_time",
              "execution_time"
            ],
            "numbers": [
              5
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 696,
          "snippet": "                \"prompt\": f\"Create a {config.get('slides_count', 5)}-slide presentation about {topic.title}. {topic.description}\",\n                \"slides_count\": config.get(\"slides_count\", 5),\n                \"platform\": \"linkedin\",\n                \"ready_for_presenton\": True,\n                \"error\": str(e)",
          "values": {
            "strings": [
              "prompt",
              "Create a {config.get(",
              ", 5)}-slide presentation about {topic.title}. {topic.description}",
              "slides_count",
              "slides_count",
              "platform",
              "linkedin",
              "ready_for_presenton",
              "error"
            ],
            "numbers": [
              5,
              5
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "twitter",
          "line": 741,
          "snippet": "        platform_instructions = {\n            \"thread_ready\": f\"\"\"\n                Create engaging Twitter content about {topic.title}.\n                Maximum {config['max_length']} characters.\n                Style: {config['focus']}",
          "values": {
            "strings": [
              "thread_ready",
              "\n                Create engaging Twitter content about {topic.title}.\n                Maximum {config[",
              "]} characters.\n                Style: {config["
            ],
            "numbers": []
          }
        },
        {
          "type": "required_elements",
          "platform": "universal",
          "line": 747,
          "snippet": "                If content is longer, structure as a thread with numbered tweets.\n                Use relevant hashtags and mentions.\n                Include a strong hook in the first tweet.\n            \"\"\",\n            ",
          "values": {
            "strings": [],
            "numbers": []
          }
        },
        {
          "type": "required_elements",
          "platform": "universal",
          "line": 755,
          "snippet": "                Style: {config['focus']}\n                \n                Include:\n                - SEO-friendly title and meta description\n                - Clear headings and subheadings",
          "values": {
            "strings": [
              "focus"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 777,
          "snippet": "            \n            \"presentation_outline\": f\"\"\"\n                Create professional LinkedIn post about {topic.title}.\n                Maximum {config['max_length']} characters.\n                Style: {config['focus']}",
          "values": {
            "strings": [
              "presentation_outline",
              "\n                Create professional LinkedIn post about {topic.title}.\n                Maximum {config[",
              "]} characters.\n                Style: {config["
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "twitter",
          "line": 799,
          "snippet": "        \n        if config['structure'] == 'thread_ready':\n            # Ensure Twitter content fits character limits\n            return self.format_twitter_thread(content, config['max_length'])\n        ",
          "values": {
            "strings": [
              "structure",
              "thread_ready",
              "max_length"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "twitter",
          "line": 800,
          "snippet": "        if config['structure'] == 'thread_ready':\n            # Ensure Twitter content fits character limits\n            return self.format_twitter_thread(content, config['max_length'])\n        \n        elif config['structure'] == 'blog_article':",
          "values": {
            "strings": [
              "structure",
              "thread_ready",
              "max_length",
              "structure",
              "blog_article"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "twitter",
          "line": 813,
          "snippet": "            return content\n    \n    def format_twitter_thread(self, content: str, max_length: int) -> str:\n        \"\"\"Format content as Twitter thread if needed\"\"\"\n        ",
          "values": {
            "strings": [
              "Format content as Twitter thread if needed"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "twitter",
          "line": 814,
          "snippet": "    \n    def format_twitter_thread(self, content: str, max_length: int) -> str:\n        \"\"\"Format content as Twitter thread if needed\"\"\"\n        \n        if len(content) <= max_length:",
          "values": {
            "strings": [
              "Format content as Twitter thread if needed"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 884,
          "snippet": "class PlatformConfig(BaseModel):\n    enabled: bool = True\n    direct_content: Optional[bool] = None  # LinkedIn override\n    slides_count: Optional[int] = 5\n    template: Optional[str] = \"business\"",
          "values": {
            "strings": [
              "business"
            ],
            "numbers": [
              5
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 902,
          "snippet": "    quality_score: Optional[float] = None\n\nclass LinkedInPromptRequest(BaseModel):\n    topic: Topic\n    slides_count: int = 5",
          "values": {
            "strings": [],
            "numbers": [
              5
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 908,
          "snippet": "    template: Optional[str] = \"business\"\n\nclass LinkedInPromptResponse(BaseModel):\n    prompt: str\n    slides_count: int",
          "values": {
            "strings": [
              "business"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 917,
          "snippet": "**Success Metrics**:\n- [ ] Content quality (manual review): >8/10 for each platform\n- [ ] Prompt effectiveness: LinkedIn carousels rate >7/10\n- [ ] Generation time: <30s per platform\n- [ ] Platform optimization accuracy: Content fits platform constraints 100%",
          "values": {
            "strings": [],
            "numbers": [
              8,
              10,
              7,
              10,
              30,
              100
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 939,
          "snippet": "    )\n\nasync def test_linkedin_prompt_generation(platform_optimizer, sample_topic):\n    \"\"\"Test LinkedIn carousel prompt generation\"\"\"\n    ",
          "values": {
            "strings": [
              "Test LinkedIn carousel prompt generation"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 940,
          "snippet": "\nasync def test_linkedin_prompt_generation(platform_optimizer, sample_topic):\n    \"\"\"Test LinkedIn carousel prompt generation\"\"\"\n    \n    result = await platform_optimizer.generate_for_platform(",
          "values": {
            "strings": [
              "Test LinkedIn carousel prompt generation"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 944,
          "snippet": "    result = await platform_optimizer.generate_for_platform(\n        topic=sample_topic,\n        platform=\"linkedin\",\n        direct_content=False  # Use carousel\n    )",
          "values": {
            "strings": [
              "linkedin"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 954,
          "snippet": "    assert len(result[\"prompt\"]) > 200\n\nasync def test_linkedin_direct_content(platform_optimizer, sample_topic):\n    \"\"\"Test LinkedIn direct content generation\"\"\"\n    ",
          "values": {
            "strings": [
              "prompt",
              "Test LinkedIn direct content generation"
            ],
            "numbers": [
              200
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 955,
          "snippet": "\nasync def test_linkedin_direct_content(platform_optimizer, sample_topic):\n    \"\"\"Test LinkedIn direct content generation\"\"\"\n    \n    result = await platform_optimizer.generate_for_platform(",
          "values": {
            "strings": [
              "Test LinkedIn direct content generation"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 959,
          "snippet": "    result = await platform_optimizer.generate_for_platform(\n        topic=sample_topic,\n        platform=\"linkedin\",\n        direct_content=True  # Skip carousel\n    )",
          "values": {
            "strings": [
              "linkedin"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 965,
          "snippet": "    assert result[\"type\"] == \"direct_content\"\n    assert result[\"ready_for_publication\"] is True\n    assert len(result[\"content\"]) <= 3000  # LinkedIn limit\n\nasync def test_twitter_content_generation(platform_optimizer, sample_topic):",
          "values": {
            "strings": [
              "type",
              "direct_content",
              "ready_for_publication",
              "content"
            ],
            "numbers": [
              3000
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 967,
          "snippet": "    assert len(result[\"content\"]) <= 3000  # LinkedIn limit\n\nasync def test_twitter_content_generation(platform_optimizer, sample_topic):\n    \"\"\"Test Twitter content generation\"\"\"\n    ",
          "values": {
            "strings": [
              "content",
              "Test Twitter content generation"
            ],
            "numbers": [
              3000
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "twitter",
          "line": 968,
          "snippet": "\nasync def test_twitter_content_generation(platform_optimizer, sample_topic):\n    \"\"\"Test Twitter content generation\"\"\"\n    \n    result = await platform_optimizer.generate_for_platform(",
          "values": {
            "strings": [
              "Test Twitter content generation"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "twitter",
          "line": 972,
          "snippet": "    result = await platform_optimizer.generate_for_platform(\n        topic=sample_topic,\n        platform=\"twitter\"\n    )\n    ",
          "values": {
            "strings": [
              "twitter"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "twitter",
          "line": 978,
          "snippet": "    assert result[\"platform\"] == \"thread_ready\"\n    \n    # Check if content fits Twitter constraints\n    if \"---THREAD---\" in result[\"content\"]:\n        tweets = result[\"content\"].split(\"---THREAD---\")",
          "values": {
            "strings": [
              "platform",
              "thread_ready",
              "---THREAD---",
              "content",
              "content",
              "---THREAD---"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 984,
          "snippet": "            assert len(tweet.strip()) <= 280\n\nasync def test_ghost_blog_generation(platform_optimizer, sample_topic):\n    \"\"\"Test Ghost blog content generation\"\"\"\n    ",
          "values": {
            "strings": [
              "Test Ghost blog content generation"
            ],
            "numbers": [
              280
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 985,
          "snippet": "\nasync def test_ghost_blog_generation(platform_optimizer, sample_topic):\n    \"\"\"Test Ghost blog content generation\"\"\"\n    \n    result = await platform_optimizer.generate_for_platform(",
          "values": {
            "strings": [
              "Test Ghost blog content generation"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 989,
          "snippet": "    result = await platform_optimizer.generate_for_platform(\n        topic=sample_topic,\n        platform=\"ghost\"\n    )\n    ",
          "values": {
            "strings": [
              "ghost"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 1000,
          "snippet": "    \"\"\"Test that different platforms generate different content\"\"\"\n    \n    linkedin_result = await platform_optimizer.generate_for_platform(sample_topic, \"linkedin\", direct_content=True)\n    twitter_result = await platform_optimizer.generate_for_platform(sample_topic, \"twitter\")\n    ghost_result = await platform_optimizer.generate_for_platform(sample_topic, \"ghost\")",
          "values": {
            "strings": [
              "Test that different platforms generate different content",
              "\n    \n    linkedin_result = await platform_optimizer.generate_for_platform(sample_topic, ",
              ", direct_content=True)\n    twitter_result = await platform_optimizer.generate_for_platform(sample_topic, ",
              ")\n    ghost_result = await platform_optimizer.generate_for_platform(sample_topic, "
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 1001,
          "snippet": "    \n    linkedin_result = await platform_optimizer.generate_for_platform(sample_topic, \"linkedin\", direct_content=True)\n    twitter_result = await platform_optimizer.generate_for_platform(sample_topic, \"twitter\")\n    ghost_result = await platform_optimizer.generate_for_platform(sample_topic, \"ghost\")\n    ",
          "values": {
            "strings": [
              "linkedin",
              "twitter",
              "ghost"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 1002,
          "snippet": "    linkedin_result = await platform_optimizer.generate_for_platform(sample_topic, \"linkedin\", direct_content=True)\n    twitter_result = await platform_optimizer.generate_for_platform(sample_topic, \"twitter\")\n    ghost_result = await platform_optimizer.generate_for_platform(sample_topic, \"ghost\")\n    \n    # Verify platform-specific characteristics",
          "values": {
            "strings": [
              "linkedin",
              "twitter",
              "ghost"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 1005,
          "snippet": "    \n    # Verify platform-specific characteristics\n    assert len(twitter_result[\"content\"]) <= 280 or \"---THREAD---\" in twitter_result[\"content\"]\n    assert len(ghost_result[\"content\"]) > len(linkedin_result[\"content\"])  # Blog vs social\n    assert linkedin_result[\"type\"] == \"direct_content\"  # direct_content=True",
          "values": {
            "strings": [
              "content",
              "---THREAD---",
              "content",
              "content",
              "content",
              "type",
              "direct_content"
            ],
            "numbers": [
              280
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 1006,
          "snippet": "    # Verify platform-specific characteristics\n    assert len(twitter_result[\"content\"]) <= 280 or \"---THREAD---\" in twitter_result[\"content\"]\n    assert len(ghost_result[\"content\"]) > len(linkedin_result[\"content\"])  # Blog vs social\n    assert linkedin_result[\"type\"] == \"direct_content\"  # direct_content=True\n    ",
          "values": {
            "strings": [
              "content",
              "---THREAD---",
              "content",
              "content",
              "content",
              "type",
              "direct_content"
            ],
            "numbers": [
              280
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 1007,
          "snippet": "    assert len(twitter_result[\"content\"]) <= 280 or \"---THREAD---\" in twitter_result[\"content\"]\n    assert len(ghost_result[\"content\"]) > len(linkedin_result[\"content\"])  # Blog vs social\n    assert linkedin_result[\"type\"] == \"direct_content\"  # direct_content=True\n    \n    # Verify content is actually different",
          "values": {
            "strings": [
              "content",
              "---THREAD---",
              "content",
              "content",
              "content",
              "type",
              "direct_content"
            ],
            "numbers": [
              280
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 1010,
          "snippet": "    \n    # Verify content is actually different\n    assert linkedin_result[\"content\"] != twitter_result[\"content\"]\n    assert twitter_result[\"content\"] != ghost_result[\"content\"]\n```",
          "values": {
            "strings": [
              "content",
              "content",
              "content",
              "content"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 1011,
          "snippet": "    # Verify content is actually different\n    assert linkedin_result[\"content\"] != twitter_result[\"content\"]\n    assert twitter_result[\"content\"] != ghost_result[\"content\"]\n```\n",
          "values": {
            "strings": [
              "content",
              "content",
              "content",
              "content"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 1024,
          "snippet": "from fastapi import FastAPI, HTTPException\nfrom .platform_optimizer import PlatformOptimizer\nfrom .models import MultiPlatformRequest, MultiPlatformResponse, LinkedInPromptRequest, LinkedInPromptResponse\nimport time\n",
          "values": {
            "strings": [],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 1097,
          "snippet": "        raise HTTPException(status_code=500, detail=str(e))\n\n@app.post(\"/generate/linkedin-prompt\", response_model=LinkedInPromptResponse)\nasync def generate_linkedin_prompt(request: LinkedInPromptRequest):\n    \"\"\"",
          "values": {
            "strings": [
              "/generate/linkedin-prompt"
            ],
            "numbers": [
              500
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 1098,
          "snippet": "\n@app.post(\"/generate/linkedin-prompt\", response_model=LinkedInPromptResponse)\nasync def generate_linkedin_prompt(request: LinkedInPromptRequest):\n    \"\"\"\n    Specialized endpoint for LinkedIn carousel prompt generation",
          "values": {
            "strings": [
              "/generate/linkedin-prompt"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 1100,
          "snippet": "async def generate_linkedin_prompt(request: LinkedInPromptRequest):\n    \"\"\"\n    Specialized endpoint for LinkedIn carousel prompt generation\n    \"\"\"\n    ",
          "values": {
            "strings": [
              "\n    Specialized endpoint for LinkedIn carousel prompt generation\n    "
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 1115,
          "snippet": "        )\n        \n        return LinkedInPromptResponse(\n            prompt=result[\"prompt\"],\n            slides_count=result[\"slides_count\"],",
          "values": {
            "strings": [
              "prompt",
              "slides_count"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 1124,
          "snippet": "        \n    except Exception as e:\n        logger.error(f\"LinkedIn prompt generation failed: {e}\")\n        raise HTTPException(status_code=500, detail=str(e))\n",
          "values": {
            "strings": [
              "LinkedIn prompt generation failed: {e}"
            ],
            "numbers": [
              500
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 1143,
          "snippet": "        if content.get(\"word_count\"):\n            word_count = content[\"word_count\"]\n            if platform == \"twitter\" and word_count <= 50:\n                score += 2.0\n            elif platform == \"linkedin\" and 100 <= word_count <= 500:",
          "values": {
            "strings": [
              "word_count",
              "word_count",
              "twitter",
              "linkedin"
            ],
            "numbers": [
              50,
              2,
              0,
              100,
              500
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 1145,
          "snippet": "            if platform == \"twitter\" and word_count <= 50:\n                score += 2.0\n            elif platform == \"linkedin\" and 100 <= word_count <= 500:\n                score += 2.0\n            elif platform == \"ghost\" and word_count >= 500:",
          "values": {
            "strings": [
              "twitter",
              "linkedin",
              "ghost"
            ],
            "numbers": [
              50,
              2,
              0,
              100,
              500,
              2,
              0,
              500
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 1147,
          "snippet": "            elif platform == \"linkedin\" and 100 <= word_count <= 500:\n                score += 2.0\n            elif platform == \"ghost\" and word_count >= 500:\n                score += 2.0\n        ",
          "values": {
            "strings": [
              "linkedin",
              "ghost"
            ],
            "numbers": [
              100,
              500,
              2,
              0,
              500,
              2,
              0
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 1169,
          "snippet": "    result = await platform_optimizer.generate_for_platform(\n        topic=topic,\n        platform=request.get(\"platform\", \"linkedin\"),\n        direct_content=request.get(\"direct_content\")\n    )",
          "values": {
            "strings": [
              "platform",
              "linkedin",
              "direct_content"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 1195,
          "snippet": "        },\n        \"platforms\": {\n            \"linkedin\": {\"enabled\": True, \"direct_content\": False},\n            \"twitter\": {\"enabled\": True},\n            \"ghost\": {\"enabled\": True}",
          "values": {
            "strings": [
              "platforms",
              "linkedin",
              "enabled",
              "direct_content",
              "twitter",
              "enabled",
              "ghost",
              "enabled"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 1196,
          "snippet": "        \"platforms\": {\n            \"linkedin\": {\"enabled\": True, \"direct_content\": False},\n            \"twitter\": {\"enabled\": True},\n            \"ghost\": {\"enabled\": True}\n        }",
          "values": {
            "strings": [
              "platforms",
              "linkedin",
              "enabled",
              "direct_content",
              "twitter",
              "enabled",
              "ghost",
              "enabled"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 1197,
          "snippet": "            \"linkedin\": {\"enabled\": True, \"direct_content\": False},\n            \"twitter\": {\"enabled\": True},\n            \"ghost\": {\"enabled\": True}\n        }\n    }",
          "values": {
            "strings": [
              "linkedin",
              "enabled",
              "direct_content",
              "twitter",
              "enabled",
              "ghost",
              "enabled"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 1211,
          "snippet": "    assert result[\"generation_time\"] > 0\n\ndef test_linkedin_prompt_endpoint():\n    \"\"\"Test LinkedIn prompt generation endpoint\"\"\"\n    ",
          "values": {
            "strings": [
              "generation_time",
              "Test LinkedIn prompt generation endpoint"
            ],
            "numbers": [
              0
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 1212,
          "snippet": "\ndef test_linkedin_prompt_endpoint():\n    \"\"\"Test LinkedIn prompt generation endpoint\"\"\"\n    \n    request_data = {",
          "values": {
            "strings": [
              "Test LinkedIn prompt generation endpoint"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 1223,
          "snippet": "    }\n    \n    response = client.post(\"/generate/linkedin-prompt\", json=request_data)\n    \n    assert response.status_code == 200",
          "values": {
            "strings": [
              "/generate/linkedin-prompt"
            ],
            "numbers": [
              200
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "twitter",
          "line": 1239,
          "snippet": "        \"title\": \"Test Topic\",\n        \"description\": \"Test description\",\n        \"platform\": \"twitter\"\n    }\n    ",
          "values": {
            "strings": [
              "title",
              "Test Topic",
              "description",
              "Test description",
              "platform",
              "twitter"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 1316,
          "snippet": "                \n                # Create processing task based on content type\n                if platform == \"linkedin\" and content_data.get(\"type\") == \"presentation_prompt\":\n                    task = self.process_presenton_content(content_data, platform_config, platform)\n                else:",
          "values": {
            "strings": [
              "linkedin",
              "type",
              "presentation_prompt"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 1362,
          "snippet": "    \n    async def process_presenton_content(self, content_data: Dict, config: Dict, platform: str) -> Dict:\n        \"\"\"Process LinkedIn carousel through Presenton\"\"\"\n        \n        try:",
          "values": {
            "strings": [
              "Process LinkedIn carousel through Presenton"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 1389,
          "snippet": "                \"slides_count\": presenton_result[\"slide_count\"],\n                \"generation_time\": presenton_result[\"generation_time\"],\n                \"ready_for_linkedin\": True,\n                \"ready_for_publication\": True\n            }",
          "values": {
            "strings": [
              "slides_count",
              "slide_count",
              "generation_time",
              "generation_time",
              "ready_for_linkedin",
              "ready_for_publication"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 1607,
          "snippet": "class PlatformConfig(BaseModel):\n    enabled: bool = True\n    direct_content: Optional[bool] = None  # LinkedIn override\n    slides_count: Optional[int] = 5\n    template: Optional[str] = \"business\"",
          "values": {
            "strings": [
              "business"
            ],
            "numbers": [
              5
            ]
          }
        },
        {
          "type": "required_elements",
          "platform": "universal",
          "line": 1720,
          "snippet": "        publication_status = await status_tracker.get_publication_status(publication_id)\n        \n        # Enhanced status includes additional metadata\n        enhanced_status = {\n            \"publication_id\": publication_id,",
          "values": {
            "strings": [
              "publication_id"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 1814,
          "snippet": "class TestEnhancedPipeline:\n    \n    async def test_linkedin_carousel_pipeline(self):\n        \"\"\"\n        Test complete LinkedIn carousel pipeline:",
          "values": {
            "strings": [],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 1816,
          "snippet": "    async def test_linkedin_carousel_pipeline(self):\n        \"\"\"\n        Test complete LinkedIn carousel pipeline:\n        AI Writing Flow → Orchestrator → Presenton → LinkedIn\n        \"\"\"",
          "values": {
            "strings": [
              "\n        Test complete LinkedIn carousel pipeline:\n        AI Writing Flow → Orchestrator → Presenton → LinkedIn\n        "
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 1817,
          "snippet": "        \"\"\"\n        Test complete LinkedIn carousel pipeline:\n        AI Writing Flow → Orchestrator → Presenton → LinkedIn\n        \"\"\"\n        ",
          "values": {
            "strings": [
              "\n        Test complete LinkedIn carousel pipeline:\n        AI Writing Flow → Orchestrator → Presenton → LinkedIn\n        "
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 1826,
          "snippet": "            },\n            \"platforms\": {\n                \"linkedin\": {\n                    \"enabled\": True,\n                    \"direct_content\": False,  # Use Presenton",
          "values": {
            "strings": [
              "platforms",
              "linkedin",
              "enabled",
              "direct_content"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 1845,
          "snippet": "        assert result[\"status\"] == \"queued\"\n        assert result[\"enhanced_features\"][\"presenton_integration\"] is True\n        assert \"linkedin\" in result[\"platform_jobs\"]\n        \n        publication_id = result[\"publication_id\"]",
          "values": {
            "strings": [
              "status",
              "queued",
              "enhanced_features",
              "presenton_integration",
              "linkedin",
              "platform_jobs",
              "publication_id"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 1857,
          "snippet": "            status = status_response.json()\n            \n            if status[\"platforms\"][\"linkedin\"][\"status\"] in [\"published\", \"failed\"]:\n                break\n                ",
          "values": {
            "strings": [
              "platforms",
              "linkedin",
              "status",
              "published",
              "failed"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 1865,
          "snippet": "        final_status = client.get(f\"/status/enhanced/{publication_id}\").json()\n        \n        assert final_status[\"platforms\"][\"linkedin\"][\"status\"] == \"published\"\n        assert \"pdf_path\" in final_status[\"platforms\"][\"linkedin\"][\"content\"]\n        assert final_status[\"processing_metrics\"][\"presenton_time\"] > 0",
          "values": {
            "strings": [
              "/status/enhanced/{publication_id}",
              "platforms",
              "linkedin",
              "status",
              "published",
              "pdf_path",
              "platforms",
              "linkedin",
              "content",
              "processing_metrics"
            ],
            "numbers": [
              0
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 1866,
          "snippet": "        \n        assert final_status[\"platforms\"][\"linkedin\"][\"status\"] == \"published\"\n        assert \"pdf_path\" in final_status[\"platforms\"][\"linkedin\"][\"content\"]\n        assert final_status[\"processing_metrics\"][\"presenton_time\"] > 0\n        ",
          "values": {
            "strings": [
              "platforms",
              "linkedin",
              "status",
              "published",
              "pdf_path",
              "platforms",
              "linkedin",
              "content",
              "processing_metrics",
              "presenton_time"
            ],
            "numbers": [
              0
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 1870,
          "snippet": "        \n        # 4. Verify files exist\n        pdf_path = final_status[\"platforms\"][\"linkedin\"][\"content\"][\"pdf_path\"]\n        assert os.path.exists(pdf_path)\n        assert os.path.getsize(pdf_path) > 1000  # Non-empty PDF",
          "values": {
            "strings": [
              "platforms",
              "linkedin",
              "content",
              "pdf_path"
            ],
            "numbers": [
              4,
              1000
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 1883,
          "snippet": "            },\n            \"platforms\": {\n                \"twitter\": {\"enabled\": True, \"direct_content\": True},\n                \"ghost\": {\"enabled\": True, \"direct_content\": True},\n                \"linkedin\": {\"enabled\": True, \"direct_content\": True}  # Direct, not carousel",
          "values": {
            "strings": [
              "platforms",
              "twitter",
              "enabled",
              "direct_content",
              "ghost",
              "enabled",
              "direct_content",
              "linkedin",
              "enabled",
              "direct_content"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 1884,
          "snippet": "            \"platforms\": {\n                \"twitter\": {\"enabled\": True, \"direct_content\": True},\n                \"ghost\": {\"enabled\": True, \"direct_content\": True},\n                \"linkedin\": {\"enabled\": True, \"direct_content\": True}  # Direct, not carousel\n            }",
          "values": {
            "strings": [
              "platforms",
              "twitter",
              "enabled",
              "direct_content",
              "ghost",
              "enabled",
              "direct_content",
              "linkedin",
              "enabled",
              "direct_content"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 1885,
          "snippet": "                \"twitter\": {\"enabled\": True, \"direct_content\": True},\n                \"ghost\": {\"enabled\": True, \"direct_content\": True},\n                \"linkedin\": {\"enabled\": True, \"direct_content\": True}  # Direct, not carousel\n            }\n        }",
          "values": {
            "strings": [
              "twitter",
              "enabled",
              "direct_content",
              "ghost",
              "enabled",
              "direct_content",
              "linkedin",
              "enabled",
              "direct_content"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 1899,
          "snippet": "        # 2. Check all platforms were queued\n        assert len(result[\"platform_jobs\"]) == 3\n        assert \"twitter\" in result[\"platform_jobs\"]\n        assert \"ghost\" in result[\"platform_jobs\"]\n        assert \"linkedin\" in result[\"platform_jobs\"]",
          "values": {
            "strings": [
              "platform_jobs",
              "twitter",
              "platform_jobs",
              "ghost",
              "platform_jobs",
              "linkedin",
              "platform_jobs"
            ],
            "numbers": [
              2,
              3
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 1900,
          "snippet": "        assert len(result[\"platform_jobs\"]) == 3\n        assert \"twitter\" in result[\"platform_jobs\"]\n        assert \"ghost\" in result[\"platform_jobs\"]\n        assert \"linkedin\" in result[\"platform_jobs\"]\n        ",
          "values": {
            "strings": [
              "platform_jobs",
              "twitter",
              "platform_jobs",
              "ghost",
              "platform_jobs",
              "linkedin",
              "platform_jobs"
            ],
            "numbers": [
              3
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 1901,
          "snippet": "        assert \"twitter\" in result[\"platform_jobs\"]\n        assert \"ghost\" in result[\"platform_jobs\"]\n        assert \"linkedin\" in result[\"platform_jobs\"]\n        \n        # 3. Wait for processing",
          "values": {
            "strings": [
              "twitter",
              "platform_jobs",
              "ghost",
              "platform_jobs",
              "linkedin",
              "platform_jobs"
            ],
            "numbers": [
              3
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 1910,
          "snippet": "        final_status = client.get(f\"/status/enhanced/{publication_id}\").json()\n        \n        for platform in [\"twitter\", \"ghost\", \"linkedin\"]:\n            platform_status = final_status[\"platforms\"][platform]\n            assert platform_status[\"status\"] == \"published\"",
          "values": {
            "strings": [
              "/status/enhanced/{publication_id}",
              "twitter",
              "ghost",
              "linkedin",
              "platforms",
              "status",
              "published"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 1918,
          "snippet": "            assert \"placeholder:ai-technology\" not in content[\"content\"]\n            \n            if platform == \"ghost\":\n                # Ghost should have uploaded images with URLs\n                assert \"<img src=\" in content[\"content\"]",
          "values": {
            "strings": [
              "placeholder:ai-technology",
              "content",
              "ghost",
              "<img src=",
              "content"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 1919,
          "snippet": "            \n            if platform == \"ghost\":\n                # Ghost should have uploaded images with URLs\n                assert \"<img src=\" in content[\"content\"]\n            else:",
          "values": {
            "strings": [
              "ghost",
              "<img src=",
              "content"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 1936,
          "snippet": "            },\n            \"platforms\": {\n                \"linkedin\": {\n                    \"enabled\": True,\n                    \"direct_content\": False,  # Force Presenton",
          "values": {
            "strings": [
              "platforms",
              "linkedin",
              "enabled",
              "direct_content"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 1956,
          "snippet": "        # Check fallback was used\n        final_status = client.get(f\"/status/enhanced/{result['publication_id']}\").json()\n        linkedin_content = final_status[\"platforms\"][\"linkedin\"][\"content\"]\n        \n        # Should have fallback content",
          "values": {
            "strings": [
              "/status/enhanced/{result[",
              "]}",
              "platforms",
              "linkedin",
              "content"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 1959,
          "snippet": "        \n        # Should have fallback content\n        assert \"fallback_reason\" in linkedin_content\n        assert linkedin_content[\"type\"] == \"direct_content\"\n    ",
          "values": {
            "strings": [
              "fallback_reason",
              "type",
              "direct_content"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 1960,
          "snippet": "        # Should have fallback content\n        assert \"fallback_reason\" in linkedin_content\n        assert linkedin_content[\"type\"] == \"direct_content\"\n    \n    async def test_partial_platform_failures(self):",
          "values": {
            "strings": [
              "fallback_reason",
              "type",
              "direct_content"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "twitter",
          "line": 1971,
          "snippet": "            },\n            \"platforms\": {\n                \"twitter\": {\"enabled\": True},  # Should succeed\n                \"invalid_platform\": {\"enabled\": True},  # Should fail\n                \"ghost\": {\"enabled\": True}  # Should succeed",
          "values": {
            "strings": [
              "platforms",
              "twitter",
              "enabled",
              "invalid_platform",
              "enabled",
              "ghost",
              "enabled"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "twitter",
          "line": 1973,
          "snippet": "                \"twitter\": {\"enabled\": True},  # Should succeed\n                \"invalid_platform\": {\"enabled\": True},  # Should fail\n                \"ghost\": {\"enabled\": True}  # Should succeed\n            }\n        }",
          "values": {
            "strings": [
              "twitter",
              "enabled",
              "invalid_platform",
              "enabled",
              "ghost",
              "enabled"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "twitter",
          "line": 1989,
          "snippet": "        # Should have successful jobs for valid platforms\n        assert len(result[\"platform_jobs\"]) >= 2\n        assert \"twitter\" in result[\"platform_jobs\"]\n        assert \"ghost\" in result[\"platform_jobs\"]\n    ",
          "values": {
            "strings": [
              "platform_jobs",
              "twitter",
              "platform_jobs",
              "ghost",
              "platform_jobs"
            ],
            "numbers": [
              2
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "twitter",
          "line": 1990,
          "snippet": "        assert len(result[\"platform_jobs\"]) >= 2\n        assert \"twitter\" in result[\"platform_jobs\"]\n        assert \"ghost\" in result[\"platform_jobs\"]\n    \n    async def test_performance_benchmarks(self):",
          "values": {
            "strings": [
              "platform_jobs",
              "twitter",
              "platform_jobs",
              "ghost",
              "platform_jobs"
            ],
            "numbers": [
              2
            ]
          }
        },
        {
          "type": "required_elements",
          "platform": "universal",
          "line": 1993,
          "snippet": "    \n    async def test_performance_benchmarks(self):\n        \"\"\"Test performance meets requirements\"\"\"\n        \n        request_data = {",
          "values": {
            "strings": [
              "Test performance meets requirements"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 2001,
          "snippet": "            },\n            \"platforms\": {\n                \"twitter\": {\"enabled\": True},\n                \"ghost\": {\"enabled\": True},\n                \"linkedin\": {\"enabled\": True, \"direct_content\": True}",
          "values": {
            "strings": [
              "platforms",
              "twitter",
              "enabled",
              "ghost",
              "enabled",
              "linkedin",
              "enabled",
              "direct_content"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 2002,
          "snippet": "            \"platforms\": {\n                \"twitter\": {\"enabled\": True},\n                \"ghost\": {\"enabled\": True},\n                \"linkedin\": {\"enabled\": True, \"direct_content\": True}\n            }",
          "values": {
            "strings": [
              "platforms",
              "twitter",
              "enabled",
              "ghost",
              "enabled",
              "linkedin",
              "enabled",
              "direct_content"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 2003,
          "snippet": "                \"twitter\": {\"enabled\": True},\n                \"ghost\": {\"enabled\": True},\n                \"linkedin\": {\"enabled\": True, \"direct_content\": True}\n            }\n        }",
          "values": {
            "strings": [
              "twitter",
              "enabled",
              "ghost",
              "enabled",
              "linkedin",
              "enabled",
              "direct_content"
            ],
            "numbers": []
          }
        },
        {
          "type": "required_elements",
          "platform": "universal",
          "line": 2025,
          "snippet": "        total_processing_time = time.time() - processing_start\n        \n        # Total processing should meet performance requirements\n        assert total_processing_time < 120  # Under 2 minutes for direct content\n        ",
          "values": {
            "strings": [],
            "numbers": [
              120,
              2
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 2073,
          "snippet": "                },\n                \"platforms\": {\n                    \"twitter\": {\"enabled\": True},\n                    \"linkedin\": {\"enabled\": True, \"direct_content\": True}\n                }",
          "values": {
            "strings": [
              "platforms",
              "twitter",
              "enabled",
              "linkedin",
              "enabled",
              "direct_content"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 2074,
          "snippet": "                \"platforms\": {\n                    \"twitter\": {\"enabled\": True},\n                    \"linkedin\": {\"enabled\": True, \"direct_content\": True}\n                }\n            }",
          "values": {
            "strings": [
              "platforms",
              "twitter",
              "enabled",
              "linkedin",
              "enabled",
              "direct_content"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 2148,
          "snippet": "      - PRESENTON_URL=http://presenton:8089\n      - AI_WRITING_FLOW_URL=${AI_WRITING_FLOW_URL:-http://localhost:8003}\n      - GHOST_API_KEY=${GHOST_API_KEY}\n      - GHOST_API_URL=${GHOST_API_URL}\n      - TYPEFULLY_API_KEY=${TYPEFULLY_API_KEY}",
          "values": {
            "strings": [],
            "numbers": [
              8089,
              8003
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 2149,
          "snippet": "      - AI_WRITING_FLOW_URL=${AI_WRITING_FLOW_URL:-http://localhost:8003}\n      - GHOST_API_KEY=${GHOST_API_KEY}\n      - GHOST_API_URL=${GHOST_API_URL}\n      - TYPEFULLY_API_KEY=${TYPEFULLY_API_KEY}\n    volumes:",
          "values": {
            "strings": [],
            "numbers": [
              8003
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 2184,
          "snippet": "\n  # Platform Adapters\n  ghost-adapter:\n    build: ./src/adapters/ghost\n    ports:",
          "values": {
            "strings": [],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 2185,
          "snippet": "  # Platform Adapters\n  ghost-adapter:\n    build: ./src/adapters/ghost\n    ports:\n      - \"8086:8082\"",
          "values": {
            "strings": [
              "8086:8082"
            ],
            "numbers": [
              8086,
              8082
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 2189,
          "snippet": "      - \"8086:8082\"\n    environment:\n      - GHOST_API_KEY=${GHOST_API_KEY}\n      - GHOST_API_URL=${GHOST_API_URL}\n      - REDIS_URL=redis://redis:6379",
          "values": {
            "strings": [
              "8086:8082"
            ],
            "numbers": [
              8086,
              8082,
              6379
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 2190,
          "snippet": "    environment:\n      - GHOST_API_KEY=${GHOST_API_KEY}\n      - GHOST_API_URL=${GHOST_API_URL}\n      - REDIS_URL=redis://redis:6379\n    volumes:",
          "values": {
            "strings": [],
            "numbers": [
              6379
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "twitter",
          "line": 2201,
          "snippet": "      test: [\"CMD\", \"curl\", \"-f\", \"http://localhost:8082/health\"]\n\n  twitter-adapter:\n    build: ./src/adapters/twitter\n    ports:",
          "values": {
            "strings": [
              "CMD",
              "curl",
              "-f",
              "http://localhost:8082/health"
            ],
            "numbers": [
              8082
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "twitter",
          "line": 2202,
          "snippet": "\n  twitter-adapter:\n    build: ./src/adapters/twitter\n    ports:\n      - \"8087:8083\"",
          "values": {
            "strings": [
              "8087:8083"
            ],
            "numbers": [
              8087,
              8083
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "substack",
          "line": 2217,
          "snippet": "      test: [\"CMD\", \"curl\", \"-f\", \"http://localhost:8083/health\"]\n\n  substack-adapter:\n    build: ./src/adapters/substack\n    ports:",
          "values": {
            "strings": [
              "CMD",
              "curl",
              "-f",
              "http://localhost:8083/health"
            ],
            "numbers": [
              8083
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "substack",
          "line": 2218,
          "snippet": "\n  substack-adapter:\n    build: ./src/adapters/substack\n    ports:\n      - \"8088:8084\"",
          "values": {
            "strings": [
              "8088:8084"
            ],
            "numbers": [
              8088,
              8084
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 2296,
          "snippet": "\n# Platform APIs\nGHOST_API_KEY=your_ghost_admin_api_key\nGHOST_API_URL=https://your-ghost-site.com\nTYPEFULLY_API_KEY=your_typefully_key",
          "values": {
            "strings": [],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 2297,
          "snippet": "# Platform APIs\nGHOST_API_KEY=your_ghost_admin_api_key\nGHOST_API_URL=https://your-ghost-site.com\nTYPEFULLY_API_KEY=your_typefully_key\nBROWSERBASE_API_KEY=your_browserbase_key",
          "values": {
            "strings": [],
            "numbers": []
          }
        },
        {
          "type": "required_elements",
          "platform": "universal",
          "line": 2335,
          "snippet": "source .env\n\n# Verify required variables\nrequired_vars=(\n    \"PEXELS_API_KEY\"",
          "values": {
            "strings": [
              "PEXELS_API_KEY"
            ],
            "numbers": []
          }
        },
        {
          "type": "required_elements",
          "platform": "universal",
          "line": 2336,
          "snippet": "\n# Verify required variables\nrequired_vars=(\n    \"PEXELS_API_KEY\"\n    \"OPENAI_API_KEY\"",
          "values": {
            "strings": [
              "PEXELS_API_KEY",
              "OPENAI_API_KEY"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 2339,
          "snippet": "    \"PEXELS_API_KEY\"\n    \"OPENAI_API_KEY\"\n    \"GHOST_API_KEY\"\n    \"GHOST_API_URL\"\n    \"TYPEFULLY_API_KEY\"",
          "values": {
            "strings": [
              "PEXELS_API_KEY",
              "OPENAI_API_KEY",
              "GHOST_API_KEY",
              "GHOST_API_URL",
              "TYPEFULLY_API_KEY"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 2340,
          "snippet": "    \"OPENAI_API_KEY\"\n    \"GHOST_API_KEY\"\n    \"GHOST_API_URL\"\n    \"TYPEFULLY_API_KEY\"\n)",
          "values": {
            "strings": [
              "OPENAI_API_KEY",
              "GHOST_API_KEY",
              "GHOST_API_URL",
              "TYPEFULLY_API_KEY"
            ],
            "numbers": []
          }
        },
        {
          "type": "required_elements",
          "platform": "universal",
          "line": 2344,
          "snippet": ")\n\nfor var in \"${required_vars[@]}\"; do\n    if [ -z \"${!var}\" ]; then\n        echo \"❌ Required environment variable $var is not set\"",
          "values": {
            "strings": [
              "${required_vars[@]}",
              "${!var}",
              "❌ Required environment variable $var is not set"
            ],
            "numbers": []
          }
        },
        {
          "type": "required_elements",
          "platform": "universal",
          "line": 2346,
          "snippet": "for var in \"${required_vars[@]}\"; do\n    if [ -z \"${!var}\" ]; then\n        echo \"❌ Required environment variable $var is not set\"\n        exit 1\n    fi",
          "values": {
            "strings": [
              "${required_vars[@]}",
              "${!var}",
              "❌ Required environment variable $var is not set"
            ],
            "numbers": [
              1
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "twitter",
          "line": 2379,
          "snippet": "\necho \"📱 Starting platform adapters...\"\ndocker-compose up -d ghost-adapter twitter-adapter substack-adapter\n\necho \"🌐 Starting Nginx...\"",
          "values": {
            "strings": [
              "📱 Starting platform adapters...",
              "🌐 Starting Nginx..."
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "twitter",
          "line": 2389,
          "snippet": "# Health checks\necho \"🔍 Running health checks...\"\nservices=(\"orchestrator:8085\" \"presenton:8089\" \"ghost-adapter:8086\" \"twitter-adapter:8087\")\n\nfor service in \"${services[@]}\"; do",
          "values": {
            "strings": [
              "🔍 Running health checks...",
              "orchestrator:8085",
              "presenton:8089",
              "ghost-adapter:8086",
              "twitter-adapter:8087",
              "${services[@]}"
            ],
            "numbers": [
              8085,
              8089,
              8086,
              8087
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "twitter",
          "line": 2409,
          "snippet": "echo \"   Enhanced Orchestrator: http://localhost:8085\"\necho \"   Presenton Service:     http://localhost:8089\"\necho \"   Ghost Adapter:         http://localhost:8086\"\necho \"   Twitter Adapter:       http://localhost:8087\"\necho \"   Substack Adapter:      http://localhost:8088\"",
          "values": {
            "strings": [
              "   Enhanced Orchestrator: http://localhost:8085",
              "   Presenton Service:     http://localhost:8089",
              "   Ghost Adapter:         http://localhost:8086",
              "   Twitter Adapter:       http://localhost:8087",
              "   Substack Adapter:      http://localhost:8088"
            ],
            "numbers": [
              8085,
              8089,
              8086,
              8087,
              8088
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "twitter",
          "line": 2410,
          "snippet": "echo \"   Presenton Service:     http://localhost:8089\"\necho \"   Ghost Adapter:         http://localhost:8086\"\necho \"   Twitter Adapter:       http://localhost:8087\"\necho \"   Substack Adapter:      http://localhost:8088\"\necho \"\"",
          "values": {
            "strings": [
              "   Presenton Service:     http://localhost:8089",
              "   Ghost Adapter:         http://localhost:8086",
              "   Twitter Adapter:       http://localhost:8087",
              "   Substack Adapter:      http://localhost:8088"
            ],
            "numbers": [
              8089,
              8086,
              8087,
              8088
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "twitter",
          "line": 2411,
          "snippet": "echo \"   Ghost Adapter:         http://localhost:8086\"\necho \"   Twitter Adapter:       http://localhost:8087\"\necho \"   Substack Adapter:      http://localhost:8088\"\necho \"\"\necho \"📈 Monitoring:\"",
          "values": {
            "strings": [
              "   Ghost Adapter:         http://localhost:8086",
              "   Twitter Adapter:       http://localhost:8087",
              "   Substack Adapter:      http://localhost:8088",
              "\necho "
            ],
            "numbers": [
              8086,
              8087,
              8088
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 2424,
          "snippet": "echo '   curl -X POST http://localhost:8085/publish/enhanced \\'\necho '   -H \"Content-Type: application/json\" \\'\necho '   -d \"{\\\"topic\\\":{\\\"title\\\":\\\"Test\\\",\\\"description\\\":\\\"Test enhanced pipeline\\\"},\\\"platforms\\\":{\\\"linkedin\\\":{\\\"enabled\\\":true,\\\"direct_content\\\":false}}}\"'\n```\n",
          "values": {
            "strings": [
              "   curl -X POST http://localhost:8085/publish/enhanced \\",
              "   -H ",
              " \\",
              "   -d ",
              "topic\\",
              "title\\",
              "Test\\",
              "description\\",
              "Test enhanced pipeline\\",
              "platforms\\"
            ],
            "numbers": [
              8085
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 2433,
          "snippet": "### **Business Metrics**:\n- [ ] **Content Quality**: Manual review scores >8/10 dla każdy content type\n- [ ] **Processing Speed**: <150s dla complete LinkedIn carousel pipeline\n- [ ] **Platform Coverage**: Support dla 4+ platforms z specialized handling\n- [ ] **User Experience**: Single API call creates multi-platform content",
          "values": {
            "strings": [],
            "numbers": [
              8,
              10,
              150,
              4
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 2445,
          "snippet": "### **Feature Completeness**:\n- [ ] **Image Processing**: Pexels placeholder→real images w all platforms\n- [ ] **Presenton Integration**: LinkedIn prompt→carousel→PDF pipeline working\n- [ ] **Platform Differentiation**: LinkedIn prompts vs direct content working\n- [ ] **User Control**: Checkbox dla \"treści bezpośrednie\" functional",
          "values": {
            "strings": [
              "treści bezpośrednie"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 2446,
          "snippet": "- [ ] **Image Processing**: Pexels placeholder→real images w all platforms\n- [ ] **Presenton Integration**: LinkedIn prompt→carousel→PDF pipeline working\n- [ ] **Platform Differentiation**: LinkedIn prompts vs direct content working\n- [ ] **User Control**: Checkbox dla \"treści bezpośrednie\" functional\n- [ ] **Backward Compatibility**: Existing Publisher functionality preserved",
          "values": {
            "strings": [
              "treści bezpośrednie"
            ],
            "numbers": []
          }
        }
      ]
    },
    {
      "file": "/Users/hretheum/dev/bezrobocie/vector-wave/publisher/docs/phase-1-substack-adapter.md",
      "exists": true,
      "hits": [
        {
          "type": "platform_specific",
          "platform": "substack",
          "line": 1,
          "snippet": "# Faza 1: Substack Adapter (browserbase/stagehand)\n\n## Cel fazy",
          "values": {
            "strings": [],
            "numbers": [
              1
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 4,
          "snippet": "\n## Cel fazy\nZbudowanie minimalnego, walidowalnego adaptera do publikacji na Substack, analogicznie do LinkedIn, z obsługą planowania i natychmiastowej publikacji. Pierwszy etap to wdrożenie mechanizmu ondemand session initializer.\n\n---",
          "values": {
            "strings": [],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "substack",
          "line": 8,
          "snippet": "---\n\n### Zadanie 1.1: Szkielet CLI do inicjalizacji sesji Substack ✅\n- **Wartość**: CLI/skrypt uruchamia się i przyjmuje parametry konta.\n- **Test**: `node scripts/substack-cli.js session create --account test` wyświetla komunikat o rozpoczęciu procesu.",
          "values": {
            "strings": [],
            "numbers": [
              1,
              1
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "substack",
          "line": 10,
          "snippet": "### Zadanie 1.1: Szkielet CLI do inicjalizacji sesji Substack ✅\n- **Wartość**: CLI/skrypt uruchamia się i przyjmuje parametry konta.\n- **Test**: `node scripts/substack-cli.js session create --account test` wyświetla komunikat o rozpoczęciu procesu.\n\n### Zadanie 1.2: Połączenie z browserbase/stagehand i otwarcie strony logowania Substack ✅",
          "values": {
            "strings": [],
            "numbers": [
              1,
              1,
              1,
              2
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "substack",
          "line": 12,
          "snippet": "- **Test**: `node scripts/substack-cli.js session create --account test` wyświetla komunikat o rozpoczęciu procesu.\n\n### Zadanie 1.2: Połączenie z browserbase/stagehand i otwarcie strony logowania Substack ✅\n- **Wartość**: Skrypt otwiera sesję browserbase i generuje link do interaktywnej przeglądarki z otwartą stroną logowania Substack.\n- **Test**: Po uruchomieniu CLI, w konsoli pojawia się link do browserbase, który prowadzi do strony logowania Substack.",
          "values": {
            "strings": [],
            "numbers": [
              1,
              2
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "substack",
          "line": 13,
          "snippet": "\n### Zadanie 1.2: Połączenie z browserbase/stagehand i otwarcie strony logowania Substack ✅\n- **Wartość**: Skrypt otwiera sesję browserbase i generuje link do interaktywnej przeglądarki z otwartą stroną logowania Substack.\n- **Test**: Po uruchomieniu CLI, w konsoli pojawia się link do browserbase, który prowadzi do strony logowania Substack.\n",
          "values": {
            "strings": [],
            "numbers": [
              1,
              2
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "substack",
          "line": 14,
          "snippet": "### Zadanie 1.2: Połączenie z browserbase/stagehand i otwarcie strony logowania Substack ✅\n- **Wartość**: Skrypt otwiera sesję browserbase i generuje link do interaktywnej przeglądarki z otwartą stroną logowania Substack.\n- **Test**: Po uruchomieniu CLI, w konsoli pojawia się link do browserbase, który prowadzi do strony logowania Substack.\n\n### Zadanie 1.3: Ręczne logowanie i potwierdzenie zakończenia w CLI ✅",
          "values": {
            "strings": [],
            "numbers": [
              1,
              2,
              1,
              3
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "substack",
          "line": 21,
          "snippet": "\n### Zadanie 1.4: Ekstrakcja i zapis pełnego kontekstu przeglądarki (cookies, localStorage, sessionStorage) ✅\n- **Wartość**: Skrypt pobiera i zapisuje kontekst sesji do pliku `data/sessions/{account}_substack.json`.\n- **Test**: Po zakończeniu procesu, plik z danymi sesji pojawia się w katalogu `data/sessions/`.\n",
          "values": {
            "strings": [],
            "numbers": [
              1,
              4
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "substack",
          "line": 24,
          "snippet": "- **Test**: Po zakończeniu procesu, plik z danymi sesji pojawia się w katalogu `data/sessions/`.\n\n### Zadanie 1.5: Walidacja poprawności sesji (sprawdzenie zalogowania na Substack) ✅\n- **Wartość**: Skrypt automatycznie sprawdza, czy sesja jest aktywna (np. czy strona główna Substack jest dostępna bez logowania).\n- **Test**: Po zakończeniu procesu, CLI wyświetla komunikat \"Sesja aktywna\" lub \"Błąd logowania\".",
          "values": {
            "strings": [
              "Sesja aktywna",
              "Błąd logowania"
            ],
            "numbers": [
              1,
              5
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "substack",
          "line": 25,
          "snippet": "\n### Zadanie 1.5: Walidacja poprawności sesji (sprawdzenie zalogowania na Substack) ✅\n- **Wartość**: Skrypt automatycznie sprawdza, czy sesja jest aktywna (np. czy strona główna Substack jest dostępna bez logowania).\n- **Test**: Po zakończeniu procesu, CLI wyświetla komunikat \"Sesja aktywna\" lub \"Błąd logowania\".\n",
          "values": {
            "strings": [
              "Sesja aktywna",
              "Błąd logowania"
            ],
            "numbers": [
              1,
              5
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "substack",
          "line": 29,
          "snippet": "\n### Zadanie 1.6: Odtwarzanie sesji w automatyzacji publikacji ✅\n- **Wartość**: Adapter Substack potrafi użyć zapisanej sesji do automatycznego wejścia na Substack bez ponownego logowania.\n- **Test**: Po uruchomieniu automatycznej publikacji, logi potwierdzają, że użytkownik jest zalogowany bez interakcji.\n- **Implementacja**: `SubstackAdapter` w `src/adapters/substack-adapter.js` z metodami `initialize()`, `startBrowser()`, `restoreSession()`, `publishPost()`",
          "values": {
            "strings": [],
            "numbers": [
              1,
              6
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "substack",
          "line": 31,
          "snippet": "- **Wartość**: Adapter Substack potrafi użyć zapisanej sesji do automatycznego wejścia na Substack bez ponownego logowania.\n- **Test**: Po uruchomieniu automatycznej publikacji, logi potwierdzają, że użytkownik jest zalogowany bez interakcji.\n- **Implementacja**: `SubstackAdapter` w `src/adapters/substack-adapter.js` z metodami `initialize()`, `startBrowser()`, `restoreSession()`, `publishPost()`\n- **Uwagi**: Wykryto anti-bot protection na polu tagów (element z zerowymi wymiarami) - tagi są pomijane, ale główny flow publikacji działa\n",
          "values": {
            "strings": [],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "substack",
          "line": 35,
          "snippet": "\n### Zadanie 1.7: Obsługa wielu kont (multi-account)\n- **Wartość**: Możliwość inicjalizacji i wyboru sesji dla różnych kont Substack.\n- **Test**: Po utworzeniu kilku sesji, CLI pozwala wybrać, której użyć do publikacji.\n- **Status**: Gotowe - CLI `substack-cli.js` obsługuje parametr `--account`, sesje zapisywane jako `{account}_substack.json`",
          "values": {
            "strings": [],
            "numbers": [
              1,
              7
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "substack",
          "line": 37,
          "snippet": "- **Wartość**: Możliwość inicjalizacji i wyboru sesji dla różnych kont Substack.\n- **Test**: Po utworzeniu kilku sesji, CLI pozwala wybrać, której użyć do publikacji.\n- **Status**: Gotowe - CLI `substack-cli.js` obsługuje parametr `--account`, sesje zapisywane jako `{account}_substack.json`\n\n### Zadanie 1.8: Walidacja i rotacja sesji (monitorowanie wygaśnięcia, ponowna inicjalizacja) ✅",
          "values": {
            "strings": [],
            "numbers": [
              1,
              8
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "substack",
          "line": 53,
          "snippet": "\n### Podsumowanie osiągnięć:\n- ✅ **Session Initializer**: Pełny mechanizm \"ondemand session initializer\" dla Substack\n- ✅ **CLI Tools**: `substack-cli.js` (create, validate) + `session-manager.js` (status)\n- ✅ **Adapter API**: `SubstackAdapter` z automatyzacją publikacji",
          "values": {
            "strings": [
              "ondemand session initializer"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "substack",
          "line": 54,
          "snippet": "### Podsumowanie osiągnięć:\n- ✅ **Session Initializer**: Pełny mechanizm \"ondemand session initializer\" dla Substack\n- ✅ **CLI Tools**: `substack-cli.js` (create, validate) + `session-manager.js` (status)\n- ✅ **Adapter API**: `SubstackAdapter` z automatyzacją publikacji\n- ✅ **Anti-Bot Detection**: Wykrywanie i omijanie ochrony przed botami",
          "values": {
            "strings": [
              "ondemand session initializer"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "substack",
          "line": 55,
          "snippet": "- ✅ **Session Initializer**: Pełny mechanizm \"ondemand session initializer\" dla Substack\n- ✅ **CLI Tools**: `substack-cli.js` (create, validate) + `session-manager.js` (status)\n- ✅ **Adapter API**: `SubstackAdapter` z automatyzacją publikacji\n- ✅ **Anti-Bot Detection**: Wykrywanie i omijanie ochrony przed botami\n- ✅ **Session Management**: Monitoring wygaśnięcia, ostrzeżenia, statusy",
          "values": {
            "strings": [
              "ondemand session initializer"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "substack",
          "line": 58,
          "snippet": "- ✅ **Anti-Bot Detection**: Wykrywanie i omijanie ochrony przed botami\n- ✅ **Session Management**: Monitoring wygaśnięcia, ostrzeżenia, statusy\n- ✅ **Multi-Account**: Obsługa wielu kont Substack\n- ✅ **Robust Error Handling**: Graceful degradation i informacyjne błędy\n",
          "values": {
            "strings": [],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "twitter",
          "line": 68,
          "snippet": "\n### Następne kroki:\n- **Faza 2**: Twitter/X adapter z Typefully API\n- **Faza 3**: Beehiiv adapter\n- **Faza 4**: Unified orchestrator API",
          "values": {
            "strings": [],
            "numbers": [
              2,
              3,
              4
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "twitter",
          "line": 69,
          "snippet": "### Następne kroki:\n- **Faza 2**: Twitter/X adapter z Typefully API\n- **Faza 3**: Beehiiv adapter\n- **Faza 4**: Unified orchestrator API\n",
          "values": {
            "strings": [],
            "numbers": [
              2,
              3,
              4
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "substack",
          "line": 72,
          "snippet": "- **Faza 4**: Unified orchestrator API\n\nMechanizm sesji Substack jest w pełni funkcjonalny i gotowy do integracji! 🚀",
          "values": {
            "strings": [],
            "numbers": [
              4
            ]
          }
        }
      ]
    },
    {
      "file": "/Users/hretheum/dev/bezrobocie/vector-wave/publisher/docs/phase-7-linkedin-integration.md",
      "exists": true,
      "hits": [
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 1,
          "snippet": "# Faza 7: Integracja z LinkedIn Module (Production Ready)\n\n## Cel fazy",
          "values": {
            "strings": [],
            "numbers": [
              7
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 4,
          "snippet": "\n## Cel fazy\nIntegracja istniejącego, production-ready LinkedIn Module z Multi-Channel Publisher przez utworzenie Python wrapper dla Node.js CLI.\n\n---",
          "values": {
            "strings": [],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 8,
          "snippet": "---\n\n### Zadanie 7.1: Implementacja LinkedInModuleWrapper klasy\n- **Wartość**: Python wrapper dla existing LinkedIn Node.js module z CLI execution.\n- **Test**: Wrapper poprawnie wykonuje `node scripts/linkedin-cli.js --help` i parsuje output.",
          "values": {
            "strings": [],
            "numbers": [
              7,
              1
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 9,
          "snippet": "\n### Zadanie 7.1: Implementacja LinkedInModuleWrapper klasy\n- **Wartość**: Python wrapper dla existing LinkedIn Node.js module z CLI execution.\n- **Test**: Wrapper poprawnie wykonuje `node scripts/linkedin-cli.js --help` i parsuje output.\n",
          "values": {
            "strings": [],
            "numbers": [
              7,
              1
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 10,
          "snippet": "### Zadanie 7.1: Implementacja LinkedInModuleWrapper klasy\n- **Wartość**: Python wrapper dla existing LinkedIn Node.js module z CLI execution.\n- **Test**: Wrapper poprawnie wykonuje `node scripts/linkedin-cli.js --help` i parsuje output.\n\n### Zadanie 7.2: CLI Command Execution i Output Parsing",
          "values": {
            "strings": [],
            "numbers": [
              7,
              1,
              7,
              2
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 13,
          "snippet": "\n### Zadanie 7.2: CLI Command Execution i Output Parsing\n- **Wartość**: Wrapper wykonuje LinkedIn CLI commands i parsuje success/error responses.\n- **Test**: Po wykonaniu `publish`, wrapper zwraca structured response z success/error status.\n",
          "values": {
            "strings": [],
            "numbers": [
              7,
              2
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 17,
          "snippet": "\n### Zadanie 7.3: Session Validation Integration\n- **Wartość**: Wrapper sprawdza status LinkedIn session przed publikacją.\n- **Test**: `validate_session()` zwraca poprawny status dla aktywnych i wygasłych sesji.\n",
          "values": {
            "strings": [],
            "numbers": [
              7,
              3
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 20,
          "snippet": "- **Test**: `validate_session()` zwraca poprawny status dla aktywnych i wygasłych sesji.\n\n### Zadanie 7.4: Error Handling dla LinkedIn-Specific Issues\n- **Wartość**: Wrapper kategoryzuje błędy LinkedIn (selector changes, session expired, rate limits).\n- **Test**: Different error types są poprawnie rozpoznawane i mapped do error codes.",
          "values": {
            "strings": [],
            "numbers": [
              7,
              4
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 21,
          "snippet": "\n### Zadanie 7.4: Error Handling dla LinkedIn-Specific Issues\n- **Wartość**: Wrapper kategoryzuje błędy LinkedIn (selector changes, session expired, rate limits).\n- **Test**: Different error types są poprawnie rozpoznawane i mapped do error codes.\n",
          "values": {
            "strings": [],
            "numbers": [
              7,
              4
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 24,
          "snippet": "- **Test**: Different error types są poprawnie rozpoznawane i mapped do error codes.\n\n### Zadanie 7.5: Content Adaptation dla LinkedIn Format\n- **Wartość**: Wrapper adaptuje content z AI Writing Flow do LinkedIn requirements (hashtags, mentions, PDF).\n- **Test**: Content jest poprawnie formatowany zgodnie z LinkedIn best practices.",
          "values": {
            "strings": [],
            "numbers": [
              7,
              5
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 25,
          "snippet": "\n### Zadanie 7.5: Content Adaptation dla LinkedIn Format\n- **Wartość**: Wrapper adaptuje content z AI Writing Flow do LinkedIn requirements (hashtags, mentions, PDF).\n- **Test**: Content jest poprawnie formatowany zgodnie z LinkedIn best practices.\n",
          "values": {
            "strings": [],
            "numbers": [
              7,
              5
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 26,
          "snippet": "### Zadanie 7.5: Content Adaptation dla LinkedIn Format\n- **Wartość**: Wrapper adaptuje content z AI Writing Flow do LinkedIn requirements (hashtags, mentions, PDF).\n- **Test**: Content jest poprawnie formatowany zgodnie z LinkedIn best practices.\n\n### Zadanie 7.6: Scheduled Publication Support",
          "values": {
            "strings": [],
            "numbers": [
              7,
              5,
              7,
              6
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 29,
          "snippet": "\n### Zadanie 7.6: Scheduled Publication Support\n- **Wartość**: Wrapper obsługuje scheduled posts przez LinkedIn CLI scheduling mechanism.\n- **Test**: Scheduled post jest poprawnie utworzony i widoczny w LinkedIn scheduler.\n",
          "values": {
            "strings": [],
            "numbers": [
              7,
              6
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 30,
          "snippet": "### Zadanie 7.6: Scheduled Publication Support\n- **Wartość**: Wrapper obsługuje scheduled posts przez LinkedIn CLI scheduling mechanism.\n- **Test**: Scheduled post jest poprawnie utworzony i widoczny w LinkedIn scheduler.\n\n### Zadanie 7.7: Media Upload Integration",
          "values": {
            "strings": [],
            "numbers": [
              7,
              6,
              7,
              7
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 33,
          "snippet": "\n### Zadanie 7.7: Media Upload Integration\n- **Wartość**: Wrapper obsługuje PDF i image uploads przez LinkedIn CLI.\n- **Test**: Media files są poprawnie uploading i attachowane do posts.\n",
          "values": {
            "strings": [],
            "numbers": [
              7,
              7
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 37,
          "snippet": "\n### Zadanie 7.8: Integration Testing z Orchestrator\n- **Wartość**: LinkedInModuleWrapper jest zintegrowany z Orchestrator i Redis queue.\n- **Test**: Publikacja przez Orchestrator używa LinkedIn wrapper i kończy się sukcesem.",
          "values": {
            "strings": [],
            "numbers": [
              7,
              8
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 38,
          "snippet": "### Zadanie 7.8: Integration Testing z Orchestrator\n- **Wartość**: LinkedInModuleWrapper jest zintegrowany z Orchestrator i Redis queue.\n- **Test**: Publikacja przez Orchestrator używa LinkedIn wrapper i kończy się sukcesem.",
          "values": {
            "strings": [],
            "numbers": [
              7,
              8
            ]
          }
        }
      ]
    },
    {
      "file": "/Users/hretheum/dev/bezrobocie/vector-wave/publisher/docs/phase-6-integration-e2e.md",
      "exists": true,
      "hits": [
        {
          "type": "required_elements",
          "platform": "universal",
          "line": 8,
          "snippet": "**Prerequisite**: Faza 4.5 (Enhanced Orchestrator) musi być ukończona przed Fazą 6.\n\n**Note**: Ta faza została zaktualizowana po implementacji Enhanced Orchestrator (Faza 4.5) i zawiera enhanced integration requirements.\n\n---",
          "values": {
            "strings": [],
            "numbers": [
              4,
              5,
              6,
              4,
              5
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 14,
          "snippet": "### Zadanie 6.1: Enhanced AI Writing Flow Integration\n- **Wartość**: Enhanced Orchestrator pobiera platform-specific content z AI Writing Flow\n- **Test**: Multi-platform content generation works z proper differentiation (LinkedIn prompts vs direct content)\n- **Enhanced**: Integration z `/generate/multi-platform` i `/generate/linkedin-prompt` endpoints\n",
          "values": {
            "strings": [],
            "numbers": [
              6,
              1
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 15,
          "snippet": "- **Wartość**: Enhanced Orchestrator pobiera platform-specific content z AI Writing Flow\n- **Test**: Multi-platform content generation works z proper differentiation (LinkedIn prompts vs direct content)\n- **Enhanced**: Integration z `/generate/multi-platform` i `/generate/linkedin-prompt` endpoints\n\n### Zadanie 6.2: Complete Image Processing Pipeline Integration  ",
          "values": {
            "strings": [],
            "numbers": [
              6,
              2
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 23,
          "snippet": "\n### Zadanie 6.3: Presenton Integration End-to-End Testing\n- **Wartość**: Complete LinkedIn carousel pipeline (prompt→presentation→PDF→LinkedIn)\n- **Test**: LinkedIn carousel generation works end-to-end z proper PDF creation\n- **Enhanced**: Integration z Presenton service i LinkedIn Presenton workflow",
          "values": {
            "strings": [],
            "numbers": [
              6,
              3
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 24,
          "snippet": "### Zadanie 6.3: Presenton Integration End-to-End Testing\n- **Wartość**: Complete LinkedIn carousel pipeline (prompt→presentation→PDF→LinkedIn)\n- **Test**: LinkedIn carousel generation works end-to-end z proper PDF creation\n- **Enhanced**: Integration z Presenton service i LinkedIn Presenton workflow\n",
          "values": {
            "strings": [],
            "numbers": [
              6,
              3
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 25,
          "snippet": "- **Wartość**: Complete LinkedIn carousel pipeline (prompt→presentation→PDF→LinkedIn)\n- **Test**: LinkedIn carousel generation works end-to-end z proper PDF creation\n- **Enhanced**: Integration z Presenton service i LinkedIn Presenton workflow\n\n### Zadanie 6.4: Multi-Platform E2E Testing z Enhanced Features",
          "values": {
            "strings": [],
            "numbers": [
              6,
              4,
              2
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 29,
          "snippet": "### Zadanie 6.4: Multi-Platform E2E Testing z Enhanced Features\n- **Wartość**: Complete E2E testing z enhanced content processing\n- **Test**: Multi-platform publications work z image processing, LinkedIn carousels, i content differentiation\n- **Enhanced**: Testing wszystkich enhanced features simultaneously\n",
          "values": {
            "strings": [],
            "numbers": [
              6,
              4,
              2,
              2
            ]
          }
        }
      ]
    },
    {
      "file": "/Users/hretheum/dev/bezrobocie/vector-wave/publisher/docs/HEALTH_MONITORING_MIGRATION_GUIDE.md",
      "exists": true,
      "hits": [
        {
          "type": "required_elements",
          "platform": "universal",
          "line": 17,
          "snippet": "## 📋 Pre-Migration Checklist\n\n### System Requirements\n- [ ] **Docker**: Version 20.0+ with docker-compose\n- [ ] **Python**: 3.11+ for health monitoring components",
          "values": {
            "strings": [],
            "numbers": [
              20,
              0,
              3,
              11
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "twitter",
          "line": 313,
          "snippet": "# Test enhanced health endpoints\ncurl http://localhost:8085/platforms/health | jq\ncurl http://localhost:8085/adapters/twitter/health | jq\ncurl http://localhost:8085/adapters/ghost/health | jq\n```",
          "values": {
            "strings": [],
            "numbers": [
              8085,
              8085,
              8085
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "twitter",
          "line": 314,
          "snippet": "curl http://localhost:8085/platforms/health | jq\ncurl http://localhost:8085/adapters/twitter/health | jq\ncurl http://localhost:8085/adapters/ghost/health | jq\n```\n",
          "values": {
            "strings": [],
            "numbers": [
              8085,
              8085,
              8085
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "twitter",
          "line": 321,
          "snippet": "{\n  \"status\": \"healthy\",\n  \"platform\": \"twitter\",\n  \"connection\": {\"status\": \"connected\"},\n  \"rate_limits\": {\"percentage_used\": 15.0},",
          "values": {
            "strings": [
              "status",
              "healthy",
              "platform",
              "twitter",
              "connection",
              "status",
              "connected",
              "rate_limits",
              "percentage_used"
            ],
            "numbers": [
              15,
              0
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "twitter",
          "line": 335,
          "snippet": "\n# Test rate limit tracking\ncurl -X POST http://localhost:8085/rate-limits/twitter/track \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\"request_type\": \"api\", \"count\": 5}'",
          "values": {
            "strings": [
              "Content-Type: application/json",
              "request_type",
              "api",
              "count"
            ],
            "numbers": [
              8085,
              5
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 346,
          "snippet": "curl -X POST http://localhost:8085/session/validate \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\"platform\": \"linkedin\", \"account\": \"default\"}'\n\n# Start monitoring",
          "values": {
            "strings": [
              "Content-Type: application/json",
              "platform",
              "linkedin",
              "account",
              "default"
            ],
            "numbers": [
              8085
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 351,
          "snippet": "curl -X POST http://localhost:8085/session/monitor/start \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\"platform\": \"linkedin\", \"account\": \"default\"}'\n```\n",
          "values": {
            "strings": [
              "Content-Type: application/json",
              "platform",
              "linkedin",
              "account",
              "default"
            ],
            "numbers": [
              8085
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "twitter",
          "line": 363,
          "snippet": "curl -X POST http://localhost:8085/performance/record \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\"platform\": \"twitter\", \"operation_type\": \"test\", \"response_time_ms\": 120, \"success\": true}'\n```\n",
          "values": {
            "strings": [
              "Content-Type: application/json",
              "platform",
              "twitter",
              "operation_type",
              "test",
              "response_time_ms",
              "success"
            ],
            "numbers": [
              8085,
              120
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "twitter",
          "line": 375,
          "snippet": "curl -X POST http://localhost:8085/recovery/trigger \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\"platform\": \"twitter\", \"failure_type\": \"connection_timeout\", \"error_message\": \"Test recovery\"}'\n```\n",
          "values": {
            "strings": [
              "Content-Type: application/json",
              "platform",
              "twitter",
              "failure_type",
              "connection_timeout",
              "error_message",
              "Test recovery"
            ],
            "numbers": [
              8085
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "twitter",
          "line": 392,
          "snippet": "```bash\n# Copy to each adapter\ncp src/orchestrator/platform_health_models.py src/adapters/twitter/\ncp src/orchestrator/platform_health_models.py src/adapters/ghost/\ncp src/orchestrator/platform_health_models.py src/adapters/beehiiv/",
          "values": {
            "strings": [],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "twitter",
          "line": 393,
          "snippet": "# Copy to each adapter\ncp src/orchestrator/platform_health_models.py src/adapters/twitter/\ncp src/orchestrator/platform_health_models.py src/adapters/ghost/\ncp src/orchestrator/platform_health_models.py src/adapters/beehiiv/\n```",
          "values": {
            "strings": [],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "twitter",
          "line": 394,
          "snippet": "cp src/orchestrator/platform_health_models.py src/adapters/twitter/\ncp src/orchestrator/platform_health_models.py src/adapters/ghost/\ncp src/orchestrator/platform_health_models.py src/adapters/beehiiv/\n```\n",
          "values": {
            "strings": [],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "twitter",
          "line": 439,
          "snippet": "```python\nif os.getenv(\"DOCKER_ENV\"):\n    base_url = \"http://twitter-adapter:8080\"\nelse:\n    base_url = \"http://localhost:8083\"",
          "values": {
            "strings": [
              "DOCKER_ENV",
              "http://twitter-adapter:8080",
              "http://localhost:8083"
            ],
            "numbers": [
              8080,
              8083
            ]
          }
        }
      ]
    },
    {
      "file": "/Users/hretheum/dev/bezrobocie/vector-wave/publisher/docs/phase-4-orchestrator-api.md",
      "exists": true,
      "hits": [
        {
          "type": "platform_specific",
          "platform": "twitter",
          "line": 19,
          "snippet": "  - ✅ **OpenAPI Docs**: `/docs` z dokumentacją API\n  - ✅ **Docker Integration**: Container z healthchecks\n  - ✅ **Adapter Monitoring**: Twitter, Beehiiv, Substack status\n- **Port**: 8085:8080 (mapped aby uniknąć konfliktu z Java)\n- **Performance**: <5ms response time, excellent performance",
          "values": {
            "strings": [],
            "numbers": [
              8085,
              8080,
              5
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 29,
          "snippet": "- **Implementacja**: ✅ Complete multi-platform publishing endpoint\n- **Features**:\n  - ✅ **Multi-Platform Support**: Twitter, LinkedIn, Substack, Beehiiv\n  - ✅ **Request Validation**: Comprehensive Pydantic models with validation\n  - ✅ **Publication ID Generation**: Unique UUID-based publication IDs",
          "values": {
            "strings": [],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 59,
          "snippet": "- **Makefile**: ✅ `make test-redis-queue` i updated `make test-orchestrator-full`\n\n### Zadanie 4.4: Delegowanie do adapterów (LinkedIn, Twitter, Substack, Beehiiv) ✅\n- **Wartość**: Orchestrator wywołuje odpowiedni adapter w zależności od platformy.\n- **Test**: Po wysłaniu żądania, adapter otrzymuje poprawne dane (logi adaptera).",
          "values": {
            "strings": [],
            "numbers": [
              4,
              4
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 65,
          "snippet": "- **Features**:\n  - ✅ **Redis Worker**: Async worker consuming jobs from Redis queues\n  - ✅ **Platform Adapters**: HTTP client for Twitter, Ghost, Substack, LinkedIn\n  - ✅ **Job Delegation**: Jobs are properly delegated to platform-specific adapters\n  - ✅ **Error Handling**: Failed jobs moved to failed queue with error details",
          "values": {
            "strings": [],
            "numbers": []
          }
        }
      ]
    },
    {
      "file": "/Users/hretheum/dev/bezrobocie/vector-wave/publisher/docs/gap-analysis-summary.md",
      "exists": true,
      "hits": [
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 10,
          "snippet": "|--------------|--------|--------|-----------|---------|\n| AI Writing Flow Integration | 100% | 100% | 0 | ✅ Kompletny |\n| LinkedIn Module Integration | 30% | 100% | 8 zadań | ✅ Kompletny |\n| Platform Health Monitoring | 20% | 100% | 8 zadań | ✅ Kompletny |\n| Advanced Monitoring (Prometheus/Grafana) | 40% | 100% | 5 zadań | ✅ Kompletny |",
          "values": {
            "strings": [],
            "numbers": [
              100,
              100,
              0,
              30,
              100,
              8,
              20,
              100,
              8,
              40
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 20,
          "snippet": "## 📁 Nowe dokumenty utworzone\n\n### 1. **`phase-7-linkedin-integration.md`**\n**Zadania atomowe dla LinkedIn Module wrapper**:\n- Task 7.1: LinkedInModuleWrapper klasa",
          "values": {
            "strings": [],
            "numbers": [
              1,
              7,
              7,
              1
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 21,
          "snippet": "\n### 1. **`phase-7-linkedin-integration.md`**\n**Zadania atomowe dla LinkedIn Module wrapper**:\n- Task 7.1: LinkedInModuleWrapper klasa\n- Task 7.2: CLI command execution i output parsing",
          "values": {
            "strings": [],
            "numbers": [
              1,
              7,
              7,
              1,
              7,
              2
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 22,
          "snippet": "### 1. **`phase-7-linkedin-integration.md`**\n**Zadania atomowe dla LinkedIn Module wrapper**:\n- Task 7.1: LinkedInModuleWrapper klasa\n- Task 7.2: CLI command execution i output parsing\n- Task 7.3: Session validation integration",
          "values": {
            "strings": [],
            "numbers": [
              1,
              7,
              7,
              1,
              7,
              2,
              7,
              3
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 25,
          "snippet": "- Task 7.2: CLI command execution i output parsing\n- Task 7.3: Session validation integration\n- Task 7.4: Error handling dla LinkedIn-specific issues\n- Task 7.5: Content adaptation dla LinkedIn format\n- Task 7.6: Scheduled publication support",
          "values": {
            "strings": [],
            "numbers": [
              7,
              2,
              7,
              3,
              7,
              4,
              7,
              5,
              7,
              6
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 26,
          "snippet": "- Task 7.3: Session validation integration\n- Task 7.4: Error handling dla LinkedIn-specific issues\n- Task 7.5: Content adaptation dla LinkedIn format\n- Task 7.6: Scheduled publication support\n- Task 7.7: Media upload integration",
          "values": {
            "strings": [],
            "numbers": [
              7,
              3,
              7,
              4,
              7,
              5,
              7,
              6,
              7,
              7
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 87,
          "snippet": "\n**High Priority (Next 2 sprints)**:\n1. **Faza 7**: LinkedIn integration - bezpośredni impact na current gaps\n2. **Faza 8**: Platform health monitoring - krytyczne dla production reliability\n",
          "values": {
            "strings": [],
            "numbers": [
              2,
              1,
              7,
              2,
              8
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 100,
          "snippet": "\n```\nPhase 7 (LinkedIn) → Depends: Faza 4 (Orchestrator) ✅ DONE\nPhase 8 (Health) → Depends: All adapters ✅ AVAILABLE  \nPhase 9 (Optimization) → Depends: Phase 6 (AI integration)",
          "values": {
            "strings": [],
            "numbers": [
              7,
              4,
              8,
              9,
              6
            ]
          }
        },
        {
          "type": "required_elements",
          "platform": "universal",
          "line": 108,
          "snippet": "## ✅ **RESULT: Zero Gaps Remaining**\n\nWszystkie kluczowe gaps z `INTEGRATION_PLAN.md` mają teraz **konkretne, atomowe, testowalne zadania** w dedicated documentation files. Project jest **100% ready** dla systematic implementation wszystkich integration requirements.\n\n**Total new tasks defined**: **37 zadań atomowych**  ",
          "values": {
            "strings": [],
            "numbers": [
              100,
              37
            ]
          }
        }
      ]
    },
    {
      "file": "/Users/hretheum/dev/bezrobocie/vector-wave/publisher/docs/API_MONITORING_ENDPOINTS.md",
      "exists": true,
      "hits": [
        {
          "type": "platform_specific",
          "platform": "twitter",
          "line": 16,
          "snippet": "\n- **Orchestrator**: `http://localhost:8085`\n- **Twitter Adapter**: `http://localhost:8083`\n- **Ghost Adapter**: `http://localhost:8086`\n- **Beehiiv Adapter**: `http://localhost:8087`",
          "values": {
            "strings": [],
            "numbers": [
              8085,
              8083,
              8086,
              8087
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 17,
          "snippet": "- **Orchestrator**: `http://localhost:8085`\n- **Twitter Adapter**: `http://localhost:8083`\n- **Ghost Adapter**: `http://localhost:8086`\n- **Beehiiv Adapter**: `http://localhost:8087`\n- **LinkedIn Adapter**: Integrated with session monitoring",
          "values": {
            "strings": [],
            "numbers": [
              8085,
              8083,
              8086,
              8087
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 18,
          "snippet": "- **Twitter Adapter**: `http://localhost:8083`\n- **Ghost Adapter**: `http://localhost:8086`\n- **Beehiiv Adapter**: `http://localhost:8087`\n- **LinkedIn Adapter**: Integrated with session monitoring\n",
          "values": {
            "strings": [],
            "numbers": [
              8083,
              8086,
              8087
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 19,
          "snippet": "- **Ghost Adapter**: `http://localhost:8086`\n- **Beehiiv Adapter**: `http://localhost:8087`\n- **LinkedIn Adapter**: Integrated with session monitoring\n\n---",
          "values": {
            "strings": [],
            "numbers": [
              8086,
              8087
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "twitter",
          "line": 34,
          "snippet": "  \"overall_status\": \"healthy\",\n  \"platforms\": {\n    \"twitter\": {\n      \"status\": \"healthy\",\n      \"response_time_ms\": 120,",
          "values": {
            "strings": [
              "overall_status",
              "healthy",
              "platforms",
              "twitter",
              "status",
              "healthy",
              "response_time_ms"
            ],
            "numbers": [
              120
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 39,
          "snippet": "      \"last_check\": \"2025-08-08T14:25:30Z\"\n    },\n    \"ghost\": {\n      \"status\": \"healthy\", \n      \"response_time_ms\": 85,",
          "values": {
            "strings": [
              "last_check",
              "2025-08-08T14:25:30Z",
              "ghost",
              "status",
              "healthy",
              "response_time_ms"
            ],
            "numbers": [
              2025,
              8,
              8,
              14,
              25,
              30,
              85
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 58,
          "snippet": "\n**Parameters**:\n- `platform` (path): Platform name (`twitter`, `ghost`, `beehiiv`, `linkedin`)\n\n**Response**:",
          "values": {
            "strings": [],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "twitter",
          "line": 64,
          "snippet": "{\n  \"status\": \"healthy\",\n  \"service\": \"twitter-adapter\",\n  \"platform\": \"twitter\",\n  \"connection\": {",
          "values": {
            "strings": [
              "status",
              "healthy",
              "service",
              "twitter-adapter",
              "platform",
              "twitter",
              "connection"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "twitter",
          "line": 65,
          "snippet": "  \"status\": \"healthy\",\n  \"service\": \"twitter-adapter\",\n  \"platform\": \"twitter\",\n  \"connection\": {\n    \"status\": \"connected\",",
          "values": {
            "strings": [
              "status",
              "healthy",
              "service",
              "twitter-adapter",
              "platform",
              "twitter",
              "connection",
              "status",
              "connected"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "twitter",
          "line": 117,
          "snippet": "  \"timestamp\": \"2025-08-08T14:25:30Z\",\n  \"platforms\": {\n    \"twitter\": {\n      \"hour_usage\": 12,\n      \"hour_limit\": 100,",
          "values": {
            "strings": [
              "timestamp",
              "2025-08-08T14:25:30Z",
              "platforms",
              "twitter",
              "hour_usage",
              "hour_limit"
            ],
            "numbers": [
              2025,
              8,
              8,
              14,
              25,
              30,
              12,
              100
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 127,
          "snippet": "      \"throttle_until\": null\n    },\n    \"ghost\": {\n      \"hour_usage\": 8,\n      \"hour_limit\": 50,",
          "values": {
            "strings": [
              "throttle_until",
              "ghost",
              "hour_usage",
              "hour_limit"
            ],
            "numbers": [
              8,
              50
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "twitter",
          "line": 140,
          "snippet": "  \"alerts\": [\n    {\n      \"platform\": \"twitter\",\n      \"threshold\": 90,\n      \"current\": 78.5,",
          "values": {
            "strings": [
              "alerts",
              "platform",
              "twitter",
              "threshold",
              "current"
            ],
            "numbers": [
              90,
              78,
              5
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "twitter",
          "line": 160,
          "snippet": "```json\n{\n  \"platform\": \"twitter\",\n  \"current_period\": \"hour\",\n  \"usage\": 12,",
          "values": {
            "strings": [
              "platform",
              "twitter",
              "current_period",
              "hour",
              "usage"
            ],
            "numbers": [
              12
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 216,
          "snippet": "  \"timestamp\": \"2025-08-08T14:25:30Z\",\n  \"platforms\": {\n    \"linkedin\": {\n      \"account\": \"default\",\n      \"status\": \"active\",",
          "values": {
            "strings": [
              "timestamp",
              "2025-08-08T14:25:30Z",
              "platforms",
              "linkedin",
              "account",
              "default",
              "status",
              "active"
            ],
            "numbers": [
              2025,
              8,
              8,
              14,
              25,
              30
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 227,
          "snippet": "  \"alerts\": [\n    {\n      \"platform\": \"linkedin\",\n      \"account\": \"default\", \n      \"alert_type\": \"expiry_warning\",",
          "values": {
            "strings": [
              "alerts",
              "platform",
              "linkedin",
              "account",
              "default",
              "alert_type",
              "expiry_warning"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 244,
          "snippet": "```json\n{\n  \"platform\": \"linkedin\",\n  \"account\": \"default\"\n}",
          "values": {
            "strings": [
              "platform",
              "linkedin",
              "account",
              "default"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 252,
          "snippet": "```json\n{\n  \"platform\": \"linkedin\",\n  \"account\": \"default\",\n  \"is_valid\": true,",
          "values": {
            "strings": [
              "platform",
              "linkedin",
              "account",
              "default",
              "is_valid"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 272,
          "snippet": "```json\n{\n  \"platform\": \"linkedin\",\n  \"account\": \"default\",\n  \"check_interval_minutes\": 30",
          "values": {
            "strings": [
              "platform",
              "linkedin",
              "account",
              "default",
              "check_interval_minutes"
            ],
            "numbers": [
              30
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 283,
          "snippet": "  \"success\": true,\n  \"monitoring_started\": true,\n  \"platform\": \"linkedin\",\n  \"account\": \"default\",\n  \"check_interval_minutes\": 30,",
          "values": {
            "strings": [
              "success",
              "monitoring_started",
              "platform",
              "linkedin",
              "account",
              "default",
              "check_interval_minutes"
            ],
            "numbers": [
              30
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 297,
          "snippet": "```json\n{\n  \"platform\": \"linkedin\", \n  \"account\": \"default\"\n}",
          "values": {
            "strings": [
              "platform",
              "linkedin",
              "account",
              "default"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 309,
          "snippet": "```json\n{\n  \"platform\": \"linkedin\",\n  \"account\": \"default\",\n  \"history\": [",
          "values": {
            "strings": [
              "platform",
              "linkedin",
              "account",
              "default",
              "history"
            ],
            "numbers": []
          }
        },
        {
          "type": "required_elements",
          "platform": "universal",
          "line": 337,
          "snippet": "**Parameters**:\n- `hours` (query, optional): Time window in hours (default: 24)\n- `include_history` (query, optional): Include historical trends (default: false)\n\n**Response**:",
          "values": {
            "strings": [],
            "numbers": [
              24
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "twitter",
          "line": 345,
          "snippet": "  \"time_window_hours\": 24,\n  \"platforms\": {\n    \"twitter\": {\n      \"total_requests\": 234,\n      \"successful_requests\": 230,",
          "values": {
            "strings": [
              "time_window_hours",
              "platforms",
              "twitter",
              "total_requests",
              "successful_requests"
            ],
            "numbers": [
              24,
              234,
              230
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 367,
          "snippet": "    \"average_success_rate\": 97.8,\n    \"average_response_time_ms\": 132,\n    \"best_performing_platform\": \"ghost\",\n    \"needs_attention\": []\n  }",
          "values": {
            "strings": [
              "average_success_rate",
              "average_response_time_ms",
              "best_performing_platform",
              "ghost",
              "needs_attention"
            ],
            "numbers": [
              97,
              8,
              132
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "twitter",
          "line": 384,
          "snippet": "```json\n{\n  \"platform\": \"twitter\",\n  \"time_window_hours\": 24,\n  \"timestamp\": \"2025-08-08T14:25:30Z\",",
          "values": {
            "strings": [
              "platform",
              "twitter",
              "time_window_hours",
              "timestamp",
              "2025-08-08T14:25:30Z"
            ],
            "numbers": [
              24,
              2025,
              8,
              8,
              14,
              25,
              30
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "twitter",
          "line": 437,
          "snippet": "```json\n{\n  \"platform\": \"twitter\",\n  \"operation_type\": \"publish\",\n  \"response_time_ms\": 120,",
          "values": {
            "strings": [
              "platform",
              "twitter",
              "operation_type",
              "publish",
              "response_time_ms"
            ],
            "numbers": [
              120
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "twitter",
          "line": 450,
          "snippet": "  \"success\": true,\n  \"recorded\": true,\n  \"platform\": \"twitter\",\n  \"new_average_response_time_ms\": 145\n}",
          "values": {
            "strings": [
              "success",
              "recorded",
              "platform",
              "twitter",
              "new_average_response_time_ms"
            ],
            "numbers": [
              145
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "twitter",
          "line": 473,
          "snippet": "  \"recovery_success_rate\": 100.0,\n  \"platforms\": {\n    \"twitter\": {\n      \"incidents_24h\": 1,\n      \"successful_recoveries\": 1,",
          "values": {
            "strings": [
              "recovery_success_rate",
              "platforms",
              "twitter",
              "incidents_24h",
              "successful_recoveries"
            ],
            "numbers": [
              100,
              0,
              24,
              1,
              1
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 479,
          "snippet": "      \"circuit_breaker_status\": \"closed\"\n    },\n    \"ghost\": {\n      \"incidents_24h\": 2,\n      \"successful_recoveries\": 2,",
          "values": {
            "strings": [
              "circuit_breaker_status",
              "closed",
              "ghost",
              "incidents_24h",
              "successful_recoveries"
            ],
            "numbers": [
              24,
              2,
              2
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "twitter",
          "line": 504,
          "snippet": "    {\n      \"incident_id\": \"inc_2025080814251234\",\n      \"platform\": \"twitter\",\n      \"failure_type\": \"connection_timeout\",\n      \"status\": \"resolved\",",
          "values": {
            "strings": [
              "incident_id",
              "inc_2025080814251234",
              "platform",
              "twitter",
              "failure_type",
              "connection_timeout",
              "status",
              "resolved"
            ],
            "numbers": [
              2025080814251234
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "twitter",
          "line": 532,
          "snippet": "```json\n{\n  \"platform\": \"twitter\",\n  \"failure_type\": \"connection_timeout\",\n  \"error_message\": \"Connection timeout after 30 seconds\",",
          "values": {
            "strings": [
              "platform",
              "twitter",
              "failure_type",
              "connection_timeout",
              "error_message",
              "Connection timeout after 30 seconds"
            ],
            "numbers": [
              30
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "twitter",
          "line": 544,
          "snippet": "  \"incident_id\": \"inc_2025080814251234\",\n  \"recovery_triggered\": true,\n  \"platform\": \"twitter\",\n  \"failure_type\": \"connection_timeout\",\n  \"recovery_action\": \"retry_request\",",
          "values": {
            "strings": [
              "incident_id",
              "inc_2025080814251234",
              "recovery_triggered",
              "platform",
              "twitter",
              "failure_type",
              "connection_timeout",
              "recovery_action",
              "retry_request"
            ],
            "numbers": [
              2025080814251234
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "twitter",
          "line": 601,
          "snippet": "    {\n      \"alert_id\": \"alert_rate_limit_warning\",\n      \"platform\": \"twitter\",\n      \"type\": \"rate_limit_warning\",\n      \"severity\": \"warning\",",
          "values": {
            "strings": [
              "alert_id",
              "alert_rate_limit_warning",
              "platform",
              "twitter",
              "type",
              "rate_limit_warning",
              "severity",
              "warning"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "twitter",
          "line": 604,
          "snippet": "      \"type\": \"rate_limit_warning\",\n      \"severity\": \"warning\",\n      \"message\": \"Rate limit usage at 85% for twitter platform\",\n      \"created_at\": \"2025-08-08T14:20:00Z\",\n      \"threshold\": 80,",
          "values": {
            "strings": [
              "type",
              "rate_limit_warning",
              "severity",
              "warning",
              "message",
              "Rate limit usage at 85% for twitter platform",
              "created_at",
              "2025-08-08T14:20:00Z",
              "threshold"
            ],
            "numbers": [
              85,
              2025,
              8,
              8,
              14,
              20,
              0,
              80
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "twitter",
          "line": 627,
          "snippet": "{\n  \"alert_type\": \"platform_health\",\n  \"platform\": \"twitter\",\n  \"severity\": \"warning\",\n  \"message\": \"Test health monitoring alert\"",
          "values": {
            "strings": [
              "alert_type",
              "platform_health",
              "platform",
              "twitter",
              "severity",
              "warning",
              "message",
              "Test health monitoring alert"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "twitter",
          "line": 686,
          "snippet": "    \"message\": \"Platform health check failed\",\n    \"details\": {\n      \"platform\": \"twitter\",\n      \"reason\": \"Connection timeout\",\n      \"retry_after_seconds\": 30",
          "values": {
            "strings": [
              "message",
              "Platform health check failed",
              "details",
              "platform",
              "twitter",
              "reason",
              "Connection timeout",
              "retry_after_seconds"
            ],
            "numbers": [
              30
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "twitter",
          "line": 713,
          "snippet": "\n# 2. Check specific platform details\ncurl http://localhost:8085/adapters/twitter/health | jq\n\n# 3. Monitor rate limits",
          "values": {
            "strings": [],
            "numbers": [
              2,
              8085,
              3
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "twitter",
          "line": 731,
          "snippet": "```bash\n# Test rate limit tracking\ncurl -X POST http://localhost:8085/rate-limits/twitter/track \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\"request_type\": \"api\", \"count\": 5}'",
          "values": {
            "strings": [
              "Content-Type: application/json",
              "request_type",
              "api",
              "count"
            ],
            "numbers": [
              8085,
              5
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 738,
          "snippet": "curl -X POST http://localhost:8085/session/validate \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\"platform\": \"linkedin\", \"account\": \"default\"}'\n\n# Test recovery system",
          "values": {
            "strings": [
              "Content-Type: application/json",
              "platform",
              "linkedin",
              "account",
              "default"
            ],
            "numbers": [
              8085
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "twitter",
          "line": 743,
          "snippet": "curl -X POST http://localhost:8085/recovery/trigger \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\"platform\": \"twitter\", \"failure_type\": \"connection_timeout\"}'\n```\n",
          "values": {
            "strings": [
              "Content-Type: application/json",
              "platform",
              "twitter",
              "failure_type",
              "connection_timeout"
            ],
            "numbers": [
              8085
            ]
          }
        }
      ]
    },
    {
      "file": "/Users/hretheum/dev/bezrobocie/vector-wave/publisher/docs/PHASE_8_COMPLETION_SUMMARY.md",
      "exists": true,
      "hits": [
        {
          "type": "platform_specific",
          "platform": "twitter",
          "line": 44,
          "snippet": "\n**Adapters Enhanced**:\n- Twitter Adapter: Enhanced connection testing, rate limit integration\n- Ghost Adapter: CMS connection validation, API key testing\n- Beehiiv Adapter: Newsletter platform health checks",
          "values": {
            "strings": [],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 45,
          "snippet": "**Adapters Enhanced**:\n- Twitter Adapter: Enhanced connection testing, rate limit integration\n- Ghost Adapter: CMS connection validation, API key testing\n- Beehiiv Adapter: Newsletter platform health checks\n- LinkedIn Adapter: Session validation with browser automation",
          "values": {
            "strings": [],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 46,
          "snippet": "- Twitter Adapter: Enhanced connection testing, rate limit integration\n- Ghost Adapter: CMS connection validation, API key testing\n- Beehiiv Adapter: Newsletter platform health checks\n- LinkedIn Adapter: Session validation with browser automation\n",
          "values": {
            "strings": [],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 47,
          "snippet": "- Ghost Adapter: CMS connection validation, API key testing\n- Beehiiv Adapter: Newsletter platform health checks\n- LinkedIn Adapter: Session validation with browser automation\n\n### 2. Platform Rate Limit Monitoring (Task 8.3) ✅",
          "values": {
            "strings": [],
            "numbers": [
              2,
              8,
              3
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 92,
          "snippet": "- Expiration detection and alerts\n- Account-specific monitoring\n- Integration with LinkedIn adapter\n\n### 4. Platform Performance Metrics (Task 8.5) ✅",
          "values": {
            "strings": [],
            "numbers": [
              4,
              8,
              5
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "twitter",
          "line": 192,
          "snippet": "### Adapter Enhancements\n\n**Twitter Adapter** (Port 8083):\n- Enhanced health endpoint with rate limit integration\n- Test endpoints for rate limit simulation",
          "values": {
            "strings": [],
            "numbers": [
              8083
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 197,
          "snippet": "- Connection status validation\n\n**Ghost Adapter** (Port 8086):\n- CMS connection health validation\n- API authentication testing",
          "values": {
            "strings": [],
            "numbers": [
              8086
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "beehiiv",
          "line": 202,
          "snippet": "- Enhanced error reporting\n\n**Beehiiv Adapter** (Port 8087):\n- Newsletter platform health monitoring\n- Session validation for email campaigns",
          "values": {
            "strings": [],
            "numbers": [
              8087
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 207,
          "snippet": "- Performance metric collection\n\n**LinkedIn Adapter**:\n- Comprehensive session health tracking\n- Browser automation monitoring",
          "values": {
            "strings": [],
            "numbers": []
          }
        },
        {
          "type": "required_elements",
          "platform": "universal",
          "line": 270,
          "snippet": "### Environment Configuration\n```bash\n# Required Environment Variables\nENABLE_HEALTH_MONITORING=true\nRATE_LIMIT_MONITORING=true",
          "values": {
            "strings": [],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 309,
          "snippet": "- **Automatic Failover**: Recovery system can redirect publishing to healthy platforms\n\n### Phase 7 LinkedIn Module\nLinkedIn adapter is fully equipped for production integration:\n",
          "values": {
            "strings": [],
            "numbers": [
              7
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 310,
          "snippet": "\n### Phase 7 LinkedIn Module\nLinkedIn adapter is fully equipped for production integration:\n\n- **Session Health Tracking**: Real-time session monitoring",
          "values": {
            "strings": [],
            "numbers": [
              7
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 314,
          "snippet": "- **Session Health Tracking**: Real-time session monitoring\n- **Browser Automation Health**: Browserbase connection validation\n- **Performance Analytics**: LinkedIn-specific performance metrics\n- **Recovery Procedures**: LinkedIn session recovery automation\n",
          "values": {
            "strings": [],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 315,
          "snippet": "- **Browser Automation Health**: Browserbase connection validation\n- **Performance Analytics**: LinkedIn-specific performance metrics\n- **Recovery Procedures**: LinkedIn session recovery automation\n\n### Phase 9 Content Optimization",
          "values": {
            "strings": [],
            "numbers": [
              9
            ]
          }
        }
      ]
    },
    {
      "file": "/Users/hretheum/dev/bezrobocie/vector-wave/publisher/docs/phase-4.5-enhanced-orchestrator.md",
      "exists": true,
      "hits": [
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 14,
          "snippet": "### **Enhanced Orchestrator Features**\n- **Image Processing Pipeline**: Pexels API integration z automatic placeholder→image conversion\n- **Presenton Integration**: LinkedIn prompt→presentation→PDF pipeline  \n- **Content Differentiation**: LinkedIn carousel prompts vs direct content dla innych platform\n- **Shared Storage**: Volume mounts dla image sharing między services",
          "values": {
            "strings": [],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 15,
          "snippet": "- **Image Processing Pipeline**: Pexels API integration z automatic placeholder→image conversion\n- **Presenton Integration**: LinkedIn prompt→presentation→PDF pipeline  \n- **Content Differentiation**: LinkedIn carousel prompts vs direct content dla innych platform\n- **Shared Storage**: Volume mounts dla image sharing między services\n- **User Control**: Checkbox \"treści bezpośrednie\" dla manual override",
          "values": {
            "strings": [
              "treści bezpośrednie"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 24,
          "snippet": "       ↓                    ↓                    ↓              ↓\n[Content + Placeholders] [Process Images]  [Platform Adapt]  [Publish]\n[LinkedIn: Prompts]      [Presenton]       [LinkedIn: PDF]   [Success]  \n[Others: Direct]         [Pexels Images]   [Others: Text]     [Tracking]\n```",
          "values": {
            "strings": [],
            "numbers": []
          }
        },
        {
          "type": "required_elements",
          "platform": "universal",
          "line": 43,
          "snippet": "      async def finalize_for_platform(self, content: str, platform: str, image_mapping: Dict) -> str\n  ```\n- **Environment**: `PEXELS_API_KEY` required\n- **Storage**: Shared volume `/tmp/publisher_images` z all adapters\n",
          "values": {
            "strings": [],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 48,
          "snippet": "#### **Zadanie 4.5.1.2: Shared Volume Integration**\n- **Wartość**: All platform adapters can access processed images\n- **Test**: Images stored w shared volume accessible by Ghost, Twitter, LinkedIn adapters\n- **Docker**: Volume mount configuration w `docker-compose.yml`\n",
          "values": {
            "strings": [],
            "numbers": [
              4,
              5,
              1,
              2
            ]
          }
        },
        {
          "type": "required_elements",
          "platform": "linkedin",
          "line": 52,
          "snippet": "\n#### **Zadanie 4.5.1.3: Platform-Specific Image Finalization**\n- **Wartość**: Images processed according to platform requirements\n- **Test**: Ghost gets Ghost URLs, Twitter gets media attachments, LinkedIn gets local files\n- **Integration**: Enhanced każdy adapter z image processing capability",
          "values": {
            "strings": [],
            "numbers": [
              4,
              5,
              1,
              3
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 53,
          "snippet": "#### **Zadanie 4.5.1.3: Platform-Specific Image Finalization**\n- **Wartość**: Images processed according to platform requirements\n- **Test**: Ghost gets Ghost URLs, Twitter gets media attachments, LinkedIn gets local files\n- **Integration**: Enhanced każdy adapter z image processing capability\n",
          "values": {
            "strings": [],
            "numbers": [
              4,
              5,
              1,
              3
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 73,
          "snippet": "\n#### **Zadanie 4.5.2.3: Orchestrator-Presenton Integration**\n- **Wartość**: Orchestrator calls Presenton API dla LinkedIn carousel generation\n- **Test**: End-to-end prompt→PDF pipeline <90s total time\n- **Client**: `PresentonClient` class w Orchestrator",
          "values": {
            "strings": [],
            "numbers": [
              4,
              5,
              2,
              3,
              90
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 83,
          "snippet": "\n#### **Zadanie 4.5.3.1: ContentProcessor Implementation**\n- **Wartość**: Platform-specific content routing (LinkedIn prompts vs direct content)\n- **Test**: Platform routing accuracy 100%, LinkedIn prompt quality >8/10\n- **Logic**: ",
          "values": {
            "strings": [],
            "numbers": [
              4,
              5,
              3,
              1,
              100,
              8,
              10
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 84,
          "snippet": "#### **Zadanie 4.5.3.1: ContentProcessor Implementation**\n- **Wartość**: Platform-specific content routing (LinkedIn prompts vs direct content)\n- **Test**: Platform routing accuracy 100%, LinkedIn prompt quality >8/10\n- **Logic**: \n  ```python",
          "values": {
            "strings": [],
            "numbers": [
              4,
              5,
              3,
              1,
              100,
              8,
              10
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 122,
          "snippet": "- **Wartość**: Enhanced AI Writing Flow endpoints dla Orchestrator integration\n- **Test**: Multi-platform generation <45s, concurrent processing works\n- **Endpoints**: `/generate/multi-platform`, `/generate/linkedin-prompt`\n- **Integration**: CrewAI agents z platform-specific optimization\n",
          "values": {
            "strings": [],
            "numbers": [
              45
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 130,
          "snippet": "\n#### **Zadanie 4.5.5.1: Complete Pipeline Testing**\n- **Wartość**: Full LinkedIn carousel pipeline (AI→Orchestrator→Presenton→LinkedIn)\n- **Test**: End-to-end success rate >95%, total pipeline time <150s\n- **Scenarios**: LinkedIn carousel, multi-platform z images, error handling",
          "values": {
            "strings": [],
            "numbers": [
              4,
              5,
              5,
              1,
              95,
              150
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 132,
          "snippet": "- **Wartość**: Full LinkedIn carousel pipeline (AI→Orchestrator→Presenton→LinkedIn)\n- **Test**: End-to-end success rate >95%, total pipeline time <150s\n- **Scenarios**: LinkedIn carousel, multi-platform z images, error handling\n- **Performance**: 5 concurrent requests handled successfully\n",
          "values": {
            "strings": [],
            "numbers": [
              95,
              150,
              5
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 147,
          "snippet": "### **Business Metrics**\n- [ ] **Content Quality**: Manual review scores >8/10 dla każdy content type\n- [ ] **Processing Speed**: <150s dla complete LinkedIn carousel pipeline  \n- [ ] **Platform Coverage**: Support dla 4+ platforms z specialized handling\n- [ ] **User Experience**: Single API call creates multi-platform content",
          "values": {
            "strings": [],
            "numbers": [
              8,
              10,
              150,
              4
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 159,
          "snippet": "### **Feature Completeness**\n- [ ] **Image Processing**: Pexels placeholder→real images w all platforms\n- [ ] **Presenton Integration**: LinkedIn prompt→carousel→PDF pipeline working\n- [ ] **Platform Differentiation**: LinkedIn prompts vs direct content working\n- [ ] **User Control**: Checkbox dla \"treści bezpośrednie\" functional",
          "values": {
            "strings": [
              "treści bezpośrednie"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 160,
          "snippet": "- [ ] **Image Processing**: Pexels placeholder→real images w all platforms\n- [ ] **Presenton Integration**: LinkedIn prompt→carousel→PDF pipeline working\n- [ ] **Platform Differentiation**: LinkedIn prompts vs direct content working\n- [ ] **User Control**: Checkbox dla \"treści bezpośrednie\" functional\n- [ ] **Backward Compatibility**: Existing Publisher functionality preserved",
          "values": {
            "strings": [
              "treści bezpośrednie"
            ],
            "numbers": []
          }
        },
        {
          "type": "required_elements",
          "platform": "universal",
          "line": 166,
          "snippet": "---\n\n## 🔧 **DEPENDENCIES & REQUIREMENTS**\n\n### **Prerequisites (Must be Completed)**",
          "values": {
            "strings": [],
            "numbers": []
          }
        },
        {
          "type": "required_elements",
          "platform": "twitter",
          "line": 168,
          "snippet": "## 🔧 **DEPENDENCIES & REQUIREMENTS**\n\n### **Prerequisites (Must be Completed)**\n- ✅ **Faza 1**: Substack Adapter (completed)\n- ✅ **Faza 2**: Twitter Adapter (completed)  ",
          "values": {
            "strings": [],
            "numbers": [
              1,
              2
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "twitter",
          "line": 169,
          "snippet": "\n### **Prerequisites (Must be Completed)**\n- ✅ **Faza 1**: Substack Adapter (completed)\n- ✅ **Faza 2**: Twitter Adapter (completed)  \n- ✅ **Faza 3**: Ghost Adapter (completed)",
          "values": {
            "strings": [],
            "numbers": [
              1,
              2,
              3
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "twitter",
          "line": 170,
          "snippet": "### **Prerequisites (Must be Completed)**\n- ✅ **Faza 1**: Substack Adapter (completed)\n- ✅ **Faza 2**: Twitter Adapter (completed)  \n- ✅ **Faza 3**: Ghost Adapter (completed)\n- ✅ **Faza 4**: Orchestrator API (completed)",
          "values": {
            "strings": [],
            "numbers": [
              1,
              2,
              3,
              4
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "twitter",
          "line": 171,
          "snippet": "- ✅ **Faza 1**: Substack Adapter (completed)\n- ✅ **Faza 2**: Twitter Adapter (completed)  \n- ✅ **Faza 3**: Ghost Adapter (completed)\n- ✅ **Faza 4**: Orchestrator API (completed)\n",
          "values": {
            "strings": [],
            "numbers": [
              1,
              2,
              3,
              4
            ]
          }
        },
        {
          "type": "required_elements",
          "platform": "universal",
          "line": 174,
          "snippet": "- ✅ **Faza 4**: Orchestrator API (completed)\n\n### **External Requirements**\n- **Pexels API Key**: Free tier available, required dla image processing\n- **Presenton Technology**: Implementation approach needs clarification",
          "values": {
            "strings": [],
            "numbers": [
              4
            ]
          }
        },
        {
          "type": "required_elements",
          "platform": "universal",
          "line": 175,
          "snippet": "\n### **External Requirements**\n- **Pexels API Key**: Free tier available, required dla image processing\n- **Presenton Technology**: Implementation approach needs clarification\n- **AI Writing Flow**: Platform-specific content generation capability",
          "values": {
            "strings": [],
            "numbers": []
          }
        },
        {
          "type": "required_elements",
          "platform": "universal",
          "line": 242,
          "snippet": "*Created: 2025-08-07*  \n*Version: 1.0*  \n*Dependencies: Phases 1-4 must be completed first*",
          "values": {
            "strings": [],
            "numbers": [
              2025,
              8,
              7,
              1,
              0,
              1,
              4
            ]
          }
        }
      ]
    },
    {
      "file": "/Users/hretheum/dev/bezrobocie/vector-wave/publisher/docs/phase-4-ghost-adapter.md",
      "exists": true,
      "hits": [
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 1,
          "snippet": "# PLAN PRZYROSTOWEJ IMPLEMENTACJI: GHOST ADAPTER\n\n## 📋 **PRZEGLĄD SYSTEMU**",
          "values": {
            "strings": [],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 5,
          "snippet": "## 📋 **PRZEGLĄD SYSTEMU**\n\n### **Charakterystyka Ghost API**\n- **Admin API**: JWT-based authentication, full CRUD operations na posts/pages\n- **Content API**: Tylko read-only, key-based authentication",
          "values": {
            "strings": [],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 17,
          "snippet": "```bash\n# Już dostępne w .env\nGHOST_API_URL=https://your-ghost-site.com\nGHOST_API_KEY=your_admin_api_key_here\n```",
          "values": {
            "strings": [],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 18,
          "snippet": "# Już dostępne w .env\nGHOST_API_URL=https://your-ghost-site.com\nGHOST_API_KEY=your_admin_api_key_here\n```\n",
          "values": {
            "strings": [],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 24,
          "snippet": "```\npublisher/\n├── src/adapters/ghost/\n│   ├── main.py              # FastAPI app\n│   ├── ghost_client.py      # Ghost API client z JWT auth",
          "values": {
            "strings": [],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 26,
          "snippet": "├── src/adapters/ghost/\n│   ├── main.py              # FastAPI app\n│   ├── ghost_client.py      # Ghost API client z JWT auth\n│   ├── models.py            # Pydantic models\n│   └── requirements.txt     # Zależności Python",
          "values": {
            "strings": [],
            "numbers": []
          }
        },
        {
          "type": "required_elements",
          "platform": "ghost",
          "line": 28,
          "snippet": "│   ├── ghost_client.py      # Ghost API client z JWT auth\n│   ├── models.py            # Pydantic models\n│   └── requirements.txt     # Zależności Python\n├── scripts/\n│   └── test-ghost-*.sh      # Testy każdego zadania",
          "values": {
            "strings": [],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 30,
          "snippet": "│   └── requirements.txt     # Zależności Python\n├── scripts/\n│   └── test-ghost-*.sh      # Testy każdego zadania\n└── docs/\n    └── phase-4-ghost-adapter.md",
          "values": {
            "strings": [],
            "numbers": [
              4
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 32,
          "snippet": "│   └── test-ghost-*.sh      # Testy każdego zadania\n└── docs/\n    └── phase-4-ghost-adapter.md\n```\n",
          "values": {
            "strings": [],
            "numbers": [
              4
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 39,
          "snippet": "## 🎯 **ZADANIA PRZYROSTOWE**\n\n### **Zadanie 4.1: Szkielet usługi Ghost Adapter (kontener, healthcheck)**\n\n#### **Cele:**",
          "values": {
            "strings": [],
            "numbers": [
              4,
              1
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 51,
          "snippet": "**1. Struktura plików:**\n```bash\nmkdir -p src/adapters/ghost\ntouch src/adapters/ghost/{main.py,ghost_client.py,models.py,requirements.txt,Dockerfile}\n```",
          "values": {
            "strings": [],
            "numbers": [
              1
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 52,
          "snippet": "```bash\nmkdir -p src/adapters/ghost\ntouch src/adapters/ghost/{main.py,ghost_client.py,models.py,requirements.txt,Dockerfile}\n```\n",
          "values": {
            "strings": [],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 57,
          "snippet": "**2. FastAPI + podstawowe endpointy:**\n```python\n# src/adapters/ghost/main.py\nfrom fastapi import FastAPI, HTTPException\nfrom pydantic import BaseModel",
          "values": {
            "strings": [],
            "numbers": [
              2
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 63,
          "snippet": "import logging\n\napp = FastAPI(title=\"Ghost Adapter\", version=\"1.0.0\")\nlogger = logging.getLogger(__name__)\n",
          "values": {
            "strings": [
              "Ghost Adapter",
              "1.0.0"
            ],
            "numbers": [
              1,
              0,
              0
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 85,
          "snippet": "@app.get(\"/\")\nasync def root():\n    ghost_configured = bool(os.getenv(\"GHOST_API_KEY\") and os.getenv(\"GHOST_API_URL\"))\n    return {\n        \"service\": \"ghost-adapter\",",
          "values": {
            "strings": [
              ")\nasync def root():\n    ghost_configured = bool(os.getenv(",
              ") and os.getenv(",
              "))\n    return {\n        ",
              ": "
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 87,
          "snippet": "    ghost_configured = bool(os.getenv(\"GHOST_API_KEY\") and os.getenv(\"GHOST_API_URL\"))\n    return {\n        \"service\": \"ghost-adapter\",\n        \"status\": \"ready\" if ghost_configured else \"misconfigured\",\n        \"ghost_configured\": ghost_configured",
          "values": {
            "strings": [
              "GHOST_API_KEY",
              "GHOST_API_URL",
              "service",
              "ghost-adapter",
              "status",
              "ready",
              "misconfigured",
              "ghost_configured"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 88,
          "snippet": "    return {\n        \"service\": \"ghost-adapter\",\n        \"status\": \"ready\" if ghost_configured else \"misconfigured\",\n        \"ghost_configured\": ghost_configured\n    }",
          "values": {
            "strings": [
              "service",
              "ghost-adapter",
              "status",
              "ready",
              "misconfigured",
              "ghost_configured"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 89,
          "snippet": "        \"service\": \"ghost-adapter\",\n        \"status\": \"ready\" if ghost_configured else \"misconfigured\",\n        \"ghost_configured\": ghost_configured\n    }\n",
          "values": {
            "strings": [
              "service",
              "ghost-adapter",
              "status",
              "ready",
              "misconfigured",
              "ghost_configured"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 98,
          "snippet": "@app.get(\"/config\")\nasync def config():\n    # Test Ghost API connection\n    return {\n        \"ghost_api_configured\": bool(os.getenv(\"GHOST_API_KEY\")),",
          "values": {
            "strings": [
              "/config",
              "ghost_api_configured",
              "GHOST_API_KEY"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 100,
          "snippet": "    # Test Ghost API connection\n    return {\n        \"ghost_api_configured\": bool(os.getenv(\"GHOST_API_KEY\")),\n        \"ghost_url\": os.getenv(\"GHOST_API_URL\", \"not_set\"),\n        \"status\": \"ready\"",
          "values": {
            "strings": [
              "ghost_api_configured",
              "GHOST_API_KEY",
              "ghost_url",
              "GHOST_API_URL",
              "not_set",
              "status",
              "ready"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 101,
          "snippet": "    return {\n        \"ghost_api_configured\": bool(os.getenv(\"GHOST_API_KEY\")),\n        \"ghost_url\": os.getenv(\"GHOST_API_URL\", \"not_set\"),\n        \"status\": \"ready\"\n    }",
          "values": {
            "strings": [
              "ghost_api_configured",
              "GHOST_API_KEY",
              "ghost_url",
              "GHOST_API_URL",
              "not_set",
              "status",
              "ready"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 108,
          "snippet": "**3. Docker konfiguracja:**\n```dockerfile\n# src/adapters/ghost/Dockerfile\nFROM python:3.11-slim\nWORKDIR /app",
          "values": {
            "strings": [],
            "numbers": [
              3,
              3,
              11
            ]
          }
        },
        {
          "type": "required_elements",
          "platform": "ghost",
          "line": 111,
          "snippet": "FROM python:3.11-slim\nWORKDIR /app\nCOPY requirements.txt .\nRUN pip install -r requirements.txt\nCOPY . .",
          "values": {
            "strings": [],
            "numbers": [
              3,
              11
            ]
          }
        },
        {
          "type": "required_elements",
          "platform": "ghost",
          "line": 112,
          "snippet": "WORKDIR /app\nCOPY requirements.txt .\nRUN pip install -r requirements.txt\nCOPY . .\nCMD [\"uvicorn\", \"main:app\", \"--host\", \"0.0.0.0\", \"--port\", \"8082\"]",
          "values": {
            "strings": [
              "uvicorn",
              "main:app",
              "--host",
              "0.0.0.0",
              "--port",
              "8082"
            ],
            "numbers": [
              0,
              0,
              0,
              0,
              8082
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 119,
          "snippet": "**4. docker-compose.yml integration:**\n```yaml\nghost-adapter:\n  build: ./src/adapters/ghost\n  ports:",
          "values": {
            "strings": [],
            "numbers": [
              4
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 120,
          "snippet": "```yaml\nghost-adapter:\n  build: ./src/adapters/ghost\n  ports:\n    - \"8084:8082\"",
          "values": {
            "strings": [
              "8084:8082"
            ],
            "numbers": [
              8084,
              8082
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 136,
          "snippet": "**5. Makefile targets:**\n```makefile\nbuild-ghost:\n\tdocker-compose build ghost-adapter\n",
          "values": {
            "strings": [],
            "numbers": [
              5
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 137,
          "snippet": "```makefile\nbuild-ghost:\n\tdocker-compose build ghost-adapter\n\nup-ghost:",
          "values": {
            "strings": [],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 139,
          "snippet": "\tdocker-compose build ghost-adapter\n\nup-ghost:\n\tdocker-compose up -d ghost-adapter\n",
          "values": {
            "strings": [],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 140,
          "snippet": "\nup-ghost:\n\tdocker-compose up -d ghost-adapter\n\ntest-ghost-health:",
          "values": {
            "strings": [],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 142,
          "snippet": "\tdocker-compose up -d ghost-adapter\n\ntest-ghost-health:\n\tcurl -f http://localhost:8084/health\n```",
          "values": {
            "strings": [],
            "numbers": [
              8084
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 149,
          "snippet": "```bash\n#!/bin/bash\n# scripts/test-ghost-skeleton.sh\n\necho \"🧪 TESTOWANIE GHOST ADAPTER SKELETON\"",
          "values": {
            "strings": [
              "🧪 TESTOWANIE GHOST ADAPTER SKELETON"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 151,
          "snippet": "# scripts/test-ghost-skeleton.sh\n\necho \"🧪 TESTOWANIE GHOST ADAPTER SKELETON\"\necho \"====================================\"\n",
          "values": {
            "strings": [
              "🧪 TESTOWANIE GHOST ADAPTER SKELETON",
              "===================================="
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 160,
          "snippet": "# Test 2: Root endpoint\necho \"Test 2: Root endpoint\"\ncurl -s http://localhost:8084/ | grep -q \"ghost-adapter\" && echo \" ✅ PASS\" || echo \" ❌ FAIL\"\n\n# Test 3: Config endpoint",
          "values": {
            "strings": [
              "Test 2: Root endpoint",
              "ghost-adapter",
              " ✅ PASS",
              " ❌ FAIL"
            ],
            "numbers": [
              2,
              2,
              8084,
              3
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 164,
          "snippet": "# Test 3: Config endpoint\necho \"Test 3: Config endpoint\"\ncurl -s http://localhost:8084/config | grep -q \"ghost_api_configured\" && echo \" ✅ PASS\" || echo \" ❌ FAIL\"\n\necho \"🎯 Ghost Adapter skeleton ready!\"",
          "values": {
            "strings": [
              "Test 3: Config endpoint",
              "ghost_api_configured",
              " ✅ PASS",
              " ❌ FAIL",
              "🎯 Ghost Adapter skeleton ready!"
            ],
            "numbers": [
              3,
              3,
              8084
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 166,
          "snippet": "curl -s http://localhost:8084/config | grep -q \"ghost_api_configured\" && echo \" ✅ PASS\" || echo \" ❌ FAIL\"\n\necho \"🎯 Ghost Adapter skeleton ready!\"\n```\n",
          "values": {
            "strings": [
              "ghost_api_configured",
              " ✅ PASS",
              " ❌ FAIL",
              "🎯 Ghost Adapter skeleton ready!"
            ],
            "numbers": [
              8084
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 172,
          "snippet": "- [ ] Container startuje na porcie 8084\n- [ ] Healthcheck returns 200 OK\n- [ ] `/config` pokazuje status Ghost API keys\n- [ ] Integracja z Makefile działa\n",
          "values": {
            "strings": [],
            "numbers": [
              8084,
              200
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 177,
          "snippet": "---\n\n### **Zadanie 4.2: JWT Authentication i Ghost API Client**\n\n#### **Cele:**",
          "values": {
            "strings": [],
            "numbers": [
              4,
              2
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 181,
          "snippet": "#### **Cele:**\n- [x] Implementacja JWT token generation (HS256)\n- [x] Klasa GhostClient z metodami API\n- [x] Test connection do Ghost API\n- [x] Error handling dla auth errors",
          "values": {
            "strings": [],
            "numbers": [
              256
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 182,
          "snippet": "- [x] Implementacja JWT token generation (HS256)\n- [x] Klasa GhostClient z metodami API\n- [x] Test connection do Ghost API\n- [x] Error handling dla auth errors\n",
          "values": {
            "strings": [],
            "numbers": [
              256
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 187,
          "snippet": "#### **Implementacja:**\n\n**1. Ghost API Client z JWT auth:**\n```python\n# src/adapters/ghost/ghost_client.py",
          "values": {
            "strings": [],
            "numbers": [
              1
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 189,
          "snippet": "**1. Ghost API Client z JWT auth:**\n```python\n# src/adapters/ghost/ghost_client.py\nimport jwt\nimport time",
          "values": {
            "strings": [],
            "numbers": [
              1
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 199,
          "snippet": "logger = logging.getLogger(__name__)\n\nclass GhostAPIError(Exception):\n    def __init__(self, message: str, status_code: Optional[int] = None, response_data: Optional[Dict] = None):\n        self.message = message",
          "values": {
            "strings": [],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 206,
          "snippet": "        super().__init__(self.message)\n\nclass GhostClient:\n    def __init__(self, api_url: str, api_key: str):\n        self.api_url = api_url.rstrip('/')",
          "values": {
            "strings": [],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 210,
          "snippet": "        self.api_url = api_url.rstrip('/')\n        self.api_key = api_key\n        self.base_url = f\"{self.api_url}/ghost/api/admin\"\n        \n        # Parse API key (format: id:secret)",
          "values": {
            "strings": [
              ")\n        self.api_key = api_key\n        self.base_url = f"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 219,
          "snippet": "    \n    def _generate_jwt_token(self) -> str:\n        \"\"\"Generate JWT token for Ghost Admin API authentication\"\"\"\n        now = int(time.time())\n        ",
          "values": {
            "strings": [
              "Generate JWT token for Ghost Admin API authentication"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 247,
          "snippet": "\n    def _make_request(self, method: str, endpoint: str, data: Optional[Dict] = None) -> Dict:\n        \"\"\"Make authenticated request to Ghost API\"\"\"\n        token = self._generate_jwt_token()\n        ",
          "values": {
            "strings": [
              "Make authenticated request to Ghost API"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 251,
          "snippet": "        \n        headers = {\n            'Authorization': f'Ghost {token}',\n            'Content-Type': 'application/json',\n            'Accept-Version': 'v6.0'",
          "values": {
            "strings": [
              "Authorization",
              "Ghost {token}",
              "Content-Type",
              "application/json",
              "Accept-Version",
              "v6.0"
            ],
            "numbers": [
              6,
              0
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 273,
          "snippet": "            if response.status_code >= 400:\n                error_data = response.json() if response.content else {}\n                raise GhostAPIError(\n                    f\"Ghost API error: {response.status_code}\", \n                    response.status_code, ",
          "values": {
            "strings": [
              "Ghost API error: {response.status_code}"
            ],
            "numbers": [
              400
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 274,
          "snippet": "                error_data = response.json() if response.content else {}\n                raise GhostAPIError(\n                    f\"Ghost API error: {response.status_code}\", \n                    response.status_code, \n                    error_data",
          "values": {
            "strings": [
              "Ghost API error: {response.status_code}"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 282,
          "snippet": "            \n        except requests.exceptions.RequestException as e:\n            logger.error(f\"Ghost API request failed: {str(e)}\")\n            raise GhostAPIError(f\"Request failed: {str(e)}\")\n",
          "values": {
            "strings": [
              "Ghost API request failed: {str(e)}",
              "Request failed: {str(e)}"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 283,
          "snippet": "        except requests.exceptions.RequestException as e:\n            logger.error(f\"Ghost API request failed: {str(e)}\")\n            raise GhostAPIError(f\"Request failed: {str(e)}\")\n\n    def test_connection(self) -> Dict[str, Any]:",
          "values": {
            "strings": [
              "Ghost API request failed: {str(e)}",
              "Request failed: {str(e)}"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 286,
          "snippet": "\n    def test_connection(self) -> Dict[str, Any]:\n        \"\"\"Test connection to Ghost API\"\"\"\n        try:\n            # Test with site endpoint (lightweight)",
          "values": {
            "strings": [
              "Test connection to Ghost API"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 298,
          "snippet": "                'site_info': result.get('site', {}),\n                'posts_access': True,\n                'message': 'Ghost API connection successful'\n            }\n        except GhostAPIError as e:",
          "values": {
            "strings": [
              "site_info",
              "site",
              "posts_access",
              "message",
              "Ghost API connection successful"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 300,
          "snippet": "                'message': 'Ghost API connection successful'\n            }\n        except GhostAPIError as e:\n            return {\n                'connected': False,",
          "values": {
            "strings": [
              "message",
              "Ghost API connection successful",
              "connected"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 305,
          "snippet": "                'error': str(e),\n                'status_code': e.status_code,\n                'message': 'Ghost API connection failed'\n            }\n",
          "values": {
            "strings": [
              "error",
              "status_code",
              "message",
              "Ghost API connection failed"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 310,
          "snippet": "    def create_post(self, title: str, content: str, status: str = 'draft', \n                   content_format: str = 'html', **kwargs) -> Dict:\n        \"\"\"Create a new post in Ghost\"\"\"\n        \n        # Prepare post data according to Ghost API format",
          "values": {
            "strings": [
              "draft",
              "html",
              "Create a new post in Ghost"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 312,
          "snippet": "        \"\"\"Create a new post in Ghost\"\"\"\n        \n        # Prepare post data according to Ghost API format\n        post_data = {\n            'title': title,",
          "values": {
            "strings": [
              "Create a new post in Ghost",
              "\n        \n        # Prepare post data according to Ghost API format\n        post_data = {\n            "
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 336,
          "snippet": "            post_data['feature_image'] = kwargs['feature_image']\n        \n        # Wrap in posts array as required by Ghost API\n        payload = {'posts': [post_data]}\n        ",
          "values": {
            "strings": [
              "feature_image",
              "feature_image",
              "posts"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 339,
          "snippet": "        payload = {'posts': [post_data]}\n        \n        logger.info(f\"Creating Ghost post: {title}\")\n        result = self._make_request('POST', '/posts/', payload)\n        ",
          "values": {
            "strings": [
              "posts",
              "Creating Ghost post: {title}",
              "POST",
              "/posts/"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 345,
          "snippet": "\n    def get_posts(self, limit: int = 15, **filters) -> Dict:\n        \"\"\"Get posts from Ghost\"\"\"\n        params = f\"?limit={limit}\"\n        ",
          "values": {
            "strings": [
              "Get posts from Ghost",
              "\n        params = f"
            ],
            "numbers": [
              15
            ]
          }
        },
        {
          "type": "required_elements",
          "platform": "ghost",
          "line": 356,
          "snippet": "        \"\"\"Update existing post\"\"\"\n        post_data = {\n            'updated_at': updated_at,  # Required for optimistic concurrency\n            **updates\n        }",
          "values": {
            "strings": [
              "Update existing post",
              "\n        post_data = {\n            "
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 367,
          "snippet": "```python\n# Aktualizacja main.py\nghost_client = None\n\ndef get_ghost_client():",
          "values": {
            "strings": [],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 369,
          "snippet": "ghost_client = None\n\ndef get_ghost_client():\n    global ghost_client\n    if not ghost_client:",
          "values": {
            "strings": [],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 370,
          "snippet": "\ndef get_ghost_client():\n    global ghost_client\n    if not ghost_client:\n        api_url = os.getenv(\"GHOST_API_URL\")",
          "values": {
            "strings": [
              "GHOST_API_URL"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 371,
          "snippet": "def get_ghost_client():\n    global ghost_client\n    if not ghost_client:\n        api_url = os.getenv(\"GHOST_API_URL\")\n        api_key = os.getenv(\"GHOST_API_KEY\")",
          "values": {
            "strings": [
              "GHOST_API_URL",
              "GHOST_API_KEY"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 372,
          "snippet": "    global ghost_client\n    if not ghost_client:\n        api_url = os.getenv(\"GHOST_API_URL\")\n        api_key = os.getenv(\"GHOST_API_KEY\")\n        ",
          "values": {
            "strings": [
              "GHOST_API_URL",
              "GHOST_API_KEY"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 373,
          "snippet": "    if not ghost_client:\n        api_url = os.getenv(\"GHOST_API_URL\")\n        api_key = os.getenv(\"GHOST_API_KEY\")\n        \n        if not api_url or not api_key:",
          "values": {
            "strings": [
              "GHOST_API_URL",
              "GHOST_API_KEY"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 378,
          "snippet": "            return None\n            \n        ghost_client = GhostClient(api_url, api_key)\n    \n    return ghost_client",
          "values": {
            "strings": [],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 380,
          "snippet": "        ghost_client = GhostClient(api_url, api_key)\n    \n    return ghost_client\n\n@app.get(\"/config\")",
          "values": {
            "strings": [
              "/config"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 384,
          "snippet": "@app.get(\"/config\")\nasync def config():\n    client = get_ghost_client()\n    if not client:\n        return {",
          "values": {
            "strings": [
              "/config"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 387,
          "snippet": "    if not client:\n        return {\n            \"ghost_api_configured\": False,\n            \"status\": \"misconfigured\",\n            \"message\": \"GHOST_API_URL and GHOST_API_KEY required\"",
          "values": {
            "strings": [
              "ghost_api_configured",
              "status",
              "misconfigured",
              "message",
              "GHOST_API_URL and GHOST_API_KEY required"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 389,
          "snippet": "            \"ghost_api_configured\": False,\n            \"status\": \"misconfigured\",\n            \"message\": \"GHOST_API_URL and GHOST_API_KEY required\"\n        }\n    ",
          "values": {
            "strings": [
              "ghost_api_configured",
              "status",
              "misconfigured",
              "message",
              "GHOST_API_URL and GHOST_API_KEY required"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 396,
          "snippet": "    \n    return {\n        \"ghost_api_configured\": True,\n        \"connected\": connection_test['connected'],\n        \"site_info\": connection_test.get('site_info', {}),",
          "values": {
            "strings": [
              "ghost_api_configured",
              "connected",
              "connected",
              "site_info",
              "site_info"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 407,
          "snippet": "```bash\n#!/bin/bash\n# scripts/test-ghost-auth.sh\n\necho \"🧪 TESTOWANIE GHOST API AUTH\"",
          "values": {
            "strings": [
              "🧪 TESTOWANIE GHOST API AUTH"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 409,
          "snippet": "# scripts/test-ghost-auth.sh\n\necho \"🧪 TESTOWANIE GHOST API AUTH\"\necho \"=============================\"\n",
          "values": {
            "strings": [
              "🧪 TESTOWANIE GHOST API AUTH",
              "============================="
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 420,
          "snippet": "curl -s \"$BASE_URL/config\" | jq '.site_info.title' | grep -q -v \"null\" && echo \" ✅ PASS\" || echo \" ❌ FAIL\"\n\necho \"🎯 Ghost API authentication ready!\"\n```\n",
          "values": {
            "strings": [
              "$BASE_URL/config",
              ".site_info.title",
              "null",
              " ✅ PASS",
              " ❌ FAIL",
              "🎯 Ghost API authentication ready!"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 427,
          "snippet": "- [ ] Connection test przechodzi\n- [ ] Error handling dla błędnych kluczy\n- [ ] Site info pobierane z Ghost API\n\n---",
          "values": {
            "strings": [],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 443,
          "snippet": "**1. Modele Pydantic:**\n```python\n# src/adapters/ghost/models.py\nfrom pydantic import BaseModel, Field, validator\nfrom typing import Optional, List",
          "values": {
            "strings": [],
            "numbers": [
              1
            ]
          }
        },
        {
          "type": "max_length",
          "platform": "ghost",
          "line": 449,
          "snippet": "\nclass PublishRequest(BaseModel):\n    title: str = Field(..., min_length=1, max_length=300)\n    content: str = Field(..., min_length=1)\n    content_format: str = Field(default=\"html\", pattern=\"^(html|lexical)$\")",
          "values": {
            "strings": [
              "html",
              "^(html|lexical)$"
            ],
            "numbers": [
              1,
              300,
              1
            ]
          }
        },
        {
          "type": "max_length",
          "platform": "ghost",
          "line": 456,
          "snippet": "    tags: Optional[List[str]] = Field(default=None, max_items=10)\n    featured: bool = False\n    custom_excerpt: Optional[str] = Field(default=None, max_length=500)\n    feature_image: Optional[str] = None\n    ",
          "values": {
            "strings": [],
            "numbers": [
              10,
              500
            ]
          }
        },
        {
          "type": "required_elements",
          "platform": "ghost",
          "line": 466,
          "snippet": "                datetime.fromisoformat(v.replace('Z', '+00:00'))\n            except ValueError:\n                raise ValueError('published_at must be valid ISO 8601 format')\n        return v\n    ",
          "values": {
            "strings": [
              ", ",
              "))\n            except ValueError:\n                raise ValueError("
            ],
            "numbers": [
              0,
              0,
              8601
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 492,
          "snippet": "# Aktualizacja main.py\nfrom .models import PublishRequest, PublishResponse\nfrom .ghost_client import GhostClient, GhostAPIError\n\n@app.post(\"/publish\", response_model=PublishResponse)",
          "values": {
            "strings": [
              "/publish"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 496,
          "snippet": "@app.post(\"/publish\", response_model=PublishResponse)\nasync def publish_post(request: PublishRequest):\n    \"\"\"Publikuj post w Ghost\"\"\"\n    logger.info(f\"[Ghost Adapter] Publishing post: '{request.title}'\")\n    ",
          "values": {
            "strings": [
              "/publish",
              "Publikuj post w Ghost",
              "\n    logger.info(f",
              "{request.title}"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 497,
          "snippet": "async def publish_post(request: PublishRequest):\n    \"\"\"Publikuj post w Ghost\"\"\"\n    logger.info(f\"[Ghost Adapter] Publishing post: '{request.title}'\")\n    \n    try:",
          "values": {
            "strings": [
              "Publikuj post w Ghost",
              "\n    logger.info(f",
              "{request.title}"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 500,
          "snippet": "    \n    try:\n        client = get_ghost_client()\n        if not client:\n            raise HTTPException(",
          "values": {
            "strings": [],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 504,
          "snippet": "            raise HTTPException(\n                status_code=500,\n                detail=\"Ghost API not configured. Set GHOST_API_URL and GHOST_API_KEY.\"\n            )\n        ",
          "values": {
            "strings": [
              "Ghost API not configured. Set GHOST_API_URL and GHOST_API_KEY."
            ],
            "numbers": [
              500
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 519,
          "snippet": "                )\n        \n        # Create post via Ghost API\n        post_result = client.create_post(\n            title=request.title,",
          "values": {
            "strings": [],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 543,
          "snippet": "        )\n        \n        logger.info(f\"[Ghost Adapter] Post published: {response.message}\")\n        return response\n        ",
          "values": {
            "strings": [
              "[Ghost Adapter] Post published: {response.message}"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 546,
          "snippet": "        return response\n        \n    except GhostAPIError as e:\n        logger.error(f\"[Ghost Adapter] Ghost API error: {str(e)}\")\n        ",
          "values": {
            "strings": [
              "[Ghost Adapter] Ghost API error: {str(e)}"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 547,
          "snippet": "        \n    except GhostAPIError as e:\n        logger.error(f\"[Ghost Adapter] Ghost API error: {str(e)}\")\n        \n        if e.status_code == 401:",
          "values": {
            "strings": [
              "[Ghost Adapter] Ghost API error: {str(e)}"
            ],
            "numbers": [
              401
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 552,
          "snippet": "            raise HTTPException(\n                status_code=401,\n                detail=\"Invalid Ghost API credentials\"\n            )\n        elif e.status_code == 422:",
          "values": {
            "strings": [
              "Invalid Ghost API credentials"
            ],
            "numbers": [
              401,
              422
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 562,
          "snippet": "            raise HTTPException(\n                status_code=e.status_code or 500,\n                detail=f\"Ghost API error: {str(e)}\"\n            )\n    ",
          "values": {
            "strings": [
              "Ghost API error: {str(e)}"
            ],
            "numbers": [
              500
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 566,
          "snippet": "    \n    except Exception as e:\n        logger.error(f\"[Ghost Adapter] Unexpected error: {str(e)}\")\n        raise HTTPException(\n            status_code=500,",
          "values": {
            "strings": [
              "[Ghost Adapter] Unexpected error: {str(e)}"
            ],
            "numbers": [
              500
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 576,
          "snippet": "```bash\n#!/bin/bash\n# scripts/test-ghost-publish.sh\n\necho \"🧪 TESTOWANIE GHOST PUBLISH ENDPOINT\"",
          "values": {
            "strings": [
              "🧪 TESTOWANIE GHOST PUBLISH ENDPOINT"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 578,
          "snippet": "# scripts/test-ghost-publish.sh\n\necho \"🧪 TESTOWANIE GHOST PUBLISH ENDPOINT\"\necho \"=====================================\"\n",
          "values": {
            "strings": [
              "🧪 TESTOWANIE GHOST PUBLISH ENDPOINT",
              "====================================="
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 589,
          "snippet": "  -d '{\n    \"title\": \"Test HTML Post\",\n    \"content\": \"<h1>Hello Ghost!</h1><p>This is a test post from API.</p>\",\n    \"status\": \"draft\"\n  }' | jq '.accepted' | grep -q \"true\" && echo \" ✅ PASS\" || echo \" ❌ FAIL\"",
          "values": {
            "strings": [
              "{\n    ",
              ": ",
              ",\n    ",
              ": ",
              ",\n    ",
              ": ",
              "\n  }",
              ".accepted",
              "true",
              " ✅ PASS"
            ],
            "numbers": [
              1,
              1
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 601,
          "snippet": "    \"content\": \"<h1>Featured Content</h1><p>This post has metadata.</p>\",\n    \"status\": \"draft\",\n    \"tags\": [\"test\", \"api\", \"ghost\"],\n    \"featured\": true,\n    \"custom_excerpt\": \"This is a test post excerpt\"",
          "values": {
            "strings": [
              "content",
              "<h1>Featured Content</h1><p>This post has metadata.</p>",
              "status",
              "draft",
              "tags",
              "test",
              "api",
              "ghost",
              "featured",
              "custom_excerpt"
            ],
            "numbers": [
              1,
              1
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 626,
          "snippet": "  }' | grep -q \"422\" && echo \" ✅ PASS\" || echo \" ❌ FAIL\"\n\necho \"🎯 Ghost publish endpoint ready!\"\n```\n",
          "values": {
            "strings": [
              " | grep -q ",
              " && echo ",
              " || echo ",
              "\n\necho "
            ],
            "numbers": [
              422
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 649,
          "snippet": "**1. Schedule management:**\n```python\n# Rozszerzenie ghost_client.py\ndef schedule_post(self, post_id: str, published_at: str) -> Dict:\n    \"\"\"Schedule existing post for future publication\"\"\"",
          "values": {
            "strings": [
              "Schedule existing post for future publication"
            ],
            "numbers": [
              1
            ]
          }
        },
        {
          "type": "required_elements",
          "platform": "ghost",
          "line": 661,
          "snippet": "        'status': 'scheduled',\n        'published_at': published_at,\n        'updated_at': post_data['updated_at']  # Required for concurrency\n    }\n    ",
          "values": {
            "strings": [
              "status",
              "scheduled",
              "published_at",
              "updated_at",
              "updated_at"
            ],
            "numbers": []
          }
        },
        {
          "type": "required_elements",
          "platform": "ghost",
          "line": 682,
          "snippet": "def get_post_preview(self, post_id: str) -> Dict:\n    \"\"\"Get post preview with rendered content\"\"\"\n    return self._make_request('GET', f'/posts/{post_id}/?include=tags,authors')\n```\n",
          "values": {
            "strings": [
              "Get post preview with rendered content",
              "\n    return self._make_request(",
              ", f"
            ],
            "numbers": []
          }
        },
        {
          "type": "required_elements",
          "platform": "ghost",
          "line": 699,
          "snippet": "            raise HTTPException(\n                status_code=400,\n                detail=\"published_at must be in the future\"\n            )\n        ",
          "values": {
            "strings": [
              "published_at must be in the future"
            ],
            "numbers": [
              400
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 702,
          "snippet": "            )\n        \n        client = get_ghost_client()\n        if not client:\n            raise HTTPException(status_code=500, detail=\"Ghost API not configured\")",
          "values": {
            "strings": [
              "Ghost API not configured"
            ],
            "numbers": [
              500
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 704,
          "snippet": "        client = get_ghost_client()\n        if not client:\n            raise HTTPException(status_code=500, detail=\"Ghost API not configured\")\n        \n        result = client.schedule_post(post_id, published_at)",
          "values": {
            "strings": [
              "Ghost API not configured"
            ],
            "numbers": [
              500
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 716,
          "snippet": "        }\n        \n    except GhostAPIError as e:\n        raise HTTPException(status_code=e.status_code or 500, detail=str(e))\n",
          "values": {
            "strings": [],
            "numbers": [
              500
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 723,
          "snippet": "    \"\"\"Immediately publish a draft post\"\"\"\n    try:\n        client = get_ghost_client()\n        if not client:\n            raise HTTPException(status_code=500, detail=\"Ghost API not configured\")",
          "values": {
            "strings": [
              "Immediately publish a draft post",
              "\n    try:\n        client = get_ghost_client()\n        if not client:\n            raise HTTPException(status_code=500, detail="
            ],
            "numbers": [
              500
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 725,
          "snippet": "        client = get_ghost_client()\n        if not client:\n            raise HTTPException(status_code=500, detail=\"Ghost API not configured\")\n        \n        result = client.publish_now(post_id)",
          "values": {
            "strings": [
              "Ghost API not configured"
            ],
            "numbers": [
              500
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 737,
          "snippet": "        }\n        \n    except GhostAPIError as e:\n        raise HTTPException(status_code=e.status_code or 500, detail=str(e))\n",
          "values": {
            "strings": [],
            "numbers": [
              500
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 744,
          "snippet": "    \"\"\"Get post preview\"\"\"\n    try:\n        client = get_ghost_client()\n        if not client:\n            raise HTTPException(status_code=500, detail=\"Ghost API not configured\")",
          "values": {
            "strings": [
              "Get post preview",
              "\n    try:\n        client = get_ghost_client()\n        if not client:\n            raise HTTPException(status_code=500, detail="
            ],
            "numbers": [
              500
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 746,
          "snippet": "        client = get_ghost_client()\n        if not client:\n            raise HTTPException(status_code=500, detail=\"Ghost API not configured\")\n        \n        result = client.get_post_preview(post_id)",
          "values": {
            "strings": [
              "Ghost API not configured"
            ],
            "numbers": [
              500
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 752,
          "snippet": "        return result['posts'][0]\n        \n    except GhostAPIError as e:\n        raise HTTPException(status_code=e.status_code or 500, detail=str(e))\n",
          "values": {
            "strings": [
              "posts"
            ],
            "numbers": [
              0,
              500
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 759,
          "snippet": "    \"\"\"List posts with optional status filter\"\"\"\n    try:\n        client = get_ghost_client()\n        if not client:\n            raise HTTPException(status_code=500, detail=\"Ghost API not configured\")",
          "values": {
            "strings": [
              "List posts with optional status filter",
              "\n    try:\n        client = get_ghost_client()\n        if not client:\n            raise HTTPException(status_code=500, detail="
            ],
            "numbers": [
              500
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 761,
          "snippet": "        client = get_ghost_client()\n        if not client:\n            raise HTTPException(status_code=500, detail=\"Ghost API not configured\")\n        \n        filters = {}",
          "values": {
            "strings": [
              "Ghost API not configured"
            ],
            "numbers": [
              500
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 775,
          "snippet": "        }\n        \n    except GhostAPIError as e:\n        raise HTTPException(status_code=e.status_code or 500, detail=str(e))\n```",
          "values": {
            "strings": [],
            "numbers": [
              500
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 782,
          "snippet": "```bash\n#!/bin/bash\n# scripts/test-ghost-schedule.sh\n\necho \"🧪 TESTOWANIE GHOST SCHEDULE MANAGEMENT\"",
          "values": {
            "strings": [
              "🧪 TESTOWANIE GHOST SCHEDULE MANAGEMENT"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 784,
          "snippet": "# scripts/test-ghost-schedule.sh\n\necho \"🧪 TESTOWANIE GHOST SCHEDULE MANAGEMENT\"\necho \"=======================================\"\n",
          "values": {
            "strings": [
              "🧪 TESTOWANIE GHOST SCHEDULE MANAGEMENT",
              "======================================="
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 818,
          "snippet": "  | jq '.posts | length' | grep -q -E \"[0-9]+\" && echo \" ✅ PASS\" || echo \" ❌ FAIL\"\n\necho \"🎯 Ghost schedule management ready!\"\n```\n",
          "values": {
            "strings": [
              ".posts | length",
              "[0-9]+",
              " ✅ PASS",
              " ❌ FAIL",
              "🎯 Ghost schedule management ready!"
            ],
            "numbers": [
              0,
              9
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 832,
          "snippet": "\n#### **Cele:**\n- [x] Upload images do Ghost\n- [x] Automatyczne przetwarzanie image URLs w content\n- [x] Feature image support",
          "values": {
            "strings": [],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 839,
          "snippet": "#### **Implementacja:**\n\n**1. Image upload w Ghost client:**\n```python\n# Rozszerzenie ghost_client.py",
          "values": {
            "strings": [],
            "numbers": [
              1
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 841,
          "snippet": "**1. Image upload w Ghost client:**\n```python\n# Rozszerzenie ghost_client.py\nimport requests\nfrom pathlib import Path",
          "values": {
            "strings": [],
            "numbers": [
              1
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 846,
          "snippet": "\ndef upload_image(self, image_path: str, purpose: str = \"image\") -> Dict:\n    \"\"\"Upload image to Ghost\"\"\"\n    \n    if not Path(image_path).exists():",
          "values": {
            "strings": [
              "image",
              "Upload image to Ghost"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 854,
          "snippet": "    \n    headers = {\n        'Authorization': f'Ghost {token}',\n        'Accept-Version': 'v6.0'\n    }",
          "values": {
            "strings": [
              "Authorization",
              "Ghost {token}",
              "Accept-Version",
              "v6.0"
            ],
            "numbers": [
              6,
              0
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 873,
          "snippet": "    if response.status_code >= 400:\n        error_data = response.json() if response.content else {}\n        raise GhostAPIError(f\"Image upload failed: {response.status_code}\", response.status_code, error_data)\n    \n    return response.json()",
          "values": {
            "strings": [
              "Image upload failed: {response.status_code}"
            ],
            "numbers": [
              400
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 878,
          "snippet": "\ndef process_content_images(self, content: str) -> str:\n    \"\"\"Find and upload local images in content, replace with Ghost URLs\"\"\"\n    import re\n    ",
          "values": {
            "strings": [
              "Find and upload local images in content, replace with Ghost URLs"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 898,
          "snippet": "        \n        try:\n            # Upload to Ghost\n            upload_result = self.upload_image(src)\n            new_url = upload_result['images'][0]['url']",
          "values": {
            "strings": [
              "images",
              "url"
            ],
            "numbers": [
              0
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 921,
          "snippet": "@app.post(\"/upload-image\")\nasync def upload_image(file: UploadFile = File(...)):\n    \"\"\"Upload image to Ghost\"\"\"\n    try:\n        # Validate file type",
          "values": {
            "strings": [
              "/upload-image",
              "Upload image to Ghost"
            ],
            "numbers": []
          }
        },
        {
          "type": "required_elements",
          "platform": "ghost",
          "line": 925,
          "snippet": "        # Validate file type\n        if not file.content_type.startswith('image/'):\n            raise HTTPException(status_code=400, detail=\"File must be an image\")\n        \n        # Validate file size (5MB limit)",
          "values": {
            "strings": [
              "image/",
              "File must be an image"
            ],
            "numbers": [
              400,
              5
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 931,
          "snippet": "            raise HTTPException(status_code=400, detail=\"File too large (max 5MB)\")\n        \n        client = get_ghost_client()\n        if not client:\n            raise HTTPException(status_code=500, detail=\"Ghost API not configured\")",
          "values": {
            "strings": [
              "File too large (max 5MB)",
              "Ghost API not configured"
            ],
            "numbers": [
              400,
              5,
              500
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 933,
          "snippet": "        client = get_ghost_client()\n        if not client:\n            raise HTTPException(status_code=500, detail=\"Ghost API not configured\")\n        \n        # Save temporary file",
          "values": {
            "strings": [
              "Ghost API not configured"
            ],
            "numbers": [
              500
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 942,
          "snippet": "        \n        try:\n            # Upload to Ghost\n            result = client.upload_image(temp_path)\n            ",
          "values": {
            "strings": [],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 957,
          "snippet": "            os.unlink(temp_path)\n        \n    except GhostAPIError as e:\n        raise HTTPException(status_code=e.status_code or 500, detail=str(e))\n    ",
          "values": {
            "strings": [],
            "numbers": [
              500
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 967,
          "snippet": "@app.post(\"/publish\", response_model=PublishResponse)\nasync def publish_post(request: PublishRequest):\n    \"\"\"Publikuj post w Ghost z automatic image processing\"\"\"\n    logger.info(f\"[Ghost Adapter] Publishing post: '{request.title}'\")\n    ",
          "values": {
            "strings": [
              "/publish",
              "Publikuj post w Ghost z automatic image processing",
              "\n    logger.info(f",
              "{request.title}"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 968,
          "snippet": "async def publish_post(request: PublishRequest):\n    \"\"\"Publikuj post w Ghost z automatic image processing\"\"\"\n    logger.info(f\"[Ghost Adapter] Publishing post: '{request.title}'\")\n    \n    try:",
          "values": {
            "strings": [
              "Publikuj post w Ghost z automatic image processing",
              "\n    logger.info(f",
              "{request.title}"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 971,
          "snippet": "    \n    try:\n        client = get_ghost_client()\n        if not client:\n            raise HTTPException(status_code=500, detail=\"Ghost API not configured\")",
          "values": {
            "strings": [
              "Ghost API not configured"
            ],
            "numbers": [
              500
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 973,
          "snippet": "        client = get_ghost_client()\n        if not client:\n            raise HTTPException(status_code=500, detail=\"Ghost API not configured\")\n        \n        # Process images in content if HTML format",
          "values": {
            "strings": [
              "Ghost API not configured"
            ],
            "numbers": [
              500
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 1011,
          "snippet": "        )\n        \n        logger.info(f\"[Ghost Adapter] Post published: {response.message}\")\n        return response\n        ",
          "values": {
            "strings": [
              "[Ghost Adapter] Post published: {response.message}"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 1015,
          "snippet": "        \n    except Exception as e:\n        logger.error(f\"[Ghost Adapter] Publish error: {str(e)}\")\n        raise HTTPException(status_code=500, detail=str(e))\n```",
          "values": {
            "strings": [
              "[Ghost Adapter] Publish error: {str(e)}"
            ],
            "numbers": [
              500
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 1022,
          "snippet": "```bash\n#!/bin/bash\n# scripts/test-ghost-media.sh\n\necho \"🧪 TESTOWANIE GHOST MEDIA MANAGEMENT\"",
          "values": {
            "strings": [
              "🧪 TESTOWANIE GHOST MEDIA MANAGEMENT"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 1024,
          "snippet": "# scripts/test-ghost-media.sh\n\necho \"🧪 TESTOWANIE GHOST MEDIA MANAGEMENT\"\necho \"=====================================\"\n",
          "values": {
            "strings": [
              "🧪 TESTOWANIE GHOST MEDIA MANAGEMENT",
              "====================================="
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 1059,
          "snippet": "rm -f test-image.jpg test.txt\n\necho \"🎯 Ghost media management ready!\"\n```\n",
          "values": {
            "strings": [
              "🎯 Ghost media management ready!"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 1075,
          "snippet": "- [x] Comprehensive error handling\n- [x] Rate limiting detection\n- [x] Health monitoring z Ghost API\n- [x] Structured logging\n",
          "values": {
            "strings": [],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 1082,
          "snippet": "**1. Enhanced error handling:**\n```python\n# Rozszerzenie ghost_client.py\nfrom tenacity import retry, stop_after_attempt, wait_exponential\nimport logging",
          "values": {
            "strings": [],
            "numbers": [
              1
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 1086,
          "snippet": "import logging\n\nclass GhostAPIError(Exception):\n    \"\"\"Enhanced Ghost API Error with categorization\"\"\"\n    ",
          "values": {
            "strings": [
              "Enhanced Ghost API Error with categorization"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 1087,
          "snippet": "\nclass GhostAPIError(Exception):\n    \"\"\"Enhanced Ghost API Error with categorization\"\"\"\n    \n    ERROR_CATEGORIES = {",
          "values": {
            "strings": [
              "Enhanced Ghost API Error with categorization"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 1108,
          "snippet": "        super().__init__(self.message)\n\nclass GhostClient:\n    def __init__(self, api_url: str, api_key: str):\n        # ... existing init code ...",
          "values": {
            "strings": [],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 1126,
          "snippet": "        \n        headers = {\n            'Authorization': f'Ghost {token}',\n            'Content-Type': 'application/json',\n            'Accept-Version': 'v6.0',",
          "values": {
            "strings": [
              "Authorization",
              "Ghost {token}",
              "Content-Type",
              "application/json",
              "Accept-Version",
              "v6.0"
            ],
            "numbers": [
              6,
              0
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 1129,
          "snippet": "            'Content-Type': 'application/json',\n            'Accept-Version': 'v6.0',\n            'User-Agent': 'Ghost-Publisher-Adapter/1.0'\n        }\n        ",
          "values": {
            "strings": [
              "Content-Type",
              "application/json",
              "Accept-Version",
              "v6.0",
              "User-Agent",
              "Ghost-Publisher-Adapter/1.0"
            ],
            "numbers": [
              6,
              0,
              1,
              0
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 1134,
          "snippet": "        url = f\"{self.base_url}{endpoint}\"\n        \n        self.logger.debug(f\"Ghost API {method} {endpoint}\")\n        \n        try:",
          "values": {
            "strings": [
              "{self.base_url}{endpoint}",
              "Ghost API {method} {endpoint}"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 1158,
          "snippet": "                if response.status_code == 429:\n                    retry_after = response.headers.get('Retry-After', '60')\n                    raise GhostAPIError(\n                        f\"Rate limit exceeded. Retry after {retry_after} seconds\",\n                        response.status_code,",
          "values": {
            "strings": [
              "Retry-After",
              "60",
              "Rate limit exceeded. Retry after {retry_after} seconds"
            ],
            "numbers": [
              429,
              60
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 1169,
          "snippet": "                        for err in validation_errors\n                    ])\n                    raise GhostAPIError(error_msg, response.status_code, error_data)\n                else:\n                    error_msg = error_data.get('message', f\"HTTP {response.status_code}\")",
          "values": {
            "strings": [
              "message",
              "HTTP {response.status_code}"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 1172,
          "snippet": "                else:\n                    error_msg = error_data.get('message', f\"HTTP {response.status_code}\")\n                    raise GhostAPIError(error_msg, response.status_code, error_data)\n            \n            return response.json() if response.content else {}",
          "values": {
            "strings": [
              "message",
              "HTTP {response.status_code}"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 1178,
          "snippet": "        except requests.exceptions.Timeout:\n            self.error_count += 1\n            raise GhostAPIError(\"Request timeout - Ghost API not responding\")\n        except requests.exceptions.ConnectionError:\n            self.error_count += 1",
          "values": {
            "strings": [
              "Request timeout - Ghost API not responding"
            ],
            "numbers": [
              1,
              1
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 1181,
          "snippet": "        except requests.exceptions.ConnectionError:\n            self.error_count += 1\n            raise GhostAPIError(\"Connection error - Cannot reach Ghost API\")\n        except requests.exceptions.RequestException as e:\n            self.error_count += 1",
          "values": {
            "strings": [
              "Connection error - Cannot reach Ghost API"
            ],
            "numbers": [
              1,
              1
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 1184,
          "snippet": "        except requests.exceptions.RequestException as e:\n            self.error_count += 1\n            raise GhostAPIError(f\"Request failed: {str(e)}\")\n\n    def get_health_status(self) -> Dict[str, Any]:",
          "values": {
            "strings": [
              "Request failed: {str(e)}"
            ],
            "numbers": [
              1
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 1202,
          "snippet": "                'status': 'healthy',\n                'response_time_ms': round(response_time * 1000, 2),\n                'ghost_version': site_result.get('site', {}).get('version'),\n                'site_title': site_result.get('site', {}).get('title'),\n                'posts_accessible': True,",
          "values": {
            "strings": [
              "status",
              "healthy",
              "response_time_ms",
              "ghost_version",
              "site",
              "version",
              "site_title",
              "site",
              "title",
              "posts_accessible"
            ],
            "numbers": [
              1000,
              2
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 1211,
          "snippet": "            }\n            \n        except GhostAPIError as e:\n            return {\n                'status': 'unhealthy',",
          "values": {
            "strings": [
              "status",
              "unhealthy"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 1271,
          "snippet": "@app.get(\"/health\")\nasync def health():\n    \"\"\"Enhanced health check with Ghost API status\"\"\"\n    try:\n        client = get_ghost_client()",
          "values": {
            "strings": [
              "/health",
              "Enhanced health check with Ghost API status"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 1273,
          "snippet": "    \"\"\"Enhanced health check with Ghost API status\"\"\"\n    try:\n        client = get_ghost_client()\n        \n        if not client:",
          "values": {
            "strings": [
              "Enhanced health check with Ghost API status"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 1278,
          "snippet": "            return {\n                \"status\": \"degraded\",\n                \"ghost_configured\": False,\n                \"message\": \"Ghost API not configured\"\n            }",
          "values": {
            "strings": [
              "status",
              "degraded",
              "ghost_configured",
              "message",
              "Ghost API not configured"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 1279,
          "snippet": "                \"status\": \"degraded\",\n                \"ghost_configured\": False,\n                \"message\": \"Ghost API not configured\"\n            }\n        ",
          "values": {
            "strings": [
              "status",
              "degraded",
              "ghost_configured",
              "message",
              "Ghost API not configured"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 1282,
          "snippet": "            }\n        \n        # Get Ghost health status\n        ghost_health = client.get_health_status()\n        ",
          "values": {
            "strings": [],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 1283,
          "snippet": "        \n        # Get Ghost health status\n        ghost_health = client.get_health_status()\n        \n        # App health",
          "values": {
            "strings": [],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 1290,
          "snippet": "        \n        overall_status = \"healthy\"\n        if ghost_health['status'] != 'healthy':\n            overall_status = \"degraded\" \n        elif error_rate > 10:  # More than 10% error rate",
          "values": {
            "strings": [
              "healthy",
              "status",
              "healthy",
              "degraded"
            ],
            "numbers": [
              10,
              10
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 1300,
          "snippet": "            \"app_stats\": app_stats,\n            \"error_rate_percent\": round(error_rate, 2),\n            \"ghost_health\": ghost_health,\n            \"timestamp\": datetime.utcnow().isoformat() + 'Z'\n        }",
          "values": {
            "strings": [
              "app_stats",
              "error_rate_percent",
              "ghost_health",
              "timestamp"
            ],
            "numbers": [
              2
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 1315,
          "snippet": "async def metrics():\n    \"\"\"Prometheus-style metrics\"\"\"\n    client = get_ghost_client()\n    ghost_health = client.get_health_status() if client else {\"status\": \"unconfigured\"}\n    ",
          "values": {
            "strings": [
              "Prometheus-style metrics",
              "\n    client = get_ghost_client()\n    ghost_health = client.get_health_status() if client else {",
              ": "
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 1316,
          "snippet": "    \"\"\"Prometheus-style metrics\"\"\"\n    client = get_ghost_client()\n    ghost_health = client.get_health_status() if client else {\"status\": \"unconfigured\"}\n    \n    uptime = datetime.utcnow() - app_stats['start_time']",
          "values": {
            "strings": [
              "Prometheus-style metrics",
              "\n    client = get_ghost_client()\n    ghost_health = client.get_health_status() if client else {",
              ": ",
              "}\n    \n    uptime = datetime.utcnow() - app_stats["
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 1321,
          "snippet": "    \n    metrics_data = {\n        \"ghost_adapter_uptime_seconds\": int(uptime.total_seconds()),\n        \"ghost_adapter_requests_total\": app_stats['requests_total'],\n        \"ghost_adapter_requests_success_total\": app_stats['requests_success'],",
          "values": {
            "strings": [
              "ghost_adapter_uptime_seconds",
              "ghost_adapter_requests_total",
              "requests_total",
              "ghost_adapter_requests_success_total",
              "requests_success"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 1322,
          "snippet": "    metrics_data = {\n        \"ghost_adapter_uptime_seconds\": int(uptime.total_seconds()),\n        \"ghost_adapter_requests_total\": app_stats['requests_total'],\n        \"ghost_adapter_requests_success_total\": app_stats['requests_success'],\n        \"ghost_adapter_requests_error_total\": app_stats['requests_error'],",
          "values": {
            "strings": [
              "ghost_adapter_uptime_seconds",
              "ghost_adapter_requests_total",
              "requests_total",
              "ghost_adapter_requests_success_total",
              "requests_success",
              "ghost_adapter_requests_error_total",
              "requests_error"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 1323,
          "snippet": "        \"ghost_adapter_uptime_seconds\": int(uptime.total_seconds()),\n        \"ghost_adapter_requests_total\": app_stats['requests_total'],\n        \"ghost_adapter_requests_success_total\": app_stats['requests_success'],\n        \"ghost_adapter_requests_error_total\": app_stats['requests_error'],\n        \"ghost_api_response_time_ms\": ghost_health.get('response_time_ms', 0),",
          "values": {
            "strings": [
              "ghost_adapter_uptime_seconds",
              "ghost_adapter_requests_total",
              "requests_total",
              "ghost_adapter_requests_success_total",
              "requests_success",
              "ghost_adapter_requests_error_total",
              "requests_error",
              "ghost_api_response_time_ms",
              "response_time_ms"
            ],
            "numbers": [
              0
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 1324,
          "snippet": "        \"ghost_adapter_requests_total\": app_stats['requests_total'],\n        \"ghost_adapter_requests_success_total\": app_stats['requests_success'],\n        \"ghost_adapter_requests_error_total\": app_stats['requests_error'],\n        \"ghost_api_response_time_ms\": ghost_health.get('response_time_ms', 0),\n        \"ghost_api_status\": 1 if ghost_health['status'] == 'healthy' else 0,",
          "values": {
            "strings": [
              "ghost_adapter_requests_total",
              "requests_total",
              "ghost_adapter_requests_success_total",
              "requests_success",
              "ghost_adapter_requests_error_total",
              "requests_error",
              "ghost_api_response_time_ms",
              "response_time_ms",
              "ghost_api_status",
              "status"
            ],
            "numbers": [
              0,
              1,
              0
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 1325,
          "snippet": "        \"ghost_adapter_requests_success_total\": app_stats['requests_success'],\n        \"ghost_adapter_requests_error_total\": app_stats['requests_error'],\n        \"ghost_api_response_time_ms\": ghost_health.get('response_time_ms', 0),\n        \"ghost_api_status\": 1 if ghost_health['status'] == 'healthy' else 0,\n        \"ghost_api_requests_total\": ghost_health.get('request_count', 0),",
          "values": {
            "strings": [
              "ghost_adapter_requests_success_total",
              "requests_success",
              "ghost_adapter_requests_error_total",
              "requests_error",
              "ghost_api_response_time_ms",
              "response_time_ms",
              "ghost_api_status",
              "status",
              "healthy",
              "ghost_api_requests_total"
            ],
            "numbers": [
              0,
              1,
              0,
              0
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 1326,
          "snippet": "        \"ghost_adapter_requests_error_total\": app_stats['requests_error'],\n        \"ghost_api_response_time_ms\": ghost_health.get('response_time_ms', 0),\n        \"ghost_api_status\": 1 if ghost_health['status'] == 'healthy' else 0,\n        \"ghost_api_requests_total\": ghost_health.get('request_count', 0),\n        \"ghost_api_errors_total\": ghost_health.get('error_count', 0)",
          "values": {
            "strings": [
              "ghost_adapter_requests_error_total",
              "requests_error",
              "ghost_api_response_time_ms",
              "response_time_ms",
              "ghost_api_status",
              "status",
              "healthy",
              "ghost_api_requests_total",
              "request_count",
              "ghost_api_errors_total"
            ],
            "numbers": [
              0,
              1,
              0,
              0,
              0
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 1327,
          "snippet": "        \"ghost_api_response_time_ms\": ghost_health.get('response_time_ms', 0),\n        \"ghost_api_status\": 1 if ghost_health['status'] == 'healthy' else 0,\n        \"ghost_api_requests_total\": ghost_health.get('request_count', 0),\n        \"ghost_api_errors_total\": ghost_health.get('error_count', 0)\n    }",
          "values": {
            "strings": [
              "ghost_api_response_time_ms",
              "response_time_ms",
              "ghost_api_status",
              "status",
              "healthy",
              "ghost_api_requests_total",
              "request_count",
              "ghost_api_errors_total",
              "error_count"
            ],
            "numbers": [
              0,
              1,
              0,
              0,
              0
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 1328,
          "snippet": "        \"ghost_api_status\": 1 if ghost_health['status'] == 'healthy' else 0,\n        \"ghost_api_requests_total\": ghost_health.get('request_count', 0),\n        \"ghost_api_errors_total\": ghost_health.get('error_count', 0)\n    }\n    ",
          "values": {
            "strings": [
              "ghost_api_status",
              "status",
              "healthy",
              "ghost_api_requests_total",
              "request_count",
              "ghost_api_errors_total",
              "error_count"
            ],
            "numbers": [
              1,
              0,
              0,
              0
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 1334,
          "snippet": "\n# Enhanced error handling for all endpoints\n@app.exception_handler(GhostAPIError)\nasync def ghost_api_exception_handler(request, exc: GhostAPIError):\n    \"\"\"Global Ghost API error handler\"\"\"",
          "values": {
            "strings": [
              "Global Ghost API error handler"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 1335,
          "snippet": "# Enhanced error handling for all endpoints\n@app.exception_handler(GhostAPIError)\nasync def ghost_api_exception_handler(request, exc: GhostAPIError):\n    \"\"\"Global Ghost API error handler\"\"\"\n    ",
          "values": {
            "strings": [
              "Global Ghost API error handler"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 1336,
          "snippet": "@app.exception_handler(GhostAPIError)\nasync def ghost_api_exception_handler(request, exc: GhostAPIError):\n    \"\"\"Global Ghost API error handler\"\"\"\n    \n    logger.error(f\"Ghost API Error: {exc.error_category} - {exc.message}\")",
          "values": {
            "strings": [
              "Global Ghost API error handler",
              "\n    \n    logger.error(f"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 1338,
          "snippet": "    \"\"\"Global Ghost API error handler\"\"\"\n    \n    logger.error(f\"Ghost API Error: {exc.error_category} - {exc.message}\")\n    \n    status_code_map = {",
          "values": {
            "strings": [
              "Global Ghost API error handler",
              "\n    \n    logger.error(f"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 1366,
          "snippet": "```bash\n#!/bin/bash\n# scripts/test-ghost-monitoring.sh\n\necho \"🧪 TESTOWANIE GHOST MONITORING\"",
          "values": {
            "strings": [
              "🧪 TESTOWANIE GHOST MONITORING"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 1368,
          "snippet": "# scripts/test-ghost-monitoring.sh\n\necho \"🧪 TESTOWANIE GHOST MONITORING\"\necho \"===============================\"\n",
          "values": {
            "strings": [
              "🧪 TESTOWANIE GHOST MONITORING",
              "==============================="
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 1379,
          "snippet": "# Test 2: Metrics endpoint\necho \"Test 2: Metrics endpoint\"\ncurl -s \"$BASE_URL/metrics\" | jq '.ghost_adapter_uptime_seconds' | grep -q -E \"[0-9]+\" && echo \" ✅ PASS\" || echo \" ❌ FAIL\"\n\n# Test 3: Error handling - invalid request",
          "values": {
            "strings": [
              "Test 2: Metrics endpoint",
              "$BASE_URL/metrics",
              ".ghost_adapter_uptime_seconds",
              "[0-9]+",
              " ✅ PASS",
              " ❌ FAIL"
            ],
            "numbers": [
              2,
              2,
              0,
              9,
              3
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 1388,
          "snippet": "  | jq '.error' | grep -q \"true\" && echo \" ✅ PASS\" || echo \" ❌ FAIL\"\n\n# Test 4: Ghost API health\necho \"Test 4: Ghost API connectivity\"\ncurl -s \"$BASE_URL/health\" | jq '.ghost_health.status' | grep -q -E \"(healthy|unhealthy)\" && echo \" ✅ PASS\" || echo \" ❌ FAIL\"",
          "values": {
            "strings": [
              ".error",
              "true",
              " ✅ PASS",
              " ❌ FAIL",
              "Test 4: Ghost API connectivity",
              "$BASE_URL/health",
              ".ghost_health.status",
              "(healthy|unhealthy)",
              " ✅ PASS",
              " ❌ FAIL"
            ],
            "numbers": [
              4,
              4
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 1389,
          "snippet": "\n# Test 4: Ghost API health\necho \"Test 4: Ghost API connectivity\"\ncurl -s \"$BASE_URL/health\" | jq '.ghost_health.status' | grep -q -E \"(healthy|unhealthy)\" && echo \" ✅ PASS\" || echo \" ❌ FAIL\"\n",
          "values": {
            "strings": [
              "Test 4: Ghost API connectivity",
              "$BASE_URL/health",
              ".ghost_health.status",
              "(healthy|unhealthy)",
              " ✅ PASS",
              " ❌ FAIL"
            ],
            "numbers": [
              4,
              4
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 1390,
          "snippet": "# Test 4: Ghost API health\necho \"Test 4: Ghost API connectivity\"\ncurl -s \"$BASE_URL/health\" | jq '.ghost_health.status' | grep -q -E \"(healthy|unhealthy)\" && echo \" ✅ PASS\" || echo \" ❌ FAIL\"\n\necho \"🎯 Ghost monitoring ready!\"",
          "values": {
            "strings": [
              "Test 4: Ghost API connectivity",
              "$BASE_URL/health",
              ".ghost_health.status",
              "(healthy|unhealthy)",
              " ✅ PASS",
              " ❌ FAIL",
              "🎯 Ghost monitoring ready!"
            ],
            "numbers": [
              4,
              4
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 1392,
          "snippet": "curl -s \"$BASE_URL/health\" | jq '.ghost_health.status' | grep -q -E \"(healthy|unhealthy)\" && echo \" ✅ PASS\" || echo \" ❌ FAIL\"\n\necho \"🎯 Ghost monitoring ready!\"\n```\n",
          "values": {
            "strings": [
              "$BASE_URL/health",
              ".ghost_health.status",
              "(healthy|unhealthy)",
              " ✅ PASS",
              " ❌ FAIL",
              "🎯 Ghost monitoring ready!"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 1397,
          "snippet": "#### **Walidacja ukończenia:**\n- [ ] Comprehensive error handling działa\n- [ ] Health monitoring pokazuje Ghost status\n- [ ] Metrics endpoint zwraca statystyki\n- [ ] Structured logging działa",
          "values": {
            "strings": [],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 1406,
          "snippet": "\n### **Ukończone zadania:**\n- **Task 4.1**: ✅ Szkielet Ghost Adapter (FastAPI, Docker, healthcheck)\n- **Task 4.2**: ✅ JWT Authentication i Ghost API Client (**COMPLETED 2025-08-07**)\n- **Task 4.3**: ✅ Endpoint POST /publish (HTML + Lexical content) (**COMPLETED 2025-08-07**)",
          "values": {
            "strings": [],
            "numbers": [
              4,
              1,
              4,
              2,
              2025,
              8,
              7,
              4,
              3,
              2025
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 1407,
          "snippet": "### **Ukończone zadania:**\n- **Task 4.1**: ✅ Szkielet Ghost Adapter (FastAPI, Docker, healthcheck)\n- **Task 4.2**: ✅ JWT Authentication i Ghost API Client (**COMPLETED 2025-08-07**)\n- **Task 4.3**: ✅ Endpoint POST /publish (HTML + Lexical content) (**COMPLETED 2025-08-07**)\n- **Task 4.4**: ✅ Harmonogram publikacji i status management (**COMPLETED 2025-08-07**)",
          "values": {
            "strings": [],
            "numbers": [
              4,
              1,
              4,
              2,
              2025,
              8,
              7,
              4,
              3,
              2025
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 1419,
          "snippet": "- **Error Handling**: Comprehensive error categories i retry logic\n- **Monitoring**: Health checks, metrics, structured logging\n- **Authentication**: Secure JWT token generation dla Ghost Admin API\n\n### **Endpointy:**",
          "values": {
            "strings": [],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 1428,
          "snippet": "- `GET /posts` - Lista postów z filterami\n- `POST /upload-image` - Upload obrazów\n- `GET /health` - Health check z Ghost API status\n- `GET /metrics` - Metrics dla monitoring\n",
          "values": {
            "strings": [],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 1433,
          "snippet": "### **Wymagane zmienne środowiskowe:**\n```bash\nGHOST_API_URL=https://your-ghost-site.com\nGHOST_API_KEY=your_admin_api_key_here\n```",
          "values": {
            "strings": [],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 1434,
          "snippet": "```bash\nGHOST_API_URL=https://your-ghost-site.com\nGHOST_API_KEY=your_admin_api_key_here\n```\n",
          "values": {
            "strings": [],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 1439,
          "snippet": "### **Docker deployment:**\n```bash\n# Uruchomienie Ghost Adapter\nmake build-ghost\nmake up-ghost",
          "values": {
            "strings": [],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 1440,
          "snippet": "```bash\n# Uruchomienie Ghost Adapter\nmake build-ghost\nmake up-ghost\n",
          "values": {
            "strings": [],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 1441,
          "snippet": "# Uruchomienie Ghost Adapter\nmake build-ghost\nmake up-ghost\n\n# Testy",
          "values": {
            "strings": [],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 1444,
          "snippet": "\n# Testy\nmake test-ghost-full\n```\n",
          "values": {
            "strings": [],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 1448,
          "snippet": "\n### **Następne kroki:**\nSystem jest gotowy do integracji z AI Writing Flow i może obsługiwać pełny workflow publikacji treści w Ghost CMS, włączając w to zarządzanie mediami, harmonogram publikacji i monitoring statusu API.",
          "values": {
            "strings": [],
            "numbers": []
          }
        }
      ]
    },
    {
      "file": "/Users/hretheum/dev/bezrobocie/vector-wave/publisher/docs/phase-8-platform-health-monitoring.md",
      "exists": true,
      "hits": [
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 89,
          "snippet": "Phase 8 provides the complete platform health foundation needed for:\n- **Phase 6**: AI Writing Flow integration with health-aware publishing\n- **Phase 7**: LinkedIn module integration with session health monitoring  \n- **Phase 9**: Content optimization with performance metrics integration",
          "values": {
            "strings": [],
            "numbers": [
              8,
              6,
              7,
              9
            ]
          }
        }
      ]
    },
    {
      "file": "/Users/hretheum/dev/bezrobocie/vector-wave/publisher/docs/phase-5-monitoring-retry.md",
      "exists": true,
      "hits": []
    },
    {
      "file": "/Users/hretheum/dev/bezrobocie/vector-wave/publisher/docs/substack-adapter-technical.md",
      "exists": true,
      "hits": [
        {
          "type": "platform_specific",
          "platform": "substack",
          "line": 1,
          "snippet": "# Substack Adapter - Dokumentacja Techniczna\n\n## Przegląd",
          "values": {
            "strings": [],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "substack",
          "line": 5,
          "snippet": "## Przegląd\n\nSubstack Adapter implementuje wzorzec \"ondemand session initializer\" dla automatyzacji publikacji na platformie Substack. System składa się z dwóch głównych komponentów:\n\n1. **CLI do zarządzania sesjami** (`scripts/substack-cli.js`)",
          "values": {
            "strings": [
              "ondemand session initializer"
            ],
            "numbers": [
              1
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "substack",
          "line": 7,
          "snippet": "Substack Adapter implementuje wzorzec \"ondemand session initializer\" dla automatyzacji publikacji na platformie Substack. System składa się z dwóch głównych komponentów:\n\n1. **CLI do zarządzania sesjami** (`scripts/substack-cli.js`)\n2. **Adapter do automatycznej publikacji** (`src/adapters/substack-adapter.js`)\n",
          "values": {
            "strings": [
              "ondemand session initializer"
            ],
            "numbers": [
              1,
              2
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "substack",
          "line": 8,
          "snippet": "\n1. **CLI do zarządzania sesjami** (`scripts/substack-cli.js`)\n2. **Adapter do automatycznej publikacji** (`src/adapters/substack-adapter.js`)\n\n## Architektura",
          "values": {
            "strings": [],
            "numbers": [
              1,
              2
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "substack",
          "line": 20,
          "snippet": "### 2. Komponenty\n\n#### CLI (`scripts/substack-cli.js`)\n- **Biblioteki**: `yargs`, `dotenv`, `@browserbasehq/stagehand`\n- **Komendy**:",
          "values": {
            "strings": [],
            "numbers": [
              2
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "substack",
          "line": 26,
          "snippet": "  - `session validate --account <nazwa>` - Walidacja istniejącej sesji\n\n#### Adapter (`src/adapters/substack-adapter.js`)\n- **Klasa**: `SubstackAdapter`\n- **Metody główne**:",
          "values": {
            "strings": [],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "substack",
          "line": 27,
          "snippet": "\n#### Adapter (`src/adapters/substack-adapter.js`)\n- **Klasa**: `SubstackAdapter`\n- **Metody główne**:\n  - `initialize(accountName)` - Wczytuje zapisaną sesję",
          "values": {
            "strings": [],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "substack",
          "line": 31,
          "snippet": "  - `initialize(accountName)` - Wczytuje zapisaną sesję\n  - `startBrowser()` - Uruchamia przeglądarkę z przywróconą sesją\n  - `publishPost(postData)` - Publikuje post na Substack\n\n### 3. Format Danych Sesji",
          "values": {
            "strings": [],
            "numbers": [
              3
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "substack",
          "line": 35,
          "snippet": "### 3. Format Danych Sesji\n\nSesje zapisywane w `data/sessions/{account}_substack.json`:\n\n```json",
          "values": {
            "strings": [],
            "numbers": [
              3
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "substack",
          "line": 42,
          "snippet": "  \"createdAt\": \"2025-08-06T19:40:32.237Z\",\n  \"validUntil\": \"2025-09-05T19:40:32.237Z\",\n  \"platform\": \"substack\",\n  \"cookies\": [...],\n  \"localStorage\": {...},",
          "values": {
            "strings": [
              "createdAt",
              "2025-08-06T19:40:32.237Z",
              "validUntil",
              "2025-09-05T19:40:32.237Z",
              "platform",
              "substack",
              "cookies",
              "localStorage"
            ],
            "numbers": [
              2025,
              8,
              6,
              19,
              40,
              32,
              237,
              2025,
              9,
              5
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "substack",
          "line": 47,
          "snippet": "  \"sessionStorage\": {...},\n  \"userAgent\": \"...\",\n  \"url\": \"https://tojamarek.substack.com/\"\n}\n```",
          "values": {
            "strings": [
              "sessionStorage",
              "userAgent",
              "...",
              "url",
              "https://tojamarek.substack.com/"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "substack",
          "line": 58,
          "snippet": "2. **Manual Login**: Użytkownik loguje się ręcznie w przeglądarce\n3. **Context Extraction**: Automatyczne wyciągnięcie:\n   - Cookies (wszystkie domeny .substack.com)\n   - localStorage content\n   - sessionStorage content",
          "values": {
            "strings": [],
            "numbers": [
              2,
              3
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "substack",
          "line": 71,
          "snippet": "1. Sprawdzenie daty wygaśnięcia (validUntil)\n2. Próba przywrócenia sesji w headless browser\n3. Navigacja do Substack + przywrócenie kontekstu\n4. Weryfikacja loginów poprzez wyszukiwanie elementów UI\n```",
          "values": {
            "strings": [],
            "numbers": [
              1,
              2,
              3,
              4
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "substack",
          "line": 79,
          "snippet": "#### Flow publikacji:\n1. **Session Restore**: Przywrócenie cookies, localStorage, sessionStorage\n2. **Navigation**: Przejście do `https://{subdomain}.substack.com/publish/post`\n3. **Form Filling**: Wypełnienie tytułu i treści posta\n4. **Continue Click**: Przejście do drugiego kroku (settings)",
          "values": {
            "strings": [],
            "numbers": [
              1,
              2,
              3,
              4
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "substack",
          "line": 100,
          "snippet": "### Wymagane zmienne środowiskowe (.env):\n```bash\nSUBSTACK_SUBDOMAIN=tojamarek        # Subdomena newslettera\nOPENAI_API_KEY=sk-...               # Klucz OpenAI (wymagany przez Stagehand)\nBROWSERBASE_API_KEY=bb_live_...     # Opcjonalny (jeśli używasz Browserbase)",
          "values": {
            "strings": [],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "substack",
          "line": 115,
          "snippet": "\n### Anti-Bot Protection\n- **Problem**: Substack ukrywa pole tagów przed botami (element z zerowymi wymiarami)\n- **Rozwiązanie**: Wykrywanie via `getBoundingClientRect()` i eleganckie pomijanie\n- **Fallback**: Publikacja kontynuowana bez tagów",
          "values": {
            "strings": [],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "substack",
          "line": 147,
          "snippet": "```bash\n# 1. Inicjalizacja sesji\nnode publisher/scripts/substack-cli.js session create --account test\n\n# 2. Walidacja",
          "values": {
            "strings": [],
            "numbers": [
              1,
              2
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "substack",
          "line": 150,
          "snippet": "\n# 2. Walidacja\nnode publisher/scripts/substack-cli.js session validate --account test\n\n# 3. Test publikacji",
          "values": {
            "strings": [],
            "numbers": [
              2,
              3
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "substack",
          "line": 153,
          "snippet": "\n# 3. Test publikacji\nnode publisher/scripts/test-substack-adapter.js\n```\n",
          "values": {
            "strings": [],
            "numbers": [
              3
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "twitter",
          "line": 174,
          "snippet": "### Zadania do realizacji:\n- **1.8**: Session rotation i automatyczne odnawianie\n- **Phase 2**: Twitter adapter z podobnym mechanizmem\n- **Phase 3**: Beehiiv integration\n- **Phase 4**: Unified orchestrator API",
          "values": {
            "strings": [],
            "numbers": [
              1,
              8,
              2,
              3,
              4
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "twitter",
          "line": 175,
          "snippet": "- **1.8**: Session rotation i automatyczne odnawianie\n- **Phase 2**: Twitter adapter z podobnym mechanizmem\n- **Phase 3**: Beehiiv integration\n- **Phase 4**: Unified orchestrator API\n",
          "values": {
            "strings": [],
            "numbers": [
              1,
              8,
              2,
              3,
              4
            ]
          }
        }
      ]
    },
    {
      "file": "/Users/hretheum/dev/bezrobocie/vector-wave/publisher/docs/phase-3-ghost-adapter.md",
      "exists": true,
      "hits": [
        {
          "type": "platform_specific",
          "platform": "beehiiv",
          "line": 1,
          "snippet": "# Faza 3: Ghost Adapter (ex-Beehiiv) ✅ **COMPLETED**\n\n## Status: **MIGRATED TO GHOST CMS & COMPLETED**",
          "values": {
            "strings": [],
            "numbers": [
              3
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "beehiiv",
          "line": 3,
          "snippet": "# Faza 3: Ghost Adapter (ex-Beehiiv) ✅ **COMPLETED**\n\n## Status: **MIGRATED TO GHOST CMS & COMPLETED**\n\n**Oryginalna Faza 3** planowała Beehiiv Adapter, ale został **zmigrated do Ghost CMS** dla lepszej stabilności API i funkcjonalności. Ghost Adapter jest **w pełni ukończony** z complete CMS integration.",
          "values": {
            "strings": [],
            "numbers": [
              3,
              3
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "beehiiv",
          "line": 5,
          "snippet": "## Status: **MIGRATED TO GHOST CMS & COMPLETED**\n\n**Oryginalna Faza 3** planowała Beehiiv Adapter, ale został **zmigrated do Ghost CMS** dla lepszej stabilności API i funkcjonalności. Ghost Adapter jest **w pełni ukończony** z complete CMS integration.\n\n---",
          "values": {
            "strings": [],
            "numbers": [
              3
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 11,
          "snippet": "## ✅ **COMPLETED TASKS**\n\n### Zadanie 3.1: Ghost Adapter Skeleton ✅ **COMPLETED**\n- **Wartość**: FastAPI service z Docker container i health checks\n- **Test**: `curl http://localhost:8086/health` zwraca healthy status",
          "values": {
            "strings": [],
            "numbers": [
              3,
              1,
              8086
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 16,
          "snippet": "- **Implementacja**: ✅ Complete FastAPI setup z comprehensive endpoints\n\n### Zadanie 3.2: Ghost Admin API Integration ✅ **COMPLETED**  \n- **Wartość**: JWT authentication i connection z Ghost CMS\n- **Test**: Connection test passes, site info retrieved successfully",
          "values": {
            "strings": [],
            "numbers": [
              3,
              2
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 17,
          "snippet": "\n### Zadanie 3.2: Ghost Admin API Integration ✅ **COMPLETED**  \n- **Wartość**: JWT authentication i connection z Ghost CMS\n- **Test**: Connection test passes, site info retrieved successfully\n- **Implementacja**: ✅ Complete JWT HS256 authentication z Ghost Admin API",
          "values": {
            "strings": [],
            "numbers": [
              3,
              2,
              256
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 19,
          "snippet": "- **Wartość**: JWT authentication i connection z Ghost CMS\n- **Test**: Connection test passes, site info retrieved successfully\n- **Implementacja**: ✅ Complete JWT HS256 authentication z Ghost Admin API\n\n### Zadanie 3.3: POST /publish Endpoint ✅ **COMPLETED**",
          "values": {
            "strings": [],
            "numbers": [
              256,
              3,
              3
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 22,
          "snippet": "\n### Zadanie 3.3: POST /publish Endpoint ✅ **COMPLETED**\n- **Wartość**: Publikacja artykułów w Ghost CMS z HTML i Lexical support\n- **Test**: Artykuły są tworzone w Ghost CMS z pełną treścią\n- **Implementacja**: ✅ HTML/Lexical content support z proper Ghost API integration",
          "values": {
            "strings": [],
            "numbers": [
              3,
              3
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 23,
          "snippet": "### Zadanie 3.3: POST /publish Endpoint ✅ **COMPLETED**\n- **Wartość**: Publikacja artykułów w Ghost CMS z HTML i Lexical support\n- **Test**: Artykuły są tworzone w Ghost CMS z pełną treścią\n- **Implementacja**: ✅ HTML/Lexical content support z proper Ghost API integration\n",
          "values": {
            "strings": [],
            "numbers": [
              3,
              3
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 24,
          "snippet": "- **Wartość**: Publikacja artykułów w Ghost CMS z HTML i Lexical support\n- **Test**: Artykuły są tworzone w Ghost CMS z pełną treścią\n- **Implementacja**: ✅ HTML/Lexical content support z proper Ghost API integration\n\n### Zadanie 3.4: Scheduling & Status Management ✅ **COMPLETED**",
          "values": {
            "strings": [],
            "numbers": [
              3,
              4
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 32,
          "snippet": "\n### Zadanie 3.5: Image Upload & Media Management ✅ **COMPLETED**\n- **Wartość**: Upload obrazów do Ghost i automatyczne przetwarzanie w content\n- **Test**: Obrazy są uploadowane i URLs zastąpione w treści\n- **Implementacja**: ✅ Real image upload working z Ghost API integration",
          "values": {
            "strings": [],
            "numbers": [
              3,
              5
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 34,
          "snippet": "- **Wartość**: Upload obrazów do Ghost i automatyczne przetwarzanie w content\n- **Test**: Obrazy są uploadowane i URLs zastąpione w treści\n- **Implementacja**: ✅ Real image upload working z Ghost API integration\n\n### Zadanie 3.6: Error Handling & Monitoring ✅ **COMPLETED**",
          "values": {
            "strings": [],
            "numbers": [
              3,
              6
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 45,
          "snippet": "## 🎯 **PRODUCTION FEATURES COMPLETED**\n\n### **Ghost CMS Integration**\n- ✅ **JWT Authentication**: HS256 z proper token generation\n- ✅ **Content Management**: Full HTML/Lexical content support  ",
          "values": {
            "strings": [],
            "numbers": [
              256
            ]
          }
        },
        {
          "type": "forbidden_phrases",
          "platform": "ghost",
          "line": 64,
          "snippet": "\n### **Docker Integration**\n- ✅ **Port**: 8086:8082 (avoiding conflicts)\n- ✅ **Health Checks**: Comprehensive health monitoring\n- ✅ **Environment**: Ghost API URL and key configuration",
          "values": {
            "strings": [],
            "numbers": [
              8086,
              8082
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 66,
          "snippet": "- ✅ **Port**: 8086:8082 (avoiding conflicts)\n- ✅ **Health Checks**: Comprehensive health monitoring\n- ✅ **Environment**: Ghost API URL and key configuration\n- ✅ **Dependencies**: Redis integration for queue system\n",
          "values": {
            "strings": [],
            "numbers": [
              8086,
              8082
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 75,
          "snippet": "### **Implementation Success**\n- ✅ **Tasks Completed**: 6/6 (100%)\n- ✅ **Image Upload**: REAL Ghost integration working\n- ✅ **Content Preservation**: HTML content displays properly in Ghost CMS  \n- ✅ **API Integration**: Full Ghost Admin API compatibility",
          "values": {
            "strings": [],
            "numbers": [
              6,
              6,
              100
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 76,
          "snippet": "- ✅ **Tasks Completed**: 6/6 (100%)\n- ✅ **Image Upload**: REAL Ghost integration working\n- ✅ **Content Preservation**: HTML content displays properly in Ghost CMS  \n- ✅ **API Integration**: Full Ghost Admin API compatibility\n- ✅ **Error Handling**: All major error scenarios covered",
          "values": {
            "strings": [],
            "numbers": [
              6,
              6,
              100
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 77,
          "snippet": "- ✅ **Image Upload**: REAL Ghost integration working\n- ✅ **Content Preservation**: HTML content displays properly in Ghost CMS  \n- ✅ **API Integration**: Full Ghost Admin API compatibility\n- ✅ **Error Handling**: All major error scenarios covered\n",
          "values": {
            "strings": [],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 90,
          "snippet": "## 🚀 **READY FOR ENHANCED ORCHESTRATOR**\n\nGhost Adapter jest **production ready** i gotowy do integracji z Enhanced Orchestrator:\n\n- ✅ **Image Processing**: Existing image upload capability",
          "values": {
            "strings": [],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 102,
          "snippet": "\n### **Core Implementation**\n- `src/adapters/ghost/main.py` - FastAPI application\n- `src/adapters/ghost/ghost_client.py` - Ghost Admin API client  \n- `src/adapters/ghost/models.py` - Pydantic models",
          "values": {
            "strings": [],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 103,
          "snippet": "### **Core Implementation**\n- `src/adapters/ghost/main.py` - FastAPI application\n- `src/adapters/ghost/ghost_client.py` - Ghost Admin API client  \n- `src/adapters/ghost/models.py` - Pydantic models\n- `src/adapters/ghost/prometheus_metrics.py` - Monitoring",
          "values": {
            "strings": [],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 104,
          "snippet": "- `src/adapters/ghost/main.py` - FastAPI application\n- `src/adapters/ghost/ghost_client.py` - Ghost Admin API client  \n- `src/adapters/ghost/models.py` - Pydantic models\n- `src/adapters/ghost/prometheus_metrics.py` - Monitoring\n",
          "values": {
            "strings": [],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 105,
          "snippet": "- `src/adapters/ghost/ghost_client.py` - Ghost Admin API client  \n- `src/adapters/ghost/models.py` - Pydantic models\n- `src/adapters/ghost/prometheus_metrics.py` - Monitoring\n\n### **Testing & Scripts**",
          "values": {
            "strings": [],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 108,
          "snippet": "\n### **Testing & Scripts**\n- `scripts/test-ghost-*.sh` - Comprehensive test suites\n- `scripts/cleanup-drafts.sh` - Utility scripts\n- `Makefile` - Build and test automation",
          "values": {
            "strings": [],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 113,
          "snippet": "\n### **Documentation**\n- `docs/ghost-adapter-status.md` - Detailed status documentation\n- `src/adapters/ghost/README.md` - Quick overview\n",
          "values": {
            "strings": [],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 114,
          "snippet": "### **Documentation**\n- `docs/ghost-adapter-status.md` - Detailed status documentation\n- `src/adapters/ghost/README.md` - Quick overview\n\n---",
          "values": {
            "strings": [],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "beehiiv",
          "line": 119,
          "snippet": "\n**Status**: ✅ **FAZA 3 COMPLETED SUCCESSFULLY**  \n**Migration**: Beehiiv → Ghost CMS completed with enhanced functionality  \n**Ready For**: Enhanced Orchestrator integration (Faza 4.5)\n",
          "values": {
            "strings": [],
            "numbers": [
              3,
              4,
              5
            ]
          }
        }
      ]
    },
    {
      "file": "/Users/hretheum/dev/bezrobocie/vector-wave/publisher/docs/masterplan.md",
      "exists": true,
      "hits": [
        {
          "type": "platform_specific",
          "platform": "twitter",
          "line": 23,
          "snippet": "\n### Core Platform (Phases 1-6)\n1. [Faza 1: Substack Adapter](./phase-1-substack-adapter.md) ✅ **COMPLETED**\n2. [Faza 2: Twitter/X Adapter](./phase-2-twitter-adapter.md) ✅ **COMPLETED** \n3. [Faza 3: Ghost Adapter (ex-Beehiiv)](./phase-3-ghost-adapter.md) ✅ **COMPLETED**",
          "values": {
            "strings": [],
            "numbers": [
              1,
              6,
              1,
              1,
              1,
              2,
              2,
              2,
              3,
              3
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "twitter",
          "line": 24,
          "snippet": "### Core Platform (Phases 1-6)\n1. [Faza 1: Substack Adapter](./phase-1-substack-adapter.md) ✅ **COMPLETED**\n2. [Faza 2: Twitter/X Adapter](./phase-2-twitter-adapter.md) ✅ **COMPLETED** \n3. [Faza 3: Ghost Adapter (ex-Beehiiv)](./phase-3-ghost-adapter.md) ✅ **COMPLETED**\n4. [Faza 4: Orkiestrator i API publikacji](./phase-4-orchestrator-api.md) ✅ **COMPLETED**",
          "values": {
            "strings": [],
            "numbers": [
              1,
              6,
              1,
              1,
              1,
              2,
              2,
              2,
              3,
              3
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "twitter",
          "line": 25,
          "snippet": "1. [Faza 1: Substack Adapter](./phase-1-substack-adapter.md) ✅ **COMPLETED**\n2. [Faza 2: Twitter/X Adapter](./phase-2-twitter-adapter.md) ✅ **COMPLETED** \n3. [Faza 3: Ghost Adapter (ex-Beehiiv)](./phase-3-ghost-adapter.md) ✅ **COMPLETED**\n4. [Faza 4: Orkiestrator i API publikacji](./phase-4-orchestrator-api.md) ✅ **COMPLETED**\n5. [Faza 5: Monitoring, retry, alerting](./phase-5-monitoring-retry.md) ✅ **COMPLETED** (Task 5.4 Alert System - 2025-08-07)",
          "values": {
            "strings": [],
            "numbers": [
              1,
              1,
              1,
              2,
              2,
              2,
              3,
              3,
              3,
              4
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 31,
          "snippet": "\n### Integration & Monitoring (Phases 7-8)\n7. [Faza 7: Integracja z LinkedIn Module](./phase-7-linkedin-integration.md)\n8. [Faza 8: Advanced Platform Health Monitoring](./phase-8-platform-health-monitoring.md)\n",
          "values": {
            "strings": [],
            "numbers": [
              7,
              8,
              7,
              7,
              7,
              8,
              8,
              8
            ]
          }
        }
      ]
    },
    {
      "file": "/Users/hretheum/dev/bezrobocie/vector-wave/publisher/docs/phase-9-content-optimization.md",
      "exists": true,
      "hits": [
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 22,
          "snippet": "### Zadanie 9.4: Platform-Specific Optimization\n- **Wartość**: Content jest optimized per-platform based on historical performance data.\n- **Test**: LinkedIn content ma different optimization strategy niż Twitter czy Substack.\n\n### Zadanie 9.5: Engagement Prediction Model",
          "values": {
            "strings": [],
            "numbers": [
              9,
              4,
              9,
              5
            ]
          }
        }
      ]
    },
    {
      "file": "/Users/hretheum/dev/bezrobocie/vector-wave/publisher/docs/beehiiv-adapter-technical.md",
      "exists": true,
      "hits": [
        {
          "type": "platform_specific",
          "platform": "beehiiv",
          "line": 1,
          "snippet": "# Beehiiv Adapter - Technical Documentation\n\n## Overview",
          "values": {
            "strings": [],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "beehiiv",
          "line": 4,
          "snippet": "\n## Overview\nBeehiiv Adapter jest mikrousługą odpowiedzialną za publikację newsletterów na platformie Beehiiv. Obsługuje zarówno publikację przez API, jak i fallback przez browser automation.\n\n## Architecture",
          "values": {
            "strings": [],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "beehiiv",
          "line": 33,
          "snippet": "{\n  \"status\": \"ok\",\n  \"service\": \"beehiiv-adapter\",\n  \"version\": \"1.0.0\",\n  \"timestamp\": \"2025-08-07T08:26:24.031070\"",
          "values": {
            "strings": [
              "status",
              "ok",
              "service",
              "beehiiv-adapter",
              "version",
              "1.0.0",
              "timestamp",
              "2025-08-07T08:26:24.031070"
            ],
            "numbers": [
              1,
              0,
              0,
              2025,
              8,
              7,
              8,
              26,
              24,
              31070
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "beehiiv",
          "line": 47,
          "snippet": "```json\n{\n  \"beehiiv_api_configured\": false,\n  \"beehiiv_base_url\": \"https://api.beehiiv.com/v2\",\n  \"api_key_present\": false,",
          "values": {
            "strings": [
              "beehiiv_api_configured",
              "beehiiv_base_url",
              "https://api.beehiiv.com/v2",
              "api_key_present"
            ],
            "numbers": [
              2
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "beehiiv",
          "line": 48,
          "snippet": "{\n  \"beehiiv_api_configured\": false,\n  \"beehiiv_base_url\": \"https://api.beehiiv.com/v2\",\n  \"api_key_present\": false,\n  \"api_key_prefix\": null,",
          "values": {
            "strings": [
              "beehiiv_api_configured",
              "beehiiv_base_url",
              "https://api.beehiiv.com/v2",
              "api_key_present",
              "api_key_prefix"
            ],
            "numbers": [
              2
            ]
          }
        },
        {
          "type": "required_elements",
          "platform": "beehiiv",
          "line": 88,
          "snippet": "## Environment Variables\n\n### Required\n- `BEEHIIV_API_KEY` - API key z Beehiiv\n- `BEEHIIV_PUBLICATION_ID` - ID publikacji w Beehiiv",
          "values": {
            "strings": [],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "beehiiv",
          "line": 89,
          "snippet": "\n### Required\n- `BEEHIIV_API_KEY` - API key z Beehiiv\n- `BEEHIIV_PUBLICATION_ID` - ID publikacji w Beehiiv\n",
          "values": {
            "strings": [],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "beehiiv",
          "line": 90,
          "snippet": "### Required\n- `BEEHIIV_API_KEY` - API key z Beehiiv\n- `BEEHIIV_PUBLICATION_ID` - ID publikacji w Beehiiv\n\n### Optional",
          "values": {
            "strings": [],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "beehiiv",
          "line": 93,
          "snippet": "\n### Optional\n- `BEEHIIV_BASE_URL` - URL API (default: https://api.beehiiv.com/v2)\n- `BEEHIIV_FALLBACK_ENABLED` - Włączenie fallback mode (default: true)\n- `OPENAI_API_KEY` - Dla browser automation fallback",
          "values": {
            "strings": [],
            "numbers": [
              2
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "beehiiv",
          "line": 94,
          "snippet": "### Optional\n- `BEEHIIV_BASE_URL` - URL API (default: https://api.beehiiv.com/v2)\n- `BEEHIIV_FALLBACK_ENABLED` - Włączenie fallback mode (default: true)\n- `OPENAI_API_KEY` - Dla browser automation fallback\n- `BROWSERBASE_API_KEY` - Cloud browser automation",
          "values": {
            "strings": [],
            "numbers": [
              2
            ]
          }
        },
        {
          "type": "required_elements",
          "platform": "beehiiv",
          "line": 108,
          "snippet": "FROM python:3.11-slim\nWORKDIR /app\nCOPY requirements.txt .\nRUN pip install --no-cache-dir -r requirements.txt\nCOPY main.py .",
          "values": {
            "strings": [],
            "numbers": [
              3,
              11
            ]
          }
        },
        {
          "type": "required_elements",
          "platform": "beehiiv",
          "line": 109,
          "snippet": "WORKDIR /app\nCOPY requirements.txt .\nRUN pip install --no-cache-dir -r requirements.txt\nCOPY main.py .\nEXPOSE 8084",
          "values": {
            "strings": [],
            "numbers": [
              8084
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "beehiiv",
          "line": 119,
          "snippet": "### Docker Compose Service\n```yaml\nbeehiiv-adapter:\n  build:\n    context: ./src/adapters/beehiiv",
          "values": {
            "strings": [],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "beehiiv",
          "line": 121,
          "snippet": "beehiiv-adapter:\n  build:\n    context: ./src/adapters/beehiiv\n    dockerfile: Dockerfile\n  container_name: publisher-beehiiv-adapter",
          "values": {
            "strings": [],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "beehiiv",
          "line": 123,
          "snippet": "    context: ./src/adapters/beehiiv\n    dockerfile: Dockerfile\n  container_name: publisher-beehiiv-adapter\n  ports:\n    - \"8084:8084\"",
          "values": {
            "strings": [
              "8084:8084"
            ],
            "numbers": [
              8084,
              8084
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "beehiiv",
          "line": 133,
          "snippet": "    - DEBUG=true\n  volumes:\n    - ./src/adapters/beehiiv:/app\n  restart: unless-stopped\n  healthcheck:",
          "values": {
            "strings": [],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "beehiiv",
          "line": 154,
          "snippet": "\n# Test publish endpoint\nmake test-beehiiv\n\n# View logs",
          "values": {
            "strings": [],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "beehiiv",
          "line": 157,
          "snippet": "\n# View logs\nmake logs-beehiiv\n\n# Check status",
          "values": {
            "strings": [],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "beehiiv",
          "line": 200,
          "snippet": "### 🚧 Next Steps (Tasks 3.2-3.7)\n- **Task 3.2**: Endpoint POST /publish już zaimplementowany (mock mode)\n- **Task 3.3**: Integracja z prawdziwym Beehiiv API\n- **Task 3.4**: Obsługa harmonogramu (logika już gotowa)\n- **Task 3.5**: Obsługa mediów (walidacja URL już gotowa)",
          "values": {
            "strings": [],
            "numbers": [
              3,
              2,
              3,
              7,
              3,
              2,
              3,
              3,
              3,
              4
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "beehiiv",
          "line": 209,
          "snippet": "\n```\nsrc/adapters/beehiiv/\n├── main.py           # Main FastAPI application\n├── requirements.txt  # Python dependencies",
          "values": {
            "strings": [],
            "numbers": []
          }
        },
        {
          "type": "required_elements",
          "platform": "beehiiv",
          "line": 211,
          "snippet": "src/adapters/beehiiv/\n├── main.py           # Main FastAPI application\n├── requirements.txt  # Python dependencies\n├── Dockerfile       # Container configuration\n└── env.template     # Environment variables template",
          "values": {
            "strings": [],
            "numbers": []
          }
        }
      ]
    },
    {
      "file": "/Users/hretheum/dev/bezrobocie/vector-wave/publisher/docs/phase-10-enterprise-features.md",
      "exists": true,
      "hits": []
    },
    {
      "file": "/Users/hretheum/dev/bezrobocie/vector-wave/publisher/docs/phase-3-beehiiv-adapter.md",
      "exists": true,
      "hits": [
        {
          "type": "platform_specific",
          "platform": "beehiiv",
          "line": 1,
          "snippet": "# Faza 3: Beehiiv Adapter\n\n## Cel fazy",
          "values": {
            "strings": [],
            "numbers": [
              3
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "beehiiv",
          "line": 4,
          "snippet": "\n## Cel fazy\nZbudowanie adaptera do publikacji newsletterów na Beehiiv przez API (lub browserbase fallback), z obsługą harmonogramu i mediów.\n\n---",
          "values": {
            "strings": [],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "beehiiv",
          "line": 8,
          "snippet": "---\n\n### Zadanie 3.1: Szkielet usługi Beehiiv Adapter (kontener, healthcheck) ✅\n- **Wartość**: Usługa uruchamia się w kontenerze, odpowiada na healthcheck (`/health`).\n- **Test**: `curl http://localhost:8084/health` zwraca `{ \"status\": \"ok\" }`.",
          "values": {
            "strings": [
              "status",
              "ok"
            ],
            "numbers": [
              3,
              1,
              8084
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "twitter",
          "line": 12,
          "snippet": "- **Test**: `curl http://localhost:8084/health` zwraca `{ \"status\": \"ok\" }`.\n- **Implementacja**: ✅ FastAPI + Docker + health endpoint + API documentation\n- **Porty**: 8084:8084 (Beehiiv), 8083:8082 (Twitter), 8081:80 (Nginx)\n- **Endpoints**: `/health`, `/config`, `/publish`, `/docs`\n- **Testing**: `make test-health`, `make test-beehiiv`, `make logs-beehiiv`",
          "values": {
            "strings": [
              "status",
              "ok"
            ],
            "numbers": [
              8084,
              8084,
              8084,
              8083,
              8082,
              8081,
              80
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "twitter",
          "line": 14,
          "snippet": "- **Porty**: 8084:8084 (Beehiiv), 8083:8082 (Twitter), 8081:80 (Nginx)\n- **Endpoints**: `/health`, `/config`, `/publish`, `/docs`\n- **Testing**: `make test-health`, `make test-beehiiv`, `make logs-beehiiv`\n\n### Zadanie 3.2: Endpoint POST /publish (przyjmuje dane publikacji) ✅",
          "values": {
            "strings": [],
            "numbers": [
              8084,
              8084,
              8083,
              8082,
              8081,
              80,
              3,
              2
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "beehiiv",
          "line": 28,
          "snippet": "  - `send_to_subscribers`: opcjonalne, boolean (default: true)\n- **Response format**: `{\"accepted\": bool, \"newsletter_id\": str, \"scheduled\": bool, \"message\": str, \"send_count\": int|null}`\n- **Test suite**: `./scripts/test-beehiiv-publish.sh` - 12/12 testów przeszło ✅\n\n### Zadanie 3.3: Integracja z Beehiiv API – publikacja newslettera ✅",
          "values": {
            "strings": [
              "accepted",
              "newsletter_id",
              "scheduled",
              "message",
              "send_count"
            ],
            "numbers": [
              12,
              12,
              3,
              3
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "beehiiv",
          "line": 30,
          "snippet": "- **Test suite**: `./scripts/test-beehiiv-publish.sh` - 12/12 testów przeszło ✅\n\n### Zadanie 3.3: Integracja z Beehiiv API – publikacja newslettera ✅\n- **Wartość**: Usługa publikuje newsletter przez Beehiiv API.\n- **Test**: Po wysłaniu żądania POST, newsletter pojawia się na koncie Beehiiv.",
          "values": {
            "strings": [],
            "numbers": [
              12,
              12,
              3,
              3
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "beehiiv",
          "line": 31,
          "snippet": "\n### Zadanie 3.3: Integracja z Beehiiv API – publikacja newslettera ✅\n- **Wartość**: Usługa publikuje newsletter przez Beehiiv API.\n- **Test**: Po wysłaniu żądania POST, newsletter pojawia się na koncie Beehiiv.\n- **Implementacja**: ✅ Pełna integracja z BeehiivClient",
          "values": {
            "strings": [],
            "numbers": [
              3,
              3
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "beehiiv",
          "line": 32,
          "snippet": "### Zadanie 3.3: Integracja z Beehiiv API – publikacja newslettera ✅\n- **Wartość**: Usługa publikuje newsletter przez Beehiiv API.\n- **Test**: Po wysłaniu żądania POST, newsletter pojawia się na koncie Beehiiv.\n- **Implementacja**: ✅ Pełna integracja z BeehiivClient\n- **API Client**:",
          "values": {
            "strings": [],
            "numbers": [
              3,
              3
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "beehiiv",
          "line": 33,
          "snippet": "- **Wartość**: Usługa publikuje newsletter przez Beehiiv API.\n- **Test**: Po wysłaniu żądania POST, newsletter pojawia się na koncie Beehiiv.\n- **Implementacja**: ✅ Pełna integracja z BeehiivClient\n- **API Client**:\n  - Autentykacja Bearer token",
          "values": {
            "strings": [],
            "numbers": []
          }
        }
      ]
    },
    {
      "file": "/Users/hretheum/dev/bezrobocie/vector-wave/publisher/docs/phase-2-twitter-adapter.md",
      "exists": true,
      "hits": [
        {
          "type": "platform_specific",
          "platform": "twitter",
          "line": 1,
          "snippet": "# Faza 2: Twitter/X Adapter (Typefully)\n\n## Cel fazy",
          "values": {
            "strings": [],
            "numbers": [
              2
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "twitter",
          "line": 4,
          "snippet": "\n## Cel fazy\nZbudowanie adaptera do publikacji na Twitter/X przez Typefully API, z obsługą wątków, harmonogramu i mediów.\n\n## 🎉 STATUS: **FAZA 2 TASKS 2.1-2.7 UKOŃCZONE!** ✅ (2025-08-07)",
          "values": {
            "strings": [],
            "numbers": [
              2,
              2,
              1,
              2,
              7,
              2025,
              8,
              7
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "twitter",
          "line": 21,
          "snippet": "- ✅ URL validation z protokołem HTTP/HTTPS\n- ✅ Support dla formatów: JPG, PNG, WEBP, GIF, MP4, MOV\n- ✅ Max 4 media items per tweet (Twitter limit)\n- ✅ Media w wątkach i zaplanowanych tweetach  \n- ✅ Comprehensive testing suite",
          "values": {
            "strings": [],
            "numbers": [
              4,
              4
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "twitter",
          "line": 30,
          "snippet": "1. **Bez `schedule-date`** → Draft ze statusem `\"draft\"` (wymaga ręcznej publikacji w UI)\n2. **Z `schedule-date` w przyszłości** → Draft ze statusem `\"scheduled\"`  \n3. **Po osiągnięciu `schedule-date`** → **Automatycznie publikuje** na Twitter/X!\n\n**Przykład sukcesu:** Tweet ID `6401696` zaplanowany na `2025-08-07T07:06:00Z`, automatycznie opublikowany na: `https://x.com/ErykO8529/status/1953351907545891240`",
          "values": {
            "strings": [
              "draft",
              "scheduled"
            ],
            "numbers": [
              1,
              2,
              3,
              6401696,
              2025,
              8,
              7,
              7,
              6,
              0
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "twitter",
          "line": 36,
          "snippet": "---\n\n### Zadanie 2.1: Szkielet usługi Twitter Adapter (kontener, healthcheck) ✅\n- **Wartość**: Usługa uruchamia się w kontenerze, odpowiada na healthcheck (`/health`).\n- **Test**: `curl http://localhost:8083/health` zwraca `{ \"status\": \"ok\" }`.",
          "values": {
            "strings": [
              "status",
              "ok"
            ],
            "numbers": [
              2,
              1,
              8083
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "twitter",
          "line": 48,
          "snippet": "### Zadanie 2.3: Integracja z Typefully API – publikacja pojedynczego tweeta ✅\n- **Wartość**: Usługa publikuje pojedynczego tweeta przez Typefully.\n- **Test**: Po wysłaniu żądania POST, tweet pojawia się na koncie Twitter.\n- **Implementacja**: ✅ TypefullyClient z headers `X-API-KEY` + endpoint `/v1/drafts/`\n- **Szczegóły**: Drafty bez schedule-date wymagają ręcznej publikacji w UI",
          "values": {
            "strings": [],
            "numbers": [
              2,
              3,
              1
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "twitter",
          "line": 54,
          "snippet": "### Zadanie 2.4: Obsługa wątków (thread) ✅\n- **Wartość**: Usługa publikuje wątek, jeśli treść przekracza limit znaku.\n- **Test**: Po wysłaniu długiego tekstu, na Twitterze pojawia się wątek.\n- **Implementacja**: ✅ Automatyczny podział tekstu + `threadify: true` + separator `\\n\\n\\n\\n`\n",
          "values": {
            "strings": [],
            "numbers": [
              2,
              4
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "twitter",
          "line": 70,
          "snippet": "  - ✅ **URL Validation**: Sprawdzanie poprawności URL (HTTP/HTTPS only)\n  - ✅ **Format Support**: JPG, PNG, WEBP, GIF, MP4, MOV (zgodnie z Typefully)\n  - ✅ **Media Limits**: Max 4 media items per tweet (Twitter limit)\n  - ✅ **Thread Support**: Media w wątkach\n  - ✅ **Scheduling Support**: Media w zaplanowanych tweetach",
          "values": {
            "strings": [],
            "numbers": [
              4,
              4
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "twitter",
          "line": 102,
          "snippet": "\n### ✅ **Osiągnięcia Fazy 2:**\n1. **Production-Ready Twitter Adapter** - Pełna integracja z Typefully API\n2. **Auto-Publication Discovery** - Kluczowe odkrycie mechanizmu `schedule-date`\n3. **Comprehensive Error Handling** - Zaawansowany system błędów z retry",
          "values": {
            "strings": [],
            "numbers": [
              2,
              1,
              2,
              3
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "twitter",
          "line": 113,
          "snippet": "### 🚀 **Gotowe do Produkcji:**\n- **API Endpoints**: `/health`, `/config`, `/publish`, `/status/{draft_id}`, `/docs`\n- **Docker Stack**: Twitter Adapter (8083:8082) + Nginx (8081:80)\n- **Real Twitter Integration**: Potwierdzone publikacje na https://x.com/\n- **Test Suites**: Comprehensive testing dla wszystkich funkcjonalności",
          "values": {
            "strings": [],
            "numbers": [
              8083,
              8082,
              8081,
              80
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "twitter",
          "line": 114,
          "snippet": "- **API Endpoints**: `/health`, `/config`, `/publish`, `/status/{draft_id}`, `/docs`\n- **Docker Stack**: Twitter Adapter (8083:8082) + Nginx (8081:80)\n- **Real Twitter Integration**: Potwierdzone publikacje na https://x.com/\n- **Test Suites**: Comprehensive testing dla wszystkich funkcjonalności\n- **Documentation**: Pełna dokumentacja techniczna i API",
          "values": {
            "strings": [],
            "numbers": [
              8083,
              8082,
              8081,
              80
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "twitter",
          "line": 119,
          "snippet": "\n### 🔄 **Następne Kroki:**\n- **Faza 3**: Beehiiv Adapter\n- **Faza 4**: Substack Connector (kontynuacja)\n- **Faza 5**: Main Publisher API (orchestrator)",
          "values": {
            "strings": [],
            "numbers": [
              3,
              4,
              5
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "twitter",
          "line": 120,
          "snippet": "### 🔄 **Następne Kroki:**\n- **Faza 3**: Beehiiv Adapter\n- **Faza 4**: Substack Connector (kontynuacja)\n- **Faza 5**: Main Publisher API (orchestrator)\n- **Faza 6**: Database & Analytics",
          "values": {
            "strings": [],
            "numbers": [
              3,
              4,
              5,
              6
            ]
          }
        }
      ]
    },
    {
      "file": "/Users/hretheum/dev/bezrobocie/vector-wave/publisher/docs/ghost-adapter-status.md",
      "exists": true,
      "hits": [
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 1,
          "snippet": "# GHOST ADAPTER - STATUS DOKUMENTACJA\n\n## 📋 **PRZEGLĄD PROJEKTU**",
          "values": {
            "strings": [],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 5,
          "snippet": "## 📋 **PRZEGLĄD PROJEKTU**\n\nGhost Adapter to mikroserwis do publikacji treści w Ghost CMS, część systemu Multi-Channel Publisher. Serwis umożliwia automatyczną publikację treści poprzez Ghost Admin API.\n\n### **Architektura**",
          "values": {
            "strings": [],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 11,
          "snippet": "- **Konteneryzacja**: Docker + docker-compose\n- **Port**: 8086 (external) → 8082 (internal)\n- **API Version**: v6.0 (Ghost Admin API)\n- **Authentication**: JWT tokens (HS256) z Admin API key\n",
          "values": {
            "strings": [],
            "numbers": [
              8086,
              8082,
              6,
              0,
              256
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 22,
          "snippet": "#### **1. Struktura plików:**\n```\nsrc/adapters/ghost/\n├── main.py              # FastAPI application\n├── models.py            # Pydantic models",
          "values": {
            "strings": [],
            "numbers": [
              1
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 25,
          "snippet": "├── main.py              # FastAPI application\n├── models.py            # Pydantic models\n├── ghost_client.py      # Ghost API client (skeleton)\n├── requirements.txt     # Dependencies\n└── Dockerfile          # Container configuration",
          "values": {
            "strings": [],
            "numbers": []
          }
        },
        {
          "type": "required_elements",
          "platform": "ghost",
          "line": 26,
          "snippet": "├── models.py            # Pydantic models\n├── ghost_client.py      # Ghost API client (skeleton)\n├── requirements.txt     # Dependencies\n└── Dockerfile          # Container configuration\n```",
          "values": {
            "strings": [],
            "numbers": []
          }
        },
        {
          "type": "required_elements",
          "platform": "ghost",
          "line": 46,
          "snippet": "#### **3. Pydantic Models (`models.py`):**\n- **PublishRequest**: Walidacja danych publikacji\n  - `title` (required, max 300 chars)\n  - `content` (required, HTML/Lexical)\n  - `content_format` (html/lexical)",
          "values": {
            "strings": [],
            "numbers": [
              3,
              300
            ]
          }
        },
        {
          "type": "required_elements",
          "platform": "ghost",
          "line": 47,
          "snippet": "- **PublishRequest**: Walidacja danych publikacji\n  - `title` (required, max 300 chars)\n  - `content` (required, HTML/Lexical)\n  - `content_format` (html/lexical)\n  - `status` (draft/published/scheduled)",
          "values": {
            "strings": [],
            "numbers": [
              300
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 60,
          "snippet": "- **ConfigResponse**: Configuration status format\n\n#### **4. Ghost Client Skeleton (`ghost_client.py`):**\n- Podstawowa struktura `GhostClient` class\n- `GhostAPIError` exception handling",
          "values": {
            "strings": [],
            "numbers": [
              4
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 61,
          "snippet": "\n#### **4. Ghost Client Skeleton (`ghost_client.py`):**\n- Podstawowa struktura `GhostClient` class\n- `GhostAPIError` exception handling\n- `test_connection()` placeholder method",
          "values": {
            "strings": [],
            "numbers": [
              4
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 62,
          "snippet": "#### **4. Ghost Client Skeleton (`ghost_client.py`):**\n- Podstawowa struktura `GhostClient` class\n- `GhostAPIError` exception handling\n- `test_connection()` placeholder method\n- Przygotowane pod JWT authentication (Task 4.2)",
          "values": {
            "strings": [],
            "numbers": [
              4,
              4,
              2
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 74,
          "snippet": "\n- **docker-compose.yml**:\n  - Service name: `ghost-adapter`\n  - Port mapping: `8086:8082`\n  - Environment variables from `.env`",
          "values": {
            "strings": [],
            "numbers": [
              8086,
              8082
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 82,
          "snippet": "#### **6. Makefile Integration:**\n```bash\nmake build-ghost        # Build container\nmake up-ghost          # Start service\nmake down-ghost        # Stop service",
          "values": {
            "strings": [],
            "numbers": [
              6
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 83,
          "snippet": "```bash\nmake build-ghost        # Build container\nmake up-ghost          # Start service\nmake down-ghost        # Stop service\nmake logs-ghost        # View logs",
          "values": {
            "strings": [],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 84,
          "snippet": "make build-ghost        # Build container\nmake up-ghost          # Start service\nmake down-ghost        # Stop service\nmake logs-ghost        # View logs\nmake test-ghost-basic  # Basic endpoint tests",
          "values": {
            "strings": [],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 85,
          "snippet": "make up-ghost          # Start service\nmake down-ghost        # Stop service\nmake logs-ghost        # View logs\nmake test-ghost-basic  # Basic endpoint tests\nmake test-ghost-skeleton # Full skeleton tests",
          "values": {
            "strings": [],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 86,
          "snippet": "make down-ghost        # Stop service\nmake logs-ghost        # View logs\nmake test-ghost-basic  # Basic endpoint tests\nmake test-ghost-skeleton # Full skeleton tests\n```",
          "values": {
            "strings": [],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 87,
          "snippet": "make logs-ghost        # View logs\nmake test-ghost-basic  # Basic endpoint tests\nmake test-ghost-skeleton # Full skeleton tests\n```\n",
          "values": {
            "strings": [],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 90,
          "snippet": "```\n\n#### **7. Komprehensywny Test Suite (`test-ghost-skeleton.sh`):**\n- **20 testów** covering:\n  - Basic endpoint functionality",
          "values": {
            "strings": [],
            "numbers": [
              7,
              20
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 110,
          "snippet": "4. **Docker Container**: Healthy i properly configured\n5. **Error Handling**: 404, 501 responses dla unimplemented endpoints\n6. **Environment Variables**: Ghost API URL i KEY detection\n7. **Response Formats**: Proper JSON responses z Pydantic validation\n8. **Documentation**: Swagger docs available at `/docs`",
          "values": {
            "strings": [],
            "numbers": [
              4,
              5,
              404,
              501,
              6,
              7,
              8
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 117,
          "snippet": "```bash\n# Environment Variables (z .env)\nGHOST_API_URL=https://vectorwave.ghost.io\nGHOST_API_KEY=your_admin_api_key_here\n```",
          "values": {
            "strings": [],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 118,
          "snippet": "# Environment Variables (z .env)\nGHOST_API_URL=https://vectorwave.ghost.io\nGHOST_API_KEY=your_admin_api_key_here\n```\n",
          "values": {
            "strings": [],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 137,
          "snippet": "## 🚀 **NASTĘPNE KROKI**\n\n### **Task 4.2: JWT Authentication i Ghost API Client** - ✅ **COMPLETED**\n- **Status**: ✅ COMPLETED (2025-08-07)\n- **Implementacja**:",
          "values": {
            "strings": [],
            "numbers": [
              4,
              2,
              2025,
              8,
              7
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 142,
          "snippet": "  - ✅ JWT token generation (HS256 algorithm) z 5-min TTL\n  - ✅ Admin API key parsing (id:secret format) z hex validation\n  - ✅ Real Ghost API connection testing (multi-endpoint validation)\n  - ✅ Site info retrieval z prawdziwymi danymi\n  - ✅ Posts endpoint access verification z filters i pagination",
          "values": {
            "strings": [],
            "numbers": [
              256,
              5
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 150,
          "snippet": "\n**New API Endpoints:**\n- `GET /site` - Ghost site info z real data\n- `GET /posts` - Posts listing z filters (status, limit, page)\n- `GET /users/me` - Current user info z role verification",
          "values": {
            "strings": [],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 156,
          "snippet": "\n**Test Results**: 24/24 tests passed\n**Integration**: Connected to \"vector wave\" (Ghost 6.0), user \"eryk orłowski\"\n\n### **Task 4.3: Endpoint POST /publish** - ✅ **COMPLETED**",
          "values": {
            "strings": [
              "vector wave",
              "eryk orłowski"
            ],
            "numbers": [
              24,
              24,
              6,
              0,
              4,
              3
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 161,
          "snippet": "- **Status**: ✅ COMPLETED (2025-08-07)\n- **Implementacja**:\n  - ✅ Real Ghost API post creation via Admin API\n  - ✅ HTML content support z full post metadata\n  - ✅ Lexical content framework (JSON validation implemented)",
          "values": {
            "strings": [],
            "numbers": [
              2025,
              8,
              7
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 175,
          "snippet": "- Full post metadata support (tags, excerpt, featured image, visibility, SEO meta)\n- Comprehensive input validation\n- Real Ghost API integration z proper error mapping\n- Post verification via Ghost posts list\n",
          "values": {
            "strings": [],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 176,
          "snippet": "- Comprehensive input validation\n- Real Ghost API integration z proper error mapping\n- Post verification via Ghost posts list\n\n**Test Results**: 14/21 tests passed (HTML functionality 100% working)",
          "values": {
            "strings": [],
            "numbers": [
              14,
              21,
              100
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 179,
          "snippet": "\n**Test Results**: 14/21 tests passed (HTML functionality 100% working)\n**Known Issue**: Lexical format validation requires Ghost API v6+ compatibility tuning\n\n### **Task 4.4: Harmonogram publikacji i status management** - ✅ **COMPLETED**",
          "values": {
            "strings": [],
            "numbers": [
              14,
              21,
              100,
              6,
              4,
              4
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 199,
          "snippet": "- Scheduled posts listing: `/posts/scheduled?limit=N`\n- Batch updates: `POST /posts/batch` (up to 50 posts)\n- Real Ghost API integration z proper concurrency control\n\n**Test Results**: 21/21 tests passed (100% success rate)",
          "values": {
            "strings": [],
            "numbers": [
              50,
              21,
              21,
              100
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 217,
          "snippet": "```json\n{\n  \"service\": \"ghost-adapter\",\n  \"version\": \"1.0.0\", \n  \"description\": \"Mikroserwis do publikacji treści w Ghost CMS\",",
          "values": {
            "strings": [
              "service",
              "ghost-adapter",
              "version",
              "1.0.0",
              "description",
              "Mikroserwis do publikacji treści w Ghost CMS"
            ],
            "numbers": [
              1,
              0,
              0
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 219,
          "snippet": "  \"service\": \"ghost-adapter\",\n  \"version\": \"1.0.0\", \n  \"description\": \"Mikroserwis do publikacji treści w Ghost CMS\",\n  \"status\": \"ready|misconfigured\",\n  \"ghost_configured\": true|false,",
          "values": {
            "strings": [
              "service",
              "ghost-adapter",
              "version",
              "1.0.0",
              "description",
              "Mikroserwis do publikacji treści w Ghost CMS",
              "status",
              "ready|misconfigured",
              "ghost_configured"
            ],
            "numbers": [
              1,
              0,
              0
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 221,
          "snippet": "  \"description\": \"Mikroserwis do publikacji treści w Ghost CMS\",\n  \"status\": \"ready|misconfigured\",\n  \"ghost_configured\": true|false,\n  \"endpoints\": {\n    \"health\": \"/health\",",
          "values": {
            "strings": [
              "description",
              "Mikroserwis do publikacji treści w Ghost CMS",
              "status",
              "ready|misconfigured",
              "ghost_configured",
              "endpoints",
              "health",
              "/health"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 229,
          "snippet": "  },\n  \"environment\": {\n    \"ghost_api_url\": \"https://vectorwave.ghost.io\",\n    \"ghost_api_key_configured\": true\n  }",
          "values": {
            "strings": [
              "environment",
              "ghost_api_url",
              "https://vectorwave.ghost.io",
              "ghost_api_key_configured"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 230,
          "snippet": "  \"environment\": {\n    \"ghost_api_url\": \"https://vectorwave.ghost.io\",\n    \"ghost_api_key_configured\": true\n  }\n}",
          "values": {
            "strings": [
              "environment",
              "ghost_api_url",
              "https://vectorwave.ghost.io",
              "ghost_api_key_configured"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 239,
          "snippet": "{\n  \"status\": \"healthy|degraded|unhealthy\",\n  \"ghost_configured\": true|false,\n  \"message\": \"Status description\"\n}",
          "values": {
            "strings": [
              "status",
              "healthy|degraded|unhealthy",
              "ghost_configured",
              "message",
              "Status description"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 247,
          "snippet": "```json\n{\n  \"ghost_api_configured\": true|false,\n  \"ghost_url\": \"https://vectorwave.ghost.io\",\n  \"status\": \"ready|misconfigured|error|connection_failed\", ",
          "values": {
            "strings": [
              "ghost_api_configured",
              "ghost_url",
              "https://vectorwave.ghost.io",
              "status",
              "ready|misconfigured|error|connection_failed"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 248,
          "snippet": "{\n  \"ghost_api_configured\": true|false,\n  \"ghost_url\": \"https://vectorwave.ghost.io\",\n  \"status\": \"ready|misconfigured|error|connection_failed\", \n  \"message\": \"Configuration details\"",
          "values": {
            "strings": [
              "ghost_api_configured",
              "ghost_url",
              "https://vectorwave.ghost.io",
              "status",
              "ready|misconfigured|error|connection_failed",
              "message",
              "Configuration details"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 273,
          "snippet": "```bash\n# W katalogu publisher/\nmake build-ghost\nmake up-ghost\n",
          "values": {
            "strings": [],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 274,
          "snippet": "# W katalogu publisher/\nmake build-ghost\nmake up-ghost\n\n# Weryfikacja:",
          "values": {
            "strings": [],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 277,
          "snippet": "\n# Weryfikacja:\nmake test-ghost-skeleton\n```\n",
          "values": {
            "strings": [],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 283,
          "snippet": "```bash\n# Logs\nmake logs-ghost\n\n# Status",
          "values": {
            "strings": [],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 295,
          "snippet": "```bash\n# Restart\nmake down-ghost && make up-ghost\n\n# Rebuild",
          "values": {
            "strings": [],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 298,
          "snippet": "\n# Rebuild\nmake build-ghost\n\n# Check container",
          "values": {
            "strings": [],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 301,
          "snippet": "\n# Check container\ndocker inspect publisher-ghost-adapter\n```\n",
          "values": {
            "strings": [],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 347,
          "snippet": "## ✅ **PODSUMOWANIE TASK 4.1**\n\n**Ghost Adapter Skeleton jest w pełni funkcjonalny i gotowy do dalszego rozwoju.**\n\n### **Kluczowe osiągnięcia:**",
          "values": {
            "strings": [],
            "numbers": [
              4,
              1
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 360,
          "snippet": "\n### **Gotowość do Task 4.2:**\n- Ghost API client structure przygotowana\n- JWT authentication framework w miejscu\n- Test infrastructure gotowa do rozszerzenia",
          "values": {
            "strings": [],
            "numbers": [
              4,
              2
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 365,
          "snippet": "- Docker environment skonfigurowany\n\n**🎉 Task 4.1 ukończony pomyślnie - Ghost Adapter Skeleton fully operational!**",
          "values": {
            "strings": [],
            "numbers": [
              4,
              1
            ]
          }
        }
      ]
    },
    {
      "file": "/Users/hretheum/dev/bezrobocie/vector-wave/publisher/test_services/mock_presenton.py",
      "exists": true,
      "hits": [
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 4,
          "snippet": "\"\"\"\nMock Presenton Service for integration testing\nSimulates LinkedIn carousel presentation generation\n\"\"\"\n",
          "values": {
            "strings": [
              "\nMock Presenton Service for integration testing\nSimulates LinkedIn carousel presentation generation\n"
            ],
            "numbers": []
          }
        },
        {
          "type": "required_elements",
          "platform": "universal",
          "line": 133,
          "snippet": "        raise HTTPException(\n            status_code=400,\n            detail=\"Slides count must be between 1 and 20\"\n        )\n    ",
          "values": {
            "strings": [
              "Slides count must be between 1 and 20"
            ],
            "numbers": [
              400,
              1,
              20
            ]
          }
        },
        {
          "type": "required_elements",
          "platform": "universal",
          "line": 139,
          "snippet": "        raise HTTPException(\n            status_code=400,\n            detail=\"Prompt must be at least 10 characters long\"\n        )\n    ",
          "values": {
            "strings": [
              "Prompt must be at least 10 characters long"
            ],
            "numbers": [
              400,
              10
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 268,
          "snippet": "    return {\n        \"service\": \"Mock Presenton Service\",\n        \"description\": \"Mock LinkedIn presentation generator for integration testing\",\n        \"version\": \"1.0.0-mock\", \n        \"endpoints\": [",
          "values": {
            "strings": [
              "service",
              "Mock Presenton Service",
              "description",
              "Mock LinkedIn presentation generator for integration testing",
              "version",
              "1.0.0-mock",
              "endpoints"
            ],
            "numbers": [
              1,
              0,
              0
            ]
          }
        }
      ]
    },
    {
      "file": "/Users/hretheum/dev/bezrobocie/vector-wave/publisher/test_services/mock_ai_writing_flow.py",
      "exists": true,
      "hits": [
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 38,
          "snippet": "    request_id: Optional[str] = None\n\nclass LinkedInPromptRequest(BaseModel):\n    topic: Topic\n    slides_count: int = 5",
          "values": {
            "strings": [],
            "numbers": [
              5
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 45,
          "snippet": "# Mock content templates\nMOCK_CONTENT_TEMPLATES = {\n    \"linkedin_prompt\": \"\"\"Create a comprehensive LinkedIn carousel about {title}:\n\nKey points to cover:",
          "values": {
            "strings": [
              "linkedin_prompt"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 59,
          "snippet": "Structure as 8 detailed slides with engaging headers and actionable content.\"\"\",\n\n    \"linkedin_direct\": \"\"\"🚀 {title}\n\n{description}",
          "values": {
            "strings": [
              ",\n\n    ",
              ": "
            ],
            "numbers": [
              8
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "twitter",
          "line": 73,
          "snippet": "#{keywords[0]} #{keywords[1] if len(keywords) > 1 else \"Innovation\"} #Leadership\"\"\",\n\n    \"twitter\": \"\"\"🧵 Thread about {title}\n\n1/ {description}",
          "values": {
            "strings": [
              "Innovation",
              ",\n\n    ",
              ": "
            ],
            "numbers": [
              0,
              1,
              1,
              1
            ]
          }
        },
        {
          "type": "required_elements",
          "platform": "universal",
          "line": 85,
          "snippet": "3/ What this means for professionals:\n• Skill adaptation is crucial\n• Continuous learning required  \n• Strategic thinking more important\n• Innovation mindset essential",
          "values": {
            "strings": [],
            "numbers": [
              3
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 96,
          "snippet": "#{keywords[0]} #{keywords[1] if len(keywords) > 1 else \"Future\"}\"\"\",\n\n    \"ghost\": \"\"\"# {title}\n\n{description}",
          "values": {
            "strings": [
              "Future",
              ",\n\n    ",
              ": "
            ],
            "numbers": [
              0,
              1,
              1
            ]
          }
        },
        {
          "type": "required_elements",
          "platform": "universal",
          "line": 110,
          "snippet": "\n### 2. Integration Challenges\nWhile technology offers unprecedented capabilities, integration remains a critical challenge. Success requires careful planning and execution.\n\n### 3. Skills Evolution",
          "values": {
            "strings": [],
            "numbers": [
              2,
              3
            ]
          }
        },
        {
          "type": "required_elements",
          "platform": "universal",
          "line": 113,
          "snippet": "\n### 3. Skills Evolution\nThe skills required for success are evolving. Traditional approaches must adapt to new realities.\n\n## Practical Applications",
          "values": {
            "strings": [],
            "numbers": [
              3
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "substack",
          "line": 134,
          "snippet": "*What are your thoughts on these trends? How are you preparing for the changes ahead?*\"\"\",\n\n    \"substack\": \"\"\"# {title}\n\n*A deep dive into the trends shaping {target_audience}*",
          "values": {
            "strings": [
              ",\n\n    ",
              ": "
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 194,
          "snippet": "    time.sleep(0.1 + (len(title) * 0.01))  # Simulate processing time\n    \n    if platform == \"linkedin\":\n        # Determine if this should be a prompt for Presenton or direct content\n        direct_content = config.get(\"direct_content\")",
          "values": {
            "strings": [
              "linkedin",
              "direct_content"
            ],
            "numbers": [
              0,
              1,
              0,
              1
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 199,
          "snippet": "        \n        if direct_content is False:  # Explicitly requested Presenton mode\n            content = MOCK_CONTENT_TEMPLATES[\"linkedin_prompt\"].format(\n                title=title,\n                description=description,",
          "values": {
            "strings": [
              "linkedin_prompt"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 213,
          "snippet": "            }\n        else:  # Direct content mode\n            content = MOCK_CONTENT_TEMPLATES[\"linkedin_direct\"].format(\n                title=title,\n                description=description,",
          "values": {
            "strings": [
              "linkedin_direct"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "twitter",
          "line": 226,
          "snippet": "            }\n    \n    elif platform == \"twitter\":\n        content = MOCK_CONTENT_TEMPLATES[\"twitter\"].format(\n            title=title,",
          "values": {
            "strings": [
              "twitter",
              "twitter"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "twitter",
          "line": 227,
          "snippet": "    \n    elif platform == \"twitter\":\n        content = MOCK_CONTENT_TEMPLATES[\"twitter\"].format(\n            title=title,\n            description=description,",
          "values": {
            "strings": [
              "twitter",
              "twitter"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 240,
          "snippet": "        }\n    \n    elif platform == \"ghost\":\n        content = MOCK_CONTENT_TEMPLATES[\"ghost\"].format(\n            title=title,",
          "values": {
            "strings": [
              "ghost",
              "ghost"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 241,
          "snippet": "    \n    elif platform == \"ghost\":\n        content = MOCK_CONTENT_TEMPLATES[\"ghost\"].format(\n            title=title,\n            description=description,",
          "values": {
            "strings": [
              "ghost",
              "ghost"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "substack",
          "line": 255,
          "snippet": "        }\n    \n    elif platform == \"substack\":\n        content = MOCK_CONTENT_TEMPLATES[\"substack\"].format(\n            title=title,",
          "values": {
            "strings": [
              "substack",
              "substack"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "substack",
          "line": 256,
          "snippet": "    \n    elif platform == \"substack\":\n        content = MOCK_CONTENT_TEMPLATES[\"substack\"].format(\n            title=title,\n            description=description,",
          "values": {
            "strings": [
              "substack",
              "substack"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 330,
          "snippet": "    }\n\n@app.post(\"/generate/linkedin-prompt\")\nasync def generate_linkedin_prompt(request: LinkedInPromptRequest):\n    \"\"\"Generate LinkedIn presentation prompt\"\"\"",
          "values": {
            "strings": [
              "/generate/linkedin-prompt",
              "Generate LinkedIn presentation prompt"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 331,
          "snippet": "\n@app.post(\"/generate/linkedin-prompt\")\nasync def generate_linkedin_prompt(request: LinkedInPromptRequest):\n    \"\"\"Generate LinkedIn presentation prompt\"\"\"\n    ",
          "values": {
            "strings": [
              "/generate/linkedin-prompt",
              "Generate LinkedIn presentation prompt"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 332,
          "snippet": "@app.post(\"/generate/linkedin-prompt\")\nasync def generate_linkedin_prompt(request: LinkedInPromptRequest):\n    \"\"\"Generate LinkedIn presentation prompt\"\"\"\n    \n    start_time = time.time()",
          "values": {
            "strings": [
              "/generate/linkedin-prompt",
              "Generate LinkedIn presentation prompt"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 336,
          "snippet": "    start_time = time.time()\n    \n    prompt = MOCK_CONTENT_TEMPLATES[\"linkedin_prompt\"].format(\n        title=request.topic.title,\n        description=request.topic.description or \"Professional insights and analysis\",",
          "values": {
            "strings": [
              "linkedin_prompt",
              "Professional insights and analysis"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 364,
          "snippet": "        \"average_generation_time\": 1.8,\n        \"platform_usage\": {\n            \"linkedin\": 45,\n            \"twitter\": 38,\n            \"ghost\": 28,",
          "values": {
            "strings": [
              "average_generation_time",
              "platform_usage",
              "linkedin",
              "twitter",
              "ghost"
            ],
            "numbers": [
              1,
              8,
              45,
              38,
              28
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 365,
          "snippet": "        \"platform_usage\": {\n            \"linkedin\": 45,\n            \"twitter\": 38,\n            \"ghost\": 28,\n            \"substack\": 31",
          "values": {
            "strings": [
              "platform_usage",
              "linkedin",
              "twitter",
              "ghost",
              "substack"
            ],
            "numbers": [
              45,
              38,
              28,
              31
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 366,
          "snippet": "            \"linkedin\": 45,\n            \"twitter\": 38,\n            \"ghost\": 28,\n            \"substack\": 31\n        },",
          "values": {
            "strings": [
              "linkedin",
              "twitter",
              "ghost",
              "substack"
            ],
            "numbers": [
              45,
              38,
              28,
              31
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "twitter",
          "line": 367,
          "snippet": "            \"twitter\": 38,\n            \"ghost\": 28,\n            \"substack\": 31\n        },\n        \"mock_service\": True",
          "values": {
            "strings": [
              "twitter",
              "ghost",
              "substack",
              "mock_service"
            ],
            "numbers": [
              38,
              28,
              31
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 382,
          "snippet": "            \"/health\",\n            \"/generate/multi-platform\",\n            \"/generate/linkedin-prompt\", \n            \"/metrics\"\n        ],",
          "values": {
            "strings": [
              "/health",
              "/generate/multi-platform",
              "/generate/linkedin-prompt",
              "/metrics"
            ],
            "numbers": []
          }
        }
      ]
    },
    {
      "file": "/Users/hretheum/dev/bezrobocie/vector-wave/publisher/scripts/test-error-handling-beehiiv.py",
      "exists": true,
      "hits": [
        {
          "type": "platform_specific",
          "platform": "beehiiv",
          "line": 3,
          "snippet": "#!/usr/bin/env python3\n\"\"\"\nTest error handling for Beehiiv Adapter\nSprawdzenie czy błędy są wyraźnie zgłaszane zamiast ukrywane za mock responses\n\"\"\"",
          "values": {
            "strings": [
              "\nTest error handling for Beehiiv Adapter\nSprawdzenie czy błędy są wyraźnie zgłaszane zamiast ukrywane za mock responses\n"
            ],
            "numbers": [
              3
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "beehiiv",
          "line": 15,
          "snippet": "\ndef test_missing_api_key():\n    \"\"\"Test gdy brak BEEHIIV_API_KEY\"\"\"\n    print(\"\\n🧪 Test: Missing API key\")\n    ",
          "values": {
            "strings": [
              "Test gdy brak BEEHIIV_API_KEY",
              "\n    print("
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "beehiiv",
          "line": 96,
          "snippet": "\ndef main():\n    print(\"🔥 TESTING BEEHIIV ERROR HANDLING (NO MOCK BULLSHIT)\")\n    print(\"=\" * 60)\n    ",
          "values": {
            "strings": [
              "🔥 TESTING BEEHIIV ERROR HANDLING (NO MOCK BULLSHIT)"
            ],
            "numbers": [
              60
            ]
          }
        }
      ]
    },
    {
      "file": "/Users/hretheum/dev/bezrobocie/vector-wave/publisher/scripts/validate-env.js",
      "exists": true,
      "hits": [
        {
          "type": "required_elements",
          "platform": "universal",
          "line": 8,
          "snippet": " */\n\nrequire('dotenv').config({ path: require('path').resolve(__dirname, '../.env') });\n\nclass EnvValidator {",
          "values": {
            "strings": [
              "dotenv",
              "path",
              "../.env"
            ],
            "numbers": []
          }
        },
        {
          "type": "required_elements",
          "platform": "universal",
          "line": 17,
          "snippet": "  }\n\n  checkVariable(name, required = false, description = '') {\n    const value = process.env[name];\n    ",
          "values": {
            "strings": [],
            "numbers": []
          }
        },
        {
          "type": "required_elements",
          "platform": "universal",
          "line": 21,
          "snippet": "    \n    if (!value) {\n      if (required) {\n        this.errors.push(`❌ ${name} - WYMAGANA: ${description}`);\n      } else {",
          "values": {
            "strings": [],
            "numbers": []
          }
        },
        {
          "type": "required_elements",
          "platform": "universal",
          "line": 29,
          "snippet": "    } else {\n      // Ukryj wrażliwe dane\n      const displayValue = name.includes('KEY') || name.includes('SECRET') \n        ? `${value.substring(0, 8)}...` \n        : value;",
          "values": {
            "strings": [
              "KEY",
              "SECRET"
            ],
            "numbers": [
              0,
              8
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "twitter",
          "line": 37,
          "snippet": "  }\n\n  validateTwitterConfig() {\n    console.log('\\n🐦 Twitter Adapter (Typefully API):');\n    this.checkVariable('TYPEFULLY_API_KEY', false, 'API key z Typefully.com');",
          "values": {
            "strings": [
              "\\n🐦 Twitter Adapter (Typefully API):",
              "TYPEFULLY_API_KEY",
              "API key z Typefully.com"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "twitter",
          "line": 38,
          "snippet": "\n  validateTwitterConfig() {\n    console.log('\\n🐦 Twitter Adapter (Typefully API):');\n    this.checkVariable('TYPEFULLY_API_KEY', false, 'API key z Typefully.com');\n    this.checkVariable('TYPEFULLY_BASE_URL', false, 'URL API Typefully (default: https://api.typefully.com/v1)');",
          "values": {
            "strings": [
              "\\n🐦 Twitter Adapter (Typefully API):",
              "TYPEFULLY_API_KEY",
              "API key z Typefully.com",
              "TYPEFULLY_BASE_URL",
              "URL API Typefully (default: https://api.typefully.com/v1)"
            ],
            "numbers": [
              1
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "substack",
          "line": 43,
          "snippet": "  }\n\n  validateSubstackConfig() {\n    console.log('\\n📰 Substack Adapter:');\n    this.checkVariable('OPENAI_API_KEY', true, 'OpenAI API key dla Stagehand AI');",
          "values": {
            "strings": [
              "\\n📰 Substack Adapter:",
              "OPENAI_API_KEY",
              "OpenAI API key dla Stagehand AI"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "substack",
          "line": 44,
          "snippet": "\n  validateSubstackConfig() {\n    console.log('\\n📰 Substack Adapter:');\n    this.checkVariable('OPENAI_API_KEY', true, 'OpenAI API key dla Stagehand AI');\n    this.checkVariable('SUBSTACK_SUBDOMAIN', true, 'Subdomena Substack (np. mojblog)');",
          "values": {
            "strings": [
              "\\n📰 Substack Adapter:",
              "OPENAI_API_KEY",
              "OpenAI API key dla Stagehand AI",
              "SUBSTACK_SUBDOMAIN",
              "Subdomena Substack (np. mojblog)"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "substack",
          "line": 46,
          "snippet": "    console.log('\\n📰 Substack Adapter:');\n    this.checkVariable('OPENAI_API_KEY', true, 'OpenAI API key dla Stagehand AI');\n    this.checkVariable('SUBSTACK_SUBDOMAIN', true, 'Subdomena Substack (np. mojblog)');\n    this.checkVariable('BROWSERBASE_API_KEY', false, 'Browserbase API key (cloud browser)');\n    this.checkVariable('BROWSERBASE_PROJECT_ID', false, 'Browserbase Project ID');",
          "values": {
            "strings": [
              "\\n📰 Substack Adapter:",
              "OPENAI_API_KEY",
              "OpenAI API key dla Stagehand AI",
              "SUBSTACK_SUBDOMAIN",
              "Subdomena Substack (np. mojblog)",
              "BROWSERBASE_API_KEY",
              "Browserbase API key (cloud browser)",
              "BROWSERBASE_PROJECT_ID",
              "Browserbase Project ID"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "beehiiv",
          "line": 51,
          "snippet": "  }\n\n  validateBeehiivConfig() {\n    console.log('\\n📧 Beehiiv Adapter:');\n    this.checkVariable('BEEHIIV_API_KEY', false, 'Beehiiv API key dla newsletterów');",
          "values": {
            "strings": [
              "\\n📧 Beehiiv Adapter:",
              "BEEHIIV_API_KEY",
              "Beehiiv API key dla newsletterów"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "beehiiv",
          "line": 52,
          "snippet": "\n  validateBeehiivConfig() {\n    console.log('\\n📧 Beehiiv Adapter:');\n    this.checkVariable('BEEHIIV_API_KEY', false, 'Beehiiv API key dla newsletterów');\n    this.checkVariable('BEEHIIV_PUBLICATION_ID', false, 'Beehiiv Publication ID');",
          "values": {
            "strings": [
              "\\n📧 Beehiiv Adapter:",
              "BEEHIIV_API_KEY",
              "Beehiiv API key dla newsletterów",
              "BEEHIIV_PUBLICATION_ID",
              "Beehiiv Publication ID"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "beehiiv",
          "line": 53,
          "snippet": "  validateBeehiivConfig() {\n    console.log('\\n📧 Beehiiv Adapter:');\n    this.checkVariable('BEEHIIV_API_KEY', false, 'Beehiiv API key dla newsletterów');\n    this.checkVariable('BEEHIIV_PUBLICATION_ID', false, 'Beehiiv Publication ID');\n    this.checkVariable('BEEHIIV_BASE_URL', false, 'Beehiiv API URL (default: https://api.beehiiv.com/v2)');",
          "values": {
            "strings": [
              "\\n📧 Beehiiv Adapter:",
              "BEEHIIV_API_KEY",
              "Beehiiv API key dla newsletterów",
              "BEEHIIV_PUBLICATION_ID",
              "Beehiiv Publication ID",
              "BEEHIIV_BASE_URL",
              "Beehiiv API URL (default: https://api.beehiiv.com/v2)"
            ],
            "numbers": [
              2
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "beehiiv",
          "line": 54,
          "snippet": "    console.log('\\n📧 Beehiiv Adapter:');\n    this.checkVariable('BEEHIIV_API_KEY', false, 'Beehiiv API key dla newsletterów');\n    this.checkVariable('BEEHIIV_PUBLICATION_ID', false, 'Beehiiv Publication ID');\n    this.checkVariable('BEEHIIV_BASE_URL', false, 'Beehiiv API URL (default: https://api.beehiiv.com/v2)');\n    this.checkVariable('BEEHIIV_FALLBACK_ENABLED', false, 'Fallback mode enabled');",
          "values": {
            "strings": [
              "\\n📧 Beehiiv Adapter:",
              "BEEHIIV_API_KEY",
              "Beehiiv API key dla newsletterów",
              "BEEHIIV_PUBLICATION_ID",
              "Beehiiv Publication ID",
              "BEEHIIV_BASE_URL",
              "Beehiiv API URL (default: https://api.beehiiv.com/v2)",
              "BEEHIIV_FALLBACK_ENABLED",
              "Fallback mode enabled"
            ],
            "numbers": [
              2
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "beehiiv",
          "line": 55,
          "snippet": "    this.checkVariable('BEEHIIV_API_KEY', false, 'Beehiiv API key dla newsletterów');\n    this.checkVariable('BEEHIIV_PUBLICATION_ID', false, 'Beehiiv Publication ID');\n    this.checkVariable('BEEHIIV_BASE_URL', false, 'Beehiiv API URL (default: https://api.beehiiv.com/v2)');\n    this.checkVariable('BEEHIIV_FALLBACK_ENABLED', false, 'Fallback mode enabled');\n  }",
          "values": {
            "strings": [
              "BEEHIIV_API_KEY",
              "Beehiiv API key dla newsletterów",
              "BEEHIIV_PUBLICATION_ID",
              "Beehiiv Publication ID",
              "BEEHIIV_BASE_URL",
              "Beehiiv API URL (default: https://api.beehiiv.com/v2)",
              "BEEHIIV_FALLBACK_ENABLED",
              "Fallback mode enabled"
            ],
            "numbers": [
              2
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "beehiiv",
          "line": 56,
          "snippet": "    this.checkVariable('BEEHIIV_PUBLICATION_ID', false, 'Beehiiv Publication ID');\n    this.checkVariable('BEEHIIV_BASE_URL', false, 'Beehiiv API URL (default: https://api.beehiiv.com/v2)');\n    this.checkVariable('BEEHIIV_FALLBACK_ENABLED', false, 'Fallback mode enabled');\n  }\n",
          "values": {
            "strings": [
              "BEEHIIV_PUBLICATION_ID",
              "Beehiiv Publication ID",
              "BEEHIIV_BASE_URL",
              "Beehiiv API URL (default: https://api.beehiiv.com/v2)",
              "BEEHIIV_FALLBACK_ENABLED",
              "Fallback mode enabled"
            ],
            "numbers": [
              2
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "substack",
          "line": 91,
          "snippet": "\n    // Validate subdomain format\n    const subdomain = process.env.SUBSTACK_SUBDOMAIN;\n    if (subdomain) {\n      if (/^[a-zA-Z0-9-]+$/.test(subdomain) && !subdomain.includes('.')) {",
          "values": {
            "strings": [],
            "numbers": [
              0,
              9
            ]
          }
        },
        {
          "type": "required_elements",
          "platform": "substack",
          "line": 93,
          "snippet": "    const subdomain = process.env.SUBSTACK_SUBDOMAIN;\n    if (subdomain) {\n      if (/^[a-zA-Z0-9-]+$/.test(subdomain) && !subdomain.includes('.')) {\n        this.info.push('✅ SUBSTACK_SUBDOMAIN format wygląda poprawnie');\n      } else {",
          "values": {
            "strings": [
              ")) {\n        this.info.push("
            ],
            "numbers": [
              0,
              9
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "substack",
          "line": 94,
          "snippet": "    if (subdomain) {\n      if (/^[a-zA-Z0-9-]+$/.test(subdomain) && !subdomain.includes('.')) {\n        this.info.push('✅ SUBSTACK_SUBDOMAIN format wygląda poprawnie');\n      } else {\n        this.errors.push('❌ SUBSTACK_SUBDOMAIN powinien zawierać tylko litery, cyfry i myślniki (bez .substack.com)');",
          "values": {
            "strings": [
              ")) {\n        this.info.push(",
              ");\n      } else {\n        this.errors.push("
            ],
            "numbers": [
              0,
              9
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "substack",
          "line": 96,
          "snippet": "        this.info.push('✅ SUBSTACK_SUBDOMAIN format wygląda poprawnie');\n      } else {\n        this.errors.push('❌ SUBSTACK_SUBDOMAIN powinien zawierać tylko litery, cyfry i myślniki (bez .substack.com)');\n      }\n    }",
          "values": {
            "strings": [
              "✅ SUBSTACK_SUBDOMAIN format wygląda poprawnie",
              "❌ SUBSTACK_SUBDOMAIN powinien zawierać tylko litery, cyfry i myślniki (bez .substack.com)"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "twitter",
          "line": 104,
          "snippet": "    console.log('\\n🌐 API Connectivity (opcjonalne):');\n    \n    // Test Twitter Adapter health (if running)\n    try {\n      const response = await fetch('http://localhost:8083/health');",
          "values": {
            "strings": [
              "\\n🌐 API Connectivity (opcjonalne):",
              "http://localhost:8083/health"
            ],
            "numbers": [
              8083
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "twitter",
          "line": 108,
          "snippet": "      const response = await fetch('http://localhost:8083/health');\n      if (response.ok) {\n        this.info.push('✅ Twitter Adapter działa na porcie 8083');\n      }\n    } catch (e) {",
          "values": {
            "strings": [
              "http://localhost:8083/health",
              "✅ Twitter Adapter działa na porcie 8083"
            ],
            "numbers": [
              8083,
              8083
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "twitter",
          "line": 111,
          "snippet": "      }\n    } catch (e) {\n      this.info.push('ℹ️  Twitter Adapter nie działa (spodziewane jeśli nie uruchomiony)');\n    }\n",
          "values": {
            "strings": [
              "ℹ️  Twitter Adapter nie działa (spodziewane jeśli nie uruchomiony)"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "beehiiv",
          "line": 114,
          "snippet": "    }\n\n    // Test Beehiiv Adapter health (if running)\n    try {\n      const response = await fetch('http://localhost:8084/health');",
          "values": {
            "strings": [
              "http://localhost:8084/health"
            ],
            "numbers": [
              8084
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "beehiiv",
          "line": 118,
          "snippet": "      const response = await fetch('http://localhost:8084/health');\n      if (response.ok) {\n        this.info.push('✅ Beehiiv Adapter działa na porcie 8084');\n      }\n    } catch (e) {",
          "values": {
            "strings": [
              "http://localhost:8084/health",
              "✅ Beehiiv Adapter działa na porcie 8084"
            ],
            "numbers": [
              8084,
              8084
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "beehiiv",
          "line": 121,
          "snippet": "      }\n    } catch (e) {\n      this.info.push('ℹ️  Beehiiv Adapter nie działa (spodziewane jeśli nie uruchomiony)');\n    }\n  }",
          "values": {
            "strings": [
              "ℹ️  Beehiiv Adapter nie działa (spodziewane jeśli nie uruchomiony)"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "twitter",
          "line": 153,
          "snippet": "    console.log('================================================');\n\n    this.validateTwitterConfig();\n    this.validateSubstackConfig();\n    this.validateBeehiivConfig();",
          "values": {
            "strings": [
              "================================================"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "twitter",
          "line": 154,
          "snippet": "\n    this.validateTwitterConfig();\n    this.validateSubstackConfig();\n    this.validateBeehiivConfig();\n    this.validateServerConfig();",
          "values": {
            "strings": [],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "twitter",
          "line": 155,
          "snippet": "    this.validateTwitterConfig();\n    this.validateSubstackConfig();\n    this.validateBeehiivConfig();\n    this.validateServerConfig();\n    this.validateApiKeys();",
          "values": {
            "strings": [],
            "numbers": []
          }
        },
        {
          "type": "required_elements",
          "platform": "universal",
          "line": 176,
          "snippet": "// Check if we have fetch (Node 18+)\nif (typeof fetch === 'undefined') {\n  global.fetch = require('node-fetch');\n}\n",
          "values": {
            "strings": [
              "undefined",
              "node-fetch"
            ],
            "numbers": [
              18
            ]
          }
        }
      ]
    },
    {
      "file": "/Users/hretheum/dev/bezrobocie/vector-wave/publisher/scripts/create-real-image.py",
      "exists": true,
      "hits": []
    },
    {
      "file": "/Users/hretheum/dev/bezrobocie/vector-wave/publisher/scripts/session-manager.js",
      "exists": true,
      "hits": [
        {
          "type": "required_elements",
          "platform": "universal",
          "line": 3,
          "snippet": "#!/usr/bin/env node\n\nconst fs = require('fs').promises;\nconst path = require('path');\n",
          "values": {
            "strings": [
              "fs",
              "path"
            ],
            "numbers": []
          }
        },
        {
          "type": "required_elements",
          "platform": "universal",
          "line": 4,
          "snippet": "\nconst fs = require('fs').promises;\nconst path = require('path');\n\n// Simple session management tool",
          "values": {
            "strings": [
              "fs",
              "path"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "substack",
          "line": 16,
          "snippet": "    await showStatus();\n  } else {\n    console.log('\\nSubstack Session Manager');\n    console.log('========================');\n    console.log('\\nKomendy:');",
          "values": {
            "strings": [
              "\\nSubstack Session Manager",
              "========================",
              "\\nKomendy:"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "substack",
          "line": 32,
          "snippet": "    await fs.mkdir(sessionsDir, { recursive: true });\n    const files = await fs.readdir(sessionsDir);\n    const substackSessions = files.filter(file => file.endsWith('_substack.json'));\n    \n    if (substackSessions.length === 0) {",
          "values": {
            "strings": [
              "_substack.json"
            ],
            "numbers": [
              0
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "substack",
          "line": 34,
          "snippet": "    const substackSessions = files.filter(file => file.endsWith('_substack.json'));\n    \n    if (substackSessions.length === 0) {\n      console.log('\\n[Session Manager] 📭 Brak zapisanych sesji Substack');\n      console.log('\\n💡 Utwórz sesję: node substack-cli.js session create --account nazwa');",
          "values": {
            "strings": [
              "_substack.json",
              "\\n[Session Manager] 📭 Brak zapisanych sesji Substack",
              "\\n💡 Utwórz sesję: node substack-cli.js session create --account nazwa"
            ],
            "numbers": [
              0
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "substack",
          "line": 35,
          "snippet": "    \n    if (substackSessions.length === 0) {\n      console.log('\\n[Session Manager] 📭 Brak zapisanych sesji Substack');\n      console.log('\\n💡 Utwórz sesję: node substack-cli.js session create --account nazwa');\n      return;",
          "values": {
            "strings": [
              "\\n[Session Manager] 📭 Brak zapisanych sesji Substack",
              "\\n💡 Utwórz sesję: node substack-cli.js session create --account nazwa"
            ],
            "numbers": [
              0
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "substack",
          "line": 36,
          "snippet": "    if (substackSessions.length === 0) {\n      console.log('\\n[Session Manager] 📭 Brak zapisanych sesji Substack');\n      console.log('\\n💡 Utwórz sesję: node substack-cli.js session create --account nazwa');\n      return;\n    }",
          "values": {
            "strings": [
              "\\n[Session Manager] 📭 Brak zapisanych sesji Substack",
              "\\n💡 Utwórz sesję: node substack-cli.js session create --account nazwa"
            ],
            "numbers": [
              0
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "substack",
          "line": 40,
          "snippet": "    }\n    \n    console.log('\\n[Session Manager] 📊 Status sesji Substack:\\n');\n    \n    const sessions = [];",
          "values": {
            "strings": [
              "\\n[Session Manager] 📊 Status sesji Substack:\\n"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "substack",
          "line": 43,
          "snippet": "    \n    const sessions = [];\n    for (const file of substackSessions) {\n      const accountName = file.replace('_substack.json', '');\n      const sessionFile = path.join(sessionsDir, file);",
          "values": {
            "strings": [
              "_substack.json"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "substack",
          "line": 44,
          "snippet": "    const sessions = [];\n    for (const file of substackSessions) {\n      const accountName = file.replace('_substack.json', '');\n      const sessionFile = path.join(sessionsDir, file);\n      ",
          "values": {
            "strings": [
              "_substack.json"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "substack",
          "line": 101,
          "snippet": "      \n      if (expired > 0) {\n        console.log('\\n💡 Odnów wygasłe sesje: node substack-cli.js session create --account <nazwa>');\n      }\n      ",
          "values": {
            "strings": [
              "\\n💡 Odnów wygasłe sesje: node substack-cli.js session create --account <nazwa>"
            ],
            "numbers": [
              0
            ]
          }
        }
      ]
    },
    {
      "file": "/Users/hretheum/dev/bezrobocie/vector-wave/publisher/scripts/test-error-handling.py",
      "exists": true,
      "hits": [
        {
          "type": "platform_specific",
          "platform": "twitter",
          "line": 3,
          "snippet": "#!/usr/bin/env python3\n\"\"\"\nTest script dla zaawansowanego error handling w Twitter Adapter\n\"\"\"\nimport requests",
          "values": {
            "strings": [
              "\nTest script dla zaawansowanego error handling w Twitter Adapter\n"
            ],
            "numbers": [
              3
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "twitter",
          "line": 134,
          "snippet": "    except requests.exceptions.ConnectionError:\n        print(f\"\\n❌ Nie można połączyć się z {API_BASE}\")\n        print(\"Upewnij się, że Twitter Adapter działa na porcie 8083\")\n        sys.exit(1)\n",
          "values": {
            "strings": [
              "\\n❌ Nie można połączyć się z {API_BASE}",
              "Upewnij się, że Twitter Adapter działa na porcie 8083"
            ],
            "numbers": [
              8083,
              1
            ]
          }
        }
      ]
    },
    {
      "file": "/Users/hretheum/dev/bezrobocie/vector-wave/publisher/scripts/deploy_enhanced_orchestrator.py",
      "exists": true,
      "hits": [
        {
          "type": "platform_specific",
          "platform": "twitter",
          "line": 244,
          "snippet": "                },\n                \"platforms\": {\n                    \"twitter\": {\"enabled\": True, \"direct_content\": True}\n                },\n                \"request_id\": \"deployment-test-001\"",
          "values": {
            "strings": [
              "platforms",
              "twitter",
              "enabled",
              "direct_content",
              "request_id",
              "deployment-test-001"
            ],
            "numbers": [
              1
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "twitter",
          "line": 351,
          "snippet": "                },\n                \"platforms\": {\n                    \"twitter\": {\n                        \"enabled\": True,\n                        \"direct_content\": True",
          "values": {
            "strings": [
              "platforms",
              "twitter",
              "enabled",
              "direct_content"
            ],
            "numbers": []
          }
        }
      ]
    },
    {
      "file": "/Users/hretheum/dev/bezrobocie/vector-wave/publisher/scripts/test-api-errors.py",
      "exists": true,
      "hits": [
        {
          "type": "required_elements",
          "platform": "universal",
          "line": 39,
          "snippet": "                    data = json.loads(body.decode('utf-8'))\n                    if data.get('schedule-date') == '2020-01-01T10:00:00Z':\n                        self.send_error_response(400, {\"error\": \"Schedule date must be in the future\"})\n                    else:\n                        # Success response",
          "values": {
            "strings": [
              "utf-8",
              "schedule-date",
              "2020-01-01T10:00:00Z",
              "error",
              "Schedule date must be in the future"
            ],
            "numbers": [
              8,
              2020,
              1,
              1,
              10,
              0,
              0,
              400
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "twitter",
          "line": 122,
          "snippet": "    try:\n        import sys\n        sys.path.append('../src/adapters/twitter')\n        from main import parse_typefully_error, ErrorCodes\n        ",
          "values": {
            "strings": [
              "../src/adapters/twitter"
            ],
            "numbers": []
          }
        },
        {
          "type": "forbidden_phrases",
          "platform": "universal",
          "line": 127,
          "snippet": "        test_cases = [\n            (401, \"Unauthorized\", ErrorCodes.API_KEY_INVALID),\n            (403, \"Forbidden\", ErrorCodes.API_KEY_INVALID),\n            (429, \"Too Many Requests\", ErrorCodes.TYPEFULLY_RATE_LIMIT),\n            (500, \"Internal Server Error\", ErrorCodes.TYPEFULLY_API_ERROR),",
          "values": {
            "strings": [
              "Unauthorized",
              "Forbidden",
              "Too Many Requests",
              "Internal Server Error"
            ],
            "numbers": [
              401,
              403,
              429,
              500
            ]
          }
        },
        {
          "type": "required_elements",
          "platform": "universal",
          "line": 130,
          "snippet": "            (429, \"Too Many Requests\", ErrorCodes.TYPEFULLY_RATE_LIMIT),\n            (500, \"Internal Server Error\", ErrorCodes.TYPEFULLY_API_ERROR),\n            (400, \"Schedule date must be in the future\", ErrorCodes.SCHEDULE_DATE_INVALID),\n            (400, \"Content too long\", ErrorCodes.CONTENT_TOO_LONG),\n            (402, \"Quota exceeded\", ErrorCodes.TYPEFULLY_QUOTA_EXCEEDED)",
          "values": {
            "strings": [
              "Too Many Requests",
              "Internal Server Error",
              "Schedule date must be in the future",
              "Content too long",
              "Quota exceeded"
            ],
            "numbers": [
              429,
              500,
              400,
              400,
              402
            ]
          }
        }
      ]
    },
    {
      "file": "/Users/hretheum/dev/bezrobocie/vector-wave/publisher/scripts/test-session-management.js",
      "exists": true,
      "hits": [
        {
          "type": "required_elements",
          "platform": "substack",
          "line": 3,
          "snippet": "#!/usr/bin/env node\n\nrequire('dotenv').config({ path: require('path').resolve(__dirname, '../.env') });\nconst { SubstackAdapter } = require('../src/adapters/substack-adapter');\n",
          "values": {
            "strings": [
              "dotenv",
              "path",
              "../.env",
              "../src/adapters/substack-adapter"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "substack",
          "line": 4,
          "snippet": "\nrequire('dotenv').config({ path: require('path').resolve(__dirname, '../.env') });\nconst { SubstackAdapter } = require('../src/adapters/substack-adapter');\n\nasync function testSessionManagement() {",
          "values": {
            "strings": [
              "dotenv",
              "path",
              "../.env",
              "../src/adapters/substack-adapter"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "substack",
          "line": 10,
          "snippet": "  console.log('=====================================================\\n');\n  \n  const adapter = new SubstackAdapter();\n  \n  try {",
          "values": {
            "strings": [
              "=====================================================\\n"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "substack",
          "line": 41,
          "snippet": "    if (status.expired) {\n      console.log('❌ Sesja wygasła - wymagane natychmiastowe odnowienie');\n      console.log('💡 Uruchom: node scripts/substack-cli.js session renew --account personal');\n    } else if (status.status === 'critical') {\n      console.log('🚨 Sesja krytyczna - odnów w ciągu 1-2 dni');",
          "values": {
            "strings": [
              "❌ Sesja wygasła - wymagane natychmiastowe odnowienie",
              "💡 Uruchom: node scripts/substack-cli.js session renew --account personal",
              "critical",
              "🚨 Sesja krytyczna - odnów w ciągu 1-2 dni"
            ],
            "numbers": [
              1,
              2
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "substack",
          "line": 44,
          "snippet": "    } else if (status.status === 'critical') {\n      console.log('🚨 Sesja krytyczna - odnów w ciągu 1-2 dni');\n      console.log('💡 Uruchom: node scripts/substack-cli.js session renew --account personal');\n    } else if (status.status === 'warning') {\n      console.log('⚠️ Sesja wygasa wkrótce - zaplanuj odnowienie');",
          "values": {
            "strings": [
              "critical",
              "🚨 Sesja krytyczna - odnów w ciągu 1-2 dni",
              "💡 Uruchom: node scripts/substack-cli.js session renew --account personal",
              "warning",
              "⚠️ Sesja wygasa wkrótce - zaplanuj odnowienie"
            ],
            "numbers": [
              1,
              2
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "substack",
          "line": 47,
          "snippet": "    } else if (status.status === 'warning') {\n      console.log('⚠️ Sesja wygasa wkrótce - zaplanuj odnowienie');\n      console.log('💡 Uruchom: node scripts/substack-cli.js session renew --account personal');\n    } else {\n      console.log('✅ Sesja w dobrej kondycji');",
          "values": {
            "strings": [
              "warning",
              "⚠️ Sesja wygasa wkrótce - zaplanuj odnowienie",
              "💡 Uruchom: node scripts/substack-cli.js session renew --account personal",
              "✅ Sesja w dobrej kondycji"
            ],
            "numbers": []
          }
        },
        {
          "type": "required_elements",
          "platform": "substack",
          "line": 58,
          "snippet": "    console.error('\\n❌ Test nie powiódł się:', error.message);\n    \n    if (error.message.includes('Nie znaleziono pliku sesji')) {\n      console.log('\\n💡 Utwórz sesję przed testem:');\n      console.log('node scripts/substack-cli.js session create --account personal');",
          "values": {
            "strings": [
              "\\n❌ Test nie powiódł się:",
              "Nie znaleziono pliku sesji",
              "\\n💡 Utwórz sesję przed testem:",
              "node scripts/substack-cli.js session create --account personal"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "substack",
          "line": 60,
          "snippet": "    if (error.message.includes('Nie znaleziono pliku sesji')) {\n      console.log('\\n💡 Utwórz sesję przed testem:');\n      console.log('node scripts/substack-cli.js session create --account personal');\n    } else if (error.message.includes('wygasła')) {\n      console.log('\\n💡 Odnów wygasłą sesję:');",
          "values": {
            "strings": [
              "Nie znaleziono pliku sesji",
              "\\n💡 Utwórz sesję przed testem:",
              "node scripts/substack-cli.js session create --account personal",
              "wygasła",
              "\\n💡 Odnów wygasłą sesję:"
            ],
            "numbers": []
          }
        },
        {
          "type": "required_elements",
          "platform": "substack",
          "line": 61,
          "snippet": "      console.log('\\n💡 Utwórz sesję przed testem:');\n      console.log('node scripts/substack-cli.js session create --account personal');\n    } else if (error.message.includes('wygasła')) {\n      console.log('\\n💡 Odnów wygasłą sesję:');\n      console.log('node scripts/substack-cli.js session renew --account personal');",
          "values": {
            "strings": [
              "\\n💡 Utwórz sesję przed testem:",
              "node scripts/substack-cli.js session create --account personal",
              "wygasła",
              "\\n💡 Odnów wygasłą sesję:",
              "node scripts/substack-cli.js session renew --account personal"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "substack",
          "line": 63,
          "snippet": "    } else if (error.message.includes('wygasła')) {\n      console.log('\\n💡 Odnów wygasłą sesję:');\n      console.log('node scripts/substack-cli.js session renew --account personal');\n    }\n    ",
          "values": {
            "strings": [
              "wygasła",
              "\\n💡 Odnów wygasłą sesję:",
              "node scripts/substack-cli.js session renew --account personal"
            ],
            "numbers": []
          }
        }
      ]
    },
    {
      "file": "/Users/hretheum/dev/bezrobocie/vector-wave/publisher/scripts/test-ghost-official-api.js",
      "exists": true,
      "hits": [
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 3,
          "snippet": "#!/usr/bin/env node\n\n// Test using official Ghost Admin API client\n// This should work if our multipart format is the issue\n",
          "values": {
            "strings": [],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 6,
          "snippet": "// This should work if our multipart format is the issue\n\nconst GhostAdminAPI = require('@tryghost/admin-api');\nconst path = require('path');\nconst fs = require('fs');",
          "values": {
            "strings": [
              "@tryghost/admin-api",
              "path",
              "fs"
            ],
            "numbers": []
          }
        },
        {
          "type": "required_elements",
          "platform": "ghost",
          "line": 7,
          "snippet": "\nconst GhostAdminAPI = require('@tryghost/admin-api');\nconst path = require('path');\nconst fs = require('fs');\n",
          "values": {
            "strings": [
              "@tryghost/admin-api",
              "path",
              "fs"
            ],
            "numbers": []
          }
        },
        {
          "type": "required_elements",
          "platform": "ghost",
          "line": 8,
          "snippet": "const GhostAdminAPI = require('@tryghost/admin-api');\nconst path = require('path');\nconst fs = require('fs');\n\n// API credentials will be set later",
          "values": {
            "strings": [
              "@tryghost/admin-api",
              "path",
              "fs"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 15,
          "snippet": "async function testOfficialImageUpload() {\n    try {\n        console.log('🧪 TESTING OFFICIAL GHOST API CLIENT');\n        console.log('===================================');\n        ",
          "values": {
            "strings": [
              "🧪 TESTING OFFICIAL GHOST API CLIENT",
              "==================================="
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 30,
          "snippet": "        \n        // Test using official API\n        console.log('Uploading via official Ghost API client...');\n        const result = await api.images.upload({\n            file: testImagePath",
          "values": {
            "strings": [
              "Uploading via official Ghost API client..."
            ],
            "numbers": []
          }
        },
        {
          "type": "required_elements",
          "platform": "ghost",
          "line": 46,
          "snippet": "\n// Get environment variables from container\nif (process.argv.includes('--from-host')) {\n    // Running from host, need to read env from docker\n    const { execSync } = require('child_process');",
          "values": {
            "strings": [
              "--from-host",
              "child_process"
            ],
            "numbers": []
          }
        },
        {
          "type": "required_elements",
          "platform": "ghost",
          "line": 48,
          "snippet": "if (process.argv.includes('--from-host')) {\n    // Running from host, need to read env from docker\n    const { execSync } = require('child_process');\n    \n    try {",
          "values": {
            "strings": [
              "--from-host",
              "child_process"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 51,
          "snippet": "    \n    try {\n        const url = execSync('docker exec publisher-ghost-adapter printenv GHOST_API_URL', {encoding: 'utf8'}).trim();\n        const key = execSync('docker exec publisher-ghost-adapter printenv GHOST_API_KEY', {encoding: 'utf8'}).trim();\n        ",
          "values": {
            "strings": [
              "docker exec publisher-ghost-adapter printenv GHOST_API_URL",
              "utf8",
              "docker exec publisher-ghost-adapter printenv GHOST_API_KEY",
              "utf8"
            ],
            "numbers": [
              8,
              8
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 52,
          "snippet": "    try {\n        const url = execSync('docker exec publisher-ghost-adapter printenv GHOST_API_URL', {encoding: 'utf8'}).trim();\n        const key = execSync('docker exec publisher-ghost-adapter printenv GHOST_API_KEY', {encoding: 'utf8'}).trim();\n        \n        process.env.GHOST_API_URL = url;",
          "values": {
            "strings": [
              "docker exec publisher-ghost-adapter printenv GHOST_API_URL",
              "utf8",
              "docker exec publisher-ghost-adapter printenv GHOST_API_KEY",
              "utf8"
            ],
            "numbers": [
              8,
              8
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 54,
          "snippet": "        const key = execSync('docker exec publisher-ghost-adapter printenv GHOST_API_KEY', {encoding: 'utf8'}).trim();\n        \n        process.env.GHOST_API_URL = url;\n        process.env.GHOST_API_KEY = key;\n        ",
          "values": {
            "strings": [
              "docker exec publisher-ghost-adapter printenv GHOST_API_KEY",
              "utf8"
            ],
            "numbers": [
              8
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 55,
          "snippet": "        \n        process.env.GHOST_API_URL = url;\n        process.env.GHOST_API_KEY = key;\n        \n        console.log('Got credentials from container');",
          "values": {
            "strings": [
              "Got credentials from container"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 62,
          "snippet": "        \n        // Initialize API client with credentials\n        api = new GhostAdminAPI({\n            url: url,\n            key: key,",
          "values": {
            "strings": [],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 74,
          "snippet": "} else {\n    // Running inside container or with env vars\n    api = new GhostAdminAPI({\n        url: process.env.GHOST_API_URL || 'https://vectorwave.ghost.io',\n        key: process.env.GHOST_API_KEY,",
          "values": {
            "strings": [
              "https://vectorwave.ghost.io"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 75,
          "snippet": "    // Running inside container or with env vars\n    api = new GhostAdminAPI({\n        url: process.env.GHOST_API_URL || 'https://vectorwave.ghost.io',\n        key: process.env.GHOST_API_KEY,\n        version: 'v6.0'",
          "values": {
            "strings": [
              "https://vectorwave.ghost.io",
              "v6.0"
            ],
            "numbers": [
              6,
              0
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 76,
          "snippet": "    api = new GhostAdminAPI({\n        url: process.env.GHOST_API_URL || 'https://vectorwave.ghost.io',\n        key: process.env.GHOST_API_KEY,\n        version: 'v6.0'\n    });",
          "values": {
            "strings": [
              "https://vectorwave.ghost.io",
              "v6.0"
            ],
            "numbers": [
              6,
              0
            ]
          }
        }
      ]
    },
    {
      "file": "/Users/hretheum/dev/bezrobocie/vector-wave/publisher/scripts/test-substack-adapter.js",
      "exists": true,
      "hits": [
        {
          "type": "required_elements",
          "platform": "substack",
          "line": 3,
          "snippet": "#!/usr/bin/env node\n\nrequire('dotenv').config({ path: require('path').resolve(__dirname, '../.env') });\nconst { SubstackAdapter } = require('../src/adapters/substack-adapter');\n",
          "values": {
            "strings": [
              "dotenv",
              "path",
              "../.env",
              "../src/adapters/substack-adapter"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "substack",
          "line": 4,
          "snippet": "\nrequire('dotenv').config({ path: require('path').resolve(__dirname, '../.env') });\nconst { SubstackAdapter } = require('../src/adapters/substack-adapter');\n\nasync function testSubstackAdapter() {",
          "values": {
            "strings": [
              "dotenv",
              "path",
              "../.env",
              "../src/adapters/substack-adapter"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "substack",
          "line": 6,
          "snippet": "const { SubstackAdapter } = require('../src/adapters/substack-adapter');\n\nasync function testSubstackAdapter() {\n  const adapter = new SubstackAdapter();\n  ",
          "values": {
            "strings": [
              "../src/adapters/substack-adapter"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "substack",
          "line": 7,
          "snippet": "\nasync function testSubstackAdapter() {\n  const adapter = new SubstackAdapter();\n  \n  try {",
          "values": {
            "strings": [],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "substack",
          "line": 10,
          "snippet": "  \n  try {\n    console.log('🧪 Test Substack Adapter - Odtwarzanie sesji w automatyzacji');\n    console.log('================================================\\n');\n    ",
          "values": {
            "strings": [
              "🧪 Test Substack Adapter - Odtwarzanie sesji w automatyzacji",
              "================================================\\n"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "substack",
          "line": 25,
          "snippet": "    const testPost = {\n      title: `Test Post - ${new Date().toLocaleString()}`,\n      content: `To jest testowy post utworzony automatycznie przez Substack Adapter.\\n\\nCzas utworzenia: ${new Date().toISOString()}\\n\\nTo jest test mechanizmu odtwarzania sesji z obsługą tagów i harmonogramu.`,\n      draft: true, // Zapisz jako draft, żeby nie spamować\n      tags: ['test', 'automation', 'substack'], // Test tagów",
          "values": {
            "strings": [
              "test",
              "automation",
              "substack"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "substack",
          "line": 27,
          "snippet": "      content: `To jest testowy post utworzony automatycznie przez Substack Adapter.\\n\\nCzas utworzenia: ${new Date().toISOString()}\\n\\nTo jest test mechanizmu odtwarzania sesji z obsługą tagów i harmonogramu.`,\n      draft: true, // Zapisz jako draft, żeby nie spamować\n      tags: ['test', 'automation', 'substack'], // Test tagów\n      // scheduledTime: new Date(Date.now() + 60 * 60 * 1000).toISOString() // Test harmonogramu (za godzinę) - zakomentowane\n    };",
          "values": {
            "strings": [
              "test",
              "automation",
              "substack"
            ],
            "numbers": [
              60,
              60,
              1000
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "substack",
          "line": 50,
          "snippet": "\n// Uruchom test\ntestSubstackAdapter();",
          "values": {
            "strings": [],
            "numbers": []
          }
        }
      ]
    },
    {
      "file": "/Users/hretheum/dev/bezrobocie/vector-wave/publisher/scripts/substack-cli.js",
      "exists": true,
      "hits": [
        {
          "type": "required_elements",
          "platform": "substack",
          "line": 3,
          "snippet": "#!/usr/bin/env node\n\nconst yargs = require('yargs');\nconst readline = require('readline');\nconst fs = require('fs').promises;",
          "values": {
            "strings": [
              "yargs",
              "readline",
              "fs"
            ],
            "numbers": []
          }
        },
        {
          "type": "required_elements",
          "platform": "substack",
          "line": 4,
          "snippet": "\nconst yargs = require('yargs');\nconst readline = require('readline');\nconst fs = require('fs').promises;\nconst path = require('path');",
          "values": {
            "strings": [
              "yargs",
              "readline",
              "fs",
              "path"
            ],
            "numbers": []
          }
        },
        {
          "type": "required_elements",
          "platform": "substack",
          "line": 5,
          "snippet": "const yargs = require('yargs');\nconst readline = require('readline');\nconst fs = require('fs').promises;\nconst path = require('path');\nrequire('dotenv').config({ path: require('path').resolve(__dirname, '../.env') });",
          "values": {
            "strings": [
              "yargs",
              "readline",
              "fs",
              "path",
              "dotenv",
              "path",
              "../.env"
            ],
            "numbers": []
          }
        },
        {
          "type": "required_elements",
          "platform": "substack",
          "line": 6,
          "snippet": "const readline = require('readline');\nconst fs = require('fs').promises;\nconst path = require('path');\nrequire('dotenv').config({ path: require('path').resolve(__dirname, '../.env') });\n",
          "values": {
            "strings": [
              "readline",
              "fs",
              "path",
              "dotenv",
              "path",
              "../.env"
            ],
            "numbers": []
          }
        },
        {
          "type": "required_elements",
          "platform": "substack",
          "line": 7,
          "snippet": "const fs = require('fs').promises;\nconst path = require('path');\nrequire('dotenv').config({ path: require('path').resolve(__dirname, '../.env') });\n\n// Funkcja ekstrakcji i zapisu kontekstu sesji",
          "values": {
            "strings": [
              "fs",
              "path",
              "dotenv",
              "path",
              "../.env"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "substack",
          "line": 11,
          "snippet": "// Funkcja ekstrakcji i zapisu kontekstu sesji\nasync function extractAndSaveSessionContext(stagehand, accountName) {\n  console.log('[Substack CLI] Pobieram cookies...');\n  const cookies = await stagehand.page.context().cookies();\n  ",
          "values": {
            "strings": [
              "[Substack CLI] Pobieram cookies..."
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "substack",
          "line": 14,
          "snippet": "  const cookies = await stagehand.page.context().cookies();\n  \n  console.log('[Substack CLI] Pobieram localStorage...');\n  const localStorage = await stagehand.page.evaluate(() => {\n    const local = {};",
          "values": {
            "strings": [
              "[Substack CLI] Pobieram localStorage..."
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "substack",
          "line": 24,
          "snippet": "  });\n  \n  console.log('[Substack CLI] Pobieram sessionStorage...');\n  const sessionStorage = await stagehand.page.evaluate(() => {\n    const session = {};",
          "values": {
            "strings": [
              "[Substack CLI] Pobieram sessionStorage..."
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "substack",
          "line": 39,
          "snippet": "    createdAt: new Date().toISOString(),\n    validUntil: new Date(Date.now() + 30 * 24 * 60 * 60 * 1000).toISOString(), // 30 dni\n    platform: 'substack',\n    cookies,\n    localStorage,",
          "values": {
            "strings": [
              "substack"
            ],
            "numbers": [
              30,
              24,
              60,
              60,
              1000,
              30
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "substack",
          "line": 52,
          "snippet": "\n  // Zapisz dane sesji\n  const sessionFile = path.join(sessionsDir, `${accountName}_substack.json`);\n  await fs.writeFile(sessionFile, JSON.stringify(sessionData, null, 2));\n  ",
          "values": {
            "strings": [],
            "numbers": [
              2
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "substack",
          "line": 55,
          "snippet": "  await fs.writeFile(sessionFile, JSON.stringify(sessionData, null, 2));\n  \n  console.log(`[Substack CLI] Sesja zapisana w: ${sessionFile}`);\n  console.log(`[Substack CLI] Liczba cookies: ${cookies.length}`);\n  console.log(`[Substack CLI] Liczba localStorage items: ${Object.keys(localStorage).length}`);",
          "values": {
            "strings": [],
            "numbers": [
              2
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "substack",
          "line": 56,
          "snippet": "  \n  console.log(`[Substack CLI] Sesja zapisana w: ${sessionFile}`);\n  console.log(`[Substack CLI] Liczba cookies: ${cookies.length}`);\n  console.log(`[Substack CLI] Liczba localStorage items: ${Object.keys(localStorage).length}`);\n  console.log(`[Substack CLI] Liczba sessionStorage items: ${Object.keys(sessionStorage).length}`);",
          "values": {
            "strings": [],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "substack",
          "line": 57,
          "snippet": "  console.log(`[Substack CLI] Sesja zapisana w: ${sessionFile}`);\n  console.log(`[Substack CLI] Liczba cookies: ${cookies.length}`);\n  console.log(`[Substack CLI] Liczba localStorage items: ${Object.keys(localStorage).length}`);\n  console.log(`[Substack CLI] Liczba sessionStorage items: ${Object.keys(sessionStorage).length}`);\n}",
          "values": {
            "strings": [],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "substack",
          "line": 58,
          "snippet": "  console.log(`[Substack CLI] Liczba cookies: ${cookies.length}`);\n  console.log(`[Substack CLI] Liczba localStorage items: ${Object.keys(localStorage).length}`);\n  console.log(`[Substack CLI] Liczba sessionStorage items: ${Object.keys(sessionStorage).length}`);\n}\n",
          "values": {
            "strings": [],
            "numbers": []
          }
        },
        {
          "type": "required_elements",
          "platform": "substack",
          "line": 63,
          "snippet": "let Stagehand;\ntry {\n  Stagehand = require('@browserbasehq/stagehand').Stagehand;\n} catch (e) {\n  console.error('\\n[Substack CLI] Brak pakietu @browserbasehq/stagehand. Zainstaluj go poleceniem:');",
          "values": {
            "strings": [
              "@browserbasehq/stagehand",
              "\\n[Substack CLI] Brak pakietu @browserbasehq/stagehand. Zainstaluj go poleceniem:"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "substack",
          "line": 65,
          "snippet": "  Stagehand = require('@browserbasehq/stagehand').Stagehand;\n} catch (e) {\n  console.error('\\n[Substack CLI] Brak pakietu @browserbasehq/stagehand. Zainstaluj go poleceniem:');\n  console.error('npm install @browserbasehq/stagehand');\n  process.exit(1);",
          "values": {
            "strings": [
              "@browserbasehq/stagehand",
              "\\n[Substack CLI] Brak pakietu @browserbasehq/stagehand. Zainstaluj go poleceniem:",
              "npm install @browserbasehq/stagehand"
            ],
            "numbers": [
              1
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "substack",
          "line": 71,
          "snippet": "\nconst argv = yargs\n  .command('session create', 'Inicjalizuj nową sesję Substack', {\n    account: { description: 'Nazwa konta Substack', alias: 'a', type: 'string', demandOption: true }\n  }, async (args) => {",
          "values": {
            "strings": [
              "session create",
              "Inicjalizuj nową sesję Substack",
              "Nazwa konta Substack",
              ", type: "
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "substack",
          "line": 72,
          "snippet": "const argv = yargs\n  .command('session create', 'Inicjalizuj nową sesję Substack', {\n    account: { description: 'Nazwa konta Substack', alias: 'a', type: 'string', demandOption: true }\n  }, async (args) => {\n    await handleSessionCreate(args.account);",
          "values": {
            "strings": [
              "session create",
              "Inicjalizuj nową sesję Substack",
              "Nazwa konta Substack",
              ", type: "
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "substack",
          "line": 77,
          "snippet": "  })\n  .command('session validate', 'Sprawdź poprawność istniejącej sesji', {\n    account: { description: 'Nazwa konta Substack', alias: 'a', type: 'string', demandOption: true }\n  }, async (args) => {\n    await handleSessionValidate(args.account);",
          "values": {
            "strings": [
              "session validate",
              "Sprawdź poprawność istniejącej sesji",
              "Nazwa konta Substack",
              ", type: "
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "substack",
          "line": 85,
          "snippet": "  })\n  .command('session renew', 'Odnów wygasającą sesję', {\n    account: { description: 'Nazwa konta Substack', alias: 'a', type: 'string', demandOption: true },\n    force: { description: 'Wymuś odnowienie nawet jeśli sesja jest ważna', type: 'boolean', default: false }\n  }, async (args) => {",
          "values": {
            "strings": [
              "session renew",
              "Odnów wygasającą sesję",
              "Nazwa konta Substack",
              ", type: ",
              ", demandOption: true },\n    force: { description: ",
              ", type: "
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "substack",
          "line": 102,
          "snippet": "    await fs.mkdir(sessionsDir, { recursive: true });\n    const files = await fs.readdir(sessionsDir);\n    const substackSessions = files.filter(file => file.endsWith('_substack.json'));\n    \n    if (substackSessions.length === 0) {",
          "values": {
            "strings": [
              "_substack.json"
            ],
            "numbers": [
              0
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "substack",
          "line": 104,
          "snippet": "    const substackSessions = files.filter(file => file.endsWith('_substack.json'));\n    \n    if (substackSessions.length === 0) {\n      console.log('\\n[Substack CLI] 📭 Brak zapisanych sesji Substack');\n      return [];",
          "values": {
            "strings": [
              "_substack.json",
              "\\n[Substack CLI] 📭 Brak zapisanych sesji Substack"
            ],
            "numbers": [
              0
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "substack",
          "line": 105,
          "snippet": "    \n    if (substackSessions.length === 0) {\n      console.log('\\n[Substack CLI] 📭 Brak zapisanych sesji Substack');\n      return [];\n    }",
          "values": {
            "strings": [
              "\\n[Substack CLI] 📭 Brak zapisanych sesji Substack"
            ],
            "numbers": [
              0
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "substack",
          "line": 109,
          "snippet": "    }\n    \n    console.log('\\n[Substack CLI] 📊 Status sesji Substack:\\n');\n    \n    const sessions = [];",
          "values": {
            "strings": [
              "\\n[Substack CLI] 📊 Status sesji Substack:\\n"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "substack",
          "line": 112,
          "snippet": "    \n    const sessions = [];\n    for (const file of substackSessions) {\n      const accountName = file.replace('_substack.json', '');\n      const sessionFile = path.join(sessionsDir, file);",
          "values": {
            "strings": [
              "_substack.json"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "substack",
          "line": 113,
          "snippet": "    const sessions = [];\n    for (const file of substackSessions) {\n      const accountName = file.replace('_substack.json', '');\n      const sessionFile = path.join(sessionsDir, file);\n      ",
          "values": {
            "strings": [
              "_substack.json"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "substack",
          "line": 165,
          "snippet": "    \n  } catch (err) {\n    console.error('\\n[Substack CLI] ❌ Błąd podczas sprawdzania sesji:', err.message);\n    return [];\n  }",
          "values": {
            "strings": [
              "\\n[Substack CLI] ❌ Błąd podczas sprawdzania sesji:"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "substack",
          "line": 172,
          "snippet": "// Funkcja odnowienia sesji\nasync function renewSession(accountName, force = false) {\n  console.log(`\\n[Substack CLI] 🔄 Odnawiam sesję dla konta: ${accountName}`);\n  \n  // Sprawdź czy sesja istnieje",
          "values": {
            "strings": [],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "substack",
          "line": 175,
          "snippet": "  \n  // Sprawdź czy sesja istnieje\n  const sessionFile = path.resolve(__dirname, '../data/sessions', `${accountName}_substack.json`);\n  try {\n    const sessionData = JSON.parse(await fs.readFile(sessionFile, 'utf8'));",
          "values": {
            "strings": [
              "../data/sessions",
              "utf8"
            ],
            "numbers": [
              8
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "substack",
          "line": 183,
          "snippet": "    \n    if (!force && now <= validUntil && daysLeft > 7) {\n      console.log(`[Substack CLI] ⚠️ Sesja jest jeszcze ważna przez ${daysLeft} dni`);\n      console.log('[Substack CLI] Użyj --force żeby wymusić odnowienie');\n      return false;",
          "values": {
            "strings": [
              "[Substack CLI] Użyj --force żeby wymusić odnowienie"
            ],
            "numbers": [
              7
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "substack",
          "line": 184,
          "snippet": "    if (!force && now <= validUntil && daysLeft > 7) {\n      console.log(`[Substack CLI] ⚠️ Sesja jest jeszcze ważna przez ${daysLeft} dni`);\n      console.log('[Substack CLI] Użyj --force żeby wymusić odnowienie');\n      return false;\n    }",
          "values": {
            "strings": [
              "[Substack CLI] Użyj --force żeby wymusić odnowienie"
            ],
            "numbers": [
              7
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "substack",
          "line": 188,
          "snippet": "    }\n    \n    console.log(`[Substack CLI] 📅 Obecna sesja: wygasa ${validUntil.toLocaleDateString()}`);\n    \n  } catch (err) {",
          "values": {
            "strings": [],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "substack",
          "line": 192,
          "snippet": "  } catch (err) {\n    if (err.code !== 'ENOENT') {\n      console.error(`[Substack CLI] ❌ Błąd podczas odczytu sesji: ${err.message}`);\n      return false;\n    }",
          "values": {
            "strings": [
              "ENOENT"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "substack",
          "line": 195,
          "snippet": "      return false;\n    }\n    console.log('[Substack CLI] 📝 Brak sesji - tworzenie nowej');\n  }\n  ",
          "values": {
            "strings": [
              "[Substack CLI] 📝 Brak sesji - tworzenie nowej"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "substack",
          "line": 199,
          "snippet": "  \n  // Utwórz nową sesję (używa tej samej logiki co session create)\n  console.log('[Substack CLI] 🌟 Tworzenie nowej sesji...');\n  \n  // Tu możemy wywołać tę samą logikę co session create",
          "values": {
            "strings": [
              "[Substack CLI] 🌟 Tworzenie nowej sesji..."
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "substack",
          "line": 203,
          "snippet": "  // Tu możemy wywołać tę samą logikę co session create\n  // Dla uproszczenia, pokazujemy instrukcje\n  console.log('[Substack CLI] 💡 Uruchom: node substack-cli.js session create --account ' + accountName);\n  \n  return true;",
          "values": {
            "strings": [
              "[Substack CLI] 💡 Uruchom: node substack-cli.js session create --account "
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "substack",
          "line": 210,
          "snippet": "// Funkcja walidacji sesji\nasync function validateSession(accountName) {\n  const sessionFile = path.resolve(__dirname, '../data/sessions', `${accountName}_substack.json`);\n  \n  try {",
          "values": {
            "strings": [
              "../data/sessions"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "substack",
          "line": 220,
          "snippet": "    const validUntil = new Date(sessionData.validUntil);\n    if (now > validUntil) {\n      console.log('\\n[Substack CLI] ❌ Sesja wygasła. Utwórz nową sesję.');\n      return false;\n    }",
          "values": {
            "strings": [
              "\\n[Substack CLI] ❌ Sesja wygasła. Utwórz nową sesję."
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "substack",
          "line": 224,
          "snippet": "    }\n    \n    console.log('\\n[Substack CLI] Walidacja sesji...');\n    \n    // Utwórz nową instancję Stagehand i wczytaj sesję",
          "values": {
            "strings": [
              "\\n[Substack CLI] Walidacja sesji..."
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "substack",
          "line": 234,
          "snippet": "    const openaiKey = process.env.OPENAI_API_KEY;\n    if (!openaiKey) {\n      console.error('\\n[Substack CLI] Brak OPENAI_API_KEY w .env!');\n      return false;\n    }",
          "values": {
            "strings": [
              "\\n[Substack CLI] Brak OPENAI_API_KEY w .env!"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "substack",
          "line": 246,
          "snippet": "    await stagehand.page.context().addCookies(sessionData.cookies);\n    \n    // Najpierw przejdź na stronę Substack\n    await stagehand.page.goto('https://substack.com');\n    ",
          "values": {
            "strings": [
              "https://substack.com"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "substack",
          "line": 247,
          "snippet": "    \n    // Najpierw przejdź na stronę Substack\n    await stagehand.page.goto('https://substack.com');\n    \n    // Teraz wczytaj localStorage i sessionStorage (po załadowaniu strony)",
          "values": {
            "strings": [
              "https://substack.com"
            ],
            "numbers": []
          }
        },
        {
          "type": "required_elements",
          "platform": "substack",
          "line": 275,
          "snippet": "             document.querySelector('.user-menu') !== null ||\n             document.querySelector('[aria-label*=\"user\"]') !== null ||\n             document.body.innerText.includes('Dashboard') ||\n             document.body.innerText.includes('Your account');\n    });",
          "values": {
            "strings": [
              ".user-menu",
              "[aria-label*=",
              ") !== null ||\n             document.body.innerText.includes(",
              ") ||\n             document.body.innerText.includes("
            ],
            "numbers": []
          }
        },
        {
          "type": "required_elements",
          "platform": "substack",
          "line": 276,
          "snippet": "             document.querySelector('[aria-label*=\"user\"]') !== null ||\n             document.body.innerText.includes('Dashboard') ||\n             document.body.innerText.includes('Your account');\n    });\n",
          "values": {
            "strings": [
              "[aria-label*=",
              ") !== null ||\n             document.body.innerText.includes(",
              ") ||\n             document.body.innerText.includes("
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "substack",
          "line": 282,
          "snippet": "\n    if (isLoggedIn) {\n      console.log('\\n[Substack CLI] ✅ Sesja aktywna - użytkownik zalogowany');\n      console.log(`[Substack CLI] Konto: ${accountName}`);\n      console.log(`[Substack CLI] Ważna do: ${validUntil.toLocaleDateString()}`);",
          "values": {
            "strings": [
              "\\n[Substack CLI] ✅ Sesja aktywna - użytkownik zalogowany"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "substack",
          "line": 283,
          "snippet": "    if (isLoggedIn) {\n      console.log('\\n[Substack CLI] ✅ Sesja aktywna - użytkownik zalogowany');\n      console.log(`[Substack CLI] Konto: ${accountName}`);\n      console.log(`[Substack CLI] Ważna do: ${validUntil.toLocaleDateString()}`);\n      return true;",
          "values": {
            "strings": [
              "\\n[Substack CLI] ✅ Sesja aktywna - użytkownik zalogowany"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "substack",
          "line": 284,
          "snippet": "      console.log('\\n[Substack CLI] ✅ Sesja aktywna - użytkownik zalogowany');\n      console.log(`[Substack CLI] Konto: ${accountName}`);\n      console.log(`[Substack CLI] Ważna do: ${validUntil.toLocaleDateString()}`);\n      return true;\n    } else {",
          "values": {
            "strings": [
              "\\n[Substack CLI] ✅ Sesja aktywna - użytkownik zalogowany"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "substack",
          "line": 287,
          "snippet": "      return true;\n    } else {\n      console.log('\\n[Substack CLI] ❌ Błąd logowania - sesja nieważna');\n      console.log('[Substack CLI] Utwórz nową sesję poleceniem: session create');\n      return false;",
          "values": {
            "strings": [
              "\\n[Substack CLI] ❌ Błąd logowania - sesja nieważna",
              "[Substack CLI] Utwórz nową sesję poleceniem: session create"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "substack",
          "line": 288,
          "snippet": "    } else {\n      console.log('\\n[Substack CLI] ❌ Błąd logowania - sesja nieważna');\n      console.log('[Substack CLI] Utwórz nową sesję poleceniem: session create');\n      return false;\n    }",
          "values": {
            "strings": [
              "\\n[Substack CLI] ❌ Błąd logowania - sesja nieważna",
              "[Substack CLI] Utwórz nową sesję poleceniem: session create"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "substack",
          "line": 294,
          "snippet": "  } catch (err) {\n    if (err.code === 'ENOENT') {\n      console.log(`\\n[Substack CLI] ❌ Nie znaleziono pliku sesji dla konta: ${accountName}`);\n      console.log('[Substack CLI] Utwórz sesję poleceniem: session create --account ' + accountName);\n    } else {",
          "values": {
            "strings": [
              "ENOENT",
              "[Substack CLI] Utwórz sesję poleceniem: session create --account "
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "substack",
          "line": 295,
          "snippet": "    if (err.code === 'ENOENT') {\n      console.log(`\\n[Substack CLI] ❌ Nie znaleziono pliku sesji dla konta: ${accountName}`);\n      console.log('[Substack CLI] Utwórz sesję poleceniem: session create --account ' + accountName);\n    } else {\n      console.error('\\n[Substack CLI] ❌ Błąd podczas walidacji sesji:', err.message);",
          "values": {
            "strings": [
              "ENOENT",
              "[Substack CLI] Utwórz sesję poleceniem: session create --account ",
              "\\n[Substack CLI] ❌ Błąd podczas walidacji sesji:"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "substack",
          "line": 297,
          "snippet": "      console.log('[Substack CLI] Utwórz sesję poleceniem: session create --account ' + accountName);\n    } else {\n      console.error('\\n[Substack CLI] ❌ Błąd podczas walidacji sesji:', err.message);\n    }\n    return false;",
          "values": {
            "strings": [
              "[Substack CLI] Utwórz sesję poleceniem: session create --account ",
              "\\n[Substack CLI] ❌ Błąd podczas walidacji sesji:"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "substack",
          "line": 305,
          "snippet": "// Command handlers\nasync function handleSessionStatus() {\n  console.log('\\n[Substack CLI] 🔍 Sprawdzam status wszystkich sesji...');\n  \n  const sessions = await checkAllSessions();",
          "values": {
            "strings": [
              "\\n[Substack CLI] 🔍 Sprawdzam status wszystkich sesji..."
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "substack",
          "line": 317,
          "snippet": "    \n    if (expired > 0) {\n      console.log('\\n💡 Odnów wygasłe sesje: node substack-cli.js session renew --account <nazwa>');\n    }\n  }",
          "values": {
            "strings": [
              "\\n💡 Odnów wygasłe sesje: node substack-cli.js session renew --account <nazwa>"
            ],
            "numbers": [
              0
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "substack",
          "line": 325,
          "snippet": "\nasync function handleSessionValidate(account) {\n  console.log(`\\n[Substack CLI] Sprawdzam sesję dla konta: ${account}`);\n  \n  const isValid = await validateSession(account);",
          "values": {
            "strings": [],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "substack",
          "line": 337,
          "snippet": "\nasync function handleSessionCreate(account) {\n    console.log(`\\n[Substack CLI] Rozpoczynam proces inicjalizacji sesji dla konta: ${account}`);\n\n    const openaiKey = process.env.OPENAI_API_KEY;",
          "values": {
            "strings": [],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "substack",
          "line": 341,
          "snippet": "    const openaiKey = process.env.OPENAI_API_KEY;\n    if (!openaiKey) {\n      console.error('\\n[Substack CLI] Brak OPENAI_API_KEY w .env! Dodaj swój klucz OpenAI do pliku .env.');\n      process.exit(1);\n    }",
          "values": {
            "strings": [
              "\\n[Substack CLI] Brak OPENAI_API_KEY w .env! Dodaj swój klucz OpenAI do pliku .env."
            ],
            "numbers": [
              1
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "substack",
          "line": 345,
          "snippet": "    }\n\n    console.log('[Substack CLI] Używam lokalnej sesji Chromium...');\n    \n    const stagehand = new Stagehand({",
          "values": {
            "strings": [
              "[Substack CLI] Używam lokalnej sesji Chromium..."
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "substack",
          "line": 359,
          "snippet": "      });\n\n      // Dla lokalnej sesji, otwórz stronę Substack bezpośrednio\n      console.log('\\n[Substack CLI] Otwieram stronę logowania Substack w lokalnej przeglądarce...');\n      await stagehand.page.goto('https://substack.com/sign-in');",
          "values": {
            "strings": [
              "\\n[Substack CLI] Otwieram stronę logowania Substack w lokalnej przeglądarce...",
              "https://substack.com/sign-in"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "substack",
          "line": 360,
          "snippet": "\n      // Dla lokalnej sesji, otwórz stronę Substack bezpośrednio\n      console.log('\\n[Substack CLI] Otwieram stronę logowania Substack w lokalnej przeglądarce...');\n      await stagehand.page.goto('https://substack.com/sign-in');\n      ",
          "values": {
            "strings": [
              "\\n[Substack CLI] Otwieram stronę logowania Substack w lokalnej przeglądarce...",
              "https://substack.com/sign-in"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "substack",
          "line": 361,
          "snippet": "      // Dla lokalnej sesji, otwórz stronę Substack bezpośrednio\n      console.log('\\n[Substack CLI] Otwieram stronę logowania Substack w lokalnej przeglądarce...');\n      await stagehand.page.goto('https://substack.com/sign-in');\n      \n      console.log('[Substack CLI] Przeglądarka Chromium została otwarta z stroną logowania Substack.');",
          "values": {
            "strings": [
              "\\n[Substack CLI] Otwieram stronę logowania Substack w lokalnej przeglądarce...",
              "https://substack.com/sign-in",
              "[Substack CLI] Przeglądarka Chromium została otwarta z stroną logowania Substack."
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "substack",
          "line": 363,
          "snippet": "      await stagehand.page.goto('https://substack.com/sign-in');\n      \n      console.log('[Substack CLI] Przeglądarka Chromium została otwarta z stroną logowania Substack.');\n      console.log('[Substack CLI] Zaloguj się w przeglądarce, a następnie wróć do tego terminala.');\n      ",
          "values": {
            "strings": [
              "https://substack.com/sign-in",
              "[Substack CLI] Przeglądarka Chromium została otwarta z stroną logowania Substack.",
              "[Substack CLI] Zaloguj się w przeglądarce, a następnie wróć do tego terminala."
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "substack",
          "line": 364,
          "snippet": "      \n      console.log('[Substack CLI] Przeglądarka Chromium została otwarta z stroną logowania Substack.');\n      console.log('[Substack CLI] Zaloguj się w przeglądarce, a następnie wróć do tego terminala.');\n      \n      // Nie potrzebujemy sessionUrl dla lokalnej sesji - przeglądarka jest już otwarta",
          "values": {
            "strings": [
              "[Substack CLI] Przeglądarka Chromium została otwarta z stroną logowania Substack.",
              "[Substack CLI] Zaloguj się w przeglądarce, a następnie wróć do tego terminala."
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "substack",
          "line": 369,
          "snippet": "\n    } catch (err) {\n      console.error('\\n[Substack CLI] Błąd podczas tworzenia lokalnej sesji:', err.message || err);\n      process.exit(1);\n    }",
          "values": {
            "strings": [
              "\\n[Substack CLI] Błąd podczas tworzenia lokalnej sesji:"
            ],
            "numbers": [
              1
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "substack",
          "line": 380,
          "snippet": "    rl.question('\\nNaciśnij Enter, gdy zakończysz logowanie w przeglądarce... ', async () => {\n      rl.close();\n      console.log('\\n[Substack CLI] Logowanie potwierdzone. Ekstrakcja kontekstu sesji...');\n      \n      try {",
          "values": {
            "strings": [
              "\\nNaciśnij Enter, gdy zakończysz logowanie w przeglądarce... ",
              "\\n[Substack CLI] Logowanie potwierdzone. Ekstrakcja kontekstu sesji..."
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "substack",
          "line": 385,
          "snippet": "        // Zadanie 1.4: Ekstrakcja pełnego kontekstu przeglądarki\n        await extractAndSaveSessionContext(stagehand, account);\n        console.log('\\n[Substack CLI] ✅ Sesja została pomyślnie zapisana!');\n        process.exit(0);\n      } catch (err) {",
          "values": {
            "strings": [
              "\\n[Substack CLI] ✅ Sesja została pomyślnie zapisana!"
            ],
            "numbers": [
              1,
              4,
              0
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "substack",
          "line": 388,
          "snippet": "        process.exit(0);\n      } catch (err) {\n        console.error('\\n[Substack CLI] ❌ Błąd podczas zapisu sesji:', err.message || err);\n        process.exit(1);\n      }",
          "values": {
            "strings": [
              "\\n[Substack CLI] ❌ Błąd podczas zapisu sesji:"
            ],
            "numbers": [
              0,
              1
            ]
          }
        }
      ]
    },
    {
      "file": "/Users/hretheum/dev/bezrobocie/vector-wave/publisher/scripts/run_integration_tests.py",
      "exists": true,
      "hits": []
    },
    {
      "file": "/Users/hretheum/dev/bezrobocie/vector-wave/publisher/monitoring/prometheus.yml",
      "exists": true,
      "hits": [
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 50,
          "snippet": "\n  # Platform Adapters\n  - job_name: 'ghost-adapter'\n    static_configs:\n      - targets: ['ghost-adapter:8082']",
          "values": {
            "strings": [
              "ghost-adapter",
              "ghost-adapter:8082"
            ],
            "numbers": [
              8082
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 52,
          "snippet": "  - job_name: 'ghost-adapter'\n    static_configs:\n      - targets: ['ghost-adapter:8082']\n    metrics_path: '/metrics'\n    scrape_interval: 30s",
          "values": {
            "strings": [
              "ghost-adapter",
              "ghost-adapter:8082",
              "/metrics"
            ],
            "numbers": [
              8082,
              30
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "twitter",
          "line": 57,
          "snippet": "    scrape_timeout: 10s\n\n  - job_name: 'twitter-adapter'\n    static_configs:\n      - targets: ['twitter-adapter:8083']",
          "values": {
            "strings": [
              "twitter-adapter",
              "twitter-adapter:8083"
            ],
            "numbers": [
              10,
              8083
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "twitter",
          "line": 59,
          "snippet": "  - job_name: 'twitter-adapter'\n    static_configs:\n      - targets: ['twitter-adapter:8083']\n    metrics_path: '/metrics'\n    scrape_interval: 30s",
          "values": {
            "strings": [
              "twitter-adapter",
              "twitter-adapter:8083",
              "/metrics"
            ],
            "numbers": [
              8083,
              30
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "substack",
          "line": 64,
          "snippet": "    scrape_timeout: 10s\n\n  - job_name: 'substack-adapter'\n    static_configs:\n      - targets: ['substack-adapter:8084']",
          "values": {
            "strings": [
              "substack-adapter",
              "substack-adapter:8084"
            ],
            "numbers": [
              10,
              8084
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "substack",
          "line": 66,
          "snippet": "  - job_name: 'substack-adapter'\n    static_configs:\n      - targets: ['substack-adapter:8084']\n    metrics_path: '/metrics'\n    scrape_interval: 45s  # Longer interval for heavy service",
          "values": {
            "strings": [
              "substack-adapter",
              "substack-adapter:8084",
              "/metrics"
            ],
            "numbers": [
              8084,
              45
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "twitter",
          "line": 101,
          "snippet": "        - http://orchestrator:8080/health\n        - http://presenton:8089/health\n        - http://ghost-adapter:8082/health\n        - http://twitter-adapter:8083/health\n        - http://substack-adapter:8084/health",
          "values": {
            "strings": [],
            "numbers": [
              8080,
              8089,
              8082,
              8083,
              8084
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "twitter",
          "line": 102,
          "snippet": "        - http://presenton:8089/health\n        - http://ghost-adapter:8082/health\n        - http://twitter-adapter:8083/health\n        - http://substack-adapter:8084/health\n    relabel_configs:",
          "values": {
            "strings": [],
            "numbers": [
              8089,
              8082,
              8083,
              8084
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "twitter",
          "line": 103,
          "snippet": "        - http://ghost-adapter:8082/health\n        - http://twitter-adapter:8083/health\n        - http://substack-adapter:8084/health\n    relabel_configs:\n      - source_labels: [__address__]",
          "values": {
            "strings": [],
            "numbers": [
              8082,
              8083,
              8084
            ]
          }
        }
      ]
    },
    {
      "file": "/Users/hretheum/dev/bezrobocie/vector-wave/publisher/data/sessions/personal_substack.json",
      "exists": true,
      "hits": [
        {
          "type": "platform_specific",
          "platform": "substack",
          "line": 5,
          "snippet": "  \"createdAt\": \"2025-08-06T19:40:32.237Z\",\n  \"validUntil\": \"2025-09-05T19:40:32.237Z\",\n  \"platform\": \"substack\",\n  \"cookies\": [\n    {",
          "values": {
            "strings": [
              "createdAt",
              "2025-08-06T19:40:32.237Z",
              "validUntil",
              "2025-09-05T19:40:32.237Z",
              "platform",
              "substack",
              "cookies"
            ],
            "numbers": [
              2025,
              8,
              6,
              19,
              40,
              32,
              237,
              2025,
              9,
              5
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "substack",
          "line": 10,
          "snippet": "      \"name\": \"cookie_storage_key\",\n      \"value\": \"94910d67-f430-49c9-abce-d15fe1c13391\",\n      \"domain\": \".substack.com\",\n      \"path\": \"/\",\n      \"expires\": 1762285201.952396,",
          "values": {
            "strings": [
              "name",
              "cookie_storage_key",
              "value",
              "94910d67-f430-49c9-abce-d15fe1c13391",
              "domain",
              ".substack.com",
              "path",
              ",\n      "
            ],
            "numbers": [
              94910,
              67,
              430,
              49,
              9,
              15,
              1,
              13391,
              1762285201,
              952396
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "substack",
          "line": 20,
          "snippet": "      \"name\": \"disable_experiments\",\n      \"value\": \"1\",\n      \"domain\": \"substack.com\",\n      \"path\": \"/\",\n      \"expires\": -1,",
          "values": {
            "strings": [
              "name",
              "disable_experiments",
              "value",
              ",\n      ",
              ": ",
              ",\n      ",
              ": ",
              ",\n      "
            ],
            "numbers": [
              1,
              1
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "substack",
          "line": 30,
          "snippet": "      \"name\": \"__cf_bm\",\n      \"value\": \"Zepi6fY9A1xkdnCwrPVT7Tef0R77mrTbO0fw_t8vBdk-1754509201-1.0.1.1-bYfYgLp6lrpqKONhvUKQs0S7eKMSunotdv8KwNZwvUfAKDnSa.ViUOO5ZmdUTTRohwiWg9fgOLFPWQ47lC.QwboiqrhUwTxLGYG1P1vL8_M\",\n      \"domain\": \".substack.com\",\n      \"path\": \"/\",\n      \"expires\": 1754511001.95244,",
          "values": {
            "strings": [
              "name",
              "__cf_bm",
              "value",
              "Zepi6fY9A1xkdnCwrPVT7Tef0R77mrTbO0fw_t8vBdk-1754509201-1.0.1.1-bYfYgLp6lrpqKONhvUKQs0S7eKMSunotdv8KwNZwvUfAKDnSa.ViUOO5ZmdUTTRohwiWg9fgOLFPWQ47lC.QwboiqrhUwTxLGYG1P1vL8_M",
              "domain",
              ".substack.com",
              "path",
              ",\n      "
            ],
            "numbers": [
              6,
              9,
              1,
              7,
              0,
              77,
              0,
              8,
              1754509201,
              1
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "substack",
          "line": 40,
          "snippet": "      \"name\": \"cf_clearance\",\n      \"value\": \"DS31w7usLOrMkm6Lj6aTHndlrNL05QZeGrd7K6xNBCo-1754509202-1.2.1.1-c0EpuihIKuzsbNfGMEO1xe9YwY_9bkLAMWW1XNhzCGf1b3sK3L6zztXpHXSipMno9P4UbCNiYnQ4yrWgOs8XaYNSsG1KpH3b4Ly.CytkwhwiXRB_dX.v.0Ics255hE_OcUSWKC8e6a64yAWu0504DlTffgd4oeHHHCNfMERqhr2fam.3faF123Jb0k3V0Kre6HfWGroOdwIDYOt1bTzcJbPR5uatAxHNCXhkY7ca2gk\",\n      \"domain\": \".substack.com\",\n      \"path\": \"/\",\n      \"expires\": 1786045202.459995,",
          "values": {
            "strings": [
              "name",
              "cf_clearance",
              "value",
              "DS31w7usLOrMkm6Lj6aTHndlrNL05QZeGrd7K6xNBCo-1754509202-1.2.1.1-c0EpuihIKuzsbNfGMEO1xe9YwY_9bkLAMWW1XNhzCGf1b3sK3L6zztXpHXSipMno9P4UbCNiYnQ4yrWgOs8XaYNSsG1KpH3b4Ly.CytkwhwiXRB_dX.v.0Ics255hE_OcUSWKC8e6a64yAWu0504DlTffgd4oeHHHCNfMERqhr2fam.3faF123Jb0k3V0Kre6HfWGroOdwIDYOt1bTzcJbPR5uatAxHNCXhkY7ca2gk",
              "domain",
              ".substack.com",
              "path",
              ",\n      "
            ],
            "numbers": [
              31,
              7,
              6,
              6,
              5,
              7,
              6,
              1754509202,
              1,
              2
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "substack",
          "line": 46,
          "snippet": "      \"secure\": true,\n      \"sameSite\": \"None\",\n      \"partitionKey\": \"https://substack.com\",\n      \"_crHasCrossSiteAncestor\": false\n    },",
          "values": {
            "strings": [
              "secure",
              "sameSite",
              "None",
              "partitionKey",
              "https://substack.com",
              "_crHasCrossSiteAncestor"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "substack",
          "line": 50,
          "snippet": "    },\n    {\n      \"name\": \"substack.sid\",\n      \"value\": \"s%3AxRJZa9Fi1XqCMdfyAMeWGX8GemHvu5NC.Vb7VMOj94RUR91apMuXb%2BnC9hN0d88i2ugYD9BajWA0\",\n      \"domain\": \".substack.com\",",
          "values": {
            "strings": [
              "name",
              "substack.sid",
              "value",
              "s%3AxRJZa9Fi1XqCMdfyAMeWGX8GemHvu5NC.Vb7VMOj94RUR91apMuXb%2BnC9hN0d88i2ugYD9BajWA0",
              "domain",
              ".substack.com"
            ],
            "numbers": [
              3,
              9,
              1,
              8,
              5,
              7,
              94,
              91,
              2,
              9
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "substack",
          "line": 52,
          "snippet": "      \"name\": \"substack.sid\",\n      \"value\": \"s%3AxRJZa9Fi1XqCMdfyAMeWGX8GemHvu5NC.Vb7VMOj94RUR91apMuXb%2BnC9hN0d88i2ugYD9BajWA0\",\n      \"domain\": \".substack.com\",\n      \"path\": \"/\",\n      \"expires\": 1762285229.706719,",
          "values": {
            "strings": [
              "name",
              "substack.sid",
              "value",
              "s%3AxRJZa9Fi1XqCMdfyAMeWGX8GemHvu5NC.Vb7VMOj94RUR91apMuXb%2BnC9hN0d88i2ugYD9BajWA0",
              "domain",
              ".substack.com",
              "path",
              ",\n      "
            ],
            "numbers": [
              3,
              9,
              1,
              8,
              5,
              7,
              94,
              91,
              2,
              9
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "substack",
          "line": 60,
          "snippet": "    },\n    {\n      \"name\": \"substack.lli\",\n      \"value\": \"1\",\n      \"domain\": \".substack.com\",",
          "values": {
            "strings": [
              "name",
              "substack.lli",
              "value",
              ",\n      ",
              ": "
            ],
            "numbers": [
              1
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "substack",
          "line": 62,
          "snippet": "      \"name\": \"substack.lli\",\n      \"value\": \"1\",\n      \"domain\": \".substack.com\",\n      \"path\": \"/\",\n      \"expires\": 1762285227.878403,",
          "values": {
            "strings": [
              "name",
              "substack.lli",
              "value",
              ",\n      ",
              ": ",
              ",\n      ",
              ": ",
              ",\n      "
            ],
            "numbers": [
              1,
              1762285227,
              878403
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "substack",
          "line": 72,
          "snippet": "      \"name\": \"hideCookieBanner\",\n      \"value\": \"true\",\n      \"domain\": \"substack.com\",\n      \"path\": \"/\",\n      \"expires\": 1786045228.128711,",
          "values": {
            "strings": [
              "name",
              "hideCookieBanner",
              "value",
              "true",
              "domain",
              "substack.com",
              "path",
              ",\n      "
            ],
            "numbers": [
              1786045228,
              128711
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "substack",
          "line": 82,
          "snippet": "      \"name\": \"AWSALBTG\",\n      \"value\": \"KGqyhjVCFyA6An4iIeoCymP1dNijOwNLirpyCguYZ4GBQW4fp2/c2vd4WiO9XKtiBRRKe2cnYjCbflQMfZJWZ9BFabatjdE7STaBvQ1NVnhd3QpLV8PcoAdfsGHqVo1Fh35GVGHym0pKQQclwaCcEhHspRf5MYOCXBxTQRWx+nzW\",\n      \"domain\": \"substack.com\",\n      \"path\": \"/\",\n      \"expires\": 1755114029.706651,",
          "values": {
            "strings": [
              "name",
              "AWSALBTG",
              "value",
              "KGqyhjVCFyA6An4iIeoCymP1dNijOwNLirpyCguYZ4GBQW4fp2/c2vd4WiO9XKtiBRRKe2cnYjCbflQMfZJWZ9BFabatjdE7STaBvQ1NVnhd3QpLV8PcoAdfsGHqVo1Fh35GVGHym0pKQQclwaCcEhHspRf5MYOCXBxTQRWx+nzW",
              "domain",
              "substack.com",
              "path",
              ",\n      "
            ],
            "numbers": [
              6,
              4,
              1,
              4,
              4,
              2,
              2,
              4,
              9,
              2
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "substack",
          "line": 92,
          "snippet": "      \"name\": \"AWSALBTGCORS\",\n      \"value\": \"KGqyhjVCFyA6An4iIeoCymP1dNijOwNLirpyCguYZ4GBQW4fp2/c2vd4WiO9XKtiBRRKe2cnYjCbflQMfZJWZ9BFabatjdE7STaBvQ1NVnhd3QpLV8PcoAdfsGHqVo1Fh35GVGHym0pKQQclwaCcEhHspRf5MYOCXBxTQRWx+nzW\",\n      \"domain\": \"substack.com\",\n      \"path\": \"/\",\n      \"expires\": 1755114029.706702,",
          "values": {
            "strings": [
              "name",
              "AWSALBTGCORS",
              "value",
              "KGqyhjVCFyA6An4iIeoCymP1dNijOwNLirpyCguYZ4GBQW4fp2/c2vd4WiO9XKtiBRRKe2cnYjCbflQMfZJWZ9BFabatjdE7STaBvQ1NVnhd3QpLV8PcoAdfsGHqVo1Fh35GVGHym0pKQQclwaCcEhHspRf5MYOCXBxTQRWx+nzW",
              "domain",
              "substack.com",
              "path",
              ",\n      "
            ],
            "numbers": [
              6,
              4,
              1,
              4,
              4,
              2,
              2,
              4,
              9,
              2
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "substack",
          "line": 102,
          "snippet": "  \"localStorage\": {\n    \"podcasts:listening_progress:378795112\": \"{}\",\n    \"substack_ref\": \"\\\"https://substack.com/sign-in\\\"\",\n    \"substack_ref_url\": \"\\\"https://substack.com/home\\\"\"\n  },",
          "values": {
            "strings": [
              "localStorage",
              "podcasts:listening_progress:378795112",
              "{}",
              "substack_ref",
              "https://substack.com/sign-in\\",
              ",\n    ",
              ": ",
              "https://substack.com/home\\"
            ],
            "numbers": [
              378795112
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "substack",
          "line": 103,
          "snippet": "    \"podcasts:listening_progress:378795112\": \"{}\",\n    \"substack_ref\": \"\\\"https://substack.com/sign-in\\\"\",\n    \"substack_ref_url\": \"\\\"https://substack.com/home\\\"\"\n  },\n  \"sessionStorage\": {",
          "values": {
            "strings": [
              "podcasts:listening_progress:378795112",
              "{}",
              "substack_ref",
              "https://substack.com/sign-in\\",
              ",\n    ",
              ": ",
              "https://substack.com/home\\",
              "\n  },\n  "
            ],
            "numbers": [
              378795112
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "substack",
          "line": 106,
          "snippet": "  },\n  \"sessionStorage\": {\n    \"substack_ref_url\": \"\\\"https://substack.com/home\\\"\",\n    \"substack_ref\": \"\\\"https://substack.com/sign-in\\\"\"\n  },",
          "values": {
            "strings": [
              "sessionStorage",
              "substack_ref_url",
              "https://substack.com/home\\",
              ",\n    ",
              ": ",
              "https://substack.com/sign-in\\"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "substack",
          "line": 107,
          "snippet": "  \"sessionStorage\": {\n    \"substack_ref_url\": \"\\\"https://substack.com/home\\\"\",\n    \"substack_ref\": \"\\\"https://substack.com/sign-in\\\"\"\n  },\n  \"userAgent\": \"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/139.0.0.0 Safari/537.36\",",
          "values": {
            "strings": [
              "sessionStorage",
              "substack_ref_url",
              "https://substack.com/home\\",
              ",\n    ",
              ": ",
              "https://substack.com/sign-in\\",
              "\n  },\n  ",
              ": "
            ],
            "numbers": [
              5,
              0,
              10,
              15,
              7,
              537,
              36,
              139,
              0,
              0
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "substack",
          "line": 110,
          "snippet": "  },\n  \"userAgent\": \"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/139.0.0.0 Safari/537.36\",\n  \"url\": \"https://substack.com/home\"\n}",
          "values": {
            "strings": [
              "userAgent",
              "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/139.0.0.0 Safari/537.36",
              "url",
              "https://substack.com/home"
            ],
            "numbers": [
              5,
              0,
              10,
              15,
              7,
              537,
              36,
              139,
              0,
              0
            ]
          }
        }
      ]
    },
    {
      "file": "/Users/hretheum/dev/bezrobocie/vector-wave/publisher/src/adapters/substack-adapter.js",
      "exists": true,
      "hits": [
        {
          "type": "required_elements",
          "platform": "substack",
          "line": 3,
          "snippet": "#!/usr/bin/env node\n\nconst { Stagehand } = require('@browserbasehq/stagehand');\nconst fs = require('fs').promises;\nconst path = require('path');",
          "values": {
            "strings": [
              "@browserbasehq/stagehand",
              "fs",
              "path"
            ],
            "numbers": []
          }
        },
        {
          "type": "required_elements",
          "platform": "substack",
          "line": 4,
          "snippet": "\nconst { Stagehand } = require('@browserbasehq/stagehand');\nconst fs = require('fs').promises;\nconst path = require('path');\n",
          "values": {
            "strings": [
              "@browserbasehq/stagehand",
              "fs",
              "path"
            ],
            "numbers": []
          }
        },
        {
          "type": "required_elements",
          "platform": "substack",
          "line": 5,
          "snippet": "const { Stagehand } = require('@browserbasehq/stagehand');\nconst fs = require('fs').promises;\nconst path = require('path');\n\nclass SubstackAdapter {",
          "values": {
            "strings": [
              "@browserbasehq/stagehand",
              "fs",
              "path"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "substack",
          "line": 7,
          "snippet": "const path = require('path');\n\nclass SubstackAdapter {\n  constructor() {\n    this.stagehand = null;",
          "values": {
            "strings": [
              "path"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "substack",
          "line": 23,
          "snippet": "    \n    // Wczytaj dane sesji\n    const sessionFile = path.resolve(__dirname, '../../data/sessions', `${accountName}_substack.json`);\n    try {\n      const sessionFileContent = await fs.readFile(sessionFile, 'utf8');",
          "values": {
            "strings": [
              "../../data/sessions",
              "utf8"
            ],
            "numbers": [
              8
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "substack",
          "line": 34,
          "snippet": "      \n      if (now > validUntil) {\n        const errorMsg = `Sesja wygasła (${validUntil.toLocaleDateString()}). Odnów sesję poleceniem: node scripts/substack-cli.js session renew --account ${accountName}`;\n        \n        if (autoRenew) {",
          "values": {
            "strings": [],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "substack",
          "line": 37,
          "snippet": "        \n        if (autoRenew) {\n          console.log(`[Substack Adapter] ⚠️ ${errorMsg}`);\n          console.log(`[Substack Adapter] 🔄 Próba automatycznego odnowienia...`);\n          // Tu można zaimplementować automatyczne odnowienie",
          "values": {
            "strings": [],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "substack",
          "line": 38,
          "snippet": "        if (autoRenew) {\n          console.log(`[Substack Adapter] ⚠️ ${errorMsg}`);\n          console.log(`[Substack Adapter] 🔄 Próba automatycznego odnowienia...`);\n          // Tu można zaimplementować automatyczne odnowienie\n          throw new Error('Automatyczne odnowienie nie zostało jeszcze zaimplementowane. Użyj: session renew');",
          "values": {
            "strings": [
              "Automatyczne odnowienie nie zostało jeszcze zaimplementowane. Użyj: session renew"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "substack",
          "line": 48,
          "snippet": "      // Sprawdź czy sesja wygasa wkrótce\n      if (daysLeft <= 7) {\n        console.log(`[Substack Adapter] ⚠️ Sesja wygasa za ${daysLeft} dni (${validUntil.toLocaleDateString()})`);\n        console.log(`[Substack Adapter] 💡 Rozważ odnowienie: node scripts/substack-cli.js session renew --account ${accountName}`);\n      } else if (daysLeft <= 14) {",
          "values": {
            "strings": [],
            "numbers": [
              7,
              14
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "substack",
          "line": 49,
          "snippet": "      if (daysLeft <= 7) {\n        console.log(`[Substack Adapter] ⚠️ Sesja wygasa za ${daysLeft} dni (${validUntil.toLocaleDateString()})`);\n        console.log(`[Substack Adapter] 💡 Rozważ odnowienie: node scripts/substack-cli.js session renew --account ${accountName}`);\n      } else if (daysLeft <= 14) {\n        console.log(`[Substack Adapter] ⏰ Sesja wygasa za ${daysLeft} dni (${validUntil.toLocaleDateString()})`);",
          "values": {
            "strings": [],
            "numbers": [
              7,
              14
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "substack",
          "line": 51,
          "snippet": "        console.log(`[Substack Adapter] 💡 Rozważ odnowienie: node scripts/substack-cli.js session renew --account ${accountName}`);\n      } else if (daysLeft <= 14) {\n        console.log(`[Substack Adapter] ⏰ Sesja wygasa za ${daysLeft} dni (${validUntil.toLocaleDateString()})`);\n      }\n      ",
          "values": {
            "strings": [],
            "numbers": [
              14
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "substack",
          "line": 54,
          "snippet": "      }\n      \n      console.log(`[Substack Adapter] Załadowano sesję dla konta: ${accountName} (ważna ${daysLeft} dni)`);\n      return true;\n    } catch (err) {",
          "values": {
            "strings": [],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "substack",
          "line": 58,
          "snippet": "    } catch (err) {\n      if (err.code === 'ENOENT') {\n        throw new Error(`Nie znaleziono pliku sesji dla konta: ${accountName}. Utwórz sesję poleceniem: node scripts/substack-cli.js session create --account ${accountName}`);\n      }\n      throw err;",
          "values": {
            "strings": [
              "ENOENT"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "substack",
          "line": 72,
          "snippet": "    }\n\n    console.log('[Substack Adapter] Uruchamianie przeglądarki...');\n    \n    // Uruchom Stagehand w trybie headless (zmień na false dla debugowania)",
          "values": {
            "strings": [
              "[Substack Adapter] Uruchamianie przeglądarki..."
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "substack",
          "line": 95,
          "snippet": "    await this.restoreSession();\n    \n    console.log('[Substack Adapter] ✅ Przeglądarka uruchomiona i sesja przywrócona');\n  }\n",
          "values": {
            "strings": [
              "[Substack Adapter] ✅ Przeglądarka uruchomiona i sesja przywrócona"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "substack",
          "line": 106,
          "snippet": "    }\n\n    console.log('[Substack Adapter] Przywracanie sesji...');\n\n    // Pobierz subdomenę z konfiguracji",
          "values": {
            "strings": [
              "[Substack Adapter] Przywracanie sesji..."
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "substack",
          "line": 109,
          "snippet": "\n    // Pobierz subdomenę z konfiguracji\n    const subdomain = process.env.SUBSTACK_SUBDOMAIN;\n    if (!subdomain) {\n      throw new Error('Brak SUBSTACK_SUBDOMAIN w .env! Dodaj swoją subdomenę Substack (np. SUBSTACK_SUBDOMAIN=twoja-nazwa)');",
          "values": {
            "strings": [
              "Brak SUBSTACK_SUBDOMAIN w .env! Dodaj swoją subdomenę Substack (np. SUBSTACK_SUBDOMAIN=twoja-nazwa)"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "substack",
          "line": 111,
          "snippet": "    const subdomain = process.env.SUBSTACK_SUBDOMAIN;\n    if (!subdomain) {\n      throw new Error('Brak SUBSTACK_SUBDOMAIN w .env! Dodaj swoją subdomenę Substack (np. SUBSTACK_SUBDOMAIN=twoja-nazwa)');\n    }\n",
          "values": {
            "strings": [
              "Brak SUBSTACK_SUBDOMAIN w .env! Dodaj swoją subdomenę Substack (np. SUBSTACK_SUBDOMAIN=twoja-nazwa)"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "substack",
          "line": 118,
          "snippet": "    \n    // Przejdź bezpośrednio na subdomenę użytkownika\n    const userSubstackUrl = `https://${subdomain}.substack.com`;\n    console.log(`[Substack Adapter] Przechodzę bezpośrednio na: ${userSubstackUrl}`);\n    await this.stagehand.page.goto(userSubstackUrl);",
          "values": {
            "strings": [],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "substack",
          "line": 119,
          "snippet": "    // Przejdź bezpośrednio na subdomenę użytkownika\n    const userSubstackUrl = `https://${subdomain}.substack.com`;\n    console.log(`[Substack Adapter] Przechodzę bezpośrednio na: ${userSubstackUrl}`);\n    await this.stagehand.page.goto(userSubstackUrl);\n    ",
          "values": {
            "strings": [],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "substack",
          "line": 120,
          "snippet": "    const userSubstackUrl = `https://${subdomain}.substack.com`;\n    console.log(`[Substack Adapter] Przechodzę bezpośrednio na: ${userSubstackUrl}`);\n    await this.stagehand.page.goto(userSubstackUrl);\n    \n    // Wczytaj localStorage i sessionStorage",
          "values": {
            "strings": [],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "substack",
          "line": 143,
          "snippet": "    \n    // Sprawdź czy jesteśmy zalogowani\n    console.log('[Substack Adapter] Sprawdzam status logowania...');\n    \n    const loginCheck = await this.stagehand.page.evaluate(() => {",
          "values": {
            "strings": [
              "[Substack Adapter] Sprawdzam status logowania..."
            ],
            "numbers": []
          }
        },
        {
          "type": "required_elements",
          "platform": "substack",
          "line": 149,
          "snippet": "      const userMenuAlt = document.querySelector('.user-menu');\n      const userLabel = document.querySelector('[aria-label*=\"user\"]');\n      const hasDashboard = document.body.innerText.includes('Dashboard');\n      const hasAccount = document.body.innerText.includes('Your account');\n      const hasProfile = document.body.innerText.includes('Profile');",
          "values": {
            "strings": [
              ".user-menu",
              "[aria-label*=",
              ");\n      const hasDashboard = document.body.innerText.includes(",
              ");\n      const hasAccount = document.body.innerText.includes(",
              ");\n      const hasProfile = document.body.innerText.includes("
            ],
            "numbers": []
          }
        },
        {
          "type": "required_elements",
          "platform": "substack",
          "line": 150,
          "snippet": "      const userLabel = document.querySelector('[aria-label*=\"user\"]');\n      const hasDashboard = document.body.innerText.includes('Dashboard');\n      const hasAccount = document.body.innerText.includes('Your account');\n      const hasProfile = document.body.innerText.includes('Profile');\n      const hasSettings = document.body.innerText.includes('Settings');",
          "values": {
            "strings": [
              "[aria-label*=",
              ");\n      const hasDashboard = document.body.innerText.includes(",
              ");\n      const hasAccount = document.body.innerText.includes(",
              ");\n      const hasProfile = document.body.innerText.includes(",
              ");\n      const hasSettings = document.body.innerText.includes("
            ],
            "numbers": []
          }
        },
        {
          "type": "required_elements",
          "platform": "substack",
          "line": 151,
          "snippet": "      const hasDashboard = document.body.innerText.includes('Dashboard');\n      const hasAccount = document.body.innerText.includes('Your account');\n      const hasProfile = document.body.innerText.includes('Profile');\n      const hasSettings = document.body.innerText.includes('Settings');\n      ",
          "values": {
            "strings": [
              "Dashboard",
              "Your account",
              "Profile",
              "Settings"
            ],
            "numbers": []
          }
        },
        {
          "type": "required_elements",
          "platform": "substack",
          "line": 152,
          "snippet": "      const hasAccount = document.body.innerText.includes('Your account');\n      const hasProfile = document.body.innerText.includes('Profile');\n      const hasSettings = document.body.innerText.includes('Settings');\n      \n      return {",
          "values": {
            "strings": [
              "Your account",
              "Profile",
              "Settings"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "substack",
          "line": 168,
          "snippet": "    });\n\n    console.log('[Substack Adapter] Status logowania:', loginCheck);\n\n    const isLoggedIn = loginCheck.userMenu || loginCheck.userMenuAlt || loginCheck.userLabel || ",
          "values": {
            "strings": [
              "[Substack Adapter] Status logowania:"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "substack",
          "line": 175,
          "snippet": "\n    if (!isLoggedIn) {\n      console.log('[Substack Adapter] ❌ Nie znaleziono żadnych wskaźników zalogowania');\n      console.log('[Substack Adapter] URL:', loginCheck.currentUrl);\n      console.log('[Substack Adapter] Tytuł:', loginCheck.title);",
          "values": {
            "strings": [
              "[Substack Adapter] ❌ Nie znaleziono żadnych wskaźników zalogowania",
              "[Substack Adapter] URL:",
              "[Substack Adapter] Tytuł:"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "substack",
          "line": 176,
          "snippet": "    if (!isLoggedIn) {\n      console.log('[Substack Adapter] ❌ Nie znaleziono żadnych wskaźników zalogowania');\n      console.log('[Substack Adapter] URL:', loginCheck.currentUrl);\n      console.log('[Substack Adapter] Tytuł:', loginCheck.title);\n      console.log('[Substack Adapter] Zawartość strony (pierwsze 500 znaków):', loginCheck.bodyText);",
          "values": {
            "strings": [
              "[Substack Adapter] ❌ Nie znaleziono żadnych wskaźników zalogowania",
              "[Substack Adapter] URL:",
              "[Substack Adapter] Tytuł:",
              "[Substack Adapter] Zawartość strony (pierwsze 500 znaków):"
            ],
            "numbers": [
              500
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "substack",
          "line": 177,
          "snippet": "      console.log('[Substack Adapter] ❌ Nie znaleziono żadnych wskaźników zalogowania');\n      console.log('[Substack Adapter] URL:', loginCheck.currentUrl);\n      console.log('[Substack Adapter] Tytuł:', loginCheck.title);\n      console.log('[Substack Adapter] Zawartość strony (pierwsze 500 znaków):', loginCheck.bodyText);\n      throw new Error('Nie udało się przywrócić sesji - użytkownik nie jest zalogowany');",
          "values": {
            "strings": [
              "[Substack Adapter] ❌ Nie znaleziono żadnych wskaźników zalogowania",
              "[Substack Adapter] URL:",
              "[Substack Adapter] Tytuł:",
              "[Substack Adapter] Zawartość strony (pierwsze 500 znaków):",
              "Nie udało się przywrócić sesji - użytkownik nie jest zalogowany"
            ],
            "numbers": [
              500
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "substack",
          "line": 178,
          "snippet": "      console.log('[Substack Adapter] URL:', loginCheck.currentUrl);\n      console.log('[Substack Adapter] Tytuł:', loginCheck.title);\n      console.log('[Substack Adapter] Zawartość strony (pierwsze 500 znaków):', loginCheck.bodyText);\n      throw new Error('Nie udało się przywrócić sesji - użytkownik nie jest zalogowany');\n    }",
          "values": {
            "strings": [
              "[Substack Adapter] URL:",
              "[Substack Adapter] Tytuł:",
              "[Substack Adapter] Zawartość strony (pierwsze 500 znaków):",
              "Nie udało się przywrócić sesji - użytkownik nie jest zalogowany"
            ],
            "numbers": [
              500
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "substack",
          "line": 182,
          "snippet": "    }\n\n    console.log('[Substack Adapter] ✅ Sesja przywrócona pomyślnie');\n  }\n",
          "values": {
            "strings": [
              "[Substack Adapter] ✅ Sesja przywrócona pomyślnie"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "substack",
          "line": 188,
          "snippet": "\n  /**\n   * Publikuj post na Substack\n   * @param {Object} postData - dane posta\n   * @param {string} postData.title - tytuł posta",
          "values": {
            "strings": [],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "substack",
          "line": 203,
          "snippet": "    const { title, content, draft = true, tags = [], scheduledTime = null } = postData;\n    \n    console.log(`[Substack Adapter] Publikacja posta: \"${title}\" (draft: ${draft})`);\n    \n    // Pobierz subdomenę z konfiguracji",
          "values": {
            "strings": [
              "${title}"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "substack",
          "line": 206,
          "snippet": "    \n    // Pobierz subdomenę z konfiguracji\n    const subdomain = process.env.SUBSTACK_SUBDOMAIN;\n    if (!subdomain) {\n      throw new Error('Brak SUBSTACK_SUBDOMAIN w .env! Dodaj swoją subdomenę Substack (np. SUBSTACK_SUBDOMAIN=twoja-nazwa)');",
          "values": {
            "strings": [
              "Brak SUBSTACK_SUBDOMAIN w .env! Dodaj swoją subdomenę Substack (np. SUBSTACK_SUBDOMAIN=twoja-nazwa)"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "substack",
          "line": 208,
          "snippet": "    const subdomain = process.env.SUBSTACK_SUBDOMAIN;\n    if (!subdomain) {\n      throw new Error('Brak SUBSTACK_SUBDOMAIN w .env! Dodaj swoją subdomenę Substack (np. SUBSTACK_SUBDOMAIN=twoja-nazwa)');\n    }\n    ",
          "values": {
            "strings": [
              "Brak SUBSTACK_SUBDOMAIN w .env! Dodaj swoją subdomenę Substack (np. SUBSTACK_SUBDOMAIN=twoja-nazwa)"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "substack",
          "line": 212,
          "snippet": "    \n    // Przejdź bezpośrednio do edytora publikacji\n    const editorUrl = `https://${subdomain}.substack.com/publish/post`;\n    console.log(`[Substack Adapter] Przechodzę bezpośrednio do edytora: ${editorUrl}`);\n    ",
          "values": {
            "strings": [],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "substack",
          "line": 213,
          "snippet": "    // Przejdź bezpośrednio do edytora publikacji\n    const editorUrl = `https://${subdomain}.substack.com/publish/post`;\n    console.log(`[Substack Adapter] Przechodzę bezpośrednio do edytora: ${editorUrl}`);\n    \n    await this.stagehand.page.goto(editorUrl);",
          "values": {
            "strings": [],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "substack",
          "line": 219,
          "snippet": "    \n    // Teraz poczekaj na edytor\n    console.log('[Substack Adapter] Oczekiwanie na edytor...');\n    await this.stagehand.page.waitForSelector('input[placeholder*=\"title\"], input[placeholder*=\"Title\"], [data-testid=\"title-input\"]', { timeout: 15000 });\n    ",
          "values": {
            "strings": [
              "[Substack Adapter] Oczekiwanie na edytor...",
              "input[placeholder*=",
              "], input[placeholder*=",
              "], [data-testid="
            ],
            "numbers": [
              15000
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "substack",
          "line": 233,
          "snippet": "    \n    // Krok 1: Kliknij \"Continue\" żeby przejść do następnego kroku\n    console.log('[Substack Adapter] Klikam \"Continue\" żeby przejść dalej...');\n    \n    const continueSelectors = [",
          "values": {
            "strings": [
              "Continue",
              "[Substack Adapter] Klikam ",
              " żeby przejść dalej..."
            ],
            "numbers": [
              1
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "substack",
          "line": 248,
          "snippet": "        continueButton = await this.stagehand.page.locator(selector).first();\n        if (await continueButton.count() > 0) {\n          console.log(`[Substack Adapter] Znaleziono przycisk Continue: ${selector}`);\n          break;\n        }",
          "values": {
            "strings": [],
            "numbers": [
              0
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "substack",
          "line": 261,
          "snippet": "    \n    await continueButton.click();\n    console.log('[Substack Adapter] Kliknięto Continue - oczekiwanie na następny krok...');\n    await this.stagehand.page.waitForTimeout(5000);\n    ",
          "values": {
            "strings": [
              "[Substack Adapter] Kliknięto Continue - oczekiwanie na następny krok..."
            ],
            "numbers": [
              5000
            ]
          }
        },
        {
          "type": "required_elements",
          "platform": "substack",
          "line": 276,
          "snippet": "          id: input.id\n        })).slice(0, 10), // Tylko pierwsze 10\n        hasAddTagsText: document.body.innerText.includes('Add tags'),\n        bodyTextSnippet: document.body.innerText.substring(0, 1000)\n      };",
          "values": {
            "strings": [
              "Add tags"
            ],
            "numbers": [
              0,
              10,
              10,
              0,
              1000
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "substack",
          "line": 280,
          "snippet": "      };\n    });\n    console.log('[Substack Adapter] DEBUG - Stan strony po Continue:', pageInfo);\n    \n    // Krok 2: Obsługa tagów (Select2-style dropdown)",
          "values": {
            "strings": [
              "[Substack Adapter] DEBUG - Stan strony po Continue:"
            ],
            "numbers": [
              2,
              2
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "substack",
          "line": 284,
          "snippet": "    // Krok 2: Obsługa tagów (Select2-style dropdown)\n    if (tags && tags.length > 0) {\n      console.log(`[Substack Adapter] Dodaję tagi: ${tags.join(', ')}`);\n      \n      // Przewiń stronę żeby upewnić się, że sekcja tagów jest widoczna",
          "values": {
            "strings": [
              ", "
            ],
            "numbers": [
              2,
              2,
              0
            ]
          }
        },
        {
          "type": "required_elements",
          "platform": "substack",
          "line": 289,
          "snippet": "      await this.stagehand.page.evaluate(() => {\n        const addTagsElement = Array.from(document.querySelectorAll('*')).find(el => \n          el.textContent && el.textContent.includes('Add tags')\n        );\n        if (addTagsElement) {",
          "values": {
            "strings": [
              ")).find(el => \n          el.textContent && el.textContent.includes("
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "substack",
          "line": 298,
          "snippet": "      \n      // Spróbuj bezpośrednio kliknąć w tekst \"Select...\"\n      console.log('[Substack Adapter] Próbuję kliknąć bezpośrednio w \"Select...\"');\n      \n      const selectTextSelectors = [",
          "values": {
            "strings": [
              "Select...",
              "[Substack Adapter] Próbuję kliknąć bezpośrednio w "
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "substack",
          "line": 313,
          "snippet": "          selectElement = await this.stagehand.page.locator(selector).first();\n          if (await selectElement.count() > 0) {\n            console.log(`[Substack Adapter] Znaleziono element Select...: ${selector}`);\n            break;\n          }",
          "values": {
            "strings": [],
            "numbers": [
              0
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "substack",
          "line": 329,
          "snippet": "        \n        if (!hasValidDimensions) {\n          console.log('[Substack Adapter] 🤖 Element ma zerowe wymiary - prawdopodobnie anti-bot protection');\n          console.log('[Substack Adapter] 💡 Pomijam tagi i kontynuuję publikację');\n        } else {",
          "values": {
            "strings": [
              "[Substack Adapter] 🤖 Element ma zerowe wymiary - prawdopodobnie anti-bot protection",
              "[Substack Adapter] 💡 Pomijam tagi i kontynuuję publikację"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "substack",
          "line": 330,
          "snippet": "        if (!hasValidDimensions) {\n          console.log('[Substack Adapter] 🤖 Element ma zerowe wymiary - prawdopodobnie anti-bot protection');\n          console.log('[Substack Adapter] 💡 Pomijam tagi i kontynuuję publikację');\n        } else {\n        ",
          "values": {
            "strings": [
              "[Substack Adapter] 🤖 Element ma zerowe wymiary - prawdopodobnie anti-bot protection",
              "[Substack Adapter] 💡 Pomijam tagi i kontynuuję publikację"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "substack",
          "line": 335,
          "snippet": "        // Dodaj każdy tag przez kliknięcie w Select... element\n        for (const tag of tags) {\n          console.log(`[Substack Adapter] Dodaję tag: ${tag}`);\n          \n          // Spróbuj bezpośredniego kliknięcia w współrzędne elementu",
          "values": {
            "strings": [],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "substack",
          "line": 340,
          "snippet": "          const boundingBox = await selectElement.boundingBox();\n          if (boundingBox) {\n            console.log(`[Substack Adapter] Klikam w współrzędne: ${boundingBox.x + boundingBox.width/2}, ${boundingBox.y + boundingBox.height/2}`);\n            await this.stagehand.page.mouse.click(boundingBox.x + boundingBox.width/2, boundingBox.y + boundingBox.height/2);\n          } else {",
          "values": {
            "strings": [],
            "numbers": [
              2,
              2,
              2,
              2
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "substack",
          "line": 343,
          "snippet": "            await this.stagehand.page.mouse.click(boundingBox.x + boundingBox.width/2, boundingBox.y + boundingBox.height/2);\n          } else {\n            console.log('[Substack Adapter] Brak boundingBox - próbuję dispatchEvent');\n            // Alternatywnie wyślij event bezpośrednio\n            await selectElement.evaluate(el => {",
          "values": {
            "strings": [
              "[Substack Adapter] Brak boundingBox - próbuję dispatchEvent"
            ],
            "numbers": [
              2,
              2
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "substack",
          "line": 368,
          "snippet": "              tagOption = await this.stagehand.page.locator(optionSelector).first();\n              if (await tagOption.count() > 0) {\n                console.log(`[Substack Adapter] Znaleziono opcję taga: ${optionSelector}`);\n                break;\n              }",
          "values": {
            "strings": [],
            "numbers": [
              0
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "substack",
          "line": 378,
          "snippet": "          if (tagOption && await tagOption.count() > 0) {\n            await tagOption.click();\n            console.log(`[Substack Adapter] Kliknięto opcję taga: ${tag}`);\n          } else {\n            // Naciśnij Enter żeby dodać nowy tag",
          "values": {
            "strings": [],
            "numbers": [
              0
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "substack",
          "line": 381,
          "snippet": "          } else {\n            // Naciśnij Enter żeby dodać nowy tag\n            console.log(`[Substack Adapter] Używam Enter dla nowego taga: ${tag}`);\n            await this.stagehand.page.keyboard.press('Enter');\n          }",
          "values": {
            "strings": [
              "Enter"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "substack",
          "line": 387,
          "snippet": "          await this.stagehand.page.waitForTimeout(500);\n        }\n        console.log('[Substack Adapter] ✅ Tagi dodane');\n        }\n      } else {",
          "values": {
            "strings": [
              "[Substack Adapter] ✅ Tagi dodane"
            ],
            "numbers": [
              500
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "substack",
          "line": 390,
          "snippet": "        }\n      } else {\n        console.log('[Substack Adapter] ⚠️ Nie znaleziono elementu \"Select...\" dla tagów');\n        console.log('[Substack Adapter] 🤖 Prawdopodobnie anti-bot protection - element ma zerowe wymiary');\n        console.log('[Substack Adapter] 💡 Tagi będą pominięte, ale publikacja kontynuowana');",
          "values": {
            "strings": [
              "[Substack Adapter] ⚠️ Nie znaleziono elementu ",
              " dla tagów",
              "[Substack Adapter] 🤖 Prawdopodobnie anti-bot protection - element ma zerowe wymiary",
              "[Substack Adapter] 💡 Tagi będą pominięte, ale publikacja kontynuowana"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "substack",
          "line": 391,
          "snippet": "      } else {\n        console.log('[Substack Adapter] ⚠️ Nie znaleziono elementu \"Select...\" dla tagów');\n        console.log('[Substack Adapter] 🤖 Prawdopodobnie anti-bot protection - element ma zerowe wymiary');\n        console.log('[Substack Adapter] 💡 Tagi będą pominięte, ale publikacja kontynuowana');\n      }",
          "values": {
            "strings": [
              "[Substack Adapter] ⚠️ Nie znaleziono elementu ",
              " dla tagów",
              "[Substack Adapter] 🤖 Prawdopodobnie anti-bot protection - element ma zerowe wymiary",
              "[Substack Adapter] 💡 Tagi będą pominięte, ale publikacja kontynuowana"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "substack",
          "line": 392,
          "snippet": "        console.log('[Substack Adapter] ⚠️ Nie znaleziono elementu \"Select...\" dla tagów');\n        console.log('[Substack Adapter] 🤖 Prawdopodobnie anti-bot protection - element ma zerowe wymiary');\n        console.log('[Substack Adapter] 💡 Tagi będą pominięte, ale publikacja kontynuowana');\n      }\n    }",
          "values": {
            "strings": [
              "[Substack Adapter] ⚠️ Nie znaleziono elementu ",
              " dla tagów",
              "[Substack Adapter] 🤖 Prawdopodobnie anti-bot protection - element ma zerowe wymiary",
              "[Substack Adapter] 💡 Tagi będą pominięte, ale publikacja kontynuowana"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "substack",
          "line": 398,
          "snippet": "    // Krok 3: Obsługa harmonogramu publikacji\n    if (scheduledTime) {\n      console.log(`[Substack Adapter] Ustawiam czas publikacji: ${scheduledTime}`);\n      \n      // Znajdź checkbox \"Schedule time to email and publish\"",
          "values": {
            "strings": [
              "Schedule time to email and publish"
            ],
            "numbers": [
              3
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "substack",
          "line": 413,
          "snippet": "          scheduleCheckbox = await this.stagehand.page.locator(selector).first();\n          if (await scheduleCheckbox.count() > 0) {\n            console.log(`[Substack Adapter] Znaleziono checkbox harmonogramu: ${selector}`);\n            break;\n          }",
          "values": {
            "strings": [],
            "numbers": [
              0
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "substack",
          "line": 424,
          "snippet": "        // Zaznacz checkbox\n        await scheduleCheckbox.check();\n        console.log('[Substack Adapter] Zaznaczono checkbox harmonogramu');\n        await this.stagehand.page.waitForTimeout(1000);\n        ",
          "values": {
            "strings": [
              "[Substack Adapter] Zaznaczono checkbox harmonogramu"
            ],
            "numbers": [
              1000
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "substack",
          "line": 442,
          "snippet": "            timeInput = await this.stagehand.page.locator(selector).first();\n            if (await timeInput.count() > 0) {\n              console.log(`[Substack Adapter] Znaleziono pole czasu: ${selector}`);\n              break;\n            }",
          "values": {
            "strings": [],
            "numbers": [
              0
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "substack",
          "line": 455,
          "snippet": "          const formattedTime = date.toISOString().slice(0, 16); // YYYY-MM-DDTHH:mm\n          await timeInput.fill(formattedTime);\n          console.log(`[Substack Adapter] ✅ Ustawiono czas publikacji: ${formattedTime}`);\n        } else {\n          console.log('[Substack Adapter] ⚠️ Nie znaleziono pola wyboru czasu');",
          "values": {
            "strings": [
              "[Substack Adapter] ⚠️ Nie znaleziono pola wyboru czasu"
            ],
            "numbers": [
              0,
              16
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "substack",
          "line": 457,
          "snippet": "          console.log(`[Substack Adapter] ✅ Ustawiono czas publikacji: ${formattedTime}`);\n        } else {\n          console.log('[Substack Adapter] ⚠️ Nie znaleziono pola wyboru czasu');\n        }\n      } else {",
          "values": {
            "strings": [
              "[Substack Adapter] ⚠️ Nie znaleziono pola wyboru czasu"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "substack",
          "line": 460,
          "snippet": "        }\n      } else {\n        console.log('[Substack Adapter] ⚠️ Nie znaleziono checkbox harmonogramu');\n      }\n    }",
          "values": {
            "strings": [
              "[Substack Adapter] ⚠️ Nie znaleziono checkbox harmonogramu"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "substack",
          "line": 466,
          "snippet": "    // Krok 4: Finalizacja publikacji\n    if (draft) {\n      console.log('[Substack Adapter] Tryb DRAFT - nie klikam \"Send to everyone now\"');\n      console.log('[Substack Adapter] Post zostanie automatycznie zapisany jako draft');\n      // W Substack NIE MA przycisku \"Save as draft\" - po prostu nie klikamy \"Send to everyone now\"",
          "values": {
            "strings": [
              "[Substack Adapter] Tryb DRAFT - nie klikam ",
              ");\n      console.log(",
              ");\n      // W Substack NIE MA przycisku ",
              " - po prostu nie klikamy "
            ],
            "numbers": [
              4
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "substack",
          "line": 467,
          "snippet": "    if (draft) {\n      console.log('[Substack Adapter] Tryb DRAFT - nie klikam \"Send to everyone now\"');\n      console.log('[Substack Adapter] Post zostanie automatycznie zapisany jako draft');\n      // W Substack NIE MA przycisku \"Save as draft\" - po prostu nie klikamy \"Send to everyone now\"\n    } else {",
          "values": {
            "strings": [
              "[Substack Adapter] Tryb DRAFT - nie klikam ",
              ");\n      console.log(",
              ");\n      // W Substack NIE MA przycisku ",
              " - po prostu nie klikamy "
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "substack",
          "line": 468,
          "snippet": "      console.log('[Substack Adapter] Tryb DRAFT - nie klikam \"Send to everyone now\"');\n      console.log('[Substack Adapter] Post zostanie automatycznie zapisany jako draft');\n      // W Substack NIE MA przycisku \"Save as draft\" - po prostu nie klikamy \"Send to everyone now\"\n    } else {\n      console.log('[Substack Adapter] Szukam przycisku \"Send to everyone now\"...');",
          "values": {
            "strings": [
              "[Substack Adapter] Tryb DRAFT - nie klikam ",
              ");\n      console.log(",
              ");\n      // W Substack NIE MA przycisku ",
              " - po prostu nie klikamy ",
              "\n    } else {\n      console.log(",
              "Send to everyone now"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "substack",
          "line": 470,
          "snippet": "      // W Substack NIE MA przycisku \"Save as draft\" - po prostu nie klikamy \"Send to everyone now\"\n    } else {\n      console.log('[Substack Adapter] Szukam przycisku \"Send to everyone now\"...');\n      \n      const publishSelectors = [",
          "values": {
            "strings": [
              "Save as draft",
              "Send to everyone now",
              "[Substack Adapter] Szukam przycisku ",
              "..."
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "substack",
          "line": 487,
          "snippet": "          publishButton = await this.stagehand.page.locator(selector).first();\n          if (await publishButton.count() > 0) {\n            console.log(`[Substack Adapter] Znaleziono przycisk publikacji: ${selector}`);\n            break;\n          }",
          "values": {
            "strings": [],
            "numbers": [
              0
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "substack",
          "line": 497,
          "snippet": "      if (publishButton && await publishButton.count() > 0) {\n        await publishButton.click();\n        console.log('[Substack Adapter] Kliknięto \"Send to everyone now\" - publikowanie...');\n      } else {\n        console.log('[Substack Adapter] ⚠️ Nie znaleziono przycisku publikacji');",
          "values": {
            "strings": [
              "[Substack Adapter] Kliknięto ",
              " - publikowanie...",
              "[Substack Adapter] ⚠️ Nie znaleziono przycisku publikacji"
            ],
            "numbers": [
              0
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "substack",
          "line": 499,
          "snippet": "        console.log('[Substack Adapter] Kliknięto \"Send to everyone now\" - publikowanie...');\n      } else {\n        console.log('[Substack Adapter] ⚠️ Nie znaleziono przycisku publikacji');\n        \n        // Fallback - spróbuj ogólnych przycisków",
          "values": {
            "strings": [
              "[Substack Adapter] Kliknięto ",
              " - publikowanie...",
              "[Substack Adapter] ⚠️ Nie znaleziono przycisku publikacji"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "substack",
          "line": 512,
          "snippet": "            const fallbackButton = await this.stagehand.page.locator(selector).first();\n            if (await fallbackButton.count() > 0) {\n              console.log(`[Substack Adapter] Używam fallback przycisku: ${selector}`);\n              await fallbackButton.click();\n              break;",
          "values": {
            "strings": [],
            "numbers": [
              0
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "substack",
          "line": 526,
          "snippet": "    await this.stagehand.page.waitForTimeout(5000);\n    \n    console.log(`[Substack Adapter] ✅ Post \"${title}\" został ${draft ? 'zapisany jako draft' : 'opublikowany'}`);\n    \n    return {",
          "values": {
            "strings": [
              "${title}",
              "zapisany jako draft",
              "opublikowany"
            ],
            "numbers": [
              5000
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "substack",
          "line": 573,
          "snippet": "    if (this.stagehand) {\n      await this.stagehand.close();\n      console.log('[Substack Adapter] Przeglądarka zamknięta');\n    }\n  }",
          "values": {
            "strings": [
              "[Substack Adapter] Przeglądarka zamknięta"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "substack",
          "line": 578,
          "snippet": "}\n\nmodule.exports = { SubstackAdapter };",
          "values": {
            "strings": [],
            "numbers": []
          }
        }
      ]
    },
    {
      "file": "/Users/hretheum/dev/bezrobocie/vector-wave/publisher/src/adapters/twitter/platform_health_models.py",
      "exists": true,
      "hits": [
        {
          "type": "platform_specific",
          "platform": "twitter",
          "line": 71,
          "snippet": "    # Basic service info\n    status: HealthStatus = Field(..., description=\"Overall health status\")\n    service: str = Field(..., description=\"Service name (e.g., 'twitter-adapter')\")\n    platform: str = Field(..., description=\"Platform name (e.g., 'twitter')\")\n    version: str = Field(default=\"1.0.0\", description=\"Adapter version\")",
          "values": {
            "strings": [
              "Overall health status",
              "Service name (e.g., ",
              ")\n    platform: str = Field(..., description=",
              "twitter",
              ")\n    version: str = Field(default=",
              ", description="
            ],
            "numbers": [
              1,
              0,
              0
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "twitter",
          "line": 72,
          "snippet": "    status: HealthStatus = Field(..., description=\"Overall health status\")\n    service: str = Field(..., description=\"Service name (e.g., 'twitter-adapter')\")\n    platform: str = Field(..., description=\"Platform name (e.g., 'twitter')\")\n    version: str = Field(default=\"1.0.0\", description=\"Adapter version\")\n    timestamp: str = Field(",
          "values": {
            "strings": [
              "Overall health status",
              "Service name (e.g., ",
              ")\n    platform: str = Field(..., description=",
              "twitter",
              ")\n    version: str = Field(default=",
              ", description="
            ],
            "numbers": [
              1,
              0,
              0
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 85,
          "snippet": "    rate_limits: Optional[RateLimitStatus] = Field(default=None, description=\"Rate limit information\")\n    \n    # Session status (for browser-based platforms like LinkedIn)\n    session: Optional[SessionStatus] = Field(default=None, description=\"Session validity status\")\n    ",
          "values": {
            "strings": [
              "Rate limit information",
              "Session validity status"
            ],
            "numbers": []
          }
        }
      ]
    },
    {
      "file": "/Users/hretheum/dev/bezrobocie/vector-wave/publisher/src/adapters/twitter/prometheus_metrics.py",
      "exists": true,
      "hits": [
        {
          "type": "platform_specific",
          "platform": "twitter",
          "line": 3,
          "snippet": "#!/usr/bin/env python3\n\"\"\"\nPrometheus Metrics for Twitter Adapter - Task 5.1.2\nImplementacja metryki Prometheus dla Twitter/X Adapter\n\"\"\"",
          "values": {
            "strings": [
              "\nPrometheus Metrics for Twitter Adapter - Task 5.1.2\nImplementacja metryki Prometheus dla Twitter/X Adapter\n"
            ],
            "numbers": [
              3,
              5,
              1,
              2
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "twitter",
          "line": 4,
          "snippet": "\"\"\"\nPrometheus Metrics for Twitter Adapter - Task 5.1.2\nImplementacja metryki Prometheus dla Twitter/X Adapter\n\"\"\"\n",
          "values": {
            "strings": [
              "\nPrometheus Metrics for Twitter Adapter - Task 5.1.2\nImplementacja metryki Prometheus dla Twitter/X Adapter\n"
            ],
            "numbers": [
              5,
              1,
              2
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "twitter",
          "line": 16,
          "snippet": "logger = logging.getLogger(__name__)\n\nclass TwitterAdapterMetrics:\n    \"\"\"Prometheus metrics for Twitter/X Adapter\"\"\"\n    ",
          "values": {
            "strings": [
              "Prometheus metrics for Twitter/X Adapter"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "twitter",
          "line": 17,
          "snippet": "\nclass TwitterAdapterMetrics:\n    \"\"\"Prometheus metrics for Twitter/X Adapter\"\"\"\n    \n    def __init__(self):",
          "values": {
            "strings": [
              "Prometheus metrics for Twitter/X Adapter"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "twitter",
          "line": 22,
          "snippet": "        # Publication metrics\n        self.publications_total = Counter(\n            'twitter_publications_total',\n            'Total number of Twitter publications',\n            ['status', 'type', 'scheduled']",
          "values": {
            "strings": [
              "twitter_publications_total",
              "Total number of Twitter publications",
              "status",
              "type",
              "scheduled"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "twitter",
          "line": 23,
          "snippet": "        self.publications_total = Counter(\n            'twitter_publications_total',\n            'Total number of Twitter publications',\n            ['status', 'type', 'scheduled']\n        )",
          "values": {
            "strings": [
              "twitter_publications_total",
              "Total number of Twitter publications",
              "status",
              "type",
              "scheduled"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "twitter",
          "line": 28,
          "snippet": "        \n        self.publication_duration = Histogram(\n            'twitter_publication_duration_seconds',\n            'Time spent processing Twitter publications',\n            ['type', 'status'],",
          "values": {
            "strings": [
              "twitter_publication_duration_seconds",
              "Time spent processing Twitter publications",
              "type",
              "status"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "twitter",
          "line": 29,
          "snippet": "        self.publication_duration = Histogram(\n            'twitter_publication_duration_seconds',\n            'Time spent processing Twitter publications',\n            ['type', 'status'],\n            buckets=(0.5, 1.0, 2.5, 5.0, 10.0, 30.0, 60.0, 120.0)",
          "values": {
            "strings": [
              "twitter_publication_duration_seconds",
              "Time spent processing Twitter publications",
              "type",
              "status"
            ],
            "numbers": [
              0,
              5,
              1,
              0,
              2,
              5,
              5,
              0,
              10,
              0
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "twitter",
          "line": 36,
          "snippet": "        # Typefully API metrics\n        self.typefully_requests_total = Counter(\n            'twitter_typefully_requests_total',\n            'Total number of Typefully API requests',\n            ['endpoint', 'status_code']",
          "values": {
            "strings": [
              "twitter_typefully_requests_total",
              "Total number of Typefully API requests",
              "endpoint",
              "status_code"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "twitter",
          "line": 42,
          "snippet": "        \n        self.typefully_response_time = Histogram(\n            'twitter_typefully_response_time_seconds',\n            'Typefully API response time',\n            ['endpoint'],",
          "values": {
            "strings": [
              "twitter_typefully_response_time_seconds",
              "Typefully API response time",
              "endpoint"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "twitter",
          "line": 49,
          "snippet": "        \n        self.typefully_rate_limit_hits = Counter(\n            'twitter_typefully_rate_limit_hits_total',\n            'Number of times Typefully rate limit was hit'\n        )",
          "values": {
            "strings": [
              "twitter_typefully_rate_limit_hits_total",
              "Number of times Typefully rate limit was hit"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "twitter",
          "line": 55,
          "snippet": "        # Content metrics\n        self.content_length = Histogram(\n            'twitter_content_length_chars',\n            'Length of published content in characters',\n            buckets=(50, 100, 200, 280, 500, 1000, 2500, 5000, 10000)",
          "values": {
            "strings": [
              "twitter_content_length_chars",
              "Length of published content in characters"
            ],
            "numbers": [
              50,
              100,
              200,
              280,
              500,
              1000,
              2500,
              5000,
              10000
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "twitter",
          "line": 61,
          "snippet": "        \n        self.threads_created = Counter(\n            'twitter_threads_created_total',\n            'Number of Twitter threads created'\n        )",
          "values": {
            "strings": [
              "twitter_threads_created_total",
              "Number of Twitter threads created"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "twitter",
          "line": 62,
          "snippet": "        self.threads_created = Counter(\n            'twitter_threads_created_total',\n            'Number of Twitter threads created'\n        )\n        ",
          "values": {
            "strings": [
              "twitter_threads_created_total",
              "Number of Twitter threads created"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "twitter",
          "line": 66,
          "snippet": "        \n        self.media_attachments = Counter(\n            'twitter_media_attachments_total',\n            'Number of media attachments processed',\n            ['media_type']",
          "values": {
            "strings": [
              "twitter_media_attachments_total",
              "Number of media attachments processed",
              "media_type"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "twitter",
          "line": 73,
          "snippet": "        # Draft status tracking\n        self.drafts_by_status = Gauge(\n            'twitter_drafts_by_status',\n            'Number of drafts by status',\n            ['status']",
          "values": {
            "strings": [
              "twitter_drafts_by_status",
              "Number of drafts by status",
              "status"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "twitter",
          "line": 80,
          "snippet": "        # Error tracking\n        self.errors_total = Counter(\n            'twitter_errors_total',\n            'Total number of errors',\n            ['error_code', 'error_type']",
          "values": {
            "strings": [
              "twitter_errors_total",
              "Total number of errors",
              "error_code",
              "error_type"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "twitter",
          "line": 87,
          "snippet": "        # Retry mechanism metrics\n        self.retries_total = Counter(\n            'twitter_retries_total',\n            'Total number of retry attempts',\n            ['operation', 'retry_reason']",
          "values": {
            "strings": [
              "twitter_retries_total",
              "Total number of retry attempts",
              "operation",
              "retry_reason"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "twitter",
          "line": 93,
          "snippet": "        \n        self.retry_delay = Histogram(\n            'twitter_retry_delay_seconds',\n            'Delay between retry attempts',\n            buckets=(1.0, 2.0, 5.0, 10.0, 30.0, 60.0)",
          "values": {
            "strings": [
              "twitter_retry_delay_seconds",
              "Delay between retry attempts"
            ],
            "numbers": [
              1,
              0,
              2,
              0,
              5,
              0,
              10,
              0,
              30,
              0
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "twitter",
          "line": 100,
          "snippet": "        # HTTP request metrics\n        self.http_requests_total = Counter(\n            'twitter_http_requests_total',\n            'Total number of HTTP requests to Twitter adapter',\n            ['method', 'endpoint', 'status_code']",
          "values": {
            "strings": [
              "twitter_http_requests_total",
              "Total number of HTTP requests to Twitter adapter",
              "method",
              "endpoint",
              "status_code"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "twitter",
          "line": 101,
          "snippet": "        self.http_requests_total = Counter(\n            'twitter_http_requests_total',\n            'Total number of HTTP requests to Twitter adapter',\n            ['method', 'endpoint', 'status_code']\n        )",
          "values": {
            "strings": [
              "twitter_http_requests_total",
              "Total number of HTTP requests to Twitter adapter",
              "method",
              "endpoint",
              "status_code"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "twitter",
          "line": 106,
          "snippet": "        \n        self.http_request_duration = Histogram(\n            'twitter_http_request_duration_seconds',\n            'HTTP request duration',\n            ['method', 'endpoint'],",
          "values": {
            "strings": [
              "twitter_http_request_duration_seconds",
              "HTTP request duration",
              "method",
              "endpoint"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "twitter",
          "line": 114,
          "snippet": "        # Health and availability\n        self.adapter_health = Gauge(\n            'twitter_adapter_health',\n            'Twitter adapter health status (1=healthy, 0=unhealthy)'\n        )",
          "values": {
            "strings": [
              "twitter_adapter_health",
              "Twitter adapter health status (1=healthy, 0=unhealthy)"
            ],
            "numbers": [
              1,
              0
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "twitter",
          "line": 115,
          "snippet": "        self.adapter_health = Gauge(\n            'twitter_adapter_health',\n            'Twitter adapter health status (1=healthy, 0=unhealthy)'\n        )\n        ",
          "values": {
            "strings": [
              "twitter_adapter_health",
              "Twitter adapter health status (1=healthy, 0=unhealthy)"
            ],
            "numbers": [
              1,
              0
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "twitter",
          "line": 119,
          "snippet": "        \n        self.typefully_api_health = Gauge(\n            'twitter_typefully_api_health',\n            'Typefully API health status (1=healthy, 0=unhealthy)'\n        )",
          "values": {
            "strings": [
              "twitter_typefully_api_health",
              "Typefully API health status (1=healthy, 0=unhealthy)"
            ],
            "numbers": [
              1,
              0
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "twitter",
          "line": 125,
          "snippet": "        # System info\n        self.system_info = Info(\n            'twitter_adapter_system',\n            'Twitter adapter system information'\n        )",
          "values": {
            "strings": [
              "twitter_adapter_system",
              "Twitter adapter system information"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "twitter",
          "line": 126,
          "snippet": "        self.system_info = Info(\n            'twitter_adapter_system',\n            'Twitter adapter system information'\n        )\n        ",
          "values": {
            "strings": [
              "twitter_adapter_system",
              "Twitter adapter system information"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "twitter",
          "line": 132,
          "snippet": "        self.system_info.info({\n            'version': '1.0.0',\n            'service': 'twitter-adapter',\n            'platform': 'twitter',\n            'api_provider': 'typefully'",
          "values": {
            "strings": [
              "version",
              "1.0.0",
              "service",
              "twitter-adapter",
              "platform",
              "twitter",
              "api_provider",
              "typefully"
            ],
            "numbers": [
              1,
              0,
              0
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "twitter",
          "line": 133,
          "snippet": "            'version': '1.0.0',\n            'service': 'twitter-adapter',\n            'platform': 'twitter',\n            'api_provider': 'typefully'\n        })",
          "values": {
            "strings": [
              "version",
              "1.0.0",
              "service",
              "twitter-adapter",
              "platform",
              "twitter",
              "api_provider",
              "typefully"
            ],
            "numbers": [
              1,
              0,
              0
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "twitter",
          "line": 141,
          "snippet": "        self.typefully_api_health.set(1)\n        \n        logger.info(\"Twitter Adapter Prometheus metrics initialized\")\n    \n    def track_publication(self, status: str, content_type: str = \"single\", scheduled: bool = False, content_length: int = 0):",
          "values": {
            "strings": [
              "Twitter Adapter Prometheus metrics initialized",
              "single"
            ],
            "numbers": [
              1,
              0
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "twitter",
          "line": 246,
          "snippet": "\n# Global metrics instance\ntwitter_metrics = TwitterAdapterMetrics()\n\ndef track_publication_metrics(func):",
          "values": {
            "strings": [],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "twitter",
          "line": 269,
          "snippet": "            \n            # Track successful publication\n            twitter_metrics.track_publication(\n                status=status,\n                content_type=content_type,",
          "values": {
            "strings": [],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "twitter",
          "line": 278,
          "snippet": "            # Track thread creation if applicable\n            if hasattr(result, 'thread_ids') and result.thread_ids:\n                twitter_metrics.track_thread_creation()\n            \n            return result",
          "values": {
            "strings": [
              "thread_ids"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "twitter",
          "line": 292,
          "snippet": "                error_type = e.detail.get('message', error_type)\n            \n            twitter_metrics.track_error(error_code, error_type)\n            twitter_metrics.track_publication(\n                status=status,",
          "values": {
            "strings": [
              "message"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "twitter",
          "line": 293,
          "snippet": "            \n            twitter_metrics.track_error(error_code, error_type)\n            twitter_metrics.track_publication(\n                status=status,\n                content_type=content_type,",
          "values": {
            "strings": [],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "twitter",
          "line": 302,
          "snippet": "        finally:\n            duration = time.time() - start_time\n            twitter_metrics.track_publication_duration(content_type, status, duration)\n    \n    return wrapper",
          "values": {
            "strings": [],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "twitter",
          "line": 334,
          "snippet": "        finally:\n            duration = time.time() - start_time\n            twitter_metrics.track_http_request(method, endpoint, status_code, duration)\n    \n    return wrapper",
          "values": {
            "strings": [],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "twitter",
          "line": 358,
          "snippet": "            finally:\n                duration = time.time() - start_time\n                twitter_metrics.track_typefully_request(endpoint, status_code, duration)\n        \n        return wrapper",
          "values": {
            "strings": [],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "twitter",
          "line": 364,
          "snippet": "\n# Initialize metrics on import\nlogger.info(\"Twitter Adapter Prometheus metrics loaded and ready\")",
          "values": {
            "strings": [
              "Twitter Adapter Prometheus metrics loaded and ready"
            ],
            "numbers": []
          }
        }
      ]
    },
    {
      "file": "/Users/hretheum/dev/bezrobocie/vector-wave/publisher/src/adapters/twitter/demo_media_api.py",
      "exists": true,
      "hits": [
        {
          "type": "platform_specific",
          "platform": "twitter",
          "line": 3,
          "snippet": "#!/usr/bin/env python3\n\"\"\"\nDemo script for Twitter Adapter Media Support\nDemonstracja obsługi mediów w Twitter Adapter\n\"\"\"",
          "values": {
            "strings": [
              "\nDemo script for Twitter Adapter Media Support\nDemonstracja obsługi mediów w Twitter Adapter\n"
            ],
            "numbers": [
              3
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "twitter",
          "line": 4,
          "snippet": "\"\"\"\nDemo script for Twitter Adapter Media Support\nDemonstracja obsługi mediów w Twitter Adapter\n\"\"\"\n",
          "values": {
            "strings": [
              "\nDemo script for Twitter Adapter Media Support\nDemonstracja obsługi mediów w Twitter Adapter\n"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "twitter",
          "line": 18,
          "snippet": "    \n    payload = {\n        \"text\": \"Testowy tweet z obrazkiem! 🚀 #TwitterAdapter #VectorWave\",\n        \"media_urls\": [\n            \"https://picsum.photos/800/600.jpg\"  # Lorem Picsum - darmowe zdjęcia",
          "values": {
            "strings": [
              "text",
              "Testowy tweet z obrazkiem! 🚀 #TwitterAdapter #VectorWave",
              "media_urls",
              "https://picsum.photos/800/600.jpg"
            ],
            "numbers": [
              800,
              600
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "twitter",
          "line": 43,
          "snippet": "    long_text = \"\"\"To jest długi tweet który zostanie automatycznie podzielony na wątek. \n    \n    W tym przykładzie testujemy obsługę mediów w wątkach Twitter. Vector Wave Multi-Channel Publisher\n    obsługuje automatyczny podział długich tekstów na wątki zgodnie z limitami Twitter (280 znaków).\n    ",
          "values": {
            "strings": [],
            "numbers": [
              280
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "twitter",
          "line": 44,
          "snippet": "    \n    W tym przykładzie testujemy obsługę mediów w wątkach Twitter. Vector Wave Multi-Channel Publisher\n    obsługuje automatyczny podział długich tekstów na wątki zgodnie z limitami Twitter (280 znaków).\n    \n    Każdy wątek może zawierać media - obrazki, GIF-y lub filmy wideo. System automatycznie waliduje",
          "values": {
            "strings": [],
            "numbers": [
              280
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "twitter",
          "line": 47,
          "snippet": "    \n    Każdy wątek może zawierać media - obrazki, GIF-y lub filmy wideo. System automatycznie waliduje\n    URL mediów i sprawdza czy formaty są obsługiwane przez Twitter i Typefully API.\n    \n    To jest doskonały przykład jak AI może automatyzować publikację treści na social media! 🤖✨\"\"\"",
          "values": {
            "strings": [],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "twitter",
          "line": 150,
          "snippet": "def check_server_status():\n    \"\"\"Sprawdź status serwera przed testami\"\"\"\n    print(\"🔍 Sprawdzanie statusu Twitter Adapter...\")\n    \n    try:",
          "values": {
            "strings": [
              "Sprawdź status serwera przed testami",
              "\n    print("
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "twitter",
          "line": 164,
          "snippet": "    except Exception as e:\n        print(f\"❌ Nie można połączyć z serwerem: {e}\")\n        print(\"   Uruchom adapter: docker-compose up -d twitter-adapter\")\n        return False\n",
          "values": {
            "strings": [
              "❌ Nie można połączyć z serwerem: {e}",
              "   Uruchom adapter: docker-compose up -d twitter-adapter"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "twitter",
          "line": 169,
          "snippet": "def main():\n    \"\"\"Uruchom wszystkie demo\"\"\"\n    print(\"🚀 Twitter Adapter Media Support - DEMO\")\n    print(\"=\" * 60)\n    ",
          "values": {
            "strings": [
              "Uruchom wszystkie demo",
              "\n    print(",
              ")\n    print("
            ],
            "numbers": [
              60
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "twitter",
          "line": 183,
          "snippet": "    print(\"\\n\" + \"=\" * 60)\n    print(\"🏁 Demo zakończone!\")\n    print(\"\\nℹ️  Aby rzeczywiście publikować na Twitter:\")\n    print(\"   1. Ustaw TYPEFULLY_API_KEY w .env\")\n    print(\"   2. Restart: docker-compose up -d --build twitter-adapter\")",
          "values": {
            "strings": [
              "\\n",
              " * 60)\n    print(",
              ")\n    print(",
              ")\n    print(",
              ")\n    print("
            ],
            "numbers": [
              60,
              1,
              2
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "twitter",
          "line": 185,
          "snippet": "    print(\"\\nℹ️  Aby rzeczywiście publikować na Twitter:\")\n    print(\"   1. Ustaw TYPEFULLY_API_KEY w .env\")\n    print(\"   2. Restart: docker-compose up -d --build twitter-adapter\")\n    print(\"   3. Sprawdź drafts w Typefully: https://typefully.com/drafts\")\n    print(\"   4. Użyj endpoint /status/{draft_id} do sprawdzania statusu\")",
          "values": {
            "strings": [
              "\\nℹ️  Aby rzeczywiście publikować na Twitter:",
              "   1. Ustaw TYPEFULLY_API_KEY w .env",
              "   2. Restart: docker-compose up -d --build twitter-adapter",
              "   3. Sprawdź drafts w Typefully: https://typefully.com/drafts",
              "   4. Użyj endpoint /status/{draft_id} do sprawdzania statusu"
            ],
            "numbers": [
              1,
              2,
              3,
              4
            ]
          }
        }
      ]
    },
    {
      "file": "/Users/hretheum/dev/bezrobocie/vector-wave/publisher/src/adapters/twitter/rate_limit_monitor.py",
      "exists": true,
      "hits": [
        {
          "type": "platform_specific",
          "platform": "twitter",
          "line": 35,
          "snippet": "class PlatformLimits(BaseModel):\n    \"\"\"Platform-specific rate limits configuration\"\"\"\n    platform: str = Field(..., description=\"Platform name (twitter, ghost, beehiiv)\")\n    \n    # Request limits",
          "values": {
            "strings": [
              "Platform-specific rate limits configuration",
              "\n    platform: str = Field(..., description="
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "twitter",
          "line": 134,
          "snippet": "        \"\"\"Setup default rate limits for known platforms\"\"\"\n        \n        # Twitter (via Typefully)\n        self.platform_limits[\"twitter\"] = PlatformLimits(\n            platform=\"twitter\",",
          "values": {
            "strings": [
              "Setup default rate limits for known platforms",
              "\n        \n        # Twitter (via Typefully)\n        self.platform_limits[",
              "] = PlatformLimits(\n            platform="
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "twitter",
          "line": 135,
          "snippet": "        \n        # Twitter (via Typefully)\n        self.platform_limits[\"twitter\"] = PlatformLimits(\n            platform=\"twitter\",\n            requests_per_hour=300,     # Typefully API limit",
          "values": {
            "strings": [
              "twitter",
              "twitter"
            ],
            "numbers": [
              300
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "twitter",
          "line": 136,
          "snippet": "        # Twitter (via Typefully)\n        self.platform_limits[\"twitter\"] = PlatformLimits(\n            platform=\"twitter\",\n            requests_per_hour=300,     # Typefully API limit\n            posts_per_day=50,          # Reasonable daily limit",
          "values": {
            "strings": [
              "twitter",
              "twitter"
            ],
            "numbers": [
              300,
              50
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "twitter",
          "line": 144,
          "snippet": "        )\n        \n        # Ghost\n        self.platform_limits[\"ghost\"] = PlatformLimits(\n            platform=\"ghost\", ",
          "values": {
            "strings": [
              "ghost",
              "ghost"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "twitter",
          "line": 145,
          "snippet": "        \n        # Ghost\n        self.platform_limits[\"ghost\"] = PlatformLimits(\n            platform=\"ghost\", \n            requests_per_hour=200,     # Ghost recommended limit",
          "values": {
            "strings": [
              "ghost",
              "ghost"
            ],
            "numbers": [
              200
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "twitter",
          "line": 146,
          "snippet": "        # Ghost\n        self.platform_limits[\"ghost\"] = PlatformLimits(\n            platform=\"ghost\", \n            requests_per_hour=200,     # Ghost recommended limit\n            posts_per_day=20,          # Reasonable content creation limit",
          "values": {
            "strings": [
              "ghost",
              "ghost"
            ],
            "numbers": [
              200,
              20
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "twitter",
          "line": 147,
          "snippet": "        self.platform_limits[\"ghost\"] = PlatformLimits(\n            platform=\"ghost\", \n            requests_per_hour=200,     # Ghost recommended limit\n            posts_per_day=20,          # Reasonable content creation limit\n            posts_per_month=500,       # Monthly limit",
          "values": {
            "strings": [
              "ghost",
              "ghost"
            ],
            "numbers": [
              200,
              20,
              500
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "twitter",
          "line": 154,
          "snippet": "        )\n        \n        # Beehiiv\n        self.platform_limits[\"beehiiv\"] = PlatformLimits(\n            platform=\"beehiiv\",",
          "values": {
            "strings": [
              "beehiiv",
              "beehiiv"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "twitter",
          "line": 155,
          "snippet": "        \n        # Beehiiv\n        self.platform_limits[\"beehiiv\"] = PlatformLimits(\n            platform=\"beehiiv\",\n            requests_per_hour=1000,    # API requests",
          "values": {
            "strings": [
              "beehiiv",
              "beehiiv"
            ],
            "numbers": [
              1000
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "twitter",
          "line": 156,
          "snippet": "        # Beehiiv\n        self.platform_limits[\"beehiiv\"] = PlatformLimits(\n            platform=\"beehiiv\",\n            requests_per_hour=1000,    # API requests\n            posts_per_day=5,           # Newsletter frequency",
          "values": {
            "strings": [
              "beehiiv",
              "beehiiv"
            ],
            "numbers": [
              1000,
              5
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 164,
          "snippet": "        )\n        \n        # LinkedIn\n        self.platform_limits[\"linkedin\"] = PlatformLimits(\n            platform=\"linkedin\",",
          "values": {
            "strings": [
              "linkedin",
              "linkedin"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 165,
          "snippet": "        \n        # LinkedIn\n        self.platform_limits[\"linkedin\"] = PlatformLimits(\n            platform=\"linkedin\",\n            requests_per_hour=100,     # Conservative estimate",
          "values": {
            "strings": [
              "linkedin",
              "linkedin"
            ],
            "numbers": [
              100
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 166,
          "snippet": "        # LinkedIn\n        self.platform_limits[\"linkedin\"] = PlatformLimits(\n            platform=\"linkedin\",\n            requests_per_hour=100,     # Conservative estimate\n            posts_per_day=10,          # LinkedIn posting frequency",
          "values": {
            "strings": [
              "linkedin",
              "linkedin"
            ],
            "numbers": [
              100,
              10
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 168,
          "snippet": "            platform=\"linkedin\",\n            requests_per_hour=100,     # Conservative estimate\n            posts_per_day=10,          # LinkedIn posting frequency\n            posts_per_month=300,       # Monthly limit\n            warning_threshold=75.0,",
          "values": {
            "strings": [
              "linkedin"
            ],
            "numbers": [
              100,
              10,
              300,
              75,
              0
            ]
          }
        },
        {
          "type": "forbidden_phrases",
          "platform": "twitter",
          "line": 340,
          "snippet": "            \n            if should_alert:\n                # Check if we already sent this alert recently (avoid spam)\n                recent_alerts = [a for a in self.alerts_sent[platform] \n                               if a.limit_type == limit_type and a.severity == severity",
          "values": {
            "strings": [],
            "numbers": []
          }
        },
        {
          "type": "required_elements",
          "platform": "twitter",
          "line": 373,
          "snippet": "        if current_usage >= 90:\n            recommendations.extend([\n                \"IMMEDIATE ACTION REQUIRED - Stop all non-critical operations\",\n                \"Implement aggressive throttling (5x normal delays)\",\n                \"Consider postponing scheduled publications\",",
          "values": {
            "strings": [
              "IMMEDIATE ACTION REQUIRED - Stop all non-critical operations",
              "Implement aggressive throttling (5x normal delays)",
              "Consider postponing scheduled publications"
            ],
            "numbers": [
              90,
              5
            ]
          }
        }
      ]
    },
    {
      "file": "/Users/hretheum/dev/bezrobocie/vector-wave/publisher/src/adapters/twitter/typefully_client.py",
      "exists": true,
      "hits": [
        {
          "type": "platform_specific",
          "platform": "twitter",
          "line": 4,
          "snippet": "\"\"\"\nTypefully API Client\nKlient do integracji z Typefully API dla publikacji na Twitter/X\n\"\"\"\n",
          "values": {
            "strings": [
              "\nTypefully API Client\nKlient do integracji z Typefully API dla publikacji na Twitter/X\n"
            ],
            "numbers": []
          }
        }
      ]
    },
    {
      "file": "/Users/hretheum/dev/bezrobocie/vector-wave/publisher/src/adapters/twitter/test_media_support.py",
      "exists": true,
      "hits": [
        {
          "type": "platform_specific",
          "platform": "twitter",
          "line": 3,
          "snippet": "#!/usr/bin/env python3\n\"\"\"\nTest media support for Twitter Adapter\nTestuje obsługę mediów (obrazków) w publikacji na Twitter/X przez Typefully API\n\"\"\"",
          "values": {
            "strings": [
              "\nTest media support for Twitter Adapter\nTestuje obsługę mediów (obrazków) w publikacji na Twitter/X przez Typefully API\n"
            ],
            "numbers": [
              3
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "twitter",
          "line": 4,
          "snippet": "\"\"\"\nTest media support for Twitter Adapter\nTestuje obsługę mediów (obrazków) w publikacji na Twitter/X przez Typefully API\n\"\"\"\n",
          "values": {
            "strings": [
              "\nTest media support for Twitter Adapter\nTestuje obsługę mediów (obrazków) w publikacji na Twitter/X przez Typefully API\n"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "twitter",
          "line": 13,
          "snippet": "\n# Konfiguracja testowa\nBASE_URL = \"http://localhost:8083\"  # Port kontenera Twitter Adapter (mapped 8083:8082)\n\ndef test_media_validation():",
          "values": {
            "strings": [
              "http://localhost:8083"
            ],
            "numbers": [
              8083,
              8083,
              8082
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "twitter",
          "line": 120,
          "snippet": "    print(\"\\n🧪 Test 3: Media z wątkami\")\n    \n    long_text = \"\"\"To jest bardzo długi tekst który przekroczy limit 280 znaków i utworzy wątek na Twitter. \n    Lorem ipsum dolor sit amet, consectetur adipiscing elit. Sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. \n    Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. ",
          "values": {
            "strings": [
              "\\n🧪 Test 3: Media z wątkami"
            ],
            "numbers": [
              3,
              280
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "twitter",
          "line": 214,
          "snippet": "    except requests.exceptions.ConnectionError:\n        print(\"❌ Nie można połączyć się z serwerem\")\n        print(\"   Uruchom adapter: cd /path/to/twitter && python main.py\")\n        return False\n    except Exception as e:",
          "values": {
            "strings": [
              "❌ Nie można połączyć się z serwerem",
              "   Uruchom adapter: cd /path/to/twitter && python main.py"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "twitter",
          "line": 222,
          "snippet": "def main():\n    \"\"\"Uruchom wszystkie testy obsługi mediów\"\"\"\n    print(\"🚀 Testy obsługi mediów - Twitter Adapter\")\n    print(\"=\" * 50)\n    ",
          "values": {
            "strings": [
              "Uruchom wszystkie testy obsługi mediów",
              "\n    print(",
              ")\n    print("
            ],
            "numbers": [
              50
            ]
          }
        }
      ]
    },
    {
      "file": "/Users/hretheum/dev/bezrobocie/vector-wave/publisher/src/adapters/twitter/main.py",
      "exists": true,
      "hits": [
        {
          "type": "platform_specific",
          "platform": "twitter",
          "line": 3,
          "snippet": "#!/usr/bin/env python3\n\"\"\"\nTwitter Adapter - Multi-Channel Publisher\nObsługa publikacji na Twitter/X przez Typefully API\n\"\"\"",
          "values": {
            "strings": [
              "\nTwitter Adapter - Multi-Channel Publisher\nObsługa publikacji na Twitter/X przez Typefully API\n"
            ],
            "numbers": [
              3
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "twitter",
          "line": 4,
          "snippet": "\"\"\"\nTwitter Adapter - Multi-Channel Publisher\nObsługa publikacji na Twitter/X przez Typefully API\n\"\"\"\n",
          "values": {
            "strings": [
              "\nTwitter Adapter - Multi-Channel Publisher\nObsługa publikacji na Twitter/X przez Typefully API\n"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "twitter",
          "line": 21,
          "snippet": "import asyncio\nfrom typefully_client import TypefullyClient\nfrom prometheus_metrics import twitter_metrics, track_publication_metrics, track_http_metrics, track_typefully_metrics, CONTENT_TYPE_LATEST\n\n# Import Rate Limit Monitor for Task 8.3",
          "values": {
            "strings": [],
            "numbers": [
              8,
              3
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "twitter",
          "line": 78,
          "snippet": "# FastAPI app\napp = FastAPI(\n    title=\"Twitter Adapter\",\n    description=\"Multi-Channel Publisher - Twitter/X Adapter via Typefully API\",\n    version=\"1.0.0\"",
          "values": {
            "strings": [
              "Twitter Adapter",
              "Multi-Channel Publisher - Twitter/X Adapter via Typefully API",
              "1.0.0"
            ],
            "numbers": [
              1,
              0,
              0
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "twitter",
          "line": 79,
          "snippet": "app = FastAPI(\n    title=\"Twitter Adapter\",\n    description=\"Multi-Channel Publisher - Twitter/X Adapter via Typefully API\",\n    version=\"1.0.0\"\n)",
          "values": {
            "strings": [
              "Twitter Adapter",
              "Multi-Channel Publisher - Twitter/X Adapter via Typefully API",
              "1.0.0"
            ],
            "numbers": [
              1,
              0,
              0
            ]
          }
        },
        {
          "type": "max_length",
          "platform": "twitter",
          "line": 140,
          "snippet": "# Pydantic models\nclass PublishRequest(BaseModel):\n    text: str = Field(..., min_length=1, max_length=10000, description=\"Treść tweeta/wątku\")\n    media_urls: Optional[List[str]] = Field(None, max_items=4, description=\"Lista URL obrazków (max 4)\")\n    schedule_time: Optional[str] = Field(None, description=\"Czas publikacji (ISO format lub 'next-free-slot')\")",
          "values": {
            "strings": [
              "Treść tweeta/wątku",
              "Lista URL obrazków (max 4)",
              "Czas publikacji (ISO format lub "
            ],
            "numbers": [
              1,
              10000,
              4,
              4
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "twitter",
          "line": 297,
          "snippet": "        return HealthResponse(\n            status=\"ok\",\n            service=\"twitter-adapter\", \n            version=\"1.0.0\",\n            timestamp=datetime.now().isoformat()",
          "values": {
            "strings": [
              "ok",
              "twitter-adapter",
              "1.0.0"
            ],
            "numbers": [
              1,
              0,
              0
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "twitter",
          "line": 304,
          "snippet": "    try:\n        # Check Typefully API connection and rate limits\n        connection_status = await _check_twitter_connection()\n        rate_limit_info = await _check_twitter_rate_limits()\n        metrics_info = await _get_twitter_performance_metrics()",
          "values": {
            "strings": [],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "twitter",
          "line": 305,
          "snippet": "        # Check Typefully API connection and rate limits\n        connection_status = await _check_twitter_connection()\n        rate_limit_info = await _check_twitter_rate_limits()\n        metrics_info = await _get_twitter_performance_metrics()\n        ",
          "values": {
            "strings": [],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "twitter",
          "line": 306,
          "snippet": "        connection_status = await _check_twitter_connection()\n        rate_limit_info = await _check_twitter_rate_limits()\n        metrics_info = await _get_twitter_performance_metrics()\n        \n        # Determine overall status",
          "values": {
            "strings": [],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "twitter",
          "line": 340,
          "snippet": "        \n        # Status message\n        message = f\"Twitter adapter is {overall_status.value}\"\n        if rate_limit_info and rate_limit_info.remaining and rate_limit_info.limit:\n            message += f\", rate limit: {rate_limit_info.remaining}/{rate_limit_info.limit}\"",
          "values": {
            "strings": [
              "Twitter adapter is {overall_status.value}",
              ", rate limit: {rate_limit_info.remaining}/{rate_limit_info.limit}"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "twitter",
          "line": 346,
          "snippet": "        return EnhancedHealthResponse(\n            status=overall_status,\n            service=\"twitter-adapter\",\n            platform=\"twitter\",\n            version=\"1.0.0\",",
          "values": {
            "strings": [
              "twitter-adapter",
              "twitter",
              "1.0.0"
            ],
            "numbers": [
              1,
              0,
              0
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "twitter",
          "line": 347,
          "snippet": "            status=overall_status,\n            service=\"twitter-adapter\",\n            platform=\"twitter\",\n            version=\"1.0.0\",\n            connection=connection_status,",
          "values": {
            "strings": [
              "twitter-adapter",
              "twitter",
              "1.0.0"
            ],
            "numbers": [
              1,
              0,
              0
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "twitter",
          "line": 360,
          "snippet": "        \n    except Exception as e:\n        logger.error(f\"[Twitter Adapter] Health check failed: {e}\")\n        \n        # Return unhealthy status",
          "values": {
            "strings": [
              "[Twitter Adapter] Health check failed: {e}"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "twitter",
          "line": 371,
          "snippet": "        return EnhancedHealthResponse(\n            status=HealthStatus.UNHEALTHY,\n            service=\"twitter-adapter\",\n            platform=\"twitter\", \n            version=\"1.0.0\",",
          "values": {
            "strings": [
              "twitter-adapter",
              "twitter",
              "1.0.0"
            ],
            "numbers": [
              1,
              0,
              0
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "twitter",
          "line": 372,
          "snippet": "            status=HealthStatus.UNHEALTHY,\n            service=\"twitter-adapter\",\n            platform=\"twitter\", \n            version=\"1.0.0\",\n            connection=connection_status,",
          "values": {
            "strings": [
              "twitter-adapter",
              "twitter",
              "1.0.0"
            ],
            "numbers": [
              1,
              0,
              0
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "twitter",
          "line": 382,
          "snippet": "\n\nasync def _check_twitter_connection() -> ConnectionStatus:\n    \"\"\"Check connection to Typefully API\"\"\"\n    start_time = time.time()",
          "values": {
            "strings": [
              "Check connection to Typefully API"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "twitter",
          "line": 413,
          "snippet": "\n\nasync def _check_twitter_rate_limits() -> Optional[RateLimitStatus]:\n    \"\"\"Check Typefully API rate limits with enhanced monitoring\"\"\"\n    try:",
          "values": {
            "strings": [
              "Check Typefully API rate limits with enhanced monitoring"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "twitter",
          "line": 418,
          "snippet": "        # Task 8.3: Use rate limit monitor for accurate data\n        if rate_limit_monitor:\n            usage = rate_limit_monitor.get_platform_status(\"twitter\")\n            if usage:\n                # Convert to health check format",
          "values": {
            "strings": [
              "twitter"
            ],
            "numbers": [
              8,
              3
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "twitter",
          "line": 443,
          "snippet": "\n\nasync def _get_twitter_performance_metrics() -> Optional[PlatformMetrics]:\n    \"\"\"Get performance metrics from Prometheus\"\"\"\n    try:",
          "values": {
            "strings": [
              "Get performance metrics from Prometheus"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "twitter",
          "line": 466,
          "snippet": "    \n    return {\n        \"service\": \"Twitter Adapter\",\n        \"description\": \"Multi-Channel Publisher - Twitter/X Adapter via Typefully API\",\n        \"version\": \"1.0.0\",",
          "values": {
            "strings": [
              "service",
              "Twitter Adapter",
              "description",
              "Multi-Channel Publisher - Twitter/X Adapter via Typefully API",
              "version",
              "1.0.0"
            ],
            "numbers": [
              1,
              0,
              0
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "twitter",
          "line": 467,
          "snippet": "    return {\n        \"service\": \"Twitter Adapter\",\n        \"description\": \"Multi-Channel Publisher - Twitter/X Adapter via Typefully API\",\n        \"version\": \"1.0.0\",\n        \"typefully_configured\": has_api_key,",
          "values": {
            "strings": [
              "service",
              "Twitter Adapter",
              "description",
              "Multi-Channel Publisher - Twitter/X Adapter via Typefully API",
              "version",
              "1.0.0",
              "typefully_configured"
            ],
            "numbers": [
              1,
              0,
              0
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "twitter",
          "line": 512,
          "snippet": "@app.get(\"/metrics\")\nasync def get_prometheus_metrics():\n    \"\"\"Prometheus metrics endpoint for Twitter adapter - Task 5.1.2\"\"\"\n    try:\n        # Update health status based on configuration",
          "values": {
            "strings": [
              "/metrics",
              "Prometheus metrics endpoint for Twitter adapter - Task 5.1.2"
            ],
            "numbers": [
              5,
              1,
              2
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "twitter",
          "line": 516,
          "snippet": "        # Update health status based on configuration\n        api_key = os.getenv(\"TYPEFULLY_API_KEY\")\n        twitter_metrics.set_adapter_health(bool(api_key))\n        \n        # Test Typefully API if configured",
          "values": {
            "strings": [
              "TYPEFULLY_API_KEY"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "twitter",
          "line": 524,
          "snippet": "                with TypefullyClient() as typefully:\n                    typefully.get_published_drafts()\n                twitter_metrics.set_typefully_api_health(True)\n            except Exception as e:\n                twitter_metrics.set_typefully_api_health(False)",
          "values": {
            "strings": [],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "twitter",
          "line": 526,
          "snippet": "                twitter_metrics.set_typefully_api_health(True)\n            except Exception as e:\n                twitter_metrics.set_typefully_api_health(False)\n                logger.warning(f\"Typefully API health check failed: {e}\")\n        else:",
          "values": {
            "strings": [
              "Typefully API health check failed: {e}"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "twitter",
          "line": 529,
          "snippet": "                logger.warning(f\"Typefully API health check failed: {e}\")\n        else:\n            twitter_metrics.set_typefully_api_health(False)\n        \n        # Get metrics data",
          "values": {
            "strings": [
              "Typefully API health check failed: {e}"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "twitter",
          "line": 532,
          "snippet": "        \n        # Get metrics data\n        metrics_data = twitter_metrics.get_metrics_data()\n        \n        return PlainTextResponse(",
          "values": {
            "strings": [],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "twitter",
          "line": 540,
          "snippet": "        \n    except Exception as e:\n        logger.error(f\"Error generating Twitter adapter metrics: {e}\")\n        twitter_metrics.track_error(\"METRICS_GENERATION_ERROR\", \"INTERNAL_ERROR\")\n        raise HTTPException(status_code=500, detail=\"Failed to generate metrics\")",
          "values": {
            "strings": [
              "Error generating Twitter adapter metrics: {e}",
              "METRICS_GENERATION_ERROR",
              "INTERNAL_ERROR",
              "Failed to generate metrics"
            ],
            "numbers": [
              500
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "twitter",
          "line": 541,
          "snippet": "    except Exception as e:\n        logger.error(f\"Error generating Twitter adapter metrics: {e}\")\n        twitter_metrics.track_error(\"METRICS_GENERATION_ERROR\", \"INTERNAL_ERROR\")\n        raise HTTPException(status_code=500, detail=\"Failed to generate metrics\")\n",
          "values": {
            "strings": [
              "Error generating Twitter adapter metrics: {e}",
              "METRICS_GENERATION_ERROR",
              "INTERNAL_ERROR",
              "Failed to generate metrics"
            ],
            "numbers": [
              500
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "twitter",
          "line": 547,
          "snippet": "@app.get(\"/rate-limits\")\nasync def get_rate_limit_status():\n    \"\"\"Get current rate limit status for Twitter platform\"\"\"\n    if not rate_limit_monitor:\n        return {\"error\": \"Rate limit monitoring not available\"}",
          "values": {
            "strings": [
              "/rate-limits",
              "Get current rate limit status for Twitter platform",
              "\n    if not rate_limit_monitor:\n        return {",
              ": "
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "twitter",
          "line": 551,
          "snippet": "        return {\"error\": \"Rate limit monitoring not available\"}\n    \n    status = rate_limit_monitor.get_platform_status(\"twitter\")\n    if not status:\n        return {\"platform\": \"twitter\", \"status\": \"no_data\", \"message\": \"No rate limit data available\"}",
          "values": {
            "strings": [
              "error",
              "Rate limit monitoring not available",
              "twitter",
              "platform",
              "twitter",
              "status",
              "no_data",
              "message",
              "No rate limit data available"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "twitter",
          "line": 553,
          "snippet": "    status = rate_limit_monitor.get_platform_status(\"twitter\")\n    if not status:\n        return {\"platform\": \"twitter\", \"status\": \"no_data\", \"message\": \"No rate limit data available\"}\n    \n    return {",
          "values": {
            "strings": [
              "twitter",
              "platform",
              "twitter",
              "status",
              "no_data",
              "message",
              "No rate limit data available"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "twitter",
          "line": 556,
          "snippet": "    \n    return {\n        \"platform\": \"twitter\",\n        \"current_usage\": status.dict(),\n        \"should_throttle\": rate_limit_monitor.should_throttle(\"twitter\")[0],",
          "values": {
            "strings": [
              "platform",
              "twitter",
              "current_usage",
              "should_throttle",
              "twitter"
            ],
            "numbers": [
              0
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "twitter",
          "line": 558,
          "snippet": "        \"platform\": \"twitter\",\n        \"current_usage\": status.dict(),\n        \"should_throttle\": rate_limit_monitor.should_throttle(\"twitter\")[0],\n        \"recommended_delay\": rate_limit_monitor.should_throttle(\"twitter\")[1],\n        \"history_24h\": rate_limit_monitor.get_platform_history(\"twitter\", 24)",
          "values": {
            "strings": [
              "platform",
              "twitter",
              "current_usage",
              "should_throttle",
              "twitter",
              "recommended_delay",
              "twitter",
              "history_24h",
              "twitter"
            ],
            "numbers": [
              0,
              1,
              24,
              24
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "twitter",
          "line": 559,
          "snippet": "        \"current_usage\": status.dict(),\n        \"should_throttle\": rate_limit_monitor.should_throttle(\"twitter\")[0],\n        \"recommended_delay\": rate_limit_monitor.should_throttle(\"twitter\")[1],\n        \"history_24h\": rate_limit_monitor.get_platform_history(\"twitter\", 24)\n    }",
          "values": {
            "strings": [
              "current_usage",
              "should_throttle",
              "twitter",
              "recommended_delay",
              "twitter",
              "history_24h",
              "twitter"
            ],
            "numbers": [
              0,
              1,
              24,
              24
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "twitter",
          "line": 560,
          "snippet": "        \"should_throttle\": rate_limit_monitor.should_throttle(\"twitter\")[0],\n        \"recommended_delay\": rate_limit_monitor.should_throttle(\"twitter\")[1],\n        \"history_24h\": rate_limit_monitor.get_platform_history(\"twitter\", 24)\n    }\n",
          "values": {
            "strings": [
              "should_throttle",
              "twitter",
              "recommended_delay",
              "twitter",
              "history_24h",
              "twitter"
            ],
            "numbers": [
              0,
              1,
              24,
              24
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "twitter",
          "line": 571,
          "snippet": "    # Simulate requests\n    for _ in range(int(usage_percentage)):\n        await rate_limit_monitor.track_request(\"twitter\", \"test\")\n    \n    # Simulate publications  ",
          "values": {
            "strings": [
              "twitter",
              "test"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "twitter",
          "line": 575,
          "snippet": "    # Simulate publications  \n    for _ in range(int(usage_percentage / 10)):\n        await rate_limit_monitor.track_publication(\"twitter\", \"test_post\")\n    \n    status = rate_limit_monitor.get_platform_status(\"twitter\")",
          "values": {
            "strings": [
              "twitter",
              "test_post",
              "twitter"
            ],
            "numbers": [
              10
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "twitter",
          "line": 577,
          "snippet": "        await rate_limit_monitor.track_publication(\"twitter\", \"test_post\")\n    \n    status = rate_limit_monitor.get_platform_status(\"twitter\")\n    return {\n        \"message\": f\"Simulated usage for Twitter: {usage_percentage}% requests\",",
          "values": {
            "strings": [
              "twitter",
              "test_post",
              "twitter",
              "message",
              "Simulated usage for Twitter: {usage_percentage}% requests"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "twitter",
          "line": 579,
          "snippet": "    status = rate_limit_monitor.get_platform_status(\"twitter\")\n    return {\n        \"message\": f\"Simulated usage for Twitter: {usage_percentage}% requests\",\n        \"current_status\": status.dict() if status else None,\n        \"should_throttle\": rate_limit_monitor.should_throttle(\"twitter\")[0],",
          "values": {
            "strings": [
              "twitter",
              "message",
              "Simulated usage for Twitter: {usage_percentage}% requests",
              "current_status",
              "should_throttle",
              "twitter"
            ],
            "numbers": [
              0
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "twitter",
          "line": 581,
          "snippet": "        \"message\": f\"Simulated usage for Twitter: {usage_percentage}% requests\",\n        \"current_status\": status.dict() if status else None,\n        \"should_throttle\": rate_limit_monitor.should_throttle(\"twitter\")[0],\n        \"recommended_delay\": rate_limit_monitor.should_throttle(\"twitter\")[1]\n    }",
          "values": {
            "strings": [
              "message",
              "Simulated usage for Twitter: {usage_percentage}% requests",
              "current_status",
              "should_throttle",
              "twitter",
              "recommended_delay",
              "twitter"
            ],
            "numbers": [
              0,
              1
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "twitter",
          "line": 582,
          "snippet": "        \"current_status\": status.dict() if status else None,\n        \"should_throttle\": rate_limit_monitor.should_throttle(\"twitter\")[0],\n        \"recommended_delay\": rate_limit_monitor.should_throttle(\"twitter\")[1]\n    }\n",
          "values": {
            "strings": [
              "current_status",
              "should_throttle",
              "twitter",
              "recommended_delay",
              "twitter"
            ],
            "numbers": [
              0,
              1
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "twitter",
          "line": 631,
          "snippet": "                \"scheduled_date\": draft_info.get(\"scheduled_date\"),\n                \"published_on\": draft_info.get(\"published_on\"),\n                \"twitter_url\": draft_info.get(\"twitter_url\"),\n                \"source\": draft_info.get(\"source\"),\n                \"full_info\": draft_info",
          "values": {
            "strings": [
              "scheduled_date",
              "scheduled_date",
              "published_on",
              "published_on",
              "twitter_url",
              "twitter_url",
              "source",
              "source",
              "full_info"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "twitter",
          "line": 640,
          "snippet": "        raise\n    except Exception as e:\n        logger.error(f\"[Twitter Adapter] Błąd sprawdzania statusu: {str(e)}\")\n        raise create_error_response(\n            code=ErrorCodes.TYPEFULLY_API_ERROR,",
          "values": {
            "strings": [
              "[Twitter Adapter] Błąd sprawdzania statusu: {str(e)}"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "twitter",
          "line": 652,
          "snippet": "async def publish_tweet(request: PublishRequest):\n    \"\"\"\n    Publikuj tweet lub wątek na Twitter/X przez Typefully API\n    \"\"\"\n    logger.info(f\"[Twitter Adapter] Otrzymano żądanie publikacji: {len(request.text)} znaków\")",
          "values": {
            "strings": [
              "\n    Publikuj tweet lub wątek na Twitter/X przez Typefully API\n    ",
              "\n    logger.info(f"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "twitter",
          "line": 654,
          "snippet": "    Publikuj tweet lub wątek na Twitter/X przez Typefully API\n    \"\"\"\n    logger.info(f\"[Twitter Adapter] Otrzymano żądanie publikacji: {len(request.text)} znaków\")\n    \n    # Task 8.3: Check rate limits before publishing",
          "values": {
            "strings": [
              "\n    logger.info(f"
            ],
            "numbers": [
              8,
              3
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "twitter",
          "line": 658,
          "snippet": "    # Task 8.3: Check rate limits before publishing\n    if rate_limit_monitor:\n        should_throttle, delay = rate_limit_monitor.should_throttle(\"twitter\")\n        if should_throttle and delay:\n            logger.warning(f\"[Twitter Adapter] Rate limit throttling: waiting {delay}s\")",
          "values": {
            "strings": [
              "twitter",
              "[Twitter Adapter] Rate limit throttling: waiting {delay}s"
            ],
            "numbers": [
              8,
              3
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "twitter",
          "line": 660,
          "snippet": "        should_throttle, delay = rate_limit_monitor.should_throttle(\"twitter\")\n        if should_throttle and delay:\n            logger.warning(f\"[Twitter Adapter] Rate limit throttling: waiting {delay}s\")\n            await asyncio.sleep(delay)\n    ",
          "values": {
            "strings": [
              "twitter",
              "[Twitter Adapter] Rate limit throttling: waiting {delay}s"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "twitter",
          "line": 669,
          "snippet": "        media_count = len(request.media_urls) if request.media_urls else 0\n        if media_count > 0:\n            logger.info(f\"[Twitter Adapter] Żądanie zawiera {media_count} media URL\")\n            # Track media attachments\n            for _ in range(media_count):",
          "values": {
            "strings": [
              "[Twitter Adapter] Żądanie zawiera {media_count} media URL"
            ],
            "numbers": [
              0,
              0
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "twitter",
          "line": 672,
          "snippet": "            # Track media attachments\n            for _ in range(media_count):\n                twitter_metrics.track_media_attachment(\"image\")\n        \n        # Sprawdź czy potrzebny wątek (280 znaków limit dla Twitter)",
          "values": {
            "strings": [
              "image"
            ],
            "numbers": [
              280
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "twitter",
          "line": 674,
          "snippet": "                twitter_metrics.track_media_attachment(\"image\")\n        \n        # Sprawdź czy potrzebny wątek (280 znaków limit dla Twitter)\n        needs_thread = len(request.text) > 280 and request.thread_mode\n        logger.info(f\"[Twitter Adapter] Tryb wątku: {needs_thread}\")",
          "values": {
            "strings": [
              "image",
              "[Twitter Adapter] Tryb wątku: {needs_thread}"
            ],
            "numbers": [
              280,
              280
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "twitter",
          "line": 676,
          "snippet": "        # Sprawdź czy potrzebny wątek (280 znaków limit dla Twitter)\n        needs_thread = len(request.text) > 280 and request.thread_mode\n        logger.info(f\"[Twitter Adapter] Tryb wątku: {needs_thread}\")\n        \n        # Sprawdź czy Typefully API key jest dostępny",
          "values": {
            "strings": [
              "[Twitter Adapter] Tryb wątku: {needs_thread}"
            ],
            "numbers": [
              280,
              280
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "twitter",
          "line": 681,
          "snippet": "        api_key = os.getenv(\"TYPEFULLY_API_KEY\")\n        if not api_key:\n            logger.error(\"[Twitter Adapter] Brak TYPEFULLY_API_KEY\")\n            raise create_error_response(\n                code=ErrorCodes.API_KEY_MISSING,",
          "values": {
            "strings": [
              "TYPEFULLY_API_KEY",
              "[Twitter Adapter] Brak TYPEFULLY_API_KEY"
            ],
            "numbers": []
          }
        },
        {
          "type": "required_elements",
          "platform": "twitter",
          "line": 685,
          "snippet": "                code=ErrorCodes.API_KEY_MISSING,\n                message=\"Brak konfiguracji API key dla Typefully. Skonfiguruj TYPEFULLY_API_KEY w zmiennych środowiskowych.\",\n                details={\"env_var\": \"TYPEFULLY_API_KEY\", \"required\": True},\n                status_code=503\n            )",
          "values": {
            "strings": [
              "Brak konfiguracji API key dla Typefully. Skonfiguruj TYPEFULLY_API_KEY w zmiennych środowiskowych.",
              "env_var",
              "TYPEFULLY_API_KEY",
              "required"
            ],
            "numbers": [
              503
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "twitter",
          "line": 706,
          "snippet": "            draft_id = draft_result.get(\"id\")\n            if not draft_id:\n                logger.error(\"[Twitter Adapter] Brak ID draftu w odpowiedzi Typefully\")\n                raise create_error_response(\n                    code=ErrorCodes.TYPEFULLY_API_ERROR,",
          "values": {
            "strings": [
              "id",
              "[Twitter Adapter] Brak ID draftu w odpowiedzi Typefully"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "twitter",
          "line": 750,
          "snippet": "            if rate_limit_monitor:\n                if needs_thread:\n                    await rate_limit_monitor.track_publication(\"twitter\", \"thread\")\n                else:\n                    await rate_limit_monitor.track_publication(\"twitter\", \"post\")",
          "values": {
            "strings": [
              "twitter",
              "thread",
              "twitter",
              "post"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "twitter",
          "line": 752,
          "snippet": "                    await rate_limit_monitor.track_publication(\"twitter\", \"thread\")\n                else:\n                    await rate_limit_monitor.track_publication(\"twitter\", \"post\")\n            \n            logger.info(f\"[Twitter Adapter] Typefully publikacja zakończona: {response.message}\")",
          "values": {
            "strings": [
              "twitter",
              "thread",
              "twitter",
              "post",
              "[Twitter Adapter] Typefully publikacja zakończona: {response.message}"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "twitter",
          "line": 754,
          "snippet": "                    await rate_limit_monitor.track_publication(\"twitter\", \"post\")\n            \n            logger.info(f\"[Twitter Adapter] Typefully publikacja zakończona: {response.message}\")\n            return response\n            ",
          "values": {
            "strings": [
              "twitter",
              "post",
              "[Twitter Adapter] Typefully publikacja zakończona: {response.message}"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "twitter",
          "line": 764,
          "snippet": "                error_code, error_message = parse_typefully_error(error_text, status_code)\n                \n                logger.error(f\"[Twitter Adapter] Błąd Typefully API {status_code}: {error_text}\")\n                \n                # Dodaj retry_after dla rate limit",
          "values": {
            "strings": [
              "[Twitter Adapter] Błąd Typefully API {status_code}: {error_text}"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "twitter",
          "line": 783,
          "snippet": "                )\n            else:\n                logger.error(f\"[Twitter Adapter] Błąd Typefully: {str(e)}\")\n                raise create_error_response(\n                    code=ErrorCodes.TYPEFULLY_API_ERROR,",
          "values": {
            "strings": [
              "[Twitter Adapter] Błąd Typefully: {str(e)}"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "twitter",
          "line": 795,
          "snippet": "        raise\n    except Exception as e:\n        logger.error(f\"[Twitter Adapter] Nieoczekiwany błąd: {str(e)}\")\n        raise create_error_response(\n            code=ErrorCodes.INTERNAL_ERROR,",
          "values": {
            "strings": [
              "[Twitter Adapter] Nieoczekiwany błąd: {str(e)}"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "twitter",
          "line": 809,
          "snippet": "    debug = os.getenv(\"DEBUG\", \"false\").lower() == \"true\"\n    \n    logger.info(f\"[Twitter Adapter] Uruchamianie serwera na {host}:{port}\")\n    \n    uvicorn.run(",
          "values": {
            "strings": [
              "DEBUG",
              "false",
              "true",
              "[Twitter Adapter] Uruchamianie serwera na {host}:{port}"
            ],
            "numbers": []
          }
        }
      ]
    },
    {
      "file": "/Users/hretheum/dev/bezrobocie/vector-wave/publisher/src/adapters/twitter/test_thread_splitting.py",
      "exists": true,
      "hits": []
    },
    {
      "file": "/Users/hretheum/dev/bezrobocie/vector-wave/publisher/src/adapters/ghost/platform_health_models.py",
      "exists": true,
      "hits": [
        {
          "type": "platform_specific",
          "platform": "twitter",
          "line": 71,
          "snippet": "    # Basic service info\n    status: HealthStatus = Field(..., description=\"Overall health status\")\n    service: str = Field(..., description=\"Service name (e.g., 'twitter-adapter')\")\n    platform: str = Field(..., description=\"Platform name (e.g., 'twitter')\")\n    version: str = Field(default=\"1.0.0\", description=\"Adapter version\")",
          "values": {
            "strings": [
              "Overall health status",
              "Service name (e.g., ",
              ")\n    platform: str = Field(..., description=",
              "twitter",
              ")\n    version: str = Field(default=",
              ", description="
            ],
            "numbers": [
              1,
              0,
              0
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "twitter",
          "line": 72,
          "snippet": "    status: HealthStatus = Field(..., description=\"Overall health status\")\n    service: str = Field(..., description=\"Service name (e.g., 'twitter-adapter')\")\n    platform: str = Field(..., description=\"Platform name (e.g., 'twitter')\")\n    version: str = Field(default=\"1.0.0\", description=\"Adapter version\")\n    timestamp: str = Field(",
          "values": {
            "strings": [
              "Overall health status",
              "Service name (e.g., ",
              ")\n    platform: str = Field(..., description=",
              "twitter",
              ")\n    version: str = Field(default=",
              ", description="
            ],
            "numbers": [
              1,
              0,
              0
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 85,
          "snippet": "    rate_limits: Optional[RateLimitStatus] = Field(default=None, description=\"Rate limit information\")\n    \n    # Session status (for browser-based platforms like LinkedIn)\n    session: Optional[SessionStatus] = Field(default=None, description=\"Session validity status\")\n    ",
          "values": {
            "strings": [
              "Rate limit information",
              "Session validity status"
            ],
            "numbers": []
          }
        }
      ]
    },
    {
      "file": "/Users/hretheum/dev/bezrobocie/vector-wave/publisher/src/adapters/ghost/models.py",
      "exists": true,
      "hits": [
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 2,
          "snippet": "\"\"\"\nGhost Adapter - Pydantic Models\nModele danych dla Ghost API integration\n\"\"\"",
          "values": {
            "strings": [
              "\nGhost Adapter - Pydantic Models\nModele danych dla Ghost API integration\n"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 3,
          "snippet": "\"\"\"\nGhost Adapter - Pydantic Models\nModele danych dla Ghost API integration\n\"\"\"\n",
          "values": {
            "strings": [
              "\nGhost Adapter - Pydantic Models\nModele danych dla Ghost API integration\n"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 13,
          "snippet": "\nclass PublishRequest(BaseModel):\n    \"\"\"Request model dla publikacji postu w Ghost\"\"\"\n    \n    title: str = Field(",
          "values": {
            "strings": [
              "Request model dla publikacji postu w Ghost"
            ],
            "numbers": []
          }
        },
        {
          "type": "max_length",
          "platform": "ghost",
          "line": 18,
          "snippet": "        ..., \n        min_length=1, \n        max_length=300,\n        description=\"Tytuł postu (wymagany, max 300 znaków)\"\n    )",
          "values": {
            "strings": [
              "Tytuł postu (wymagany, max 300 znaków)"
            ],
            "numbers": [
              1,
              300,
              300
            ]
          }
        },
        {
          "type": "max_length",
          "platform": "ghost",
          "line": 69,
          "snippet": "    excerpt: Optional[str] = Field(\n        default=None, \n        max_length=500,\n        description=\"Post excerpt/summary (max 500 znaków)\"\n    )",
          "values": {
            "strings": [
              "Post excerpt/summary (max 500 znaków)"
            ],
            "numbers": [
              500,
              500
            ]
          }
        },
        {
          "type": "max_length",
          "platform": "ghost",
          "line": 75,
          "snippet": "    custom_excerpt: Optional[str] = Field(\n        default=None, \n        max_length=500,\n        description=\"Niestandardowy excerpt (alias dla excerpt)\"\n    )",
          "values": {
            "strings": [
              "Niestandardowy excerpt (alias dla excerpt)"
            ],
            "numbers": [
              500
            ]
          }
        },
        {
          "type": "max_length",
          "platform": "ghost",
          "line": 92,
          "snippet": "    meta_title: Optional[str] = Field(\n        default=None,\n        max_length=300,\n        description=\"SEO meta title (max 300 znaków)\"\n    )",
          "values": {
            "strings": [
              "SEO meta title (max 300 znaków)"
            ],
            "numbers": [
              300,
              300
            ]
          }
        },
        {
          "type": "max_length",
          "platform": "ghost",
          "line": 98,
          "snippet": "    meta_description: Optional[str] = Field(\n        default=None,\n        max_length=500,\n        description=\"SEO meta description (max 500 znaków)\"\n    )",
          "values": {
            "strings": [
              "SEO meta description (max 500 znaków)"
            ],
            "numbers": [
              500,
              500
            ]
          }
        },
        {
          "type": "required_elements",
          "platform": "ghost",
          "line": 110,
          "snippet": "                datetime.fromisoformat(v.replace('Z', '+00:00'))\n            except ValueError:\n                raise ValueError('published_at must be valid ISO 8601 format')\n        return v\n    ",
          "values": {
            "strings": [
              ", ",
              "))\n            except ValueError:\n                raise ValueError("
            ],
            "numbers": [
              0,
              0,
              8601
            ]
          }
        },
        {
          "type": "required_elements",
          "platform": "ghost",
          "line": 120,
          "snippet": "                parsed = json.loads(v)\n                if not isinstance(parsed, dict) or 'root' not in parsed:\n                    raise ValueError('Lexical content must contain \"root\" object')\n            except json.JSONDecodeError:\n                raise ValueError('Invalid JSON format for lexical content')",
          "values": {
            "strings": [
              "root",
              "Lexical content must contain ",
              " object",
              "Invalid JSON format for lexical content"
            ],
            "numbers": []
          }
        },
        {
          "type": "required_elements",
          "platform": "ghost",
          "line": 129,
          "snippet": "        # Ensure at least one content field is provided\n        if not any([self.content, self.html, self.lexical]):\n            raise ValueError(\"At least one content field (content, html, or lexical) is required\")\n    \n    @validator('tags')",
          "values": {
            "strings": [
              "At least one content field (content, html, or lexical) is required",
              "tags"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 152,
          "snippet": "    post_id: str = Field(\n        ...,\n        description=\"ID utworzonego postu w Ghost\"\n    )\n    ",
          "values": {
            "strings": [
              "ID utworzonego postu w Ghost"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 189,
          "snippet": "    )\n    \n    ghost_configured: bool = Field(\n        ...,\n        description=\"Czy Ghost API jest skonfigurowane\"",
          "values": {
            "strings": [
              "Czy Ghost API jest skonfigurowane"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 191,
          "snippet": "    ghost_configured: bool = Field(\n        ...,\n        description=\"Czy Ghost API jest skonfigurowane\"\n    )\n    ",
          "values": {
            "strings": [
              "Czy Ghost API jest skonfigurowane"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 203,
          "snippet": "    \"\"\"Response model dla config endpoint\"\"\"\n    \n    ghost_api_configured: bool = Field(\n        ...,\n        description=\"Czy Ghost API key jest skonfigurowany\"",
          "values": {
            "strings": [
              "Response model dla config endpoint",
              "\n    \n    ghost_api_configured: bool = Field(\n        ...,\n        description="
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 205,
          "snippet": "    ghost_api_configured: bool = Field(\n        ...,\n        description=\"Czy Ghost API key jest skonfigurowany\"\n    )\n    ",
          "values": {
            "strings": [
              "Czy Ghost API key jest skonfigurowany"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 208,
          "snippet": "    )\n    \n    ghost_url: str = Field(\n        ...,\n        description=\"URL Ghost API\"",
          "values": {
            "strings": [
              "URL Ghost API"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 210,
          "snippet": "    ghost_url: str = Field(\n        ...,\n        description=\"URL Ghost API\"\n    )\n    ",
          "values": {
            "strings": [
              "URL Ghost API"
            ],
            "numbers": []
          }
        }
      ]
    },
    {
      "file": "/Users/hretheum/dev/bezrobocie/vector-wave/publisher/src/adapters/ghost/prometheus_metrics.py",
      "exists": true,
      "hits": [
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 3,
          "snippet": "#!/usr/bin/env python3\n\"\"\"\nPrometheus Metrics for Ghost Adapter - Task 5.1.2\nImplementacja metryki Prometheus dla Ghost CMS Adapter\n\"\"\"",
          "values": {
            "strings": [
              "\nPrometheus Metrics for Ghost Adapter - Task 5.1.2\nImplementacja metryki Prometheus dla Ghost CMS Adapter\n"
            ],
            "numbers": [
              3,
              5,
              1,
              2
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 4,
          "snippet": "\"\"\"\nPrometheus Metrics for Ghost Adapter - Task 5.1.2\nImplementacja metryki Prometheus dla Ghost CMS Adapter\n\"\"\"\n",
          "values": {
            "strings": [
              "\nPrometheus Metrics for Ghost Adapter - Task 5.1.2\nImplementacja metryki Prometheus dla Ghost CMS Adapter\n"
            ],
            "numbers": [
              5,
              1,
              2
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 16,
          "snippet": "logger = logging.getLogger(__name__)\n\nclass GhostAdapterMetrics:\n    \"\"\"Prometheus metrics for Ghost CMS Adapter\"\"\"\n    ",
          "values": {
            "strings": [
              "Prometheus metrics for Ghost CMS Adapter"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 17,
          "snippet": "\nclass GhostAdapterMetrics:\n    \"\"\"Prometheus metrics for Ghost CMS Adapter\"\"\"\n    \n    def __init__(self):",
          "values": {
            "strings": [
              "Prometheus metrics for Ghost CMS Adapter"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 22,
          "snippet": "        # Publication metrics\n        self.publications_total = Counter(\n            'ghost_publications_total',\n            'Total number of Ghost publications',\n            ['status', 'content_format', 'visibility']",
          "values": {
            "strings": [
              "ghost_publications_total",
              "Total number of Ghost publications",
              "status",
              "content_format",
              "visibility"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 23,
          "snippet": "        self.publications_total = Counter(\n            'ghost_publications_total',\n            'Total number of Ghost publications',\n            ['status', 'content_format', 'visibility']\n        )",
          "values": {
            "strings": [
              "ghost_publications_total",
              "Total number of Ghost publications",
              "status",
              "content_format",
              "visibility"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 28,
          "snippet": "        \n        self.publication_duration = Histogram(\n            'ghost_publication_duration_seconds',\n            'Time spent processing Ghost publications',\n            ['operation', 'status'],",
          "values": {
            "strings": [
              "ghost_publication_duration_seconds",
              "Time spent processing Ghost publications",
              "operation",
              "status"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 29,
          "snippet": "        self.publication_duration = Histogram(\n            'ghost_publication_duration_seconds',\n            'Time spent processing Ghost publications',\n            ['operation', 'status'],\n            buckets=(0.5, 1.0, 2.5, 5.0, 10.0, 30.0, 60.0)",
          "values": {
            "strings": [
              "ghost_publication_duration_seconds",
              "Time spent processing Ghost publications",
              "operation",
              "status"
            ],
            "numbers": [
              0,
              5,
              1,
              0,
              2,
              5,
              5,
              0,
              10,
              0
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 34,
          "snippet": "        )\n        \n        # Ghost API metrics\n        self.ghost_api_requests_total = Counter(\n            'ghost_api_requests_total',",
          "values": {
            "strings": [
              "ghost_api_requests_total"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 35,
          "snippet": "        \n        # Ghost API metrics\n        self.ghost_api_requests_total = Counter(\n            'ghost_api_requests_total',\n            'Total number of Ghost API requests',",
          "values": {
            "strings": [
              "ghost_api_requests_total",
              "Total number of Ghost API requests"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 36,
          "snippet": "        # Ghost API metrics\n        self.ghost_api_requests_total = Counter(\n            'ghost_api_requests_total',\n            'Total number of Ghost API requests',\n            ['endpoint', 'method', 'status_code']",
          "values": {
            "strings": [
              "ghost_api_requests_total",
              "Total number of Ghost API requests",
              "endpoint",
              "method",
              "status_code"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 37,
          "snippet": "        self.ghost_api_requests_total = Counter(\n            'ghost_api_requests_total',\n            'Total number of Ghost API requests',\n            ['endpoint', 'method', 'status_code']\n        )",
          "values": {
            "strings": [
              "ghost_api_requests_total",
              "Total number of Ghost API requests",
              "endpoint",
              "method",
              "status_code"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 41,
          "snippet": "        )\n        \n        self.ghost_api_response_time = Histogram(\n            'ghost_api_response_time_seconds',\n            'Ghost API response time',",
          "values": {
            "strings": [
              "ghost_api_response_time_seconds",
              "Ghost API response time"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 42,
          "snippet": "        \n        self.ghost_api_response_time = Histogram(\n            'ghost_api_response_time_seconds',\n            'Ghost API response time',\n            ['endpoint', 'method'],",
          "values": {
            "strings": [
              "ghost_api_response_time_seconds",
              "Ghost API response time",
              "endpoint",
              "method"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 43,
          "snippet": "        self.ghost_api_response_time = Histogram(\n            'ghost_api_response_time_seconds',\n            'Ghost API response time',\n            ['endpoint', 'method'],\n            buckets=(0.1, 0.5, 1.0, 2.5, 5.0, 10.0, 30.0)",
          "values": {
            "strings": [
              "ghost_api_response_time_seconds",
              "Ghost API response time",
              "endpoint",
              "method"
            ],
            "numbers": [
              0,
              1,
              0,
              5,
              1,
              0,
              2,
              5,
              5,
              0
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 50,
          "snippet": "        # Content metrics\n        self.posts_by_status = Gauge(\n            'ghost_posts_by_status',\n            'Number of posts by status',\n            ['status']",
          "values": {
            "strings": [
              "ghost_posts_by_status",
              "Number of posts by status",
              "status"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 56,
          "snippet": "        \n        self.content_length = Histogram(\n            'ghost_content_length_chars',\n            'Length of published content in characters',\n            buckets=(100, 500, 1000, 5000, 10000, 25000, 50000)",
          "values": {
            "strings": [
              "ghost_content_length_chars",
              "Length of published content in characters"
            ],
            "numbers": [
              100,
              500,
              1000,
              5000,
              10000,
              25000,
              50000
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 62,
          "snippet": "        \n        self.featured_posts = Counter(\n            'ghost_featured_posts_total',\n            'Number of featured posts created'\n        )",
          "values": {
            "strings": [
              "ghost_featured_posts_total",
              "Number of featured posts created"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 68,
          "snippet": "        # Post operations\n        self.post_operations = Counter(\n            'ghost_post_operations_total',\n            'Number of post operations',\n            ['operation', 'status']",
          "values": {
            "strings": [
              "ghost_post_operations_total",
              "Number of post operations",
              "operation",
              "status"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 75,
          "snippet": "        # Schedule operations\n        self.scheduled_posts = Gauge(\n            'ghost_scheduled_posts',\n            'Number of currently scheduled posts'\n        )",
          "values": {
            "strings": [
              "ghost_scheduled_posts",
              "Number of currently scheduled posts"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 80,
          "snippet": "        \n        self.schedule_operations = Counter(\n            'ghost_schedule_operations_total',\n            'Number of schedule operations',\n            ['operation', 'status']",
          "values": {
            "strings": [
              "ghost_schedule_operations_total",
              "Number of schedule operations",
              "operation",
              "status"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 87,
          "snippet": "        # Batch operations\n        self.batch_operations = Counter(\n            'ghost_batch_operations_total',\n            'Number of batch operations',\n            ['operation', 'status']",
          "values": {
            "strings": [
              "ghost_batch_operations_total",
              "Number of batch operations",
              "operation",
              "status"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 93,
          "snippet": "        \n        self.batch_operation_size = Histogram(\n            'ghost_batch_operation_size',\n            'Size of batch operations (number of items)',\n            buckets=(1, 5, 10, 25, 50)",
          "values": {
            "strings": [
              "ghost_batch_operation_size",
              "Size of batch operations (number of items)"
            ],
            "numbers": [
              1,
              5,
              10,
              25,
              50
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 100,
          "snippet": "        # Error tracking\n        self.errors_total = Counter(\n            'ghost_errors_total',\n            'Total number of errors',\n            ['error_type', 'endpoint']",
          "values": {
            "strings": [
              "ghost_errors_total",
              "Total number of errors",
              "error_type",
              "endpoint"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 105,
          "snippet": "        )\n        \n        self.ghost_api_errors = Counter(\n            'ghost_api_errors_total',\n            'Ghost API specific errors',",
          "values": {
            "strings": [
              "ghost_api_errors_total",
              "Ghost API specific errors"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 106,
          "snippet": "        \n        self.ghost_api_errors = Counter(\n            'ghost_api_errors_total',\n            'Ghost API specific errors',\n            ['error_code', 'operation']",
          "values": {
            "strings": [
              "ghost_api_errors_total",
              "Ghost API specific errors",
              "error_code",
              "operation"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 107,
          "snippet": "        self.ghost_api_errors = Counter(\n            'ghost_api_errors_total',\n            'Ghost API specific errors',\n            ['error_code', 'operation']\n        )",
          "values": {
            "strings": [
              "ghost_api_errors_total",
              "Ghost API specific errors",
              "error_code",
              "operation"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 113,
          "snippet": "        # Task 5.3: Retry metrics\n        self.retry_attempts_total = Counter(\n            'ghost_retry_attempts_total',\n            'Total number of retry attempts',\n            ['operation', 'retry_reason']",
          "values": {
            "strings": [
              "ghost_retry_attempts_total",
              "Total number of retry attempts",
              "operation",
              "retry_reason"
            ],
            "numbers": [
              5,
              3
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 119,
          "snippet": "        \n        self.retry_delay = Histogram(\n            'ghost_retry_delay_seconds',\n            'Delay between retry attempts',\n            buckets=(1.0, 2.0, 4.0, 8.0, 16.0, 32.0)",
          "values": {
            "strings": [
              "ghost_retry_delay_seconds",
              "Delay between retry attempts"
            ],
            "numbers": [
              1,
              0,
              2,
              0,
              4,
              0,
              8,
              0,
              16,
              0
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 126,
          "snippet": "        # HTTP request metrics\n        self.http_requests_total = Counter(\n            'ghost_http_requests_total',\n            'Total number of HTTP requests to Ghost adapter',\n            ['method', 'endpoint', 'status_code']",
          "values": {
            "strings": [
              "ghost_http_requests_total",
              "Total number of HTTP requests to Ghost adapter",
              "method",
              "endpoint",
              "status_code"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 127,
          "snippet": "        self.http_requests_total = Counter(\n            'ghost_http_requests_total',\n            'Total number of HTTP requests to Ghost adapter',\n            ['method', 'endpoint', 'status_code']\n        )",
          "values": {
            "strings": [
              "ghost_http_requests_total",
              "Total number of HTTP requests to Ghost adapter",
              "method",
              "endpoint",
              "status_code"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 132,
          "snippet": "        \n        self.http_request_duration = Histogram(\n            'ghost_http_request_duration_seconds',\n            'HTTP request duration',\n            ['method', 'endpoint'],",
          "values": {
            "strings": [
              "ghost_http_request_duration_seconds",
              "HTTP request duration",
              "method",
              "endpoint"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 140,
          "snippet": "        # Health and connectivity\n        self.adapter_health = Gauge(\n            'ghost_adapter_health',\n            'Ghost adapter health status (1=healthy, 0=unhealthy)'\n        )",
          "values": {
            "strings": [
              "ghost_adapter_health",
              "Ghost adapter health status (1=healthy, 0=unhealthy)"
            ],
            "numbers": [
              1,
              0
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 141,
          "snippet": "        self.adapter_health = Gauge(\n            'ghost_adapter_health',\n            'Ghost adapter health status (1=healthy, 0=unhealthy)'\n        )\n        ",
          "values": {
            "strings": [
              "ghost_adapter_health",
              "Ghost adapter health status (1=healthy, 0=unhealthy)"
            ],
            "numbers": [
              1,
              0
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 144,
          "snippet": "        )\n        \n        self.ghost_api_health = Gauge(\n            'ghost_api_health',\n            'Ghost API health status (1=healthy, 0=unhealthy)'",
          "values": {
            "strings": [
              "ghost_api_health",
              "Ghost API health status (1=healthy, 0=unhealthy)"
            ],
            "numbers": [
              1,
              0
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 145,
          "snippet": "        \n        self.ghost_api_health = Gauge(\n            'ghost_api_health',\n            'Ghost API health status (1=healthy, 0=unhealthy)'\n        )",
          "values": {
            "strings": [
              "ghost_api_health",
              "Ghost API health status (1=healthy, 0=unhealthy)"
            ],
            "numbers": [
              1,
              0
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 146,
          "snippet": "        self.ghost_api_health = Gauge(\n            'ghost_api_health',\n            'Ghost API health status (1=healthy, 0=unhealthy)'\n        )\n        ",
          "values": {
            "strings": [
              "ghost_api_health",
              "Ghost API health status (1=healthy, 0=unhealthy)"
            ],
            "numbers": [
              1,
              0
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 149,
          "snippet": "        )\n        \n        self.ghost_api_response_time_health = Gauge(\n            'ghost_api_response_time_ms',\n            'Ghost API response time in milliseconds'",
          "values": {
            "strings": [
              "ghost_api_response_time_ms",
              "Ghost API response time in milliseconds"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 150,
          "snippet": "        \n        self.ghost_api_response_time_health = Gauge(\n            'ghost_api_response_time_ms',\n            'Ghost API response time in milliseconds'\n        )",
          "values": {
            "strings": [
              "ghost_api_response_time_ms",
              "Ghost API response time in milliseconds"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 151,
          "snippet": "        self.ghost_api_response_time_health = Gauge(\n            'ghost_api_response_time_ms',\n            'Ghost API response time in milliseconds'\n        )\n        ",
          "values": {
            "strings": [
              "ghost_api_response_time_ms",
              "Ghost API response time in milliseconds"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 155,
          "snippet": "        \n        # Configuration\n        self.ghost_configured = Gauge(\n            'ghost_api_configured',\n            'Ghost API configuration status (1=configured, 0=not configured)'",
          "values": {
            "strings": [
              "ghost_api_configured",
              "Ghost API configuration status (1=configured, 0=not configured)"
            ],
            "numbers": [
              1,
              0
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 156,
          "snippet": "        # Configuration\n        self.ghost_configured = Gauge(\n            'ghost_api_configured',\n            'Ghost API configuration status (1=configured, 0=not configured)'\n        )",
          "values": {
            "strings": [
              "ghost_api_configured",
              "Ghost API configuration status (1=configured, 0=not configured)"
            ],
            "numbers": [
              1,
              0
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 157,
          "snippet": "        self.ghost_configured = Gauge(\n            'ghost_api_configured',\n            'Ghost API configuration status (1=configured, 0=not configured)'\n        )\n        ",
          "values": {
            "strings": [
              "ghost_api_configured",
              "Ghost API configuration status (1=configured, 0=not configured)"
            ],
            "numbers": [
              1,
              0
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 162,
          "snippet": "        # System info\n        self.system_info = Info(\n            'ghost_adapter_system',\n            'Ghost adapter system information'\n        )",
          "values": {
            "strings": [
              "ghost_adapter_system",
              "Ghost adapter system information"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 163,
          "snippet": "        self.system_info = Info(\n            'ghost_adapter_system',\n            'Ghost adapter system information'\n        )\n        ",
          "values": {
            "strings": [
              "ghost_adapter_system",
              "Ghost adapter system information"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 169,
          "snippet": "        self.system_info.info({\n            'version': '1.0.0',\n            'service': 'ghost-adapter',\n            'platform': 'ghost',\n            'content_formats': 'html,lexical'",
          "values": {
            "strings": [
              "version",
              "1.0.0",
              "service",
              "ghost-adapter",
              "platform",
              "ghost",
              "content_formats",
              "html,lexical"
            ],
            "numbers": [
              1,
              0,
              0
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 170,
          "snippet": "            'version': '1.0.0',\n            'service': 'ghost-adapter',\n            'platform': 'ghost',\n            'content_formats': 'html,lexical'\n        })",
          "values": {
            "strings": [
              "version",
              "1.0.0",
              "service",
              "ghost-adapter",
              "platform",
              "ghost",
              "content_formats",
              "html,lexical"
            ],
            "numbers": [
              1,
              0,
              0
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 177,
          "snippet": "        self.adapter_health.set(1)\n        \n        logger.info(\"Ghost Adapter Prometheus metrics initialized\")\n    \n    def track_publication(self, status: str, content_format: str = \"html\", visibility: str = \"public\", content_length: int = 0, featured: bool = False):",
          "values": {
            "strings": [
              "Ghost Adapter Prometheus metrics initialized",
              "html",
              "public"
            ],
            "numbers": [
              1,
              0
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 202,
          "snippet": "        ).observe(duration)\n    \n    def track_ghost_api_request(self, endpoint: str, method: str, status_code: int, duration: float):\n        \"\"\"Track Ghost API request\"\"\"\n        self.ghost_api_requests_total.labels(",
          "values": {
            "strings": [
              "Track Ghost API request"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 203,
          "snippet": "    \n    def track_ghost_api_request(self, endpoint: str, method: str, status_code: int, duration: float):\n        \"\"\"Track Ghost API request\"\"\"\n        self.ghost_api_requests_total.labels(\n            endpoint=endpoint,",
          "values": {
            "strings": [
              "Track Ghost API request"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 204,
          "snippet": "    def track_ghost_api_request(self, endpoint: str, method: str, status_code: int, duration: float):\n        \"\"\"Track Ghost API request\"\"\"\n        self.ghost_api_requests_total.labels(\n            endpoint=endpoint,\n            method=method,",
          "values": {
            "strings": [
              "Track Ghost API request"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 210,
          "snippet": "        ).inc()\n        \n        self.ghost_api_response_time.labels(\n            endpoint=endpoint,\n            method=method",
          "values": {
            "strings": [],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 217,
          "snippet": "        # Update API health based on response\n        if 200 <= status_code < 500:\n            self.ghost_api_health.set(1)\n            self.ghost_api_response_time_health.set(duration * 1000)  # Convert to ms\n        else:",
          "values": {
            "strings": [],
            "numbers": [
              200,
              500,
              1,
              1000
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 218,
          "snippet": "        if 200 <= status_code < 500:\n            self.ghost_api_health.set(1)\n            self.ghost_api_response_time_health.set(duration * 1000)  # Convert to ms\n        else:\n            self.ghost_api_health.set(0)",
          "values": {
            "strings": [],
            "numbers": [
              200,
              500,
              1,
              1000,
              0
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 220,
          "snippet": "            self.ghost_api_response_time_health.set(duration * 1000)  # Convert to ms\n        else:\n            self.ghost_api_health.set(0)\n    \n    def update_posts_by_status(self, status_counts: Dict[str, int]):",
          "values": {
            "strings": [],
            "numbers": [
              1000,
              0
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 265,
          "snippet": "        logger.debug(f\"Tracked error: {error_type} at {endpoint}\")\n    \n    def track_ghost_api_error(self, error_code: str, operation: str):\n        \"\"\"Track Ghost API specific error\"\"\"\n        self.ghost_api_errors.labels(",
          "values": {
            "strings": [
              "Tracked error: {error_type} at {endpoint}",
              "Track Ghost API specific error"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 266,
          "snippet": "    \n    def track_ghost_api_error(self, error_code: str, operation: str):\n        \"\"\"Track Ghost API specific error\"\"\"\n        self.ghost_api_errors.labels(\n            error_code=error_code,",
          "values": {
            "strings": [
              "Track Ghost API specific error"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 267,
          "snippet": "    def track_ghost_api_error(self, error_code: str, operation: str):\n        \"\"\"Track Ghost API specific error\"\"\"\n        self.ghost_api_errors.labels(\n            error_code=error_code,\n            operation=operation",
          "values": {
            "strings": [
              "Track Ghost API specific error"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 271,
          "snippet": "            operation=operation\n        ).inc()\n        logger.debug(f\"Tracked Ghost API error: {error_code} in {operation}\")\n    \n    def track_retry(self, operation: str, reason: str, delay: float):",
          "values": {
            "strings": [
              "Tracked Ghost API error: {error_code} in {operation}"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 302,
          "snippet": "        logger.debug(f\"Set adapter health: {health_value}\")\n    \n    def set_ghost_api_health(self, healthy: bool, response_time_ms: Optional[float] = None):\n        \"\"\"Set Ghost API health status\"\"\"\n        health_value = 1 if healthy else 0",
          "values": {
            "strings": [
              "Set adapter health: {health_value}",
              "Set Ghost API health status"
            ],
            "numbers": [
              1,
              0
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 303,
          "snippet": "    \n    def set_ghost_api_health(self, healthy: bool, response_time_ms: Optional[float] = None):\n        \"\"\"Set Ghost API health status\"\"\"\n        health_value = 1 if healthy else 0\n        self.ghost_api_health.set(health_value)",
          "values": {
            "strings": [
              "Set Ghost API health status"
            ],
            "numbers": [
              1,
              0
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 305,
          "snippet": "        \"\"\"Set Ghost API health status\"\"\"\n        health_value = 1 if healthy else 0\n        self.ghost_api_health.set(health_value)\n        \n        if response_time_ms is not None:",
          "values": {
            "strings": [
              "Set Ghost API health status"
            ],
            "numbers": [
              1,
              0
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 308,
          "snippet": "        \n        if response_time_ms is not None:\n            self.ghost_api_response_time_health.set(response_time_ms)\n        \n        logger.debug(f\"Set Ghost API health: {health_value}\")",
          "values": {
            "strings": [
              "Set Ghost API health: {health_value}"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 310,
          "snippet": "            self.ghost_api_response_time_health.set(response_time_ms)\n        \n        logger.debug(f\"Set Ghost API health: {health_value}\")\n    \n    def set_ghost_configured(self, configured: bool):",
          "values": {
            "strings": [
              "Set Ghost API health: {health_value}"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 312,
          "snippet": "        logger.debug(f\"Set Ghost API health: {health_value}\")\n    \n    def set_ghost_configured(self, configured: bool):\n        \"\"\"Set Ghost API configuration status\"\"\"\n        config_value = 1 if configured else 0",
          "values": {
            "strings": [
              "Set Ghost API health: {health_value}",
              "Set Ghost API configuration status"
            ],
            "numbers": [
              1,
              0
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 313,
          "snippet": "    \n    def set_ghost_configured(self, configured: bool):\n        \"\"\"Set Ghost API configuration status\"\"\"\n        config_value = 1 if configured else 0\n        self.ghost_configured.set(config_value)",
          "values": {
            "strings": [
              "Set Ghost API configuration status"
            ],
            "numbers": [
              1,
              0
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 315,
          "snippet": "        \"\"\"Set Ghost API configuration status\"\"\"\n        config_value = 1 if configured else 0\n        self.ghost_configured.set(config_value)\n    \n    def get_metrics_data(self) -> str:",
          "values": {
            "strings": [
              "Set Ghost API configuration status"
            ],
            "numbers": [
              1,
              0
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 322,
          "snippet": "\n# Global metrics instance\nghost_metrics = GhostAdapterMetrics()\n\ndef track_publication_metrics(func):",
          "values": {
            "strings": [],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 355,
          "snippet": "            \n            # Track successful publication\n            ghost_metrics.track_publication(\n                status=status,\n                content_format=content_format,",
          "values": {
            "strings": [],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 363,
          "snippet": "            )\n            \n            ghost_metrics.track_post_operation(\"create\", \"success\")\n            \n            return result",
          "values": {
            "strings": [
              "create",
              "success"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 373,
          "snippet": "            error_type = \"UNKNOWN_ERROR\"\n            if hasattr(e, 'detail'):\n                if 'Ghost API error' in str(e.detail):\n                    error_type = \"GHOST_API_ERROR\"\n                elif 'not configured' in str(e.detail):",
          "values": {
            "strings": [
              "UNKNOWN_ERROR",
              "detail",
              "Ghost API error",
              "GHOST_API_ERROR",
              "not configured"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 374,
          "snippet": "            if hasattr(e, 'detail'):\n                if 'Ghost API error' in str(e.detail):\n                    error_type = \"GHOST_API_ERROR\"\n                elif 'not configured' in str(e.detail):\n                    error_type = \"CONFIGURATION_ERROR\"",
          "values": {
            "strings": [
              "detail",
              "Ghost API error",
              "GHOST_API_ERROR",
              "not configured",
              "CONFIGURATION_ERROR"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 380,
          "snippet": "                    error_type = \"VALIDATION_ERROR\"\n            \n            ghost_metrics.track_error(error_type, \"/publish\")\n            ghost_metrics.track_publication(\n                status=status,",
          "values": {
            "strings": [
              "VALIDATION_ERROR",
              "/publish"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 381,
          "snippet": "            \n            ghost_metrics.track_error(error_type, \"/publish\")\n            ghost_metrics.track_publication(\n                status=status,\n                content_format=content_format,",
          "values": {
            "strings": [
              "/publish"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 388,
          "snippet": "                featured=featured\n            )\n            ghost_metrics.track_post_operation(\"create\", \"error\")\n            raise\n        finally:",
          "values": {
            "strings": [
              "create",
              "error"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 392,
          "snippet": "        finally:\n            duration = time.time() - start_time\n            ghost_metrics.track_publication_duration(operation, status, duration)\n    \n    return wrapper",
          "values": {
            "strings": [],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 424,
          "snippet": "        finally:\n            duration = time.time() - start_time\n            ghost_metrics.track_http_request(method, endpoint, status_code, duration)\n    \n    return wrapper",
          "values": {
            "strings": [],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 428,
          "snippet": "    return wrapper\n\ndef track_ghost_api_metrics(endpoint: str, method: str = \"GET\"):\n    \"\"\"Decorator to track Ghost API metrics\"\"\"\n    def decorator(func):",
          "values": {
            "strings": [
              "GET",
              "Decorator to track Ghost API metrics"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 429,
          "snippet": "\ndef track_ghost_api_metrics(endpoint: str, method: str = \"GET\"):\n    \"\"\"Decorator to track Ghost API metrics\"\"\"\n    def decorator(func):\n        @wraps(func)",
          "values": {
            "strings": [
              "GET",
              "Decorator to track Ghost API metrics"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 440,
          "snippet": "                return result\n            except Exception as e:\n                # Try to extract status code from Ghost API exception\n                if hasattr(e, 'status_code'):\n                    status_code = e.status_code",
          "values": {
            "strings": [
              "status_code"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 446,
          "snippet": "                    status_code = 500\n                    \n                # Track specific Ghost API errors\n                if 'GhostAPIError' in str(type(e)):\n                    ghost_metrics.track_ghost_api_error(str(status_code), endpoint)",
          "values": {
            "strings": [
              "GhostAPIError"
            ],
            "numbers": [
              500
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 447,
          "snippet": "                    \n                # Track specific Ghost API errors\n                if 'GhostAPIError' in str(type(e)):\n                    ghost_metrics.track_ghost_api_error(str(status_code), endpoint)\n                    ",
          "values": {
            "strings": [
              "GhostAPIError"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 448,
          "snippet": "                # Track specific Ghost API errors\n                if 'GhostAPIError' in str(type(e)):\n                    ghost_metrics.track_ghost_api_error(str(status_code), endpoint)\n                    \n                raise",
          "values": {
            "strings": [
              "GhostAPIError"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 453,
          "snippet": "            finally:\n                duration = time.time() - start_time\n                ghost_metrics.track_ghost_api_request(endpoint, method, status_code, duration)\n        \n        return wrapper",
          "values": {
            "strings": [],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 467,
          "snippet": "            try:\n                result = await func(*args, **kwargs)\n                ghost_metrics.track_schedule_operation(operation, status)\n                return result\n            except Exception as e:",
          "values": {
            "strings": [],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 471,
          "snippet": "            except Exception as e:\n                status = \"error\"\n                ghost_metrics.track_schedule_operation(operation, status)\n                raise\n        ",
          "values": {
            "strings": [
              "error"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 491,
          "snippet": "                \n                result = await func(*args, **kwargs)\n                ghost_metrics.track_batch_operation(operation, status, batch_size)\n                return result\n            except Exception as e:",
          "values": {
            "strings": [],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 495,
          "snippet": "            except Exception as e:\n                status = \"error\"\n                ghost_metrics.track_batch_operation(operation, status, batch_size)\n                raise\n        ",
          "values": {
            "strings": [
              "error"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 502,
          "snippet": "\n# Initialize metrics on import\nlogger.info(\"Ghost Adapter Prometheus metrics loaded and ready\")",
          "values": {
            "strings": [
              "Ghost Adapter Prometheus metrics loaded and ready"
            ],
            "numbers": []
          }
        }
      ]
    },
    {
      "file": "/Users/hretheum/dev/bezrobocie/vector-wave/publisher/src/adapters/ghost/README.md",
      "exists": true,
      "hits": [
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 1,
          "snippet": "# Ghost Adapter\n\nMikroserwis do publikacji treści w Ghost CMS przez Ghost Admin API.",
          "values": {
            "strings": [],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 3,
          "snippet": "# Ghost Adapter\n\nMikroserwis do publikacji treści w Ghost CMS przez Ghost Admin API.\n\n## 🚀 Quick Start",
          "values": {
            "strings": [],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 9,
          "snippet": "```bash\n# W katalogu publisher/\nmake build-ghost\nmake up-ghost\n",
          "values": {
            "strings": [],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 10,
          "snippet": "# W katalogu publisher/\nmake build-ghost\nmake up-ghost\n\n# Test",
          "values": {
            "strings": [],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 13,
          "snippet": "\n# Test\nmake test-ghost-skeleton\n```\n",
          "values": {
            "strings": [],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 28,
          "snippet": "```bash\n# .env file\nGHOST_API_URL=https://your-site.ghost.io\nGHOST_API_KEY=your_admin_api_key_here\n```",
          "values": {
            "strings": [],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 29,
          "snippet": "# .env file\nGHOST_API_URL=https://your-site.ghost.io\nGHOST_API_KEY=your_admin_api_key_here\n```\n",
          "values": {
            "strings": [],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 35,
          "snippet": "\n- ✅ **Task 4.1**: Szkielet usługi (ukończony)\n- ✅ **Task 4.2**: JWT Authentication & Ghost API Client (ukończony 2025-08-07)\n- ✅ **Task 4.3**: Endpoint POST /publish (ukończony 2025-08-07)\n- ✅ **Task 4.4**: Harmonogram publikacji (ukończony 2025-08-07)",
          "values": {
            "strings": [],
            "numbers": [
              4,
              1,
              4,
              2,
              2025,
              8,
              7,
              4,
              3,
              2025
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 44,
          "snippet": "\n```bash\nmake test-ghost-basic       # Podstawowe testy\nmake test-ghost-skeleton    # Task 4.1 test suite (20 testów)\nmake test-ghost-auth        # Task 4.2 authentication tests (24 testów)",
          "values": {
            "strings": [],
            "numbers": [
              4,
              1,
              20,
              4,
              2,
              24
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 45,
          "snippet": "```bash\nmake test-ghost-basic       # Podstawowe testy\nmake test-ghost-skeleton    # Task 4.1 test suite (20 testów)\nmake test-ghost-auth        # Task 4.2 authentication tests (24 testów)\nmake test-ghost-publish     # Task 4.3 publication tests (21 testów)",
          "values": {
            "strings": [],
            "numbers": [
              4,
              1,
              20,
              4,
              2,
              24,
              4,
              3,
              21
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 46,
          "snippet": "make test-ghost-basic       # Podstawowe testy\nmake test-ghost-skeleton    # Task 4.1 test suite (20 testów)\nmake test-ghost-auth        # Task 4.2 authentication tests (24 testów)\nmake test-ghost-publish     # Task 4.3 publication tests (21 testów)\nmake test-ghost-schedule    # Task 4.4 schedule management tests (21 testów)",
          "values": {
            "strings": [],
            "numbers": [
              4,
              1,
              20,
              4,
              2,
              24,
              4,
              3,
              21,
              4
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 47,
          "snippet": "make test-ghost-skeleton    # Task 4.1 test suite (20 testów)\nmake test-ghost-auth        # Task 4.2 authentication tests (24 testów)\nmake test-ghost-publish     # Task 4.3 publication tests (21 testów)\nmake test-ghost-schedule    # Task 4.4 schedule management tests (21 testów)\n```",
          "values": {
            "strings": [],
            "numbers": [
              4,
              1,
              20,
              4,
              2,
              24,
              4,
              3,
              21,
              4
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 48,
          "snippet": "make test-ghost-auth        # Task 4.2 authentication tests (24 testów)\nmake test-ghost-publish     # Task 4.3 publication tests (21 testów)\nmake test-ghost-schedule    # Task 4.4 schedule management tests (21 testów)\n```\n",
          "values": {
            "strings": [],
            "numbers": [
              4,
              2,
              24,
              4,
              3,
              21,
              4,
              4,
              21
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 54,
          "snippet": "\n```bash\nmake logs-ghost            # Container logs\ncurl localhost:8086/health # Health check\n```",
          "values": {
            "strings": [],
            "numbers": [
              8086
            ]
          }
        }
      ]
    },
    {
      "file": "/Users/hretheum/dev/bezrobocie/vector-wave/publisher/src/adapters/ghost/ghost_client.py",
      "exists": true,
      "hits": [
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 2,
          "snippet": "\"\"\"\nGhost Adapter - API Client\nClient do komunikacji z Ghost Admin API z JWT Authentication\n",
          "values": {
            "strings": [],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 3,
          "snippet": "\"\"\"\nGhost Adapter - API Client\nClient do komunikacji z Ghost Admin API z JWT Authentication\n\nTask 4.2: Implementacja JWT Authentication i prawdziwej komunikacji z Ghost API",
          "values": {
            "strings": [],
            "numbers": [
              4,
              2
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 5,
          "snippet": "Client do komunikacji z Ghost Admin API z JWT Authentication\n\nTask 4.2: Implementacja JWT Authentication i prawdziwej komunikacji z Ghost API\n\"\"\"\n",
          "values": {
            "strings": [],
            "numbers": [
              4,
              2
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 22,
          "snippet": "\n\nclass GhostAPIError(Exception):\n    \"\"\"Enhanced exception dla błędów Ghost API\"\"\"\n    ",
          "values": {
            "strings": [
              "Enhanced exception dla błędów Ghost API"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 23,
          "snippet": "\nclass GhostAPIError(Exception):\n    \"\"\"Enhanced exception dla błędów Ghost API\"\"\"\n    \n    ERROR_CATEGORIES = {",
          "values": {
            "strings": [
              "Enhanced exception dla błędów Ghost API"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 45,
          "snippet": "\n\nclass GhostClient:\n    \"\"\"\n    Ghost Admin API Client z JWT Authentication",
          "values": {
            "strings": [],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 47,
          "snippet": "class GhostClient:\n    \"\"\"\n    Ghost Admin API Client z JWT Authentication\n    \n    Task 4.2: Pełna implementacja JWT authentication i Ghost API komunikacji",
          "values": {
            "strings": [],
            "numbers": [
              4,
              2
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 49,
          "snippet": "    Ghost Admin API Client z JWT Authentication\n    \n    Task 4.2: Pełna implementacja JWT authentication i Ghost API komunikacji\n    Obsługuje Ghost Admin API v6.0 z HS256 JWT tokens\n    \"\"\"",
          "values": {
            "strings": [],
            "numbers": [
              4,
              2,
              6,
              0,
              256
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 50,
          "snippet": "    \n    Task 4.2: Pełna implementacja JWT authentication i Ghost API komunikacji\n    Obsługuje Ghost Admin API v6.0 z HS256 JWT tokens\n    \"\"\"\n    ",
          "values": {
            "strings": [],
            "numbers": [
              4,
              2,
              6,
              0,
              256
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 55,
          "snippet": "    def __init__(self, api_url: str, api_key: str):\n        \"\"\"\n        Initialize Ghost API client z JWT authentication\n        \n        Args:",
          "values": {
            "strings": [],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 58,
          "snippet": "        \n        Args:\n            api_url: URL Ghost site (e.g. https://myblog.ghost.io)\n            api_key: Ghost Admin API key (format: id:secret)\n            ",
          "values": {
            "strings": [],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 59,
          "snippet": "        Args:\n            api_url: URL Ghost site (e.g. https://myblog.ghost.io)\n            api_key: Ghost Admin API key (format: id:secret)\n            \n        Raises:",
          "values": {
            "strings": [],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 66,
          "snippet": "        self.api_url = api_url.rstrip('/')\n        self.api_key = api_key\n        self.base_url = f\"{self.api_url}/ghost/api/admin\"\n        \n        # Parse API key (format: id:secret)",
          "values": {
            "strings": [
              ")\n        self.api_key = api_key\n        self.base_url = f"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 74,
          "snippet": "            bytes.fromhex(self.key_secret)\n        except (ValueError, TypeError) as e:\n            raise ValueError(f\"Invalid Ghost API key format. Expected 'id:secret' with hex secret. Error: {str(e)}\")\n        \n        # Stats tracking",
          "values": {
            "strings": [
              "Invalid Ghost API key format. Expected ",
              " with hex secret. Error: {str(e)}"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 80,
          "snippet": "        self.error_count = 0\n        \n        logger.info(f\"[GhostClient] Initialized for {self.api_url} with key ID: {self.key_id}\")\n    \n    def _generate_jwt_token(self) -> str:",
          "values": {
            "strings": [
              "[GhostClient] Initialized for {self.api_url} with key ID: {self.key_id}"
            ],
            "numbers": [
              0
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 84,
          "snippet": "    def _generate_jwt_token(self) -> str:\n        \"\"\"\n        Generate JWT token dla Ghost Admin API authentication\n        \n        Ghost API wymaga:",
          "values": {
            "strings": [],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 86,
          "snippet": "        Generate JWT token dla Ghost Admin API authentication\n        \n        Ghost API wymaga:\n        - Algorithm: HS256\n        - Header: alg, typ, kid (key ID)",
          "values": {
            "strings": [],
            "numbers": [
              256
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 96,
          "snippet": "            \n        Raises:\n            GhostAPIError: Jeśli generowanie tokenu się nie powiedzie\n        \"\"\"\n        try:",
          "values": {
            "strings": [],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 111,
          "snippet": "            payload = {\n                'iat': now,                    # Issued at (now)\n                'exp': now + 300,              # Expires in 5 minutes (Ghost requirement)\n                'aud': '/admin/'               # Audience (Ghost Admin API)\n            }",
          "values": {
            "strings": [
              "iat",
              "exp",
              "aud",
              "/admin/"
            ],
            "numbers": [
              300,
              5
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 112,
          "snippet": "                'iat': now,                    # Issued at (now)\n                'exp': now + 300,              # Expires in 5 minutes (Ghost requirement)\n                'aud': '/admin/'               # Audience (Ghost Admin API)\n            }\n            ",
          "values": {
            "strings": [
              "iat",
              "exp",
              "aud",
              "/admin/"
            ],
            "numbers": [
              300,
              5
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 126,
          "snippet": "            )\n            \n            logger.debug(f\"[GhostClient] Generated JWT token (expires: {datetime.fromtimestamp(payload['exp'])})\")\n            return token\n            ",
          "values": {
            "strings": [
              "[GhostClient] Generated JWT token (expires: {datetime.fromtimestamp(payload[",
              "])})"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 130,
          "snippet": "            \n        except Exception as e:\n            logger.error(f\"[GhostClient] JWT token generation failed: {str(e)}\")\n            raise GhostAPIError(f\"JWT token generation failed: {str(e)}\")\n",
          "values": {
            "strings": [
              "[GhostClient] JWT token generation failed: {str(e)}",
              "JWT token generation failed: {str(e)}"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 131,
          "snippet": "        except Exception as e:\n            logger.error(f\"[GhostClient] JWT token generation failed: {str(e)}\")\n            raise GhostAPIError(f\"JWT token generation failed: {str(e)}\")\n\n    def _make_request(self, method: str, endpoint: str, data: Optional[Dict] = None, params: Optional[Dict] = None) -> Dict:",
          "values": {
            "strings": [
              "[GhostClient] JWT token generation failed: {str(e)}",
              "JWT token generation failed: {str(e)}"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 135,
          "snippet": "    def _make_request(self, method: str, endpoint: str, data: Optional[Dict] = None, params: Optional[Dict] = None) -> Dict:\n        \"\"\"\n        Make authenticated request do Ghost Admin API\n        \n        Args:",
          "values": {
            "strings": [],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 147,
          "snippet": "            \n        Raises:\n            GhostAPIError: Dla błędów API lub komunikacji\n        \"\"\"\n        self.request_count += 1",
          "values": {
            "strings": [],
            "numbers": [
              1
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 157,
          "snippet": "            # Prepare headers\n            headers = {\n                'Authorization': f'Ghost {token}',\n                'Content-Type': 'application/json',\n                'Accept-Version': 'v6.0',",
          "values": {
            "strings": [
              "Authorization",
              "Ghost {token}",
              "Content-Type",
              "application/json",
              "Accept-Version",
              "v6.0"
            ],
            "numbers": [
              6,
              0
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 160,
          "snippet": "                'Content-Type': 'application/json',\n                'Accept-Version': 'v6.0',\n                'User-Agent': 'Ghost-Publisher-Adapter/1.0'\n            }\n            ",
          "values": {
            "strings": [
              "Content-Type",
              "application/json",
              "Accept-Version",
              "v6.0",
              "User-Agent",
              "Ghost-Publisher-Adapter/1.0"
            ],
            "numbers": [
              6,
              0,
              1,
              0
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 166,
          "snippet": "            url = f\"{self.base_url}{endpoint}\"\n            \n            logger.debug(f\"[GhostClient] {method} {endpoint}\")\n            \n            # Make request",
          "values": {
            "strings": [
              "{self.base_url}{endpoint}",
              "[GhostClient] {method} {endpoint}"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 190,
          "snippet": "                # Enhanced error messages\n                if response.status_code == 401:\n                    raise GhostAPIError(\n                        \"Authentication failed. Check Ghost API key and permissions.\",\n                        response.status_code,",
          "values": {
            "strings": [
              "Authentication failed. Check Ghost API key and permissions."
            ],
            "numbers": [
              401
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 191,
          "snippet": "                if response.status_code == 401:\n                    raise GhostAPIError(\n                        \"Authentication failed. Check Ghost API key and permissions.\",\n                        response.status_code,\n                        error_data",
          "values": {
            "strings": [
              "Authentication failed. Check Ghost API key and permissions."
            ],
            "numbers": [
              401
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 196,
          "snippet": "                    )\n                elif response.status_code == 403:\n                    raise GhostAPIError(\n                        \"Access denied. Check API key permissions or Ghost site access.\",\n                        response.status_code,",
          "values": {
            "strings": [
              "Access denied. Check API key permissions or Ghost site access."
            ],
            "numbers": [
              403
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 197,
          "snippet": "                elif response.status_code == 403:\n                    raise GhostAPIError(\n                        \"Access denied. Check API key permissions or Ghost site access.\",\n                        response.status_code,\n                        error_data",
          "values": {
            "strings": [
              "Access denied. Check API key permissions or Ghost site access."
            ],
            "numbers": [
              403
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 202,
          "snippet": "                    )\n                elif response.status_code == 404:\n                    raise GhostAPIError(\n                        f\"Ghost API endpoint not found: {endpoint}\",\n                        response.status_code,",
          "values": {
            "strings": [
              "Ghost API endpoint not found: {endpoint}"
            ],
            "numbers": [
              404
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 203,
          "snippet": "                elif response.status_code == 404:\n                    raise GhostAPIError(\n                        f\"Ghost API endpoint not found: {endpoint}\",\n                        response.status_code,\n                        error_data",
          "values": {
            "strings": [
              "Ghost API endpoint not found: {endpoint}"
            ],
            "numbers": [
              404
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 213,
          "snippet": "                        for err in validation_errors\n                    ])\n                    raise GhostAPIError(error_msg, response.status_code, error_data)\n                else:\n                    error_msg = error_data.get('message', f\"HTTP {response.status_code}\")",
          "values": {
            "strings": [
              "message",
              "HTTP {response.status_code}"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 216,
          "snippet": "                else:\n                    error_msg = error_data.get('message', f\"HTTP {response.status_code}\")\n                    raise GhostAPIError(error_msg, response.status_code, error_data)\n            \n            # Parse successful response",
          "values": {
            "strings": [
              "message",
              "HTTP {response.status_code}"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 223,
          "snippet": "        except requests.exceptions.Timeout:\n            self.error_count += 1\n            raise GhostAPIError(\"Request timeout - Ghost API not responding\")\n        except requests.exceptions.ConnectionError:\n            self.error_count += 1",
          "values": {
            "strings": [
              "Request timeout - Ghost API not responding"
            ],
            "numbers": [
              1,
              1
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 226,
          "snippet": "        except requests.exceptions.ConnectionError:\n            self.error_count += 1\n            raise GhostAPIError(\"Connection error - Cannot reach Ghost API\")\n        except requests.exceptions.RequestException as e:\n            self.error_count += 1",
          "values": {
            "strings": [
              "Connection error - Cannot reach Ghost API"
            ],
            "numbers": [
              1,
              1
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 229,
          "snippet": "        except requests.exceptions.RequestException as e:\n            self.error_count += 1\n            raise GhostAPIError(f\"Request failed: {str(e)}\")\n\n    def test_connection(self) -> Dict[str, Any]:",
          "values": {
            "strings": [
              "Request failed: {str(e)}"
            ],
            "numbers": [
              1
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 233,
          "snippet": "    def test_connection(self) -> Dict[str, Any]:\n        \"\"\"\n        Test rzeczywistej połączenia z Ghost API\n        \n        Testuje:",
          "values": {
            "strings": [],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 248,
          "snippet": "            \n            # Test 1: Site endpoint (lightweight check)\n            logger.info(\"[GhostClient] Testing Ghost site endpoint...\")\n            site_result = self._make_request('GET', '/site/')\n            ",
          "values": {
            "strings": [
              "[GhostClient] Testing Ghost site endpoint...",
              "GET",
              "/site/"
            ],
            "numbers": [
              1
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 252,
          "snippet": "            \n            # Test 2: Posts endpoint access\n            logger.info(\"[GhostClient] Testing Ghost posts endpoint...\")\n            posts_result = self._make_request('GET', '/posts/', params={'limit': 1})\n            ",
          "values": {
            "strings": [
              "[GhostClient] Testing Ghost posts endpoint...",
              "GET",
              "/posts/",
              "limit"
            ],
            "numbers": [
              2,
              1
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 256,
          "snippet": "            \n            # Test 3: Users endpoint (admin access test)\n            logger.info(\"[GhostClient] Testing Ghost users endpoint...\")\n            try:\n                users_result = self._make_request('GET', '/users/', params={'limit': 1})",
          "values": {
            "strings": [
              "[GhostClient] Testing Ghost users endpoint...",
              "GET",
              "/users/",
              "limit"
            ],
            "numbers": [
              3,
              1
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 261,
          "snippet": "                admin_access = True\n                user_info = users_result.get('users', [{}])[0]\n            except GhostAPIError:\n                admin_access = False\n                user_info = {}",
          "values": {
            "strings": [
              "users"
            ],
            "numbers": [
              0
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 295,
          "snippet": "                    'error_rate': round(self.error_count / max(self.request_count, 1) * 100, 2)\n                },\n                'message': f'Ghost API connection successful to {site_info.get(\"title\", \"Ghost site\")}',\n                'last_check': datetime.now(timezone.utc).isoformat()\n            }",
          "values": {
            "strings": [
              "error_rate",
              "message",
              "Ghost API connection successful to {site_info.get(",
              ", ",
              ")}",
              "last_check"
            ],
            "numbers": [
              1,
              100,
              2
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 299,
          "snippet": "            }\n            \n        except GhostAPIError as e:\n            logger.error(f\"[GhostClient] Connection test failed: {str(e)}\")\n            return {",
          "values": {
            "strings": [
              "[GhostClient] Connection test failed: {str(e)}"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 300,
          "snippet": "            \n        except GhostAPIError as e:\n            logger.error(f\"[GhostClient] Connection test failed: {str(e)}\")\n            return {\n                'connected': False,",
          "values": {
            "strings": [
              "[GhostClient] Connection test failed: {str(e)}",
              "connected"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 311,
          "snippet": "                    'error_count': self.error_count\n                },\n                'message': f'Ghost API connection failed: {str(e)}',\n                'last_check': datetime.now(timezone.utc).isoformat()\n            }",
          "values": {
            "strings": [
              "error_count",
              "message",
              "Ghost API connection failed: {str(e)}",
              "last_check"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 315,
          "snippet": "            }\n        except Exception as e:\n            logger.error(f\"[GhostClient] Unexpected error during connection test: {str(e)}\")\n            return {\n                'connected': False,",
          "values": {
            "strings": [
              "[GhostClient] Unexpected error during connection test: {str(e)}",
              "connected"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 326,
          "snippet": "    def get_site_info(self) -> Dict[str, Any]:\n        \"\"\"\n        Get Ghost site information\n        \n        Returns:",
          "values": {
            "strings": [],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 329,
          "snippet": "        \n        Returns:\n            Dict z informacjami o Ghost site\n        \"\"\"\n        logger.info(\"[GhostClient] Fetching site information...\")",
          "values": {
            "strings": [
              "\n        logger.info("
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 331,
          "snippet": "            Dict z informacjami o Ghost site\n        \"\"\"\n        logger.info(\"[GhostClient] Fetching site information...\")\n        result = self._make_request('GET', '/site/')\n        return result.get('site', {})",
          "values": {
            "strings": [
              "\n        logger.info(",
              ")\n        result = self._make_request(",
              ", ",
              ")\n        return result.get("
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 337,
          "snippet": "    def get_posts(self, limit: int = 15, status: str = 'all', **filters) -> Dict[str, Any]:\n        \"\"\"\n        Get posts from Ghost\n        \n        Args:",
          "values": {
            "strings": [
              "all"
            ],
            "numbers": [
              15
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 361,
          "snippet": "            params['order'] = filters['order']\n            \n        logger.info(f\"[GhostClient] Fetching {limit} posts with status: {status}\")\n        return self._make_request('GET', '/posts/', params=params)\n",
          "values": {
            "strings": [
              "order",
              "order",
              "[GhostClient] Fetching {limit} posts with status: {status}",
              "GET",
              "/posts/"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 366,
          "snippet": "    def get_users(self) -> Dict[str, Any]:\n        \"\"\"\n        Get users from Ghost (requires admin access)\n        \n        Returns:",
          "values": {
            "strings": [],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 371,
          "snippet": "            Dict z użytkownikami\n        \"\"\"\n        logger.info(\"[GhostClient] Fetching users...\")\n        return self._make_request('GET', '/users/')\n",
          "values": {
            "strings": [
              "\n        logger.info(",
              ")\n        return self._make_request(",
              ", "
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 378,
          "snippet": "        Get current user information\n        \n        Note: Ghost Admin API ma tylko /users/ (browse) i /users/{id}/ (read)\n        Nie ma /users/me/ endpoint. Używamy browse i pobieramy pierwszego active user.\n        ",
          "values": {
            "strings": [],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 384,
          "snippet": "            Dict z informacjami o aktualnym użytkowniku\n        \"\"\"\n        logger.info(\"[GhostClient] Fetching current user info...\")\n        result = self._make_request('GET', '/users/', params={'limit': 1, 'filter': 'status:active'})\n        users = result.get('users', [])",
          "values": {
            "strings": [
              "\n        logger.info(",
              ")\n        result = self._make_request(",
              ", ",
              ", params={",
              ": 1, ",
              ": ",
              "})\n        users = result.get("
            ],
            "numbers": [
              1
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 391,
          "snippet": "            return users[0]\n        else:\n            raise GhostAPIError(\"No active users found\", 404)\n\n    def create_post(self, post_data: Dict[str, Any]) -> Dict[str, Any]:",
          "values": {
            "strings": [
              "No active users found"
            ],
            "numbers": [
              0,
              404
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 395,
          "snippet": "    def create_post(self, post_data: Dict[str, Any]) -> Dict[str, Any]:\n        \"\"\"\n        Create new post w Ghost\n        \n        Args:",
          "values": {
            "strings": [],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 404,
          "snippet": "            \n        Raises:\n            GhostAPIError: Dla błędów API lub walidacji\n        \"\"\"\n        logger.info(f\"[GhostClient] Creating post: '{post_data.get('title', 'Untitled')}'\")",
          "values": {
            "strings": [
              "\n        logger.info(f",
              "{post_data.get(",
              ", ",
              ")}"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 406,
          "snippet": "            GhostAPIError: Dla błędów API lub walidacji\n        \"\"\"\n        logger.info(f\"[GhostClient] Creating post: '{post_data.get('title', 'Untitled')}'\")\n        \n        # Prepare post payload according to Ghost API format",
          "values": {
            "strings": [
              "\n        logger.info(f",
              "{post_data.get(",
              ", ",
              ")}"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 408,
          "snippet": "        logger.info(f\"[GhostClient] Creating post: '{post_data.get('title', 'Untitled')}'\")\n        \n        # Prepare post payload according to Ghost API format\n        payload = {\n            \"posts\": [post_data]",
          "values": {
            "strings": [
              "[GhostClient] Creating post: ",
              "title",
              "Untitled",
              ")\n        \n        # Prepare post payload according to Ghost API format\n        payload = {\n            "
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 416,
          "snippet": "        params = {}\n        if post_data.get('html'):\n            # Tell Ghost API to use HTML as content source instead of converting to Lexical\n            params['source'] = 'html'\n            logger.info(\"[GhostClient] Using HTML content source\")",
          "values": {
            "strings": [
              "html",
              "source",
              "html",
              "[GhostClient] Using HTML content source"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 418,
          "snippet": "            # Tell Ghost API to use HTML as content source instead of converting to Lexical\n            params['source'] = 'html'\n            logger.info(\"[GhostClient] Using HTML content source\")\n        \n        result = self._make_request('POST', '/posts/', data=payload, params=params)",
          "values": {
            "strings": [
              "source",
              "html",
              "[GhostClient] Using HTML content source",
              "POST",
              "/posts/"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 425,
          "snippet": "        posts = result.get('posts', [])\n        if posts:\n            logger.info(f\"[GhostClient] Post created successfully with ID: {posts[0].get('id')}\")\n            return posts[0]\n        else:",
          "values": {
            "strings": [
              "posts",
              "[GhostClient] Post created successfully with ID: {posts[0].get(",
              ")}"
            ],
            "numbers": [
              0,
              0
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 428,
          "snippet": "            return posts[0]\n        else:\n            raise GhostAPIError(\"No post returned from creation API\")\n\n    def update_post(self, post_id: str, post_data: Dict[str, Any]) -> Dict[str, Any]:",
          "values": {
            "strings": [
              "No post returned from creation API"
            ],
            "numbers": [
              0
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 432,
          "snippet": "    def update_post(self, post_id: str, post_data: Dict[str, Any]) -> Dict[str, Any]:\n        \"\"\"\n        Update existing post w Ghost\n        \n        Args:",
          "values": {
            "strings": [],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 441,
          "snippet": "            Dict z zaktualizowanym postem\n        \"\"\"\n        logger.info(f\"[GhostClient] Updating post ID: {post_id}\")\n        \n        payload = {",
          "values": {
            "strings": [
              "\n        logger.info(f"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 451,
          "snippet": "        posts = result.get('posts', [])\n        if posts:\n            logger.info(f\"[GhostClient] Post updated successfully\")\n            return posts[0]\n        else:",
          "values": {
            "strings": [
              "posts",
              "[GhostClient] Post updated successfully"
            ],
            "numbers": [
              0
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 454,
          "snippet": "            return posts[0]\n        else:\n            raise GhostAPIError(\"No post returned from update API\")\n\n    def get_post(self, post_id: str) -> Dict[str, Any]:",
          "values": {
            "strings": [
              "No post returned from update API"
            ],
            "numbers": [
              0
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 466,
          "snippet": "            Dict z danymi posta\n        \"\"\"\n        logger.info(f\"[GhostClient] Fetching post ID: {post_id}\")\n        result = self._make_request('GET', f'/posts/{post_id}/', params={\n            'formats': 'html,lexical,plaintext'",
          "values": {
            "strings": [
              "\n        logger.info(f",
              ")\n        result = self._make_request(",
              ", f",
              ", params={\n            ",
              ": "
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 475,
          "snippet": "            return posts[0]\n        else:\n            raise GhostAPIError(f\"Post with ID {post_id} not found\", 404)\n\n    def delete_post(self, post_id: str) -> bool:",
          "values": {
            "strings": [
              "Post with ID {post_id} not found"
            ],
            "numbers": [
              0,
              404
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 488,
          "snippet": "            \n        Raises:\n            GhostAPIError: Dla błędów API\n        \"\"\"\n        logger.info(f\"[GhostClient] Deleting post ID: {post_id}\")",
          "values": {
            "strings": [
              "\n        logger.info(f"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 490,
          "snippet": "            GhostAPIError: Dla błędów API\n        \"\"\"\n        logger.info(f\"[GhostClient] Deleting post ID: {post_id}\")\n        \n        try:",
          "values": {
            "strings": [
              "\n        logger.info(f"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 494,
          "snippet": "        try:\n            self._make_request('DELETE', f'/posts/{post_id}/')\n            logger.info(f\"[GhostClient] Post deleted successfully\")\n            return True\n        except Exception as e:",
          "values": {
            "strings": [
              "DELETE",
              "/posts/{post_id}/",
              "[GhostClient] Post deleted successfully"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 497,
          "snippet": "            return True\n        except Exception as e:\n            logger.error(f\"[GhostClient] Failed to delete post {post_id}: {str(e)}\")\n            raise GhostAPIError(f\"Failed to delete post {post_id}: {str(e)}\")\n",
          "values": {
            "strings": [
              "[GhostClient] Failed to delete post {post_id}: {str(e)}",
              "Failed to delete post {post_id}: {str(e)}"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 498,
          "snippet": "        except Exception as e:\n            logger.error(f\"[GhostClient] Failed to delete post {post_id}: {str(e)}\")\n            raise GhostAPIError(f\"Failed to delete post {post_id}: {str(e)}\")\n\n    def validate_post_data(self, post_data: Dict[str, Any]) -> Dict[str, Any]:",
          "values": {
            "strings": [
              "[GhostClient] Failed to delete post {post_id}: {str(e)}",
              "Failed to delete post {post_id}: {str(e)}"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 502,
          "snippet": "    def validate_post_data(self, post_data: Dict[str, Any]) -> Dict[str, Any]:\n        \"\"\"\n        Validate and prepare post data for Ghost API\n        \n        Args:",
          "values": {
            "strings": [],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 511,
          "snippet": "            \n        Raises:\n            GhostAPIError: Dla błędów walidacji\n        \"\"\"\n        validated = {}",
          "values": {
            "strings": [],
            "numbers": []
          }
        },
        {
          "type": "required_elements",
          "platform": "ghost",
          "line": 515,
          "snippet": "        validated = {}\n        \n        # Required fields\n        if not post_data.get('title'):\n            raise GhostAPIError(\"Post title is required\", 400)",
          "values": {
            "strings": [
              "title",
              "Post title is required"
            ],
            "numbers": [
              400
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 517,
          "snippet": "        # Required fields\n        if not post_data.get('title'):\n            raise GhostAPIError(\"Post title is required\", 400)\n        validated['title'] = str(post_data['title']).strip()\n        ",
          "values": {
            "strings": [
              "title",
              "Post title is required",
              "title",
              "title"
            ],
            "numbers": [
              400
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 536,
          "snippet": "            validated['html'] = post_data['content']\n        else:\n            raise GhostAPIError(\"Post content is required (html, lexical, or content field)\", 400)\n        \n        # Optional fields",
          "values": {
            "strings": [
              "html",
              "content",
              "Post content is required (html, lexical, or content field)"
            ],
            "numbers": [
              400
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 545,
          "snippet": "            status = post_data['status'].lower()\n            if status not in ['draft', 'published', 'scheduled']:\n                raise GhostAPIError(\"Status must be 'draft', 'published', or 'scheduled'\", 400)\n            validated['status'] = status\n        else:",
          "values": {
            "strings": [
              "status",
              "draft",
              "published",
              "scheduled",
              "Status must be ",
              ", ",
              ", or ",
              ", 400)\n            validated["
            ],
            "numbers": [
              400
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 577,
          "snippet": "            visibility = post_data['visibility'].lower()\n            if visibility not in ['public', 'members', 'paid']:\n                raise GhostAPIError(\"Visibility must be 'public', 'members', or 'paid'\", 400)\n            validated['visibility'] = visibility\n        else:",
          "values": {
            "strings": [
              "visibility",
              "public",
              "members",
              "paid",
              "Visibility must be ",
              ", ",
              ", or ",
              ", 400)\n            validated["
            ],
            "numbers": [
              400
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 588,
          "snippet": "            validated['meta_description'] = str(post_data['meta_description']).strip()\n        \n        logger.debug(f\"[GhostClient] Validated post data: {validated.keys()}\")\n        return validated\n",
          "values": {
            "strings": [
              "meta_description",
              "meta_description",
              "[GhostClient] Validated post data: {validated.keys()}"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 603,
          "snippet": "            \n        Raises:\n            GhostAPIError: Dla błędów API lub validation\n        \"\"\"\n        logger.info(f\"[GhostClient] Scheduling post {post_id} for {published_at}\")",
          "values": {
            "strings": [
              "\n        logger.info(f"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 605,
          "snippet": "            GhostAPIError: Dla błędów API lub validation\n        \"\"\"\n        logger.info(f\"[GhostClient] Scheduling post {post_id} for {published_at}\")\n        \n        # Validate future date",
          "values": {
            "strings": [
              "\n        logger.info(f"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 611,
          "snippet": "            schedule_time = datetime.fromisoformat(published_at.replace('Z', '+00:00'))\n            if schedule_time <= datetime.now(timezone.utc):\n                raise GhostAPIError(\"published_at must be in the future\", 400)\n        except ValueError as e:\n            raise GhostAPIError(f\"Invalid date format: {str(e)}\", 400)",
          "values": {
            "strings": [
              ", ",
              "))\n            if schedule_time <= datetime.now(timezone.utc):\n                raise GhostAPIError(",
              ", 400)\n        except ValueError as e:\n            raise GhostAPIError(f"
            ],
            "numbers": [
              0,
              0,
              400,
              400
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 613,
          "snippet": "                raise GhostAPIError(\"published_at must be in the future\", 400)\n        except ValueError as e:\n            raise GhostAPIError(f\"Invalid date format: {str(e)}\", 400)\n        \n        # Get current post data for updated_at (required for Ghost API)",
          "values": {
            "strings": [
              "published_at must be in the future",
              "Invalid date format: {str(e)}"
            ],
            "numbers": [
              400,
              400
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 615,
          "snippet": "            raise GhostAPIError(f\"Invalid date format: {str(e)}\", 400)\n        \n        # Get current post data for updated_at (required for Ghost API)\n        current_post = self.get_post(post_id)\n        ",
          "values": {
            "strings": [
              "Invalid date format: {str(e)}"
            ],
            "numbers": [
              400
            ]
          }
        },
        {
          "type": "required_elements",
          "platform": "ghost",
          "line": 622,
          "snippet": "            'status': 'scheduled',\n            'published_at': published_at,\n            'updated_at': current_post['updated_at']  # Required for concurrency control\n        }\n        ",
          "values": {
            "strings": [
              "status",
              "scheduled",
              "published_at",
              "updated_at",
              "updated_at"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 627,
          "snippet": "        # Update the post\n        result = self.update_post(post_id, update_data)\n        logger.info(f\"[GhostClient] Post {post_id} scheduled successfully\")\n        return result\n",
          "values": {
            "strings": [
              "[GhostClient] Post {post_id} scheduled successfully"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 640,
          "snippet": "            Dict z opublikowanym postem\n        \"\"\"\n        logger.info(f\"[GhostClient] Publishing post {post_id} immediately\")\n        \n        # Get current post data",
          "values": {
            "strings": [
              "\n        logger.info(f"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 646,
          "snippet": "        \n        if current_post['status'] == 'published':\n            logger.warning(f\"[GhostClient] Post {post_id} is already published\")\n            return current_post\n        ",
          "values": {
            "strings": [
              "status",
              "published",
              "[GhostClient] Post {post_id} is already published"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 657,
          "snippet": "        \n        result = self.update_post(post_id, update_data)\n        logger.info(f\"[GhostClient] Post {post_id} published successfully\")\n        return result\n",
          "values": {
            "strings": [
              "[GhostClient] Post {post_id} published successfully"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 672,
          "snippet": "            Dict z zaktualizowanym postem\n        \"\"\"\n        logger.info(f\"[GhostClient] Updating post {post_id} status to {status}\")\n        \n        # Validate status",
          "values": {
            "strings": [
              "\n        logger.info(f"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 676,
          "snippet": "        # Validate status\n        if status not in ['draft', 'published', 'scheduled']:\n            raise GhostAPIError(\"Status must be 'draft', 'published', or 'scheduled'\", 400)\n        \n        if status == 'scheduled' and not published_at:",
          "values": {
            "strings": [
              "draft",
              "published",
              "scheduled",
              "Status must be ",
              ", ",
              ", or ",
              ", 400)\n        \n        if status == "
            ],
            "numbers": [
              400
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 679,
          "snippet": "        \n        if status == 'scheduled' and not published_at:\n            raise GhostAPIError(\"published_at is required for scheduled status\", 400)\n        \n        # Get current post",
          "values": {
            "strings": [
              "scheduled",
              "published_at is required for scheduled status"
            ],
            "numbers": [
              400
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 696,
          "snippet": "        \n        result = self.update_post(post_id, update_data)\n        logger.info(f\"[GhostClient] Post {post_id} status updated to {status}\")\n        return result\n",
          "values": {
            "strings": [
              "[GhostClient] Post {post_id} status updated to {status}"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 709,
          "snippet": "            Dict z pełnymi danymi posta\n        \"\"\"\n        logger.info(f\"[GhostClient] Fetching preview for post {post_id}\")\n        \n        result = self._make_request('GET', f'/posts/{post_id}/', params={",
          "values": {
            "strings": [
              "\n        logger.info(f",
              ")\n        \n        result = self._make_request(",
              ", f"
            ],
            "numbers": []
          }
        },
        {
          "type": "required_elements",
          "platform": "ghost",
          "line": 712,
          "snippet": "        \n        result = self._make_request('GET', f'/posts/{post_id}/', params={\n            'include': 'tags,authors,count.posts',\n            'formats': 'html,lexical,plaintext'\n        })",
          "values": {
            "strings": [
              "GET",
              "/posts/{post_id}/",
              "include",
              "tags,authors,count.posts",
              "formats",
              "html,lexical,plaintext"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 720,
          "snippet": "            return posts[0]\n        else:\n            raise GhostAPIError(f\"Post with ID {post_id} not found\", 404)\n\n    def get_scheduled_posts(self, limit: int = 15) -> Dict[str, Any]:",
          "values": {
            "strings": [
              "Post with ID {post_id} not found"
            ],
            "numbers": [
              0,
              404,
              15
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 729,
          "snippet": "            Dict z listą zaplanowanych postów\n        \"\"\"\n        logger.info(f\"[GhostClient] Fetching scheduled posts (limit: {limit})\")\n        \n        return self._make_request('GET', '/posts/', params={",
          "values": {
            "strings": [
              "\n        logger.info(f",
              ")\n        \n        return self._make_request(",
              ", "
            ],
            "numbers": []
          }
        },
        {
          "type": "required_elements",
          "platform": "ghost",
          "line": 734,
          "snippet": "            'filter': 'status:scheduled',\n            'limit': limit,\n            'include': 'tags,authors'\n        })\n",
          "values": {
            "strings": [
              "filter",
              "status:scheduled",
              "limit",
              "include",
              "tags,authors"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 747,
          "snippet": "            Lista wyników aktualizacji\n        \"\"\"\n        logger.info(f\"[GhostClient] Batch updating {len(updates)} posts\")\n        \n        results = []",
          "values": {
            "strings": [
              "\n        logger.info(f"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 767,
          "snippet": "                \n            except Exception as e:\n                logger.error(f\"[GhostClient] Batch update failed for post {post_id}: {str(e)}\")\n                results.append({\n                    'post_id': post_id,",
          "values": {
            "strings": [
              "[GhostClient] Batch update failed for post {post_id}: {str(e)}",
              "post_id"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 774,
          "snippet": "                })\n        \n        logger.info(f\"[GhostClient] Batch update completed: {len([r for r in results if r['success']])}/{len(updates)} successful\")\n        return results\n",
          "values": {
            "strings": [
              "[GhostClient] Batch update completed: {len([r for r in results if r[",
              "]])}/{len(updates)} successful"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 779,
          "snippet": "    def get_health_status(self) -> Dict[str, Any]:\n        \"\"\"\n        Get comprehensive health status Ghost API\n        \n        Returns:",
          "values": {
            "strings": [],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 792,
          "snippet": "                    'response_time_ms': connection_test['response_time_ms'],\n                    'site_title': connection_test['site_info']['title'],\n                    'ghost_version': connection_test['site_info']['version'],\n                    'posts_accessible': connection_test['api_access']['posts_accessible'],\n                    'admin_access': connection_test['api_access']['admin_access'],",
          "values": {
            "strings": [
              "response_time_ms",
              "response_time_ms",
              "site_title",
              "site_info",
              "title",
              "ghost_version",
              "site_info",
              "version",
              "posts_accessible",
              "api_access"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 820,
          "snippet": "    def upload_image(self, image_path: str, purpose: str = \"image\") -> Dict[str, Any]:\n        \"\"\"\n        Upload image to Ghost CMS\n        \n        Task 4.5: Image upload i media management",
          "values": {
            "strings": [
              "image"
            ],
            "numbers": [
              4,
              5
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 832,
          "snippet": "            \n        Raises:\n            GhostAPIError: For API errors\n            ValueError: For invalid image paths\n        \"\"\"",
          "values": {
            "strings": [],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 835,
          "snippet": "            ValueError: For invalid image paths\n        \"\"\"\n        logger.info(f\"[GhostClient] Uploading image: {image_path}\")\n        \n        if not Path(image_path).exists():",
          "values": {
            "strings": [
              "\n        logger.info(f"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 848,
          "snippet": "        \n        headers = {\n            'Authorization': f'Ghost {token}',\n            'Accept-Version': 'v6.0'\n        }",
          "values": {
            "strings": [
              "Authorization",
              "Ghost {token}",
              "Accept-Version",
              "v6.0"
            ],
            "numbers": [
              6,
              0
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 858,
          "snippet": "                }\n                \n                logger.info(f\"[GhostClient] Uploading to: {self.base_url}/images/upload/\")\n                logger.info(f\"[GhostClient] File size: {file_size} bytes\")\n                logger.info(f\"[GhostClient] Headers: {headers}\")",
          "values": {
            "strings": [
              "[GhostClient] Uploading to: {self.base_url}/images/upload/",
              "[GhostClient] File size: {file_size} bytes",
              "[GhostClient] Headers: {headers}"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 859,
          "snippet": "                \n                logger.info(f\"[GhostClient] Uploading to: {self.base_url}/images/upload/\")\n                logger.info(f\"[GhostClient] File size: {file_size} bytes\")\n                logger.info(f\"[GhostClient] Headers: {headers}\")\n                ",
          "values": {
            "strings": [
              "[GhostClient] Uploading to: {self.base_url}/images/upload/",
              "[GhostClient] File size: {file_size} bytes",
              "[GhostClient] Headers: {headers}"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 860,
          "snippet": "                logger.info(f\"[GhostClient] Uploading to: {self.base_url}/images/upload/\")\n                logger.info(f\"[GhostClient] File size: {file_size} bytes\")\n                logger.info(f\"[GhostClient] Headers: {headers}\")\n                \n                response = requests.post(",
          "values": {
            "strings": [
              "[GhostClient] Uploading to: {self.base_url}/images/upload/",
              "[GhostClient] File size: {file_size} bytes",
              "[GhostClient] Headers: {headers}"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 869,
          "snippet": "                )\n            \n            logger.info(f\"[GhostClient] Response status: {response.status_code}\")\n            logger.info(f\"[GhostClient] Response content: {response.text[:200]}...\")\n            ",
          "values": {
            "strings": [
              "[GhostClient] Response status: {response.status_code}",
              "[GhostClient] Response content: {response.text[:200]}..."
            ],
            "numbers": [
              200
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 870,
          "snippet": "            \n            logger.info(f\"[GhostClient] Response status: {response.status_code}\")\n            logger.info(f\"[GhostClient] Response content: {response.text[:200]}...\")\n            \n            if response.status_code >= 400:",
          "values": {
            "strings": [
              "[GhostClient] Response status: {response.status_code}",
              "[GhostClient] Response content: {response.text[:200]}..."
            ],
            "numbers": [
              200,
              400
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 879,
          "snippet": "                    error_data = {\"raw_response\": response.text}\n                    \n                logger.error(f\"[GhostClient] Upload error data: {error_data}\")\n                raise GhostAPIError(\n                    f\"Image upload failed: {response.status_code} - {response.text[:100]}\", ",
          "values": {
            "strings": [
              "raw_response",
              "[GhostClient] Upload error data: {error_data}",
              "Image upload failed: {response.status_code} - {response.text[:100]}"
            ],
            "numbers": [
              100
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 880,
          "snippet": "                    \n                logger.error(f\"[GhostClient] Upload error data: {error_data}\")\n                raise GhostAPIError(\n                    f\"Image upload failed: {response.status_code} - {response.text[:100]}\", \n                    response.status_code, ",
          "values": {
            "strings": [
              "[GhostClient] Upload error data: {error_data}",
              "Image upload failed: {response.status_code} - {response.text[:100]}"
            ],
            "numbers": [
              100
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 887,
          "snippet": "            \n            result = response.json()\n            logger.info(f\"[GhostClient] Image uploaded successfully: {result.get('images', [{}])[0].get('url', 'unknown')}\")\n            return result\n            ",
          "values": {
            "strings": [
              "[GhostClient] Image uploaded successfully: {result.get(",
              ", [{}])[0].get(",
              ", ",
              ")}"
            ],
            "numbers": [
              0
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 891,
          "snippet": "            \n        except requests.exceptions.RequestException as e:\n            logger.error(f\"[GhostClient] Image upload request failed: {str(e)}\")\n            raise GhostAPIError(f\"Image upload request failed: {str(e)}\")\n",
          "values": {
            "strings": [
              "[GhostClient] Image upload request failed: {str(e)}",
              "Image upload request failed: {str(e)}"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 892,
          "snippet": "        except requests.exceptions.RequestException as e:\n            logger.error(f\"[GhostClient] Image upload request failed: {str(e)}\")\n            raise GhostAPIError(f\"Image upload request failed: {str(e)}\")\n\n    def process_content_images(self, content: str) -> str:",
          "values": {
            "strings": [
              "[GhostClient] Image upload request failed: {str(e)}",
              "Image upload request failed: {str(e)}"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 896,
          "snippet": "    def process_content_images(self, content: str) -> str:\n        \"\"\"\n        Find and upload local images in content, replace with Ghost URLs\n        \n        Task 4.5: Automatic image processing in content",
          "values": {
            "strings": [],
            "numbers": [
              4,
              5
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 904,
          "snippet": "            \n        Returns:\n            str: Content with local images replaced by Ghost URLs\n        \"\"\"\n        logger.info(f\"[GhostClient] Processing content images\")",
          "values": {
            "strings": [
              "\n        logger.info(f"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 906,
          "snippet": "            str: Content with local images replaced by Ghost URLs\n        \"\"\"\n        logger.info(f\"[GhostClient] Processing content images\")\n        \n        # Find image references in HTML",
          "values": {
            "strings": [
              "\n        logger.info(f"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 934,
          "snippet": "            \n            if not image_path:\n                logger.warning(f\"[GhostClient] Image file not found in any location: {src}\")\n                logger.warning(f\"[GhostClient] Searched paths: {[str(p) for p in possible_paths]}\")\n                return full_tag",
          "values": {
            "strings": [
              "[GhostClient] Image file not found in any location: {src}",
              "[GhostClient] Searched paths: {[str(p) for p in possible_paths]}"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 935,
          "snippet": "            if not image_path:\n                logger.warning(f\"[GhostClient] Image file not found in any location: {src}\")\n                logger.warning(f\"[GhostClient] Searched paths: {[str(p) for p in possible_paths]}\")\n                return full_tag\n            ",
          "values": {
            "strings": [
              "[GhostClient] Image file not found in any location: {src}",
              "[GhostClient] Searched paths: {[str(p) for p in possible_paths]}"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 939,
          "snippet": "            \n            try:\n                # Upload to Ghost using found path\n                upload_result = self.upload_image(image_path)\n                new_url = upload_result['images'][0]['url']",
          "values": {
            "strings": [
              "images",
              "url"
            ],
            "numbers": [
              0
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 945,
          "snippet": "                # Replace src in the tag\n                new_tag = full_tag.replace(f'src=\"{src}\"', f'src=\"{new_url}\"').replace(f\"src='{src}'\", f\"src='{new_url}'\")\n                logger.info(f\"[GhostClient] Replaced image {src} -> {new_url}\")\n                return new_tag\n                ",
          "values": {
            "strings": [
              "src=",
              ", f",
              "{new_url}",
              ").replace(f",
              "{src}",
              ", f",
              "{new_url}",
              ")\n                logger.info(f"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 949,
          "snippet": "                \n            except Exception as e:\n                logger.error(f\"[GhostClient] Failed to upload image {src}: {str(e)}\")\n                return full_tag\n        ",
          "values": {
            "strings": [
              "[GhostClient] Failed to upload image {src}: {str(e)}"
            ],
            "numbers": []
          }
        }
      ]
    },
    {
      "file": "/Users/hretheum/dev/bezrobocie/vector-wave/publisher/src/adapters/ghost/main.py",
      "exists": true,
      "hits": [
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 2,
          "snippet": "\"\"\"\nGhost Adapter - FastAPI Application\nMikroserwis do publikacji treści w Ghost CMS\n",
          "values": {
            "strings": [],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 3,
          "snippet": "\"\"\"\nGhost Adapter - FastAPI Application\nMikroserwis do publikacji treści w Ghost CMS\n\nZadanie 4.1: Szkielet usługi (kontener, healthcheck)",
          "values": {
            "strings": [],
            "numbers": [
              4,
              1
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 25,
          "snippet": "\nfrom models import PublishRequest, PublishResponse, HealthResponse, ConfigResponse\nfrom ghost_client import GhostClient, GhostAPIError\nfrom prometheus_metrics import (\n    ghost_metrics, track_publication_metrics, track_http_metrics, ",
          "values": {
            "strings": [],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 27,
          "snippet": "from ghost_client import GhostClient, GhostAPIError\nfrom prometheus_metrics import (\n    ghost_metrics, track_publication_metrics, track_http_metrics, \n    track_ghost_api_metrics, track_schedule_metrics, track_batch_metrics,\n    CONTENT_TYPE_LATEST",
          "values": {
            "strings": [],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 28,
          "snippet": "from prometheus_metrics import (\n    ghost_metrics, track_publication_metrics, track_http_metrics, \n    track_ghost_api_metrics, track_schedule_metrics, track_batch_metrics,\n    CONTENT_TYPE_LATEST\n)",
          "values": {
            "strings": [],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 52,
          "snippet": "logger = logging.getLogger(__name__)\n\n# Task 5.3: Retry configuration for Ghost Adapter\nclass RetryConfig:\n    MAX_RETRIES = 3",
          "values": {
            "strings": [],
            "numbers": [
              5,
              3,
              3
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 64,
          "snippet": "# FastAPI application\napp = FastAPI(\n    title=\"Ghost Adapter\",\n    description=\"Mikroserwis do publikacji treści w Ghost CMS\",\n    version=\"1.0.0\",",
          "values": {
            "strings": [
              "Ghost Adapter",
              "Mikroserwis do publikacji treści w Ghost CMS",
              "1.0.0"
            ],
            "numbers": [
              1,
              0,
              0
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 65,
          "snippet": "app = FastAPI(\n    title=\"Ghost Adapter\",\n    description=\"Mikroserwis do publikacji treści w Ghost CMS\",\n    version=\"1.0.0\",\n    docs_url=\"/docs\",",
          "values": {
            "strings": [
              "Ghost Adapter",
              "Mikroserwis do publikacji treści w Ghost CMS",
              "1.0.0",
              "/docs"
            ],
            "numbers": [
              1,
              0,
              0
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 71,
          "snippet": ")\n\n# Global Ghost client instance\nghost_client: Optional[GhostClient] = None\n",
          "values": {
            "strings": [],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 72,
          "snippet": "\n# Global Ghost client instance\nghost_client: Optional[GhostClient] = None\n\n# Task 5.3: Retry mechanism with exponential backoff",
          "values": {
            "strings": [],
            "numbers": [
              5,
              3
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 89,
          "snippet": "            should_retry = False\n            \n            if isinstance(e, GhostAPIError):\n                if e.status_code in RetryConfig.RETRYABLE_STATUS_CODES:\n                    should_retry = True",
          "values": {
            "strings": [],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 100,
          "snippet": "                break\n            \n            logger.warning(f\"[Ghost Retry] Attempt {attempt + 1}/{RetryConfig.MAX_RETRIES + 1} failed: {str(e)}\")\n            logger.info(f\"[Ghost Retry] Waiting {delay:.1f}s before retry...\")\n            ",
          "values": {
            "strings": [
              "[Ghost Retry] Attempt {attempt + 1}/{RetryConfig.MAX_RETRIES + 1} failed: {str(e)}",
              "[Ghost Retry] Waiting {delay:.1f}s before retry..."
            ],
            "numbers": [
              1,
              1,
              1
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 101,
          "snippet": "            \n            logger.warning(f\"[Ghost Retry] Attempt {attempt + 1}/{RetryConfig.MAX_RETRIES + 1} failed: {str(e)}\")\n            logger.info(f\"[Ghost Retry] Waiting {delay:.1f}s before retry...\")\n            \n            # Track retry metrics",
          "values": {
            "strings": [
              "[Ghost Retry] Attempt {attempt + 1}/{RetryConfig.MAX_RETRIES + 1} failed: {str(e)}",
              "[Ghost Retry] Waiting {delay:.1f}s before retry..."
            ],
            "numbers": [
              1,
              1,
              1
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 104,
          "snippet": "            \n            # Track retry metrics\n            ghost_metrics.track_retry(\"ghost_api_call\", str(e), delay)\n            \n            await asyncio.sleep(delay)",
          "values": {
            "strings": [
              "ghost_api_call"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 112,
          "snippet": "\n\ndef get_ghost_client() -> Optional[GhostClient]:\n    \"\"\"\n    Get or create Ghost API client instance",
          "values": {
            "strings": [],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 114,
          "snippet": "def get_ghost_client() -> Optional[GhostClient]:\n    \"\"\"\n    Get or create Ghost API client instance\n    \n    Returns:",
          "values": {
            "strings": [],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 117,
          "snippet": "    \n    Returns:\n        GhostClient instance lub None jeśli brak konfiguracji\n    \"\"\"\n    global ghost_client",
          "values": {
            "strings": [],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 119,
          "snippet": "        GhostClient instance lub None jeśli brak konfiguracji\n    \"\"\"\n    global ghost_client\n    \n    if not ghost_client:",
          "values": {
            "strings": [],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 121,
          "snippet": "    global ghost_client\n    \n    if not ghost_client:\n        api_url = os.getenv(\"GHOST_API_URL\")\n        api_key = os.getenv(\"GHOST_API_KEY\")",
          "values": {
            "strings": [
              "GHOST_API_URL",
              "GHOST_API_KEY"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 122,
          "snippet": "    \n    if not ghost_client:\n        api_url = os.getenv(\"GHOST_API_URL\")\n        api_key = os.getenv(\"GHOST_API_KEY\")\n        ",
          "values": {
            "strings": [
              "GHOST_API_URL",
              "GHOST_API_KEY"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 123,
          "snippet": "    if not ghost_client:\n        api_url = os.getenv(\"GHOST_API_URL\")\n        api_key = os.getenv(\"GHOST_API_KEY\")\n        \n        if not api_url or not api_key:",
          "values": {
            "strings": [
              "GHOST_API_URL",
              "GHOST_API_KEY"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 126,
          "snippet": "        \n        if not api_url or not api_key:\n            logger.warning(\"[Ghost Adapter] GHOST_API_URL and GHOST_API_KEY not configured\")\n            return None\n            ",
          "values": {
            "strings": [
              "[Ghost Adapter] GHOST_API_URL and GHOST_API_KEY not configured"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 130,
          "snippet": "            \n        try:\n            ghost_client = GhostClient(api_url, api_key)\n            logger.info(\"[Ghost Adapter] Ghost client initialized successfully\")\n        except Exception as e:",
          "values": {
            "strings": [
              "[Ghost Adapter] Ghost client initialized successfully"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 131,
          "snippet": "        try:\n            ghost_client = GhostClient(api_url, api_key)\n            logger.info(\"[Ghost Adapter] Ghost client initialized successfully\")\n        except Exception as e:\n            logger.error(f\"[Ghost Adapter] Failed to initialize Ghost client: {str(e)}\")",
          "values": {
            "strings": [
              "[Ghost Adapter] Ghost client initialized successfully",
              "[Ghost Adapter] Failed to initialize Ghost client: {str(e)}"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 133,
          "snippet": "            logger.info(\"[Ghost Adapter] Ghost client initialized successfully\")\n        except Exception as e:\n            logger.error(f\"[Ghost Adapter] Failed to initialize Ghost client: {str(e)}\")\n            return None\n    ",
          "values": {
            "strings": [
              "[Ghost Adapter] Ghost client initialized successfully",
              "[Ghost Adapter] Failed to initialize Ghost client: {str(e)}"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 136,
          "snippet": "            return None\n    \n    return ghost_client\n\n",
          "values": {
            "strings": [],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 145,
          "snippet": "    \n    Returns:\n        Podstawowe informacje o Ghost Adapter\n    \"\"\"\n    ghost_configured = bool(",
          "values": {
            "strings": [],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 147,
          "snippet": "        Podstawowe informacje o Ghost Adapter\n    \"\"\"\n    ghost_configured = bool(\n        os.getenv(\"GHOST_API_KEY\") and \n        os.getenv(\"GHOST_API_URL\")",
          "values": {
            "strings": [
              "\n    ghost_configured = bool(\n        os.getenv(",
              ") and \n        os.getenv("
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 148,
          "snippet": "    \"\"\"\n    ghost_configured = bool(\n        os.getenv(\"GHOST_API_KEY\") and \n        os.getenv(\"GHOST_API_URL\")\n    )",
          "values": {
            "strings": [
              "\n    ghost_configured = bool(\n        os.getenv(",
              ") and \n        os.getenv("
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 149,
          "snippet": "    ghost_configured = bool(\n        os.getenv(\"GHOST_API_KEY\") and \n        os.getenv(\"GHOST_API_URL\")\n    )\n    ",
          "values": {
            "strings": [
              "GHOST_API_KEY",
              "GHOST_API_URL"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 153,
          "snippet": "    \n    return {\n        \"service\": \"ghost-adapter\",\n        \"version\": \"1.0.0\",\n        \"description\": \"Mikroserwis do publikacji treści w Ghost CMS\",",
          "values": {
            "strings": [
              "service",
              "ghost-adapter",
              "version",
              "1.0.0",
              "description",
              "Mikroserwis do publikacji treści w Ghost CMS"
            ],
            "numbers": [
              1,
              0,
              0
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 155,
          "snippet": "        \"service\": \"ghost-adapter\",\n        \"version\": \"1.0.0\",\n        \"description\": \"Mikroserwis do publikacji treści w Ghost CMS\",\n        \"status\": \"ready\" if ghost_configured else \"misconfigured\",\n        \"ghost_configured\": ghost_configured,",
          "values": {
            "strings": [
              "service",
              "ghost-adapter",
              "version",
              "1.0.0",
              "description",
              "Mikroserwis do publikacji treści w Ghost CMS",
              "status",
              "ready",
              "misconfigured",
              "ghost_configured"
            ],
            "numbers": [
              1,
              0,
              0
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 156,
          "snippet": "        \"version\": \"1.0.0\",\n        \"description\": \"Mikroserwis do publikacji treści w Ghost CMS\",\n        \"status\": \"ready\" if ghost_configured else \"misconfigured\",\n        \"ghost_configured\": ghost_configured,\n        \"endpoints\": {",
          "values": {
            "strings": [
              "version",
              "1.0.0",
              "description",
              "Mikroserwis do publikacji treści w Ghost CMS",
              "status",
              "ready",
              "misconfigured",
              "ghost_configured",
              "endpoints"
            ],
            "numbers": [
              1,
              0,
              0
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 157,
          "snippet": "        \"description\": \"Mikroserwis do publikacji treści w Ghost CMS\",\n        \"status\": \"ready\" if ghost_configured else \"misconfigured\",\n        \"ghost_configured\": ghost_configured,\n        \"endpoints\": {\n            \"health\": \"/health\",",
          "values": {
            "strings": [
              "description",
              "Mikroserwis do publikacji treści w Ghost CMS",
              "status",
              "ready",
              "misconfigured",
              "ghost_configured",
              "endpoints",
              "health",
              "/health"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 177,
          "snippet": "        },\n        \"environment\": {\n            \"ghost_api_url\": os.getenv(\"GHOST_API_URL\", \"not_set\"),\n            \"ghost_api_key_configured\": bool(os.getenv(\"GHOST_API_KEY\"))\n        }",
          "values": {
            "strings": [
              "environment",
              "ghost_api_url",
              "GHOST_API_URL",
              "not_set",
              "ghost_api_key_configured",
              "GHOST_API_KEY"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 178,
          "snippet": "        \"environment\": {\n            \"ghost_api_url\": os.getenv(\"GHOST_API_URL\", \"not_set\"),\n            \"ghost_api_key_configured\": bool(os.getenv(\"GHOST_API_KEY\"))\n        }\n    }",
          "values": {
            "strings": [
              "environment",
              "ghost_api_url",
              "GHOST_API_URL",
              "not_set",
              "ghost_api_key_configured",
              "GHOST_API_KEY"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 183,
          "snippet": "\n\n@app.get(\"/health\", summary=\"Enhanced Health Check\", description=\"Comprehensive health check for Ghost adapter\")\nasync def health():\n    \"\"\"",
          "values": {
            "strings": [
              "/health",
              "Enhanced Health Check",
              "Comprehensive health check for Ghost adapter"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 189,
          "snippet": "    \n    Provides comprehensive health information:\n    - Connection status to Ghost API\n    - Configuration validation\n    - Performance metrics",
          "values": {
            "strings": [],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 198,
          "snippet": "    if EnhancedHealthResponse is None:\n        # Fallback to basic health response\n        ghost_configured = bool(os.getenv(\"GHOST_API_KEY\") and os.getenv(\"GHOST_API_URL\"))\n        return HealthResponse(\n            status=\"healthy\" if ghost_configured else \"degraded\",",
          "values": {
            "strings": [
              "GHOST_API_KEY",
              "GHOST_API_URL",
              "healthy",
              "degraded"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 200,
          "snippet": "        ghost_configured = bool(os.getenv(\"GHOST_API_KEY\") and os.getenv(\"GHOST_API_URL\"))\n        return HealthResponse(\n            status=\"healthy\" if ghost_configured else \"degraded\",\n            ghost_configured=ghost_configured,\n            message=\"Ghost adapter running (basic health check)\"",
          "values": {
            "strings": [
              "GHOST_API_KEY",
              "GHOST_API_URL",
              "healthy",
              "degraded",
              "Ghost adapter running (basic health check)"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 201,
          "snippet": "        return HealthResponse(\n            status=\"healthy\" if ghost_configured else \"degraded\",\n            ghost_configured=ghost_configured,\n            message=\"Ghost adapter running (basic health check)\"\n        )",
          "values": {
            "strings": [
              "healthy",
              "degraded",
              "Ghost adapter running (basic health check)"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 202,
          "snippet": "            status=\"healthy\" if ghost_configured else \"degraded\",\n            ghost_configured=ghost_configured,\n            message=\"Ghost adapter running (basic health check)\"\n        )\n    ",
          "values": {
            "strings": [
              "healthy",
              "degraded",
              "Ghost adapter running (basic health check)"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 206,
          "snippet": "    \n    try:\n        # Check Ghost API connection\n        connection_status = await _check_ghost_connection()\n        rate_limit_info = await _check_ghost_rate_limits()",
          "values": {
            "strings": [],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 207,
          "snippet": "    try:\n        # Check Ghost API connection\n        connection_status = await _check_ghost_connection()\n        rate_limit_info = await _check_ghost_rate_limits()\n        metrics_info = await _get_ghost_performance_metrics()",
          "values": {
            "strings": [],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 208,
          "snippet": "        # Check Ghost API connection\n        connection_status = await _check_ghost_connection()\n        rate_limit_info = await _check_ghost_rate_limits()\n        metrics_info = await _get_ghost_performance_metrics()\n        ",
          "values": {
            "strings": [],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 209,
          "snippet": "        connection_status = await _check_ghost_connection()\n        rate_limit_info = await _check_ghost_rate_limits()\n        metrics_info = await _get_ghost_performance_metrics()\n        \n        # Check configuration",
          "values": {
            "strings": [],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 212,
          "snippet": "        \n        # Check configuration\n        ghost_configured = bool(os.getenv(\"GHOST_API_KEY\") and os.getenv(\"GHOST_API_URL\"))\n        \n        # Determine overall status",
          "values": {
            "strings": [
              "GHOST_API_KEY",
              "GHOST_API_URL"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 218,
          "snippet": "            connection_ok=connection_status.connected,\n            rate_limit_ok=rate_limit_info is None or (rate_limit_info.percentage_used or 0) < 90.0,\n            api_working=ghost_configured and connection_status.connected\n        )\n        ",
          "values": {
            "strings": [],
            "numbers": [
              0,
              90,
              0
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 235,
          "snippet": "        recommendations = []\n        \n        if not ghost_configured:\n            warnings.append(\"Ghost API credentials not configured\")\n            recommendations.append(\"Set GHOST_API_URL and GHOST_API_KEY environment variables\")",
          "values": {
            "strings": [
              "Ghost API credentials not configured",
              "Set GHOST_API_URL and GHOST_API_KEY environment variables"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 236,
          "snippet": "        \n        if not ghost_configured:\n            warnings.append(\"Ghost API credentials not configured\")\n            recommendations.append(\"Set GHOST_API_URL and GHOST_API_KEY environment variables\")\n        ",
          "values": {
            "strings": [
              "Ghost API credentials not configured",
              "Set GHOST_API_URL and GHOST_API_KEY environment variables"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 237,
          "snippet": "        if not ghost_configured:\n            warnings.append(\"Ghost API credentials not configured\")\n            recommendations.append(\"Set GHOST_API_URL and GHOST_API_KEY environment variables\")\n        \n        if rate_limit_info and rate_limit_info.percentage_used and rate_limit_info.percentage_used > 75:",
          "values": {
            "strings": [
              "Ghost API credentials not configured",
              "Set GHOST_API_URL and GHOST_API_KEY environment variables"
            ],
            "numbers": [
              75
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 244,
          "snippet": "        \n        if not connection_status.connected:\n            recommendations.append(\"Check Ghost API credentials and network connectivity\")\n        \n        if connection_status.response_time_ms and connection_status.response_time_ms > 3000:",
          "values": {
            "strings": [
              "Check Ghost API credentials and network connectivity"
            ],
            "numbers": [
              3000
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 250,
          "snippet": "        \n        # Status message\n        message = f\"Ghost adapter is {overall_status.value}\"\n        if ghost_configured:\n            message += \" and configured\"",
          "values": {
            "strings": [
              "Ghost adapter is {overall_status.value}",
              " and configured"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 251,
          "snippet": "        # Status message\n        message = f\"Ghost adapter is {overall_status.value}\"\n        if ghost_configured:\n            message += \" and configured\"\n        if rate_limit_info and rate_limit_info.remaining:",
          "values": {
            "strings": [
              "Ghost adapter is {overall_status.value}",
              " and configured"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 258,
          "snippet": "        return EnhancedHealthResponse(\n            status=overall_status,\n            service=\"ghost-adapter\",\n            platform=\"ghost\",\n            version=\"1.0.0\",",
          "values": {
            "strings": [
              "ghost-adapter",
              "ghost",
              "1.0.0"
            ],
            "numbers": [
              1,
              0,
              0
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 259,
          "snippet": "            status=overall_status,\n            service=\"ghost-adapter\",\n            platform=\"ghost\",\n            version=\"1.0.0\",\n            connection=connection_status,",
          "values": {
            "strings": [
              "ghost-adapter",
              "ghost",
              "1.0.0"
            ],
            "numbers": [
              1,
              0,
              0
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 272,
          "snippet": "        \n    except Exception as e:\n        logger.error(f\"[Ghost Adapter] Health check failed: {e}\")\n        \n        # Return unhealthy status",
          "values": {
            "strings": [
              "[Ghost Adapter] Health check failed: {e}"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 283,
          "snippet": "        return EnhancedHealthResponse(\n            status=HealthStatus.UNHEALTHY,\n            service=\"ghost-adapter\",\n            platform=\"ghost\",\n            version=\"1.0.0\",",
          "values": {
            "strings": [
              "ghost-adapter",
              "ghost",
              "1.0.0"
            ],
            "numbers": [
              1,
              0,
              0
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 284,
          "snippet": "            status=HealthStatus.UNHEALTHY,\n            service=\"ghost-adapter\",\n            platform=\"ghost\",\n            version=\"1.0.0\",\n            connection=connection_status,",
          "values": {
            "strings": [
              "ghost-adapter",
              "ghost",
              "1.0.0"
            ],
            "numbers": [
              1,
              0,
              0
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 294,
          "snippet": "\n\nasync def _check_ghost_connection() -> ConnectionStatus:\n    \"\"\"Check connection to Ghost API\"\"\"\n    start_time = time.time()",
          "values": {
            "strings": [
              "Check connection to Ghost API"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 295,
          "snippet": "\nasync def _check_ghost_connection() -> ConnectionStatus:\n    \"\"\"Check connection to Ghost API\"\"\"\n    start_time = time.time()\n    ",
          "values": {
            "strings": [
              "Check connection to Ghost API"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 299,
          "snippet": "    \n    try:\n        ghost_api_key = os.getenv(\"GHOST_API_KEY\")\n        ghost_api_url = os.getenv(\"GHOST_API_URL\")\n        ",
          "values": {
            "strings": [
              "GHOST_API_KEY",
              "GHOST_API_URL"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 300,
          "snippet": "    try:\n        ghost_api_key = os.getenv(\"GHOST_API_KEY\")\n        ghost_api_url = os.getenv(\"GHOST_API_URL\")\n        \n        if not ghost_api_key or not ghost_api_url:",
          "values": {
            "strings": [
              "GHOST_API_KEY",
              "GHOST_API_URL"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 302,
          "snippet": "        ghost_api_url = os.getenv(\"GHOST_API_URL\")\n        \n        if not ghost_api_key or not ghost_api_url:\n            return ConnectionStatus(\n                connected=False,",
          "values": {
            "strings": [
              "GHOST_API_URL"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 305,
          "snippet": "            return ConnectionStatus(\n                connected=False,\n                last_error=\"Ghost API credentials not configured\"\n            )\n        ",
          "values": {
            "strings": [
              "Ghost API credentials not configured"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 308,
          "snippet": "            )\n        \n        # Try to get Ghost site info or validate API key\n        if ghost_client:\n            # Use existing health status method from ghost_client",
          "values": {
            "strings": [],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 309,
          "snippet": "        \n        # Try to get Ghost site info or validate API key\n        if ghost_client:\n            # Use existing health status method from ghost_client\n            health_status = ghost_client.get_health_status()",
          "values": {
            "strings": [],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 310,
          "snippet": "        # Try to get Ghost site info or validate API key\n        if ghost_client:\n            # Use existing health status method from ghost_client\n            health_status = ghost_client.get_health_status()\n            response_time = (time.time() - start_time) * 1000",
          "values": {
            "strings": [],
            "numbers": [
              1000
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 311,
          "snippet": "        if ghost_client:\n            # Use existing health status method from ghost_client\n            health_status = ghost_client.get_health_status()\n            response_time = (time.time() - start_time) * 1000\n            ",
          "values": {
            "strings": [],
            "numbers": [
              1000
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 329,
          "snippet": "            return ConnectionStatus(\n                connected=False,\n                last_error=\"Ghost client not initialized\"\n            )\n            ",
          "values": {
            "strings": [
              "Ghost client not initialized"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 340,
          "snippet": "\n\nasync def _check_ghost_rate_limits() -> Optional[RateLimitStatus]:\n    \"\"\"Check Ghost API rate limits\"\"\"\n    try:",
          "values": {
            "strings": [
              "Check Ghost API rate limits"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "twitter",
          "line": 341,
          "snippet": "\nasync def _check_ghost_rate_limits() -> Optional[RateLimitStatus]:\n    \"\"\"Check Ghost API rate limits\"\"\"\n    try:\n        # Ghost API doesn't have strict rate limits like Twitter",
          "values": {
            "strings": [
              "Check Ghost API rate limits",
              "\n    try:\n        # Ghost API doesn"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "twitter",
          "line": 343,
          "snippet": "    \"\"\"Check Ghost API rate limits\"\"\"\n    try:\n        # Ghost API doesn't have strict rate limits like Twitter\n        # But has recommendations: ~200 requests/hour for content API\n        ",
          "values": {
            "strings": [
              "Check Ghost API rate limits",
              "\n    try:\n        # Ghost API doesn"
            ],
            "numbers": [
              200
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 358,
          "snippet": "        \n    except Exception as e:\n        logger.warning(f\"Could not check Ghost rate limits: {e}\")\n        return None\n",
          "values": {
            "strings": [
              "Could not check Ghost rate limits: {e}"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 362,
          "snippet": "\n\nasync def _get_ghost_performance_metrics() -> Optional[PlatformMetrics]:\n    \"\"\"Get Ghost performance metrics\"\"\"\n    try:",
          "values": {
            "strings": [
              "Get Ghost performance metrics"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 363,
          "snippet": "\nasync def _get_ghost_performance_metrics() -> Optional[PlatformMetrics]:\n    \"\"\"Get Ghost performance metrics\"\"\"\n    try:\n        # This would typically query Prometheus metrics",
          "values": {
            "strings": [
              "Get Ghost performance metrics"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 376,
          "snippet": "        \n    except Exception as e:\n        logger.warning(f\"Could not get Ghost performance metrics: {e}\")\n        return None\n",
          "values": {
            "strings": [
              "Could not get Ghost performance metrics: {e}"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 382,
          "snippet": "@app.get(\"/metrics\")\nasync def get_prometheus_metrics():\n    \"\"\"Prometheus metrics endpoint for Ghost adapter - Task 5.1.2\"\"\"\n    try:\n        # Update configuration status",
          "values": {
            "strings": [
              "/metrics",
              "Prometheus metrics endpoint for Ghost adapter - Task 5.1.2"
            ],
            "numbers": [
              5,
              1,
              2
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 385,
          "snippet": "    try:\n        # Update configuration status\n        api_url = os.getenv(\"GHOST_API_URL\")\n        api_key = os.getenv(\"GHOST_API_KEY\")\n        ghost_configured = bool(api_url and api_key)",
          "values": {
            "strings": [
              "GHOST_API_URL",
              "GHOST_API_KEY"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 386,
          "snippet": "        # Update configuration status\n        api_url = os.getenv(\"GHOST_API_URL\")\n        api_key = os.getenv(\"GHOST_API_KEY\")\n        ghost_configured = bool(api_url and api_key)\n        ghost_metrics.set_ghost_configured(ghost_configured)",
          "values": {
            "strings": [
              "GHOST_API_URL",
              "GHOST_API_KEY"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 387,
          "snippet": "        api_url = os.getenv(\"GHOST_API_URL\")\n        api_key = os.getenv(\"GHOST_API_KEY\")\n        ghost_configured = bool(api_url and api_key)\n        ghost_metrics.set_ghost_configured(ghost_configured)\n        ghost_metrics.set_adapter_health(ghost_configured)",
          "values": {
            "strings": [
              "GHOST_API_URL",
              "GHOST_API_KEY"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 388,
          "snippet": "        api_key = os.getenv(\"GHOST_API_KEY\")\n        ghost_configured = bool(api_url and api_key)\n        ghost_metrics.set_ghost_configured(ghost_configured)\n        ghost_metrics.set_adapter_health(ghost_configured)\n        ",
          "values": {
            "strings": [
              "GHOST_API_KEY"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 389,
          "snippet": "        ghost_configured = bool(api_url and api_key)\n        ghost_metrics.set_ghost_configured(ghost_configured)\n        ghost_metrics.set_adapter_health(ghost_configured)\n        \n        # Test Ghost API if configured",
          "values": {
            "strings": [],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 391,
          "snippet": "        ghost_metrics.set_adapter_health(ghost_configured)\n        \n        # Test Ghost API if configured\n        if ghost_configured:\n            try:",
          "values": {
            "strings": [],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 392,
          "snippet": "        \n        # Test Ghost API if configured\n        if ghost_configured:\n            try:\n                client = get_ghost_client()",
          "values": {
            "strings": [],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 394,
          "snippet": "        if ghost_configured:\n            try:\n                client = get_ghost_client()\n                if client:\n                    # Quick API test (this should be cached/throttled in production)",
          "values": {
            "strings": [],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 400,
          "snippet": "                    if connection_test.get('connected'):\n                        response_time_ms = connection_test.get('response_time_ms', 0)\n                        ghost_metrics.set_ghost_api_health(True, response_time_ms)\n                    else:\n                        ghost_metrics.set_ghost_api_health(False)",
          "values": {
            "strings": [
              "connected",
              "response_time_ms"
            ],
            "numbers": [
              0
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 402,
          "snippet": "                        ghost_metrics.set_ghost_api_health(True, response_time_ms)\n                    else:\n                        ghost_metrics.set_ghost_api_health(False)\n                else:\n                    ghost_metrics.set_ghost_api_health(False)",
          "values": {
            "strings": [],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 404,
          "snippet": "                        ghost_metrics.set_ghost_api_health(False)\n                else:\n                    ghost_metrics.set_ghost_api_health(False)\n            except Exception as e:\n                ghost_metrics.set_ghost_api_health(False)",
          "values": {
            "strings": [],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 406,
          "snippet": "                    ghost_metrics.set_ghost_api_health(False)\n            except Exception as e:\n                ghost_metrics.set_ghost_api_health(False)\n                logger.warning(f\"Ghost API health check failed: {e}\")\n        else:",
          "values": {
            "strings": [
              "Ghost API health check failed: {e}"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 407,
          "snippet": "            except Exception as e:\n                ghost_metrics.set_ghost_api_health(False)\n                logger.warning(f\"Ghost API health check failed: {e}\")\n        else:\n            ghost_metrics.set_ghost_api_health(False)",
          "values": {
            "strings": [
              "Ghost API health check failed: {e}"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 409,
          "snippet": "                logger.warning(f\"Ghost API health check failed: {e}\")\n        else:\n            ghost_metrics.set_ghost_api_health(False)\n        \n        # Get metrics data",
          "values": {
            "strings": [
              "Ghost API health check failed: {e}"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 412,
          "snippet": "        \n        # Get metrics data\n        metrics_data = ghost_metrics.get_metrics_data()\n        \n        return PlainTextResponse(",
          "values": {
            "strings": [],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 420,
          "snippet": "        \n    except Exception as e:\n        logger.error(f\"Error generating Ghost adapter metrics: {e}\")\n        ghost_metrics.track_error(\"METRICS_GENERATION_ERROR\", \"/metrics\")\n        raise HTTPException(status_code=500, detail=\"Failed to generate metrics\")",
          "values": {
            "strings": [
              "Error generating Ghost adapter metrics: {e}",
              "METRICS_GENERATION_ERROR",
              "/metrics",
              "Failed to generate metrics"
            ],
            "numbers": [
              500
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 421,
          "snippet": "    except Exception as e:\n        logger.error(f\"Error generating Ghost adapter metrics: {e}\")\n        ghost_metrics.track_error(\"METRICS_GENERATION_ERROR\", \"/metrics\")\n        raise HTTPException(status_code=500, detail=\"Failed to generate metrics\")\n",
          "values": {
            "strings": [
              "Error generating Ghost adapter metrics: {e}",
              "METRICS_GENERATION_ERROR",
              "/metrics",
              "Failed to generate metrics"
            ],
            "numbers": [
              500
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 425,
          "snippet": "\n\n@app.get(\"/config\", response_model=ConfigResponse, summary=\"Configuration status\", description=\"Status konfiguracji Ghost API\")\nasync def config():\n    \"\"\"",
          "values": {
            "strings": [
              "/config",
              "Configuration status",
              "Status konfiguracji Ghost API"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 430,
          "snippet": "    Configuration endpoint\n    \n    Sprawdza i zwraca status konfiguracji Ghost API z prawdziwym Ghost API test\n    \n    Returns:",
          "values": {
            "strings": [],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 436,
          "snippet": "    \"\"\"\n    try:\n        api_url = os.getenv(\"GHOST_API_URL\")\n        api_key = os.getenv(\"GHOST_API_KEY\")\n        ",
          "values": {
            "strings": [
              "\n    try:\n        api_url = os.getenv(",
              ")\n        api_key = os.getenv("
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 437,
          "snippet": "    try:\n        api_url = os.getenv(\"GHOST_API_URL\")\n        api_key = os.getenv(\"GHOST_API_KEY\")\n        \n        if not api_url or not api_key:",
          "values": {
            "strings": [
              "GHOST_API_URL",
              "GHOST_API_KEY"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 441,
          "snippet": "        if not api_url or not api_key:\n            return ConfigResponse(\n                ghost_api_configured=False,\n                ghost_url=api_url or \"not_set\",\n                status=\"misconfigured\",",
          "values": {
            "strings": [
              "not_set",
              "misconfigured"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 442,
          "snippet": "            return ConfigResponse(\n                ghost_api_configured=False,\n                ghost_url=api_url or \"not_set\",\n                status=\"misconfigured\",\n                message=\"GHOST_API_URL and GHOST_API_KEY environment variables required\"",
          "values": {
            "strings": [
              "not_set",
              "misconfigured",
              "GHOST_API_URL and GHOST_API_KEY environment variables required"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 444,
          "snippet": "                ghost_url=api_url or \"not_set\",\n                status=\"misconfigured\",\n                message=\"GHOST_API_URL and GHOST_API_KEY environment variables required\"\n            )\n        ",
          "values": {
            "strings": [
              "not_set",
              "misconfigured",
              "GHOST_API_URL and GHOST_API_KEY environment variables required"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 447,
          "snippet": "            )\n        \n        # Test Ghost client creation i authentication\n        try:\n            client = get_ghost_client()",
          "values": {
            "strings": [],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 449,
          "snippet": "        # Test Ghost client creation i authentication\n        try:\n            client = get_ghost_client()\n            if not client:\n                return ConfigResponse(",
          "values": {
            "strings": [],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 452,
          "snippet": "            if not client:\n                return ConfigResponse(\n                    ghost_api_configured=False,\n                    ghost_url=api_url,\n                    status=\"error\",",
          "values": {
            "strings": [
              "error"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 453,
          "snippet": "                return ConfigResponse(\n                    ghost_api_configured=False,\n                    ghost_url=api_url,\n                    status=\"error\",\n                    message=\"Failed to initialize Ghost client\"",
          "values": {
            "strings": [
              "error",
              "Failed to initialize Ghost client"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 455,
          "snippet": "                    ghost_url=api_url,\n                    status=\"error\",\n                    message=\"Failed to initialize Ghost client\"\n                )\n            ",
          "values": {
            "strings": [
              "error",
              "Failed to initialize Ghost client"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 458,
          "snippet": "                )\n            \n            # Test rzeczywistej łączności z Ghost API (Task 4.2)\n            connection_test = client.test_connection()\n            ",
          "values": {
            "strings": [],
            "numbers": [
              4,
              2
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 463,
          "snippet": "            if connection_test['connected']:\n                site_title = connection_test.get('site_info', {}).get('title', 'Unknown')\n                ghost_version = connection_test.get('site_info', {}).get('version', 'Unknown')\n                response_time = connection_test.get('response_time_ms', 0)\n                ",
          "values": {
            "strings": [
              "connected",
              "site_info",
              "title",
              "Unknown",
              "site_info",
              "version",
              "Unknown",
              "response_time_ms"
            ],
            "numbers": [
              0
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 467,
          "snippet": "                \n                return ConfigResponse(\n                    ghost_api_configured=True,\n                    ghost_url=api_url,\n                    status=\"ready\",",
          "values": {
            "strings": [
              "ready"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 468,
          "snippet": "                return ConfigResponse(\n                    ghost_api_configured=True,\n                    ghost_url=api_url,\n                    status=\"ready\",\n                    message=f\"Connected to '{site_title}' (Ghost {ghost_version}) in {response_time}ms\"",
          "values": {
            "strings": [
              "ready",
              "Connected to ",
              " (Ghost {ghost_version}) in {response_time}ms"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 470,
          "snippet": "                    ghost_url=api_url,\n                    status=\"ready\",\n                    message=f\"Connected to '{site_title}' (Ghost {ghost_version}) in {response_time}ms\"\n                )\n            else:",
          "values": {
            "strings": [
              "ready",
              "Connected to ",
              " (Ghost {ghost_version}) in {response_time}ms"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 477,
          "snippet": "                \n                return ConfigResponse(\n                    ghost_api_configured=True,\n                    ghost_url=api_url,\n                    status=\"connection_failed\",",
          "values": {
            "strings": [
              "connection_failed"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 478,
          "snippet": "                return ConfigResponse(\n                    ghost_api_configured=True,\n                    ghost_url=api_url,\n                    status=\"connection_failed\",\n                    message=f\"Ghost API error ({error_category}): {error_msg}\"",
          "values": {
            "strings": [
              "connection_failed",
              "Ghost API error ({error_category}): {error_msg}"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 480,
          "snippet": "                    ghost_url=api_url,\n                    status=\"connection_failed\",\n                    message=f\"Ghost API error ({error_category}): {error_msg}\"\n                )\n                ",
          "values": {
            "strings": [
              "connection_failed",
              "Ghost API error ({error_category}): {error_msg}"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 486,
          "snippet": "            # API key format error\n            return ConfigResponse(\n                ghost_api_configured=False,\n                ghost_url=api_url,\n                status=\"invalid_api_key\",",
          "values": {
            "strings": [
              "invalid_api_key"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 487,
          "snippet": "            return ConfigResponse(\n                ghost_api_configured=False,\n                ghost_url=api_url,\n                status=\"invalid_api_key\",\n                message=f\"Invalid Ghost API key format: {str(e)}\"",
          "values": {
            "strings": [
              "invalid_api_key",
              "Invalid Ghost API key format: {str(e)}"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 489,
          "snippet": "                ghost_url=api_url,\n                status=\"invalid_api_key\",\n                message=f\"Invalid Ghost API key format: {str(e)}\"\n            )\n        ",
          "values": {
            "strings": [
              "invalid_api_key",
              "Invalid Ghost API key format: {str(e)}"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 493,
          "snippet": "        \n    except Exception as e:\n        logger.error(f\"[Ghost Adapter] Config check failed: {str(e)}\")\n        return ConfigResponse(\n            ghost_api_configured=False,",
          "values": {
            "strings": [
              "[Ghost Adapter] Config check failed: {str(e)}"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 495,
          "snippet": "        logger.error(f\"[Ghost Adapter] Config check failed: {str(e)}\")\n        return ConfigResponse(\n            ghost_api_configured=False,\n            ghost_url=os.getenv(\"GHOST_API_URL\", \"error\"),\n            status=\"error\",",
          "values": {
            "strings": [
              "[Ghost Adapter] Config check failed: {str(e)}",
              "GHOST_API_URL",
              "error",
              "error"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 496,
          "snippet": "        return ConfigResponse(\n            ghost_api_configured=False,\n            ghost_url=os.getenv(\"GHOST_API_URL\", \"error\"),\n            status=\"error\",\n            message=f\"Configuration check failed: {str(e)}\"",
          "values": {
            "strings": [
              "GHOST_API_URL",
              "error",
              "error",
              "Configuration check failed: {str(e)}"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 502,
          "snippet": "\n\n@app.post(\"/publish\", response_model=PublishResponse, summary=\"Publish content to Ghost\", description=\"Publikacja treści w Ghost CMS z obsługą HTML i Lexical format\")\n@track_publication_metrics\nasync def publish_content(request: PublishRequest):",
          "values": {
            "strings": [
              "/publish",
              "Publish content to Ghost",
              "Publikacja treści w Ghost CMS z obsługą HTML i Lexical format"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 506,
          "snippet": "async def publish_content(request: PublishRequest):\n    \"\"\"\n    Publish content to Ghost CMS\n    \n    Task 4.3: Real implementation z Ghost Admin API",
          "values": {
            "strings": [],
            "numbers": [
              4,
              3
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 508,
          "snippet": "    Publish content to Ghost CMS\n    \n    Task 4.3: Real implementation z Ghost Admin API\n    Obsługuje HTML i Lexical content format z full post management\n    ",
          "values": {
            "strings": [],
            "numbers": [
              4,
              3
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 518,
          "snippet": "        \n    Raises:\n        HTTPException: Dla błędów walidacji lub Ghost API\n    \"\"\"\n    try:",
          "values": {
            "strings": [],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 521,
          "snippet": "    \"\"\"\n    try:\n        logger.info(f\"[Ghost Adapter] Publishing post: '{request.title}' (format: {request.content_format})\")\n        \n        client = get_ghost_client()",
          "values": {
            "strings": [
              "\n    try:\n        logger.info(f",
              "{request.title}"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 523,
          "snippet": "        logger.info(f\"[Ghost Adapter] Publishing post: '{request.title}' (format: {request.content_format})\")\n        \n        client = get_ghost_client()\n        if not client:\n            raise HTTPException(",
          "values": {
            "strings": [
              "[Ghost Adapter] Publishing post: ",
              " (format: {request.content_format})"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 527,
          "snippet": "            raise HTTPException(\n                status_code=500,\n                detail=\"Ghost API not configured. Set GHOST_API_URL and GHOST_API_KEY.\"\n            )\n        ",
          "values": {
            "strings": [
              "Ghost API not configured. Set GHOST_API_URL and GHOST_API_KEY."
            ],
            "numbers": [
              500
            ]
          }
        },
        {
          "type": "required_elements",
          "platform": "ghost",
          "line": 575,
          "snippet": "            raise HTTPException(\n                status_code=400,\n                detail=\"At least one content field (content, html, or lexical) is required\"\n            )\n        ",
          "values": {
            "strings": [
              "At least one content field (content, html, or lexical) is required"
            ],
            "numbers": [
              400
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 594,
          "snippet": "                        upload_result = client.upload_image(feature_image_url)\n                        feature_image_url = upload_result['images'][0]['url']\n                        logger.info(f\"[Ghost Adapter] Feature image uploaded: {feature_image_url}\")\n                    except Exception as e:\n                        logger.warning(f\"[Ghost Adapter] Failed to upload feature image {feature_image_url}: {str(e)}\")",
          "values": {
            "strings": [
              "images",
              "url",
              "[Ghost Adapter] Feature image uploaded: {feature_image_url}",
              "[Ghost Adapter] Failed to upload feature image {feature_image_url}: {str(e)}"
            ],
            "numbers": [
              0
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 596,
          "snippet": "                        logger.info(f\"[Ghost Adapter] Feature image uploaded: {feature_image_url}\")\n                    except Exception as e:\n                        logger.warning(f\"[Ghost Adapter] Failed to upload feature image {feature_image_url}: {str(e)}\")\n                        # Continue with original URL - Ghost may reject it but let's try\n            post_data['feature_image'] = feature_image_url",
          "values": {
            "strings": [
              "[Ghost Adapter] Feature image uploaded: {feature_image_url}",
              "[Ghost Adapter] Failed to upload feature image {feature_image_url}: {str(e)}",
              "s try\n            post_data["
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 597,
          "snippet": "                    except Exception as e:\n                        logger.warning(f\"[Ghost Adapter] Failed to upload feature image {feature_image_url}: {str(e)}\")\n                        # Continue with original URL - Ghost may reject it but let's try\n            post_data['feature_image'] = feature_image_url\n        if request.visibility:",
          "values": {
            "strings": [
              "[Ghost Adapter] Failed to upload feature image {feature_image_url}: {str(e)}",
              "s try\n            post_data["
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 611,
          "snippet": "        validated_data = client.validate_post_data(post_data)\n        \n        # Create post in Ghost with retry\n        created_post = await retry_with_backoff(client.create_post, validated_data)\n        ",
          "values": {
            "strings": [],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 628,
          "snippet": "                pass\n        \n        logger.info(f\"[Ghost Adapter] Post created successfully with ID: {created_post.get('id')}\")\n        \n        return PublishResponse(",
          "values": {
            "strings": [
              "[Ghost Adapter] Post created successfully with ID: {created_post.get(",
              ")}"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 640,
          "snippet": "        )\n        \n    except GhostAPIError as e:\n        logger.error(f\"[Ghost Adapter] Ghost API error: {str(e)}\")\n        ",
          "values": {
            "strings": [
              "[Ghost Adapter] Ghost API error: {str(e)}"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 641,
          "snippet": "        \n    except GhostAPIError as e:\n        logger.error(f\"[Ghost Adapter] Ghost API error: {str(e)}\")\n        \n        # Map Ghost API errors to appropriate HTTP status codes",
          "values": {
            "strings": [
              "[Ghost Adapter] Ghost API error: {str(e)}"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 643,
          "snippet": "        logger.error(f\"[Ghost Adapter] Ghost API error: {str(e)}\")\n        \n        # Map Ghost API errors to appropriate HTTP status codes\n        status_code = e.status_code or 500\n        if status_code == 422:",
          "values": {
            "strings": [
              "[Ghost Adapter] Ghost API error: {str(e)}"
            ],
            "numbers": [
              500,
              422
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 650,
          "snippet": "        raise HTTPException(\n            status_code=status_code,\n            detail=f\"Ghost API error: {str(e)}\"\n        )\n    ",
          "values": {
            "strings": [
              "Ghost API error: {str(e)}"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 658,
          "snippet": "    \n    except Exception as e:\n        logger.error(f\"[Ghost Adapter] Publish failed: {str(e)}\")\n        raise HTTPException(\n            status_code=500,",
          "values": {
            "strings": [
              "[Ghost Adapter] Publish failed: {str(e)}"
            ],
            "numbers": [
              500
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 665,
          "snippet": "\n\n@app.get(\"/site\", summary=\"Ghost site information\", description=\"Informacje o Ghost site\")\nasync def get_site_info():\n    \"\"\"",
          "values": {
            "strings": [
              "/site",
              "Ghost site information",
              "Informacje o Ghost site"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 668,
          "snippet": "async def get_site_info():\n    \"\"\"\n    Get Ghost site information\n    \n    Task 4.2: Endpoint dla pobierania informacji o Ghost site",
          "values": {
            "strings": [],
            "numbers": [
              4,
              2
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 670,
          "snippet": "    Get Ghost site information\n    \n    Task 4.2: Endpoint dla pobierania informacji o Ghost site\n    \n    Returns:",
          "values": {
            "strings": [],
            "numbers": [
              4,
              2
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 673,
          "snippet": "    \n    Returns:\n        Dict z informacjami o Ghost site\n        \n    Raises:",
          "values": {
            "strings": [],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 676,
          "snippet": "        \n    Raises:\n        HTTPException: Jeśli Ghost API nie jest dostępne\n    \"\"\"\n    try:",
          "values": {
            "strings": [],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 679,
          "snippet": "    \"\"\"\n    try:\n        client = get_ghost_client()\n        if not client:\n            raise HTTPException(",
          "values": {
            "strings": [],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 683,
          "snippet": "            raise HTTPException(\n                status_code=500,\n                detail=\"Ghost API not configured. Set GHOST_API_URL and GHOST_API_KEY.\"\n            )\n        ",
          "values": {
            "strings": [
              "Ghost API not configured. Set GHOST_API_URL and GHOST_API_KEY."
            ],
            "numbers": [
              500
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 694,
          "snippet": "        }\n        \n    except GhostAPIError as e:\n        logger.error(f\"[Ghost Adapter] Site info error: {str(e)}\")\n        raise HTTPException(",
          "values": {
            "strings": [
              "[Ghost Adapter] Site info error: {str(e)}"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 695,
          "snippet": "        \n    except GhostAPIError as e:\n        logger.error(f\"[Ghost Adapter] Site info error: {str(e)}\")\n        raise HTTPException(\n            status_code=e.status_code or 500,",
          "values": {
            "strings": [
              "[Ghost Adapter] Site info error: {str(e)}"
            ],
            "numbers": [
              500
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 698,
          "snippet": "        raise HTTPException(\n            status_code=e.status_code or 500,\n            detail=f\"Ghost API error: {str(e)}\"\n        )\n    ",
          "values": {
            "strings": [
              "Ghost API error: {str(e)}"
            ],
            "numbers": [
              500
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 702,
          "snippet": "    \n    except Exception as e:\n        logger.error(f\"[Ghost Adapter] Site info failed: {str(e)}\")\n        raise HTTPException(\n            status_code=500,",
          "values": {
            "strings": [
              "[Ghost Adapter] Site info failed: {str(e)}"
            ],
            "numbers": [
              500
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 709,
          "snippet": "\n\n@app.get(\"/posts\", summary=\"List Ghost posts\", description=\"Lista postów z Ghost\")\nasync def list_posts(status: str = \"all\", limit: int = 15, page: int = 1):\n    \"\"\"",
          "values": {
            "strings": [
              "/posts",
              "List Ghost posts",
              "Lista postów z Ghost",
              "all"
            ],
            "numbers": [
              15,
              1
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 712,
          "snippet": "async def list_posts(status: str = \"all\", limit: int = 15, page: int = 1):\n    \"\"\"\n    List posts from Ghost\n    \n    Task 4.2: Endpoint dla pobierania listy postów",
          "values": {
            "strings": [
              "all"
            ],
            "numbers": [
              15,
              1,
              4,
              2
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 725,
          "snippet": "        \n    Raises:\n        HTTPException: Jeśli Ghost API nie jest dostępne\n    \"\"\"\n    try:",
          "values": {
            "strings": [],
            "numbers": []
          }
        },
        {
          "type": "required_elements",
          "platform": "ghost",
          "line": 732,
          "snippet": "            raise HTTPException(\n                status_code=400,\n                detail=\"Limit must be between 1 and 100\"\n            )\n            ",
          "values": {
            "strings": [
              "Limit must be between 1 and 100"
            ],
            "numbers": [
              400,
              1,
              100
            ]
          }
        },
        {
          "type": "required_elements",
          "platform": "ghost",
          "line": 738,
          "snippet": "            raise HTTPException(\n                status_code=400,\n                detail=\"Page must be 1 or greater\"\n            )\n            ",
          "values": {
            "strings": [
              "Page must be 1 or greater"
            ],
            "numbers": [
              400,
              1
            ]
          }
        },
        {
          "type": "required_elements",
          "platform": "ghost",
          "line": 744,
          "snippet": "            raise HTTPException(\n                status_code=400,\n                detail=\"Status must be one of: published, draft, scheduled, all\"\n            )\n        ",
          "values": {
            "strings": [
              "Status must be one of: published, draft, scheduled, all"
            ],
            "numbers": [
              400
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 747,
          "snippet": "            )\n        \n        client = get_ghost_client()\n        if not client:\n            raise HTTPException(",
          "values": {
            "strings": [],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 751,
          "snippet": "            raise HTTPException(\n                status_code=500,\n                detail=\"Ghost API not configured. Set GHOST_API_URL and GHOST_API_KEY.\"\n            )\n        ",
          "values": {
            "strings": [
              "Ghost API not configured. Set GHOST_API_URL and GHOST_API_KEY."
            ],
            "numbers": [
              500
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 767,
          "snippet": "        }\n        \n    except GhostAPIError as e:\n        logger.error(f\"[Ghost Adapter] List posts error: {str(e)}\")\n        raise HTTPException(",
          "values": {
            "strings": [
              "[Ghost Adapter] List posts error: {str(e)}"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 768,
          "snippet": "        \n    except GhostAPIError as e:\n        logger.error(f\"[Ghost Adapter] List posts error: {str(e)}\")\n        raise HTTPException(\n            status_code=e.status_code or 500,",
          "values": {
            "strings": [
              "[Ghost Adapter] List posts error: {str(e)}"
            ],
            "numbers": [
              500
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 771,
          "snippet": "        raise HTTPException(\n            status_code=e.status_code or 500,\n            detail=f\"Ghost API error: {str(e)}\"\n        )\n    ",
          "values": {
            "strings": [
              "Ghost API error: {str(e)}"
            ],
            "numbers": [
              500
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 778,
          "snippet": "        raise\n    except Exception as e:\n        logger.error(f\"[Ghost Adapter] List posts failed: {str(e)}\")\n        raise HTTPException(\n            status_code=500,",
          "values": {
            "strings": [
              "[Ghost Adapter] List posts failed: {str(e)}"
            ],
            "numbers": [
              500
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 796,
          "snippet": "        \n    Raises:\n        HTTPException: Jeśli Ghost API nie jest dostępne lub brak uprawnień\n    \"\"\"\n    try:",
          "values": {
            "strings": [],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 799,
          "snippet": "    \"\"\"\n    try:\n        client = get_ghost_client()\n        if not client:\n            raise HTTPException(",
          "values": {
            "strings": [],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 803,
          "snippet": "            raise HTTPException(\n                status_code=500,\n                detail=\"Ghost API not configured. Set GHOST_API_URL and GHOST_API_KEY.\"\n            )\n        ",
          "values": {
            "strings": [
              "Ghost API not configured. Set GHOST_API_URL and GHOST_API_KEY."
            ],
            "numbers": [
              500
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 814,
          "snippet": "        }\n        \n    except GhostAPIError as e:\n        logger.error(f\"[Ghost Adapter] Current user error: {str(e)}\")\n        ",
          "values": {
            "strings": [
              "[Ghost Adapter] Current user error: {str(e)}"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 815,
          "snippet": "        \n    except GhostAPIError as e:\n        logger.error(f\"[Ghost Adapter] Current user error: {str(e)}\")\n        \n        if e.status_code == 403:",
          "values": {
            "strings": [
              "[Ghost Adapter] Current user error: {str(e)}"
            ],
            "numbers": [
              403
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 825,
          "snippet": "            raise HTTPException(\n                status_code=e.status_code or 500,\n                detail=f\"Ghost API error: {str(e)}\"\n            )\n    ",
          "values": {
            "strings": [
              "Ghost API error: {str(e)}"
            ],
            "numbers": [
              500
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 829,
          "snippet": "    \n    except Exception as e:\n        logger.error(f\"[Ghost Adapter] Current user failed: {str(e)}\")\n        raise HTTPException(\n            status_code=500,",
          "values": {
            "strings": [
              "[Ghost Adapter] Current user failed: {str(e)}"
            ],
            "numbers": [
              500
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 838,
          "snippet": "# Task 4.4: Harmonogram publikacji i status management endpoints\n\n@app.delete(\"/posts/{post_id}\", summary=\"Delete post\", description=\"Usuń post z Ghost CMS\")\nasync def delete_post(post_id: str):\n    \"\"\"",
          "values": {
            "strings": [
              "/posts/{post_id}",
              "Delete post",
              "Usuń post z Ghost CMS"
            ],
            "numbers": [
              4,
              4
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 841,
          "snippet": "async def delete_post(post_id: str):\n    \"\"\"\n    Delete post from Ghost CMS\n    \n    Args:",
          "values": {
            "strings": [],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 850,
          "snippet": "        \n    Raises:\n        HTTPException: Dla błędów Ghost API\n    \"\"\"\n    try:",
          "values": {
            "strings": [],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 853,
          "snippet": "    \"\"\"\n    try:\n        logger.info(f\"[Ghost Adapter] Deleting post {post_id}\")\n        \n        client = get_ghost_client()",
          "values": {
            "strings": [
              "\n    try:\n        logger.info(f"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 855,
          "snippet": "        logger.info(f\"[Ghost Adapter] Deleting post {post_id}\")\n        \n        client = get_ghost_client()\n        if not client:\n            raise HTTPException(",
          "values": {
            "strings": [
              "[Ghost Adapter] Deleting post {post_id}"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 859,
          "snippet": "            raise HTTPException(\n                status_code=500,\n                detail=\"Ghost API not configured. Set GHOST_API_URL and GHOST_API_KEY.\"\n            )\n        ",
          "values": {
            "strings": [
              "Ghost API not configured. Set GHOST_API_URL and GHOST_API_KEY."
            ],
            "numbers": [
              500
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 878,
          "snippet": "            \n    except Exception as e:\n        logger.error(f\"[Ghost Adapter] Error deleting post {post_id}: {str(e)}\")\n        raise HTTPException(\n            status_code=500,",
          "values": {
            "strings": [
              "[Ghost Adapter] Error deleting post {post_id}: {str(e)}"
            ],
            "numbers": [
              500
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 885,
          "snippet": "\n\n@app.post(\"/upload-image\", summary=\"Upload image to Ghost\", description=\"Prześlij obraz do Ghost CMS\")\nasync def upload_image(file: UploadFile = File(...)):\n    \"\"\"",
          "values": {
            "strings": [
              "/upload-image",
              "Upload image to Ghost",
              "Prześlij obraz do Ghost CMS"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 888,
          "snippet": "async def upload_image(file: UploadFile = File(...)):\n    \"\"\"\n    Upload image to Ghost CMS\n    \n    Task 4.5: Image upload i media management",
          "values": {
            "strings": [],
            "numbers": [
              4,
              5
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 896,
          "snippet": "        \n    Returns:\n        Dict with upload result and Ghost URL\n        \n    Raises:",
          "values": {
            "strings": [],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 899,
          "snippet": "        \n    Raises:\n        HTTPException: For validation errors or Ghost API errors\n    \"\"\"\n    try:",
          "values": {
            "strings": [],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 902,
          "snippet": "    \"\"\"\n    try:\n        logger.info(f\"[Ghost Adapter] Uploading image: {file.filename}\")\n        \n        # Validate file type",
          "values": {
            "strings": [
              "\n    try:\n        logger.info(f"
            ],
            "numbers": []
          }
        },
        {
          "type": "required_elements",
          "platform": "ghost",
          "line": 908,
          "snippet": "            raise HTTPException(\n                status_code=400, \n                detail=f\"File must be an image, got: {file.content_type}\"\n            )\n        ",
          "values": {
            "strings": [
              "File must be an image, got: {file.content_type}"
            ],
            "numbers": [
              400
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 918,
          "snippet": "            )\n        \n        client = get_ghost_client()\n        if not client:\n            raise HTTPException(",
          "values": {
            "strings": [],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 922,
          "snippet": "            raise HTTPException(\n                status_code=500, \n                detail=\"Ghost API not configured. Set GHOST_API_URL and GHOST_API_KEY.\"\n            )\n        ",
          "values": {
            "strings": [
              "Ghost API not configured. Set GHOST_API_URL and GHOST_API_KEY."
            ],
            "numbers": [
              500
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 932,
          "snippet": "        \n        try:\n            # Upload to Ghost\n            result = client.upload_image(temp_path)\n            ",
          "values": {
            "strings": [],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 950,
          "snippet": "                pass\n        \n    except GhostAPIError as e:\n        logger.error(f\"[Ghost Adapter] Ghost API Error during image upload: {e.status_code} - {e.message}\")\n        raise HTTPException(status_code=e.status_code or 500, detail=f\"Ghost API error: {e.message}\")",
          "values": {
            "strings": [
              "[Ghost Adapter] Ghost API Error during image upload: {e.status_code} - {e.message}",
              "Ghost API error: {e.message}"
            ],
            "numbers": [
              500
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 951,
          "snippet": "        \n    except GhostAPIError as e:\n        logger.error(f\"[Ghost Adapter] Ghost API Error during image upload: {e.status_code} - {e.message}\")\n        raise HTTPException(status_code=e.status_code or 500, detail=f\"Ghost API error: {e.message}\")\n    ",
          "values": {
            "strings": [
              "[Ghost Adapter] Ghost API Error during image upload: {e.status_code} - {e.message}",
              "Ghost API error: {e.message}"
            ],
            "numbers": [
              500
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 952,
          "snippet": "    except GhostAPIError as e:\n        logger.error(f\"[Ghost Adapter] Ghost API Error during image upload: {e.status_code} - {e.message}\")\n        raise HTTPException(status_code=e.status_code or 500, detail=f\"Ghost API error: {e.message}\")\n    \n    except ValueError as e:",
          "values": {
            "strings": [
              "[Ghost Adapter] Ghost API Error during image upload: {e.status_code} - {e.message}",
              "Ghost API error: {e.message}"
            ],
            "numbers": [
              500
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 955,
          "snippet": "    \n    except ValueError as e:\n        logger.error(f\"[Ghost Adapter] Validation Error during image upload: {e}\")\n        raise HTTPException(status_code=400, detail=f\"Validation error: {e}\")\n    ",
          "values": {
            "strings": [
              "[Ghost Adapter] Validation Error during image upload: {e}",
              "Validation error: {e}"
            ],
            "numbers": [
              400
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 959,
          "snippet": "    \n    except Exception as e:\n        logger.error(f\"[Ghost Adapter] Unexpected error during image upload: {e}\")\n        # Better error message for debugging\n        error_details = str(e)",
          "values": {
            "strings": [
              "[Ghost Adapter] Unexpected error during image upload: {e}"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 983,
          "snippet": "        \n    Raises:\n        HTTPException: Dla błędów walidacji lub Ghost API\n    \"\"\"\n    try:",
          "values": {
            "strings": [],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 986,
          "snippet": "    \"\"\"\n    try:\n        logger.info(f\"[Ghost Adapter] Scheduling post {post_id} for {published_at}\")\n        \n        client = get_ghost_client()",
          "values": {
            "strings": [
              "\n    try:\n        logger.info(f"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 988,
          "snippet": "        logger.info(f\"[Ghost Adapter] Scheduling post {post_id} for {published_at}\")\n        \n        client = get_ghost_client()\n        if not client:\n            raise HTTPException(",
          "values": {
            "strings": [
              "[Ghost Adapter] Scheduling post {post_id} for {published_at}"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 992,
          "snippet": "            raise HTTPException(\n                status_code=500,\n                detail=\"Ghost API not configured. Set GHOST_API_URL and GHOST_API_KEY.\"\n            )\n        ",
          "values": {
            "strings": [
              "Ghost API not configured. Set GHOST_API_URL and GHOST_API_KEY."
            ],
            "numbers": [
              500
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 1008,
          "snippet": "        }\n        \n    except GhostAPIError as e:\n        logger.error(f\"[Ghost Adapter] Schedule error: {str(e)}\")\n        raise HTTPException(",
          "values": {
            "strings": [
              "[Ghost Adapter] Schedule error: {str(e)}"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 1009,
          "snippet": "        \n    except GhostAPIError as e:\n        logger.error(f\"[Ghost Adapter] Schedule error: {str(e)}\")\n        raise HTTPException(\n            status_code=e.status_code or 500,",
          "values": {
            "strings": [
              "[Ghost Adapter] Schedule error: {str(e)}"
            ],
            "numbers": [
              500
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 1012,
          "snippet": "        raise HTTPException(\n            status_code=e.status_code or 500,\n            detail=f\"Ghost API error: {str(e)}\"\n        )\n    ",
          "values": {
            "strings": [
              "Ghost API error: {str(e)}"
            ],
            "numbers": [
              500
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 1020,
          "snippet": "    \n    except Exception as e:\n        logger.error(f\"[Ghost Adapter] Schedule failed: {str(e)}\")\n        raise HTTPException(\n            status_code=500,",
          "values": {
            "strings": [
              "[Ghost Adapter] Schedule failed: {str(e)}"
            ],
            "numbers": [
              500
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 1041,
          "snippet": "    \"\"\"\n    try:\n        logger.info(f\"[Ghost Adapter] Publishing post {post_id} immediately\")\n        \n        client = get_ghost_client()",
          "values": {
            "strings": [
              "\n    try:\n        logger.info(f"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 1043,
          "snippet": "        logger.info(f\"[Ghost Adapter] Publishing post {post_id} immediately\")\n        \n        client = get_ghost_client()\n        if not client:\n            raise HTTPException(",
          "values": {
            "strings": [
              "[Ghost Adapter] Publishing post {post_id} immediately"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 1047,
          "snippet": "            raise HTTPException(\n                status_code=500,\n                detail=\"Ghost API not configured. Set GHOST_API_URL and GHOST_API_KEY.\"\n            )\n        ",
          "values": {
            "strings": [
              "Ghost API not configured. Set GHOST_API_URL and GHOST_API_KEY."
            ],
            "numbers": [
              500
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 1062,
          "snippet": "        }\n        \n    except GhostAPIError as e:\n        logger.error(f\"[Ghost Adapter] Publish error: {str(e)}\")\n        raise HTTPException(",
          "values": {
            "strings": [
              "[Ghost Adapter] Publish error: {str(e)}"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 1063,
          "snippet": "        \n    except GhostAPIError as e:\n        logger.error(f\"[Ghost Adapter] Publish error: {str(e)}\")\n        raise HTTPException(\n            status_code=e.status_code or 500,",
          "values": {
            "strings": [
              "[Ghost Adapter] Publish error: {str(e)}"
            ],
            "numbers": [
              500
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 1066,
          "snippet": "        raise HTTPException(\n            status_code=e.status_code or 500,\n            detail=f\"Ghost API error: {str(e)}\"\n        )\n    ",
          "values": {
            "strings": [
              "Ghost API error: {str(e)}"
            ],
            "numbers": [
              500
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 1070,
          "snippet": "    \n    except Exception as e:\n        logger.error(f\"[Ghost Adapter] Publish failed: {str(e)}\")\n        raise HTTPException(\n            status_code=500,",
          "values": {
            "strings": [
              "[Ghost Adapter] Publish failed: {str(e)}"
            ],
            "numbers": [
              500
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 1093,
          "snippet": "    \"\"\"\n    try:\n        logger.info(f\"[Ghost Adapter] Updating post {post_id} status to {status}\")\n        \n        client = get_ghost_client()",
          "values": {
            "strings": [
              "\n    try:\n        logger.info(f"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 1095,
          "snippet": "        logger.info(f\"[Ghost Adapter] Updating post {post_id} status to {status}\")\n        \n        client = get_ghost_client()\n        if not client:\n            raise HTTPException(",
          "values": {
            "strings": [
              "[Ghost Adapter] Updating post {post_id} status to {status}"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 1099,
          "snippet": "            raise HTTPException(\n                status_code=500,\n                detail=\"Ghost API not configured. Set GHOST_API_URL and GHOST_API_KEY.\"\n            )\n        ",
          "values": {
            "strings": [
              "Ghost API not configured. Set GHOST_API_URL and GHOST_API_KEY."
            ],
            "numbers": [
              500
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 1114,
          "snippet": "        }\n        \n    except GhostAPIError as e:\n        logger.error(f\"[Ghost Adapter] Status update error: {str(e)}\")\n        raise HTTPException(",
          "values": {
            "strings": [
              "[Ghost Adapter] Status update error: {str(e)}"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 1115,
          "snippet": "        \n    except GhostAPIError as e:\n        logger.error(f\"[Ghost Adapter] Status update error: {str(e)}\")\n        raise HTTPException(\n            status_code=e.status_code or 500,",
          "values": {
            "strings": [
              "[Ghost Adapter] Status update error: {str(e)}"
            ],
            "numbers": [
              500
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 1118,
          "snippet": "        raise HTTPException(\n            status_code=e.status_code or 500,\n            detail=f\"Ghost API error: {str(e)}\"\n        )\n    ",
          "values": {
            "strings": [
              "Ghost API error: {str(e)}"
            ],
            "numbers": [
              500
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 1122,
          "snippet": "    \n    except Exception as e:\n        logger.error(f\"[Ghost Adapter] Status update failed: {str(e)}\")\n        raise HTTPException(\n            status_code=500,",
          "values": {
            "strings": [
              "[Ghost Adapter] Status update failed: {str(e)}"
            ],
            "numbers": [
              500
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 1143,
          "snippet": "    \"\"\"\n    try:\n        logger.info(f\"[Ghost Adapter] Fetching preview for post {post_id}\")\n        \n        client = get_ghost_client()",
          "values": {
            "strings": [
              "\n    try:\n        logger.info(f"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 1145,
          "snippet": "        logger.info(f\"[Ghost Adapter] Fetching preview for post {post_id}\")\n        \n        client = get_ghost_client()\n        if not client:\n            raise HTTPException(",
          "values": {
            "strings": [
              "[Ghost Adapter] Fetching preview for post {post_id}"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 1149,
          "snippet": "            raise HTTPException(\n                status_code=500,\n                detail=\"Ghost API not configured. Set GHOST_API_URL and GHOST_API_KEY.\"\n            )\n        ",
          "values": {
            "strings": [
              "Ghost API not configured. Set GHOST_API_URL and GHOST_API_KEY."
            ],
            "numbers": [
              500
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 1160,
          "snippet": "        }\n        \n    except GhostAPIError as e:\n        logger.error(f\"[Ghost Adapter] Preview error: {str(e)}\")\n        raise HTTPException(",
          "values": {
            "strings": [
              "[Ghost Adapter] Preview error: {str(e)}"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 1161,
          "snippet": "        \n    except GhostAPIError as e:\n        logger.error(f\"[Ghost Adapter] Preview error: {str(e)}\")\n        raise HTTPException(\n            status_code=e.status_code or 500,",
          "values": {
            "strings": [
              "[Ghost Adapter] Preview error: {str(e)}"
            ],
            "numbers": [
              500
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 1164,
          "snippet": "        raise HTTPException(\n            status_code=e.status_code or 500,\n            detail=f\"Ghost API error: {str(e)}\"\n        )\n    ",
          "values": {
            "strings": [
              "Ghost API error: {str(e)}"
            ],
            "numbers": [
              500
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 1168,
          "snippet": "    \n    except Exception as e:\n        logger.error(f\"[Ghost Adapter] Preview failed: {str(e)}\")\n        raise HTTPException(\n            status_code=500,",
          "values": {
            "strings": [
              "[Ghost Adapter] Preview failed: {str(e)}"
            ],
            "numbers": [
              500
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 1189,
          "snippet": "    \"\"\"\n    try:\n        logger.info(f\"[Ghost Adapter] Fetching scheduled posts (limit: {limit})\")\n        \n        if limit < 1 or limit > 100:",
          "values": {
            "strings": [
              "\n    try:\n        logger.info(f"
            ],
            "numbers": [
              1,
              100
            ]
          }
        },
        {
          "type": "required_elements",
          "platform": "ghost",
          "line": 1194,
          "snippet": "            raise HTTPException(\n                status_code=400,\n                detail=\"Limit must be between 1 and 100\"\n            )\n        ",
          "values": {
            "strings": [
              "Limit must be between 1 and 100"
            ],
            "numbers": [
              400,
              1,
              100
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 1197,
          "snippet": "            )\n        \n        client = get_ghost_client()\n        if not client:\n            raise HTTPException(",
          "values": {
            "strings": [],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 1201,
          "snippet": "            raise HTTPException(\n                status_code=500,\n                detail=\"Ghost API not configured. Set GHOST_API_URL and GHOST_API_KEY.\"\n            )\n        ",
          "values": {
            "strings": [
              "Ghost API not configured. Set GHOST_API_URL and GHOST_API_KEY."
            ],
            "numbers": [
              500
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 1214,
          "snippet": "        }\n        \n    except GhostAPIError as e:\n        logger.error(f\"[Ghost Adapter] Scheduled posts error: {str(e)}\")\n        raise HTTPException(",
          "values": {
            "strings": [
              "[Ghost Adapter] Scheduled posts error: {str(e)}"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 1215,
          "snippet": "        \n    except GhostAPIError as e:\n        logger.error(f\"[Ghost Adapter] Scheduled posts error: {str(e)}\")\n        raise HTTPException(\n            status_code=e.status_code or 500,",
          "values": {
            "strings": [
              "[Ghost Adapter] Scheduled posts error: {str(e)}"
            ],
            "numbers": [
              500
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 1218,
          "snippet": "        raise HTTPException(\n            status_code=e.status_code or 500,\n            detail=f\"Ghost API error: {str(e)}\"\n        )\n    ",
          "values": {
            "strings": [
              "Ghost API error: {str(e)}"
            ],
            "numbers": [
              500
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 1226,
          "snippet": "    \n    except Exception as e:\n        logger.error(f\"[Ghost Adapter] Scheduled posts failed: {str(e)}\")\n        raise HTTPException(\n            status_code=500,",
          "values": {
            "strings": [
              "[Ghost Adapter] Scheduled posts failed: {str(e)}"
            ],
            "numbers": [
              500
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 1248,
          "snippet": "    \"\"\"\n    try:\n        logger.info(f\"[Ghost Adapter] Batch updating {len(updates)} posts\")\n        \n        if len(updates) > 50:",
          "values": {
            "strings": [
              "\n    try:\n        logger.info(f"
            ],
            "numbers": [
              50
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 1256,
          "snippet": "            )\n        \n        client = get_ghost_client()\n        if not client:\n            raise HTTPException(",
          "values": {
            "strings": [],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 1260,
          "snippet": "            raise HTTPException(\n                status_code=500,\n                detail=\"Ghost API not configured. Set GHOST_API_URL and GHOST_API_KEY.\"\n            )\n        ",
          "values": {
            "strings": [
              "Ghost API not configured. Set GHOST_API_URL and GHOST_API_KEY."
            ],
            "numbers": [
              500
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 1279,
          "snippet": "        }\n        \n    except GhostAPIError as e:\n        logger.error(f\"[Ghost Adapter] Batch update error: {str(e)}\")\n        raise HTTPException(",
          "values": {
            "strings": [
              "[Ghost Adapter] Batch update error: {str(e)}"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 1280,
          "snippet": "        \n    except GhostAPIError as e:\n        logger.error(f\"[Ghost Adapter] Batch update error: {str(e)}\")\n        raise HTTPException(\n            status_code=e.status_code or 500,",
          "values": {
            "strings": [
              "[Ghost Adapter] Batch update error: {str(e)}"
            ],
            "numbers": [
              500
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 1283,
          "snippet": "        raise HTTPException(\n            status_code=e.status_code or 500,\n            detail=f\"Ghost API error: {str(e)}\"\n        )\n    ",
          "values": {
            "strings": [
              "Ghost API error: {str(e)}"
            ],
            "numbers": [
              500
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 1291,
          "snippet": "    \n    except Exception as e:\n        logger.error(f\"[Ghost Adapter] Batch update failed: {str(e)}\")\n        raise HTTPException(\n            status_code=500,",
          "values": {
            "strings": [
              "[Ghost Adapter] Batch update failed: {str(e)}"
            ],
            "numbers": [
              500
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 1302,
          "snippet": "async def global_exception_handler(request, exc):\n    \"\"\"Global exception handler\"\"\"\n    logger.error(f\"[Ghost Adapter] Unhandled exception: {str(exc)}\")\n    \n    return JSONResponse(",
          "values": {
            "strings": [
              "Global exception handler",
              "\n    logger.error(f"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 1310,
          "snippet": "            \"message\": \"Internal server error\",\n            \"details\": str(exc),\n            \"service\": \"ghost-adapter\"\n        }\n    )",
          "values": {
            "strings": [
              "message",
              "Internal server error",
              "details",
              "service",
              "ghost-adapter"
            ],
            "numbers": []
          }
        }
      ]
    },
    {
      "file": "/Users/hretheum/dev/bezrobocie/vector-wave/publisher/src/adapters/beehiiv/platform_health_models.py",
      "exists": true,
      "hits": [
        {
          "type": "platform_specific",
          "platform": "twitter",
          "line": 71,
          "snippet": "    # Basic service info\n    status: HealthStatus = Field(..., description=\"Overall health status\")\n    service: str = Field(..., description=\"Service name (e.g., 'twitter-adapter')\")\n    platform: str = Field(..., description=\"Platform name (e.g., 'twitter')\")\n    version: str = Field(default=\"1.0.0\", description=\"Adapter version\")",
          "values": {
            "strings": [
              "Overall health status",
              "Service name (e.g., ",
              ")\n    platform: str = Field(..., description=",
              "twitter",
              ")\n    version: str = Field(default=",
              ", description="
            ],
            "numbers": [
              1,
              0,
              0
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "twitter",
          "line": 72,
          "snippet": "    status: HealthStatus = Field(..., description=\"Overall health status\")\n    service: str = Field(..., description=\"Service name (e.g., 'twitter-adapter')\")\n    platform: str = Field(..., description=\"Platform name (e.g., 'twitter')\")\n    version: str = Field(default=\"1.0.0\", description=\"Adapter version\")\n    timestamp: str = Field(",
          "values": {
            "strings": [
              "Overall health status",
              "Service name (e.g., ",
              ")\n    platform: str = Field(..., description=",
              "twitter",
              ")\n    version: str = Field(default=",
              ", description="
            ],
            "numbers": [
              1,
              0,
              0
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 85,
          "snippet": "    rate_limits: Optional[RateLimitStatus] = Field(default=None, description=\"Rate limit information\")\n    \n    # Session status (for browser-based platforms like LinkedIn)\n    session: Optional[SessionStatus] = Field(default=None, description=\"Session validity status\")\n    ",
          "values": {
            "strings": [
              "Rate limit information",
              "Session validity status"
            ],
            "numbers": []
          }
        }
      ]
    },
    {
      "file": "/Users/hretheum/dev/bezrobocie/vector-wave/publisher/src/adapters/beehiiv/beehiiv_client.py",
      "exists": true,
      "hits": [
        {
          "type": "platform_specific",
          "platform": "beehiiv",
          "line": 10,
          "snippet": "logger = logging.getLogger(__name__)\n\nclass BeehiivAPIError(Exception):\n    \"\"\"Custom exception for Beehiiv API errors\"\"\"\n    def __init__(self, message: str, status_code: int = None, response_data: Dict = None):",
          "values": {
            "strings": [
              "Custom exception for Beehiiv API errors"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "beehiiv",
          "line": 11,
          "snippet": "\nclass BeehiivAPIError(Exception):\n    \"\"\"Custom exception for Beehiiv API errors\"\"\"\n    def __init__(self, message: str, status_code: int = None, response_data: Dict = None):\n        super().__init__(message)",
          "values": {
            "strings": [
              "Custom exception for Beehiiv API errors"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "beehiiv",
          "line": 17,
          "snippet": "        self.response_data = response_data\n\nclass BeehiivClient:\n    \"\"\"\n    Beehiiv API Client for newsletter publication",
          "values": {
            "strings": [],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "beehiiv",
          "line": 19,
          "snippet": "class BeehiivClient:\n    \"\"\"\n    Beehiiv API Client for newsletter publication\n    \n    Handles authentication, publication creation, and error management.",
          "values": {
            "strings": [],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "beehiiv",
          "line": 25,
          "snippet": "    \"\"\"\n    \n    def __init__(self, api_key: str, base_url: str = \"https://api.beehiiv.com/v2\"):\n        self.api_key = api_key\n        self.base_url = base_url.rstrip('/')",
          "values": {
            "strings": [
              "\n    \n    def __init__(self, api_key: str, base_url: str = ",
              "):\n        self.api_key = api_key\n        self.base_url = base_url.rstrip("
            ],
            "numbers": [
              2
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "beehiiv",
          "line": 39,
          "snippet": "        \n    def _make_request(self, method: str, endpoint: str, **kwargs) -> Dict[Any, Any]:\n        \"\"\"Make HTTP request to Beehiiv API with error handling\"\"\"\n        url = f\"{self.base_url}/{endpoint.lstrip('/')}\"\n        ",
          "values": {
            "strings": [
              "Make HTTP request to Beehiiv API with error handling",
              "\n        url = f",
              ")}"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "beehiiv",
          "line": 43,
          "snippet": "        \n        try:\n            logger.info(f\"[BeehiivClient] {method.upper()} {url}\")\n            response = self.session.request(method, url, **kwargs)\n            ",
          "values": {
            "strings": [
              "[BeehiivClient] {method.upper()} {url}"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "beehiiv",
          "line": 46,
          "snippet": "            response = self.session.request(method, url, **kwargs)\n            \n            logger.info(f\"[BeehiivClient] Response: {response.status_code}\")\n            \n            if response.status_code == 200:",
          "values": {
            "strings": [
              "[BeehiivClient] Response: {response.status_code}"
            ],
            "numbers": [
              200
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "beehiiv",
          "line": 55,
          "snippet": "                error_data = response.json() if response.content else {}\n                if \"SEND_API_DISABLED\" in str(error_data):\n                    logger.warning(\"[BeehiivClient] Posts API disabled - using fallback mode\")\n                    raise BeehiivAPIError(\n                        \"Posts API not enabled for this workspace\", ",
          "values": {
            "strings": [
              "SEND_API_DISABLED",
              "[BeehiivClient] Posts API disabled - using fallback mode",
              "Posts API not enabled for this workspace"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "beehiiv",
          "line": 56,
          "snippet": "                if \"SEND_API_DISABLED\" in str(error_data):\n                    logger.warning(\"[BeehiivClient] Posts API disabled - using fallback mode\")\n                    raise BeehiivAPIError(\n                        \"Posts API not enabled for this workspace\", \n                        status_code=403, ",
          "values": {
            "strings": [
              "SEND_API_DISABLED",
              "[BeehiivClient] Posts API disabled - using fallback mode",
              "Posts API not enabled for this workspace"
            ],
            "numbers": [
              403
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "beehiiv",
          "line": 62,
          "snippet": "                    )\n                else:\n                    raise BeehiivAPIError(\n                        f\"Forbidden: {error_data.get('errors', [{}])[0].get('message', 'Access denied')}\", \n                        status_code=403, ",
          "values": {
            "strings": [
              "Forbidden: {error_data.get(",
              ", [{}])[0].get(",
              ", ",
              ")}"
            ],
            "numbers": [
              0,
              403
            ]
          }
        },
        {
          "type": "forbidden_phrases",
          "platform": "beehiiv",
          "line": 63,
          "snippet": "                else:\n                    raise BeehiivAPIError(\n                        f\"Forbidden: {error_data.get('errors', [{}])[0].get('message', 'Access denied')}\", \n                        status_code=403, \n                        response_data=error_data",
          "values": {
            "strings": [
              "Forbidden: {error_data.get(",
              ", [{}])[0].get(",
              ", ",
              ")}"
            ],
            "numbers": [
              0,
              403
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "beehiiv",
          "line": 68,
          "snippet": "                    )\n            elif response.status_code == 401:\n                raise BeehiivAPIError(\"Invalid API key\", status_code=401)\n            elif response.status_code == 400:\n                error_data = response.json() if response.content else {}",
          "values": {
            "strings": [
              "Invalid API key"
            ],
            "numbers": [
              401,
              401,
              400
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "beehiiv",
          "line": 72,
          "snippet": "                error_data = response.json() if response.content else {}\n                error_msg = error_data.get('errors', [{}])[0].get('message', 'Bad request')\n                raise BeehiivAPIError(f\"Bad request: {error_msg}\", status_code=400, response_data=error_data)\n            else:\n                raise BeehiivAPIError(f\"HTTP {response.status_code}: {response.text}\", status_code=response.status_code)",
          "values": {
            "strings": [
              "errors",
              "message",
              "Bad request",
              "Bad request: {error_msg}",
              "HTTP {response.status_code}: {response.text}"
            ],
            "numbers": [
              0,
              400
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "beehiiv",
          "line": 74,
          "snippet": "                raise BeehiivAPIError(f\"Bad request: {error_msg}\", status_code=400, response_data=error_data)\n            else:\n                raise BeehiivAPIError(f\"HTTP {response.status_code}: {response.text}\", status_code=response.status_code)\n                \n        except requests.exceptions.RequestException as e:",
          "values": {
            "strings": [
              "Bad request: {error_msg}",
              "HTTP {response.status_code}: {response.text}"
            ],
            "numbers": [
              400
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "beehiiv",
          "line": 77,
          "snippet": "                \n        except requests.exceptions.RequestException as e:\n            logger.error(f\"[BeehiivClient] Request failed: {e}\")\n            raise BeehiivAPIError(f\"Network error: {str(e)}\")\n    ",
          "values": {
            "strings": [
              "[BeehiivClient] Request failed: {e}",
              "Network error: {str(e)}"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "beehiiv",
          "line": 78,
          "snippet": "        except requests.exceptions.RequestException as e:\n            logger.error(f\"[BeehiivClient] Request failed: {e}\")\n            raise BeehiivAPIError(f\"Network error: {str(e)}\")\n    \n    def get_publications(self) -> List[Dict]:",
          "values": {
            "strings": [
              "[BeehiivClient] Request failed: {e}",
              "Network error: {str(e)}"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "beehiiv",
          "line": 85,
          "snippet": "            response = self._make_request('GET', '/publications')\n            return response.get('data', [])\n        except BeehiivAPIError:\n            raise\n    ",
          "values": {
            "strings": [
              "GET",
              "/publications",
              "data"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "beehiiv",
          "line": 107,
          "snippet": "            return response\n            \n        except BeehiivAPIError as e:\n            logger.warning(f\"[BeehiivClient] Could not get publication info: {e}\")\n            # Return minimal info for fallback",
          "values": {
            "strings": [
              "[BeehiivClient] Could not get publication info: {e}"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "beehiiv",
          "line": 108,
          "snippet": "            \n        except BeehiivAPIError as e:\n            logger.warning(f\"[BeehiivClient] Could not get publication info: {e}\")\n            # Return minimal info for fallback\n            return {",
          "values": {
            "strings": [
              "[BeehiivClient] Could not get publication info: {e}"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "beehiiv",
          "line": 123,
          "snippet": "        \n        Args:\n            publication_id: Beehiiv publication ID\n            title: Newsletter title\n            content: Newsletter content (HTML or Markdown)",
          "values": {
            "strings": [],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "beehiiv",
          "line": 152,
          "snippet": "        \n        try:\n            logger.info(f\"[BeehiivClient] Creating post: {title}\")\n            response = self._make_request(\n                'POST', ",
          "values": {
            "strings": [
              "[BeehiivClient] Creating post: {title}",
              "POST"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "beehiiv",
          "line": 159,
          "snippet": "            )\n            \n            logger.info(f\"[BeehiivClient] Post created successfully: {response.get('id')}\")\n            return response\n            ",
          "values": {
            "strings": [
              "[BeehiivClient] Post created successfully: {response.get(",
              ")}"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "beehiiv",
          "line": 162,
          "snippet": "            return response\n            \n        except BeehiivAPIError as e:\n            logger.error(f\"[BeehiivClient] API Error: {e}\")\n            raise",
          "values": {
            "strings": [
              "[BeehiivClient] API Error: {e}"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "beehiiv",
          "line": 163,
          "snippet": "            \n        except BeehiivAPIError as e:\n            logger.error(f\"[BeehiivClient] API Error: {e}\")\n            raise\n    ",
          "values": {
            "strings": [
              "[BeehiivClient] API Error: {e}"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "beehiiv",
          "line": 175,
          "snippet": "            response = self._make_request('GET', f'/publications/{formatted_pub_id}/posts/{post_id}')\n            return response\n        except BeehiivAPIError as e:\n            logger.error(f\"[BeehiivClient] Failed to get post {post_id}: {e}\")\n            raise",
          "values": {
            "strings": [
              "GET",
              "/publications/{formatted_pub_id}/posts/{post_id}",
              "[BeehiivClient] Failed to get post {post_id}: {e}"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "beehiiv",
          "line": 176,
          "snippet": "            return response\n        except BeehiivAPIError as e:\n            logger.error(f\"[BeehiivClient] Failed to get post {post_id}: {e}\")\n            raise\n    ",
          "values": {
            "strings": [
              "[BeehiivClient] Failed to get post {post_id}: {e}"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "beehiiv",
          "line": 186,
          "snippet": "            response = self._make_request('GET', f'/publications/{formatted_pub_id}/subscriptions?limit={limit}')\n            return response\n        except BeehiivAPIError:\n            raise\n    ",
          "values": {
            "strings": [
              "GET",
              "/publications/{formatted_pub_id}/subscriptions?limit={limit}"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "beehiiv",
          "line": 223,
          "snippet": "                        'content_html': '<p>test</p>'\n                    })\n                except BeehiivAPIError as e:\n                    if e.status_code == 403 and \"SEND_API_DISABLED\" in str(e.response_data):\n                        posts_api_available = False",
          "values": {
            "strings": [
              "content_html",
              "<p>test</p>",
              "SEND_API_DISABLED"
            ],
            "numbers": [
              403
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "beehiiv",
          "line": 227,
          "snippet": "                        posts_api_available = False\n                    \n            except BeehiivAPIError as e:\n                if e.status_code == 403:\n                    posts_api_available = False",
          "values": {
            "strings": [],
            "numbers": [
              403
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "beehiiv",
          "line": 241,
          "snippet": "            }\n            \n        except BeehiivAPIError as e:\n            return {\n                'connected': False,",
          "values": {
            "strings": [
              "connected"
            ],
            "numbers": []
          }
        }
      ]
    },
    {
      "file": "/Users/hretheum/dev/bezrobocie/vector-wave/publisher/src/adapters/beehiiv/main.py",
      "exists": true,
      "hits": [
        {
          "type": "platform_specific",
          "platform": "beehiiv",
          "line": 3,
          "snippet": "#!/usr/bin/env python3\n\"\"\"\nBeehiiv Adapter - Multi-Channel Publisher\nObsługa publikacji newsletterów na Beehiiv przez API\n\"\"\"",
          "values": {
            "strings": [
              "\nBeehiiv Adapter - Multi-Channel Publisher\nObsługa publikacji newsletterów na Beehiiv przez API\n"
            ],
            "numbers": [
              3
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "beehiiv",
          "line": 4,
          "snippet": "\"\"\"\nBeehiiv Adapter - Multi-Channel Publisher\nObsługa publikacji newsletterów na Beehiiv przez API\n\"\"\"\n",
          "values": {
            "strings": [
              "\nBeehiiv Adapter - Multi-Channel Publisher\nObsługa publikacji newsletterów na Beehiiv przez API\n"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "beehiiv",
          "line": 18,
          "snippet": "import time\n\nfrom beehiiv_client import BeehiivClient, BeehiivAPIError\n\n# Import enhanced health models",
          "values": {
            "strings": [],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "beehiiv",
          "line": 39,
          "snippet": "# FastAPI app\napp = FastAPI(\n    title=\"Beehiiv Adapter\",\n    description=\"Multi-Channel Publisher - Beehiiv Newsletter Adapter\",\n    version=\"1.0.0\"",
          "values": {
            "strings": [
              "Beehiiv Adapter",
              "Multi-Channel Publisher - Beehiiv Newsletter Adapter",
              "1.0.0"
            ],
            "numbers": [
              1,
              0,
              0
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "beehiiv",
          "line": 40,
          "snippet": "app = FastAPI(\n    title=\"Beehiiv Adapter\",\n    description=\"Multi-Channel Publisher - Beehiiv Newsletter Adapter\",\n    version=\"1.0.0\"\n)",
          "values": {
            "strings": [
              "Beehiiv Adapter",
              "Multi-Channel Publisher - Beehiiv Newsletter Adapter",
              "1.0.0"
            ],
            "numbers": [
              1,
              0,
              0
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "beehiiv",
          "line": 53,
          "snippet": ")\n\n# Global BeehiivClient instance\nbeehiiv_client = None\n",
          "values": {
            "strings": [],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "beehiiv",
          "line": 54,
          "snippet": "\n# Global BeehiivClient instance\nbeehiiv_client = None\n\ndef get_beehiiv_client() -> Optional[BeehiivClient]:",
          "values": {
            "strings": [],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "beehiiv",
          "line": 56,
          "snippet": "beehiiv_client = None\n\ndef get_beehiiv_client() -> Optional[BeehiivClient]:\n    \"\"\"Get or create BeehiivClient instance\"\"\"\n    global beehiiv_client",
          "values": {
            "strings": [
              "Get or create BeehiivClient instance"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "beehiiv",
          "line": 57,
          "snippet": "\ndef get_beehiiv_client() -> Optional[BeehiivClient]:\n    \"\"\"Get or create BeehiivClient instance\"\"\"\n    global beehiiv_client\n    ",
          "values": {
            "strings": [
              "Get or create BeehiivClient instance"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "beehiiv",
          "line": 58,
          "snippet": "def get_beehiiv_client() -> Optional[BeehiivClient]:\n    \"\"\"Get or create BeehiivClient instance\"\"\"\n    global beehiiv_client\n    \n    api_key = os.getenv(\"BEEHIIV_API_KEY\")",
          "values": {
            "strings": [
              "Get or create BeehiivClient instance",
              "\n    global beehiiv_client\n    \n    api_key = os.getenv("
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "beehiiv",
          "line": 60,
          "snippet": "    global beehiiv_client\n    \n    api_key = os.getenv(\"BEEHIIV_API_KEY\")\n    base_url = os.getenv(\"BEEHIIV_BASE_URL\", \"https://api.beehiiv.com/v2\")\n    ",
          "values": {
            "strings": [
              "BEEHIIV_API_KEY",
              "BEEHIIV_BASE_URL",
              "https://api.beehiiv.com/v2"
            ],
            "numbers": [
              2
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "beehiiv",
          "line": 61,
          "snippet": "    \n    api_key = os.getenv(\"BEEHIIV_API_KEY\")\n    base_url = os.getenv(\"BEEHIIV_BASE_URL\", \"https://api.beehiiv.com/v2\")\n    \n    if not api_key:",
          "values": {
            "strings": [
              "BEEHIIV_API_KEY",
              "BEEHIIV_BASE_URL",
              "https://api.beehiiv.com/v2"
            ],
            "numbers": [
              2
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "beehiiv",
          "line": 66,
          "snippet": "        return None\n    \n    if beehiiv_client is None:\n        beehiiv_client = BeehiivClient(api_key, base_url)\n        logger.info(\"[BeehiivAdapter] BeehiivClient initialized\")",
          "values": {
            "strings": [
              "[BeehiivAdapter] BeehiivClient initialized"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "beehiiv",
          "line": 67,
          "snippet": "    \n    if beehiiv_client is None:\n        beehiiv_client = BeehiivClient(api_key, base_url)\n        logger.info(\"[BeehiivAdapter] BeehiivClient initialized\")\n    ",
          "values": {
            "strings": [
              "[BeehiivAdapter] BeehiivClient initialized"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "beehiiv",
          "line": 68,
          "snippet": "    if beehiiv_client is None:\n        beehiiv_client = BeehiivClient(api_key, base_url)\n        logger.info(\"[BeehiivAdapter] BeehiivClient initialized\")\n    \n    return beehiiv_client",
          "values": {
            "strings": [
              "[BeehiivAdapter] BeehiivClient initialized"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "beehiiv",
          "line": 70,
          "snippet": "        logger.info(\"[BeehiivAdapter] BeehiivClient initialized\")\n    \n    return beehiiv_client\n\n# Pydantic models",
          "values": {
            "strings": [
              "[BeehiivAdapter] BeehiivClient initialized"
            ],
            "numbers": []
          }
        },
        {
          "type": "max_length",
          "platform": "beehiiv",
          "line": 74,
          "snippet": "# Pydantic models\nclass PublishRequest(BaseModel):\n    title: str = Field(..., min_length=1, max_length=200, description=\"Tytuł newslettera\")\n    content: str = Field(..., min_length=1, description=\"Treść newslettera (HTML lub markdown)\")\n    media_urls: Optional[List[str]] = Field(None, description=\"Lista URL mediów (obrazki, PDF)\")",
          "values": {
            "strings": [
              "Tytuł newslettera",
              "Treść newslettera (HTML lub markdown)",
              "Lista URL mediów (obrazki, PDF)"
            ],
            "numbers": [
              1,
              200,
              1
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "beehiiv",
          "line": 103,
          "snippet": "        return HealthResponse(\n            status=\"ok\",\n            service=\"beehiiv-adapter\",\n            version=\"1.0.0\",\n            timestamp=datetime.now().isoformat()",
          "values": {
            "strings": [
              "ok",
              "beehiiv-adapter",
              "1.0.0"
            ],
            "numbers": [
              1,
              0,
              0
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "beehiiv",
          "line": 109,
          "snippet": "    \n    try:\n        # Check Beehiiv API connection and rate limits\n        connection_status = await _check_beehiiv_connection()\n        rate_limit_info = await _check_beehiiv_rate_limits()",
          "values": {
            "strings": [],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "beehiiv",
          "line": 110,
          "snippet": "    try:\n        # Check Beehiiv API connection and rate limits\n        connection_status = await _check_beehiiv_connection()\n        rate_limit_info = await _check_beehiiv_rate_limits()\n        metrics_info = await _get_beehiiv_performance_metrics()",
          "values": {
            "strings": [],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "beehiiv",
          "line": 111,
          "snippet": "        # Check Beehiiv API connection and rate limits\n        connection_status = await _check_beehiiv_connection()\n        rate_limit_info = await _check_beehiiv_rate_limits()\n        metrics_info = await _get_beehiiv_performance_metrics()\n        ",
          "values": {
            "strings": [],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "beehiiv",
          "line": 112,
          "snippet": "        connection_status = await _check_beehiiv_connection()\n        rate_limit_info = await _check_beehiiv_rate_limits()\n        metrics_info = await _get_beehiiv_performance_metrics()\n        \n        # Check configuration",
          "values": {
            "strings": [],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "beehiiv",
          "line": 115,
          "snippet": "        \n        # Check configuration\n        beehiiv_configured = bool(os.getenv(\"BEEHIIV_API_KEY\") and os.getenv(\"BEEHIIV_PUBLICATION_ID\"))\n        \n        # Determine overall status",
          "values": {
            "strings": [
              "BEEHIIV_API_KEY",
              "BEEHIIV_PUBLICATION_ID"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "beehiiv",
          "line": 121,
          "snippet": "            connection_ok=connection_status.connected,\n            rate_limit_ok=rate_limit_info is None or (rate_limit_info.percentage_used or 0) < 90.0,\n            api_working=beehiiv_configured and connection_status.connected\n        )\n        ",
          "values": {
            "strings": [],
            "numbers": [
              0,
              90,
              0
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "beehiiv",
          "line": 127,
          "snippet": "        capabilities = PlatformCapabilities(\n            text_posts=True,\n            media_upload=False,  # Beehiiv has limited media support\n            scheduling=True,\n            analytics=True,",
          "values": {
            "strings": [],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "beehiiv",
          "line": 138,
          "snippet": "        recommendations = []\n        \n        if not beehiiv_configured:\n            warnings.append(\"Beehiiv API credentials not configured\")\n            recommendations.append(\"Set BEEHIIV_API_KEY and BEEHIIV_PUBLICATION_ID environment variables\")",
          "values": {
            "strings": [
              "Beehiiv API credentials not configured",
              "Set BEEHIIV_API_KEY and BEEHIIV_PUBLICATION_ID environment variables"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "beehiiv",
          "line": 139,
          "snippet": "        \n        if not beehiiv_configured:\n            warnings.append(\"Beehiiv API credentials not configured\")\n            recommendations.append(\"Set BEEHIIV_API_KEY and BEEHIIV_PUBLICATION_ID environment variables\")\n        ",
          "values": {
            "strings": [
              "Beehiiv API credentials not configured",
              "Set BEEHIIV_API_KEY and BEEHIIV_PUBLICATION_ID environment variables"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "beehiiv",
          "line": 140,
          "snippet": "        if not beehiiv_configured:\n            warnings.append(\"Beehiiv API credentials not configured\")\n            recommendations.append(\"Set BEEHIIV_API_KEY and BEEHIIV_PUBLICATION_ID environment variables\")\n        \n        if rate_limit_info and rate_limit_info.percentage_used and rate_limit_info.percentage_used > 75:",
          "values": {
            "strings": [
              "Beehiiv API credentials not configured",
              "Set BEEHIIV_API_KEY and BEEHIIV_PUBLICATION_ID environment variables"
            ],
            "numbers": [
              75
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "beehiiv",
          "line": 147,
          "snippet": "        \n        if not connection_status.connected:\n            recommendations.append(\"Check Beehiiv API key and network connectivity\")\n        \n        if connection_status.response_time_ms and connection_status.response_time_ms > 5000:",
          "values": {
            "strings": [
              "Check Beehiiv API key and network connectivity"
            ],
            "numbers": [
              5000
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "beehiiv",
          "line": 153,
          "snippet": "        \n        # Status message\n        message = f\"Beehiiv adapter is {overall_status.value}\"\n        if beehiiv_configured:\n            message += \" and configured\"",
          "values": {
            "strings": [
              "Beehiiv adapter is {overall_status.value}",
              " and configured"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "beehiiv",
          "line": 154,
          "snippet": "        # Status message\n        message = f\"Beehiiv adapter is {overall_status.value}\"\n        if beehiiv_configured:\n            message += \" and configured\"\n        if rate_limit_info and rate_limit_info.remaining:",
          "values": {
            "strings": [
              "Beehiiv adapter is {overall_status.value}",
              " and configured"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "beehiiv",
          "line": 161,
          "snippet": "        return EnhancedHealthResponse(\n            status=overall_status,\n            service=\"beehiiv-adapter\", \n            platform=\"beehiiv\",\n            version=\"1.0.0\",",
          "values": {
            "strings": [
              "beehiiv-adapter",
              "beehiiv",
              "1.0.0"
            ],
            "numbers": [
              1,
              0,
              0
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "beehiiv",
          "line": 162,
          "snippet": "            status=overall_status,\n            service=\"beehiiv-adapter\", \n            platform=\"beehiiv\",\n            version=\"1.0.0\",\n            connection=connection_status,",
          "values": {
            "strings": [
              "beehiiv-adapter",
              "beehiiv",
              "1.0.0"
            ],
            "numbers": [
              1,
              0,
              0
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "beehiiv",
          "line": 175,
          "snippet": "        \n    except Exception as e:\n        logger.error(f\"[Beehiiv Adapter] Health check failed: {e}\")\n        \n        # Return unhealthy status",
          "values": {
            "strings": [
              "[Beehiiv Adapter] Health check failed: {e}"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "beehiiv",
          "line": 186,
          "snippet": "        return EnhancedHealthResponse(\n            status=HealthStatus.UNHEALTHY,\n            service=\"beehiiv-adapter\",\n            platform=\"beehiiv\",\n            version=\"1.0.0\",",
          "values": {
            "strings": [
              "beehiiv-adapter",
              "beehiiv",
              "1.0.0"
            ],
            "numbers": [
              1,
              0,
              0
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "beehiiv",
          "line": 187,
          "snippet": "            status=HealthStatus.UNHEALTHY,\n            service=\"beehiiv-adapter\",\n            platform=\"beehiiv\",\n            version=\"1.0.0\",\n            connection=connection_status,",
          "values": {
            "strings": [
              "beehiiv-adapter",
              "beehiiv",
              "1.0.0"
            ],
            "numbers": [
              1,
              0,
              0
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "beehiiv",
          "line": 197,
          "snippet": "\n\nasync def _check_beehiiv_connection() -> ConnectionStatus:\n    \"\"\"Check connection to Beehiiv API\"\"\"\n    start_time = time.time()",
          "values": {
            "strings": [
              "Check connection to Beehiiv API"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "beehiiv",
          "line": 198,
          "snippet": "\nasync def _check_beehiiv_connection() -> ConnectionStatus:\n    \"\"\"Check connection to Beehiiv API\"\"\"\n    start_time = time.time()\n    ",
          "values": {
            "strings": [
              "Check connection to Beehiiv API"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "beehiiv",
          "line": 202,
          "snippet": "    \n    try:\n        beehiiv_api_key = os.getenv(\"BEEHIIV_API_KEY\")\n        publication_id = os.getenv(\"BEEHIIV_PUBLICATION_ID\")\n        ",
          "values": {
            "strings": [
              "BEEHIIV_API_KEY",
              "BEEHIIV_PUBLICATION_ID"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "beehiiv",
          "line": 203,
          "snippet": "    try:\n        beehiiv_api_key = os.getenv(\"BEEHIIV_API_KEY\")\n        publication_id = os.getenv(\"BEEHIIV_PUBLICATION_ID\")\n        \n        if not beehiiv_api_key or not publication_id:",
          "values": {
            "strings": [
              "BEEHIIV_API_KEY",
              "BEEHIIV_PUBLICATION_ID"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "beehiiv",
          "line": 205,
          "snippet": "        publication_id = os.getenv(\"BEEHIIV_PUBLICATION_ID\")\n        \n        if not beehiiv_api_key or not publication_id:\n            return ConnectionStatus(\n                connected=False,",
          "values": {
            "strings": [
              "BEEHIIV_PUBLICATION_ID"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "beehiiv",
          "line": 208,
          "snippet": "            return ConnectionStatus(\n                connected=False,\n                last_error=\"Beehiiv API credentials not configured\"\n            )\n        ",
          "values": {
            "strings": [
              "Beehiiv API credentials not configured"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "beehiiv",
          "line": 212,
          "snippet": "        \n        # Try basic API connectivity check\n        if beehiiv_client:\n            # Basic connectivity test - this would typically ping the API\n            response_time = (time.time() - start_time) * 1000",
          "values": {
            "strings": [],
            "numbers": [
              1000
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "beehiiv",
          "line": 223,
          "snippet": "            return ConnectionStatus(\n                connected=False,\n                last_error=\"Beehiiv client not initialized\"\n            )\n            ",
          "values": {
            "strings": [
              "Beehiiv client not initialized"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "beehiiv",
          "line": 234,
          "snippet": "\n\nasync def _check_beehiiv_rate_limits() -> Optional[RateLimitStatus]:\n    \"\"\"Check Beehiiv API rate limits\"\"\"\n    try:",
          "values": {
            "strings": [
              "Check Beehiiv API rate limits"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "beehiiv",
          "line": 235,
          "snippet": "\nasync def _check_beehiiv_rate_limits() -> Optional[RateLimitStatus]:\n    \"\"\"Check Beehiiv API rate limits\"\"\"\n    try:\n        # Beehiiv API limits: typically 1000 requests per hour",
          "values": {
            "strings": [
              "Check Beehiiv API rate limits"
            ],
            "numbers": [
              1000
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "beehiiv",
          "line": 237,
          "snippet": "    \"\"\"Check Beehiiv API rate limits\"\"\"\n    try:\n        # Beehiiv API limits: typically 1000 requests per hour\n        # Newsletter publishing: ~100 per month on free plan\n        ",
          "values": {
            "strings": [
              "Check Beehiiv API rate limits"
            ],
            "numbers": [
              1000,
              100
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "beehiiv",
          "line": 249,
          "snippet": "        \n    except Exception as e:\n        logger.warning(f\"Could not check Beehiiv rate limits: {e}\")\n        return None\n",
          "values": {
            "strings": [
              "Could not check Beehiiv rate limits: {e}"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "beehiiv",
          "line": 253,
          "snippet": "\n\nasync def _get_beehiiv_performance_metrics() -> Optional[PlatformMetrics]:\n    \"\"\"Get Beehiiv performance metrics\"\"\"\n    try:",
          "values": {
            "strings": [
              "Get Beehiiv performance metrics"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "beehiiv",
          "line": 254,
          "snippet": "\nasync def _get_beehiiv_performance_metrics() -> Optional[PlatformMetrics]:\n    \"\"\"Get Beehiiv performance metrics\"\"\"\n    try:\n        # This would typically query Prometheus metrics",
          "values": {
            "strings": [
              "Get Beehiiv performance metrics"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "beehiiv",
          "line": 267,
          "snippet": "        \n    except Exception as e:\n        logger.warning(f\"Could not get Beehiiv performance metrics: {e}\")\n        return None\n",
          "values": {
            "strings": [
              "Could not get Beehiiv performance metrics: {e}"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "beehiiv",
          "line": 273,
          "snippet": "async def root():\n    \"\"\"Root endpoint\"\"\"\n    has_api_key = bool(os.getenv(\"BEEHIIV_API_KEY\"))\n    \n    return {",
          "values": {
            "strings": [
              "Root endpoint",
              "\n    has_api_key = bool(os.getenv("
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "beehiiv",
          "line": 276,
          "snippet": "    \n    return {\n        \"service\": \"Beehiiv Adapter\",\n        \"description\": \"Multi-Channel Publisher - Beehiiv Newsletter Adapter\",\n        \"version\": \"1.0.0\",",
          "values": {
            "strings": [
              "service",
              "Beehiiv Adapter",
              "description",
              "Multi-Channel Publisher - Beehiiv Newsletter Adapter",
              "version",
              "1.0.0"
            ],
            "numbers": [
              1,
              0,
              0
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "beehiiv",
          "line": 277,
          "snippet": "    return {\n        \"service\": \"Beehiiv Adapter\",\n        \"description\": \"Multi-Channel Publisher - Beehiiv Newsletter Adapter\",\n        \"version\": \"1.0.0\",\n        \"beehiiv_configured\": has_api_key,",
          "values": {
            "strings": [
              "service",
              "Beehiiv Adapter",
              "description",
              "Multi-Channel Publisher - Beehiiv Newsletter Adapter",
              "version",
              "1.0.0",
              "beehiiv_configured"
            ],
            "numbers": [
              1,
              0,
              0
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "beehiiv",
          "line": 279,
          "snippet": "        \"description\": \"Multi-Channel Publisher - Beehiiv Newsletter Adapter\",\n        \"version\": \"1.0.0\",\n        \"beehiiv_configured\": has_api_key,\n        \"mode\": \"production\" if has_api_key else \"error\",\n        \"status\": \"ready\" if has_api_key else \"misconfigured\",",
          "values": {
            "strings": [
              "description",
              "Multi-Channel Publisher - Beehiiv Newsletter Adapter",
              "version",
              "1.0.0",
              "beehiiv_configured",
              "mode",
              "production",
              "error",
              "status",
              "ready"
            ],
            "numbers": [
              1,
              0,
              0
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "beehiiv",
          "line": 292,
          "snippet": "@app.get(\"/config\")\nasync def get_config():\n    \"\"\"Sprawdź konfigurację Beehiiv Adapter\"\"\"\n    has_api_key = bool(os.getenv(\"BEEHIIV_API_KEY\"))\n    api_key_prefix = None",
          "values": {
            "strings": [
              "/config",
              "Sprawdź konfigurację Beehiiv Adapter",
              "\n    has_api_key = bool(os.getenv("
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "beehiiv",
          "line": 293,
          "snippet": "async def get_config():\n    \"\"\"Sprawdź konfigurację Beehiiv Adapter\"\"\"\n    has_api_key = bool(os.getenv(\"BEEHIIV_API_KEY\"))\n    api_key_prefix = None\n    ",
          "values": {
            "strings": [
              "Sprawdź konfigurację Beehiiv Adapter",
              "\n    has_api_key = bool(os.getenv("
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "beehiiv",
          "line": 297,
          "snippet": "    \n    if has_api_key:\n        api_key = os.getenv(\"BEEHIIV_API_KEY\")\n        api_key_prefix = api_key[:8] + \"...\" if len(api_key) > 8 else api_key\n    ",
          "values": {
            "strings": [
              "BEEHIIV_API_KEY",
              "..."
            ],
            "numbers": [
              8,
              8
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "beehiiv",
          "line": 301,
          "snippet": "    \n    config = {\n        \"beehiiv_api_configured\": has_api_key,\n        \"beehiiv_base_url\": os.getenv(\"BEEHIIV_BASE_URL\", \"https://api.beehiiv.com/v2\"),\n        \"api_key_present\": has_api_key,",
          "values": {
            "strings": [
              "beehiiv_api_configured",
              "beehiiv_base_url",
              "BEEHIIV_BASE_URL",
              "https://api.beehiiv.com/v2",
              "api_key_present"
            ],
            "numbers": [
              2
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "beehiiv",
          "line": 302,
          "snippet": "    config = {\n        \"beehiiv_api_configured\": has_api_key,\n        \"beehiiv_base_url\": os.getenv(\"BEEHIIV_BASE_URL\", \"https://api.beehiiv.com/v2\"),\n        \"api_key_present\": has_api_key,\n        \"api_key_prefix\": api_key_prefix,",
          "values": {
            "strings": [
              "beehiiv_api_configured",
              "beehiiv_base_url",
              "BEEHIIV_BASE_URL",
              "https://api.beehiiv.com/v2",
              "api_key_present",
              "api_key_prefix"
            ],
            "numbers": [
              2
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "beehiiv",
          "line": 306,
          "snippet": "        \"api_key_prefix\": api_key_prefix,\n        \"mode\": \"production\" if has_api_key else \"error\",\n        \"publication_id\": os.getenv(\"BEEHIIV_PUBLICATION_ID\"),\n        \"fallback_enabled\": bool(os.getenv(\"BEEHIIV_FALLBACK_ENABLED\", \"true\").lower() == \"true\")\n    }",
          "values": {
            "strings": [
              "api_key_prefix",
              "mode",
              "production",
              "error",
              "publication_id",
              "BEEHIIV_PUBLICATION_ID",
              "fallback_enabled",
              "BEEHIIV_FALLBACK_ENABLED",
              "true",
              "true"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "beehiiv",
          "line": 307,
          "snippet": "        \"mode\": \"production\" if has_api_key else \"error\",\n        \"publication_id\": os.getenv(\"BEEHIIV_PUBLICATION_ID\"),\n        \"fallback_enabled\": bool(os.getenv(\"BEEHIIV_FALLBACK_ENABLED\", \"true\").lower() == \"true\")\n    }\n    ",
          "values": {
            "strings": [
              "mode",
              "production",
              "error",
              "publication_id",
              "BEEHIIV_PUBLICATION_ID",
              "fallback_enabled",
              "BEEHIIV_FALLBACK_ENABLED",
              "true",
              "true"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "beehiiv",
          "line": 313,
          "snippet": "    if has_api_key:\n        try:\n            client = get_beehiiv_client()\n            if client:\n                test_result = client.test_connection()",
          "values": {
            "strings": [],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "beehiiv",
          "line": 319,
          "snippet": "            else:\n                config[\"api_test\"] = \"failed\"\n                config[\"api_error\"] = \"Could not initialize BeehiivClient\"\n        except Exception as e:\n            config[\"api_test\"] = \"failed\"",
          "values": {
            "strings": [
              "api_test",
              "failed",
              "api_error",
              "Could not initialize BeehiivClient",
              "api_test",
              "failed"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "beehiiv",
          "line": 329,
          "snippet": "async def publish_newsletter(request: PublishRequest):\n    \"\"\"\n    Publikuj newsletter na Beehiiv\n    \"\"\"\n    logger.info(f\"[Beehiiv Adapter] Otrzymano żądanie publikacji: '{request.title}'\")",
          "values": {
            "strings": [
              "\n    Publikuj newsletter na Beehiiv\n    ",
              "\n    logger.info(f",
              "{request.title}"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "beehiiv",
          "line": 331,
          "snippet": "    Publikuj newsletter na Beehiiv\n    \"\"\"\n    logger.info(f\"[Beehiiv Adapter] Otrzymano żądanie publikacji: '{request.title}'\")\n    \n    try:",
          "values": {
            "strings": [
              "\n    logger.info(f",
              "{request.title}"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "beehiiv",
          "line": 334,
          "snippet": "    \n    try:\n        # Sprawdź czy Beehiiv API key jest dostępny\n        client = get_beehiiv_client()\n        if not client:",
          "values": {
            "strings": [],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "beehiiv",
          "line": 335,
          "snippet": "    try:\n        # Sprawdź czy Beehiiv API key jest dostępny\n        client = get_beehiiv_client()\n        if not client:\n            logger.error(\"[Beehiiv Adapter] BEEHIIV_API_KEY not configured\")",
          "values": {
            "strings": [
              "[Beehiiv Adapter] BEEHIIV_API_KEY not configured"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "beehiiv",
          "line": 337,
          "snippet": "        client = get_beehiiv_client()\n        if not client:\n            logger.error(\"[Beehiiv Adapter] BEEHIIV_API_KEY not configured\")\n            raise HTTPException(\n                status_code=500,",
          "values": {
            "strings": [
              "[Beehiiv Adapter] BEEHIIV_API_KEY not configured"
            ],
            "numbers": [
              500
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "beehiiv",
          "line": 340,
          "snippet": "            raise HTTPException(\n                status_code=500,\n                detail=\"Beehiiv API key not configured. Set BEEHIIV_API_KEY environment variable.\"\n            )\n        ",
          "values": {
            "strings": [
              "Beehiiv API key not configured. Set BEEHIIV_API_KEY environment variable."
            ],
            "numbers": [
              500
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "beehiiv",
          "line": 344,
          "snippet": "        \n        # Pobierz publication ID\n        publication_id = os.getenv(\"BEEHIIV_PUBLICATION_ID\")\n        if not publication_id:\n            raise HTTPException(",
          "values": {
            "strings": [
              "BEEHIIV_PUBLICATION_ID"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "beehiiv",
          "line": 348,
          "snippet": "            raise HTTPException(\n                status_code=500, \n                detail=\"BEEHIIV_PUBLICATION_ID not configured\"\n            )\n        ",
          "values": {
            "strings": [
              "BEEHIIV_PUBLICATION_ID not configured"
            ],
            "numbers": [
              500
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "beehiiv",
          "line": 351,
          "snippet": "            )\n        \n        # Wywołaj Beehiiv API\n        logger.info(f\"[Beehiiv Adapter] Publikowanie przez Beehiiv API: {request.title}\")\n        ",
          "values": {
            "strings": [
              "[Beehiiv Adapter] Publikowanie przez Beehiiv API: {request.title}"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "beehiiv",
          "line": 352,
          "snippet": "        \n        # Wywołaj Beehiiv API\n        logger.info(f\"[Beehiiv Adapter] Publikowanie przez Beehiiv API: {request.title}\")\n        \n        api_result = client.create_post(",
          "values": {
            "strings": [
              "[Beehiiv Adapter] Publikowanie przez Beehiiv API: {request.title}"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "beehiiv",
          "line": 371,
          "snippet": "            scheduled=is_scheduled,\n            message=f\"Newsletter '{request.title}' created successfully\" + (f\" and scheduled for {request.schedule_time}\" if is_scheduled else \"\"),\n            send_count=None  # Beehiiv API nie zwraca tej informacji w create_post\n        )\n        ",
          "values": {
            "strings": [
              "Newsletter ",
              " created successfully",
              " and scheduled for {request.schedule_time}"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "beehiiv",
          "line": 374,
          "snippet": "        )\n        \n        logger.info(f\"[Beehiiv Adapter] Publikacja zakończona: {response.message}\")\n        return response\n        ",
          "values": {
            "strings": [
              "[Beehiiv Adapter] Publikacja zakończona: {response.message}"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "beehiiv",
          "line": 377,
          "snippet": "        return response\n        \n    except BeehiivAPIError as e:\n        logger.error(f\"[Beehiiv Adapter] Błąd Beehiiv API: {str(e)}\")\n        ",
          "values": {
            "strings": [
              "[Beehiiv Adapter] Błąd Beehiiv API: {str(e)}"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "beehiiv",
          "line": 378,
          "snippet": "        \n    except BeehiivAPIError as e:\n        logger.error(f\"[Beehiiv Adapter] Błąd Beehiiv API: {str(e)}\")\n        \n        # Szczegółowe error handling",
          "values": {
            "strings": [
              "[Beehiiv Adapter] Błąd Beehiiv API: {str(e)}"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "beehiiv",
          "line": 385,
          "snippet": "                raise HTTPException(\n                    status_code=503,\n                    detail=\"Beehiiv Posts API is not enabled for this workspace. Please enable the API in your Beehiiv dashboard or upgrade your plan.\"\n                )\n            else:",
          "values": {
            "strings": [
              "Beehiiv Posts API is not enabled for this workspace. Please enable the API in your Beehiiv dashboard or upgrade your plan."
            ],
            "numbers": [
              503
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "beehiiv",
          "line": 390,
          "snippet": "                raise HTTPException(\n                    status_code=403,\n                    detail=\"Access denied to Beehiiv API. Check your API key permissions.\"\n                )\n        elif e.status_code == 401:",
          "values": {
            "strings": [
              "Access denied to Beehiiv API. Check your API key permissions."
            ],
            "numbers": [
              403,
              401
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "beehiiv",
          "line": 395,
          "snippet": "            raise HTTPException(\n                status_code=401,\n                detail=\"Invalid Beehiiv API key. Please check your BEEHIIV_API_KEY environment variable.\"\n            )\n        elif e.status_code == 400:",
          "values": {
            "strings": [
              "Invalid Beehiiv API key. Please check your BEEHIIV_API_KEY environment variable."
            ],
            "numbers": [
              401,
              400
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "beehiiv",
          "line": 405,
          "snippet": "            raise HTTPException(\n                status_code=e.status_code or 500,\n                detail=f\"Beehiiv API error: {str(e)}\"\n            )\n        ",
          "values": {
            "strings": [
              "Beehiiv API error: {str(e)}"
            ],
            "numbers": [
              500
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "beehiiv",
          "line": 409,
          "snippet": "        \n    except Exception as e:\n        logger.error(f\"[Beehiiv Adapter] Błąd publikacji: {str(e)}\")\n        raise HTTPException(status_code=500, detail=f\"Błąd podczas publikacji: {str(e)}\")\n",
          "values": {
            "strings": [
              "[Beehiiv Adapter] Błąd publikacji: {str(e)}",
              "Błąd podczas publikacji: {str(e)}"
            ],
            "numbers": [
              500
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "twitter",
          "line": 415,
          "snippet": "    # Konfiguracja z environment variables\n    host = os.getenv(\"HOST\", \"0.0.0.0\")\n    port = int(os.getenv(\"PORT\", \"8084\"))  # Port 8084 dla Beehiiv (Twitter ma 8082)\n    debug = os.getenv(\"DEBUG\", \"false\").lower() == \"true\"\n    ",
          "values": {
            "strings": [
              "HOST",
              "0.0.0.0",
              "PORT",
              "8084",
              "DEBUG",
              "false",
              "true"
            ],
            "numbers": [
              0,
              0,
              0,
              0,
              8084,
              8084,
              8082
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "beehiiv",
          "line": 418,
          "snippet": "    debug = os.getenv(\"DEBUG\", \"false\").lower() == \"true\"\n    \n    logger.info(f\"[Beehiiv Adapter] Uruchamianie serwera na {host}:{port}\")\n    \n    uvicorn.run(",
          "values": {
            "strings": [
              "DEBUG",
              "false",
              "true",
              "[Beehiiv Adapter] Uruchamianie serwera na {host}:{port}"
            ],
            "numbers": []
          }
        }
      ]
    },
    {
      "file": "/Users/hretheum/dev/bezrobocie/vector-wave/publisher/src/adapters/linkedin/test_linkedin_wrapper.py",
      "exists": true,
      "hits": [
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 3,
          "snippet": "#!/usr/bin/env python3\n\"\"\"\nTest Suite dla LinkedIn Module Wrapper\n\nTask 7.1 Validation:",
          "values": {
            "strings": [],
            "numbers": [
              3,
              7,
              1
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 6,
          "snippet": "\nTask 7.1 Validation:\n- Test: Wrapper poprawnie wykonuje `node scripts/linkedin-cli.js --help` i parsuje output\n\"\"\"\n",
          "values": {
            "strings": [],
            "numbers": [
              7,
              1
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 17,
          "snippet": "sys.path.append(str(Path(__file__).parent))\n\nfrom linkedin_wrapper import LinkedInModuleWrapper, LinkedInPublishRequest, LinkedInCLIError\n\nclass TestLinkedInWrapper:",
          "values": {
            "strings": [],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 19,
          "snippet": "from linkedin_wrapper import LinkedInModuleWrapper, LinkedInPublishRequest, LinkedInCLIError\n\nclass TestLinkedInWrapper:\n    \"\"\"Test suite dla LinkedInModuleWrapper\"\"\"\n    ",
          "values": {
            "strings": [
              "Test suite dla LinkedInModuleWrapper"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 20,
          "snippet": "\nclass TestLinkedInWrapper:\n    \"\"\"Test suite dla LinkedInModuleWrapper\"\"\"\n    \n    @pytest.fixture",
          "values": {
            "strings": [
              "Test suite dla LinkedInModuleWrapper"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 25,
          "snippet": "    async def wrapper(self):\n        \"\"\"Create wrapper instance dla tests\"\"\"\n        return LinkedInModuleWrapper()\n    \n    @pytest.mark.asyncio",
          "values": {
            "strings": [
              "Create wrapper instance dla tests"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 30,
          "snippet": "    async def test_wrapper_initialization(self):\n        \"\"\"Test wrapper initialization\"\"\"\n        wrapper = LinkedInModuleWrapper()\n        \n        # Check paths exist",
          "values": {
            "strings": [
              "Test wrapper initialization"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 33,
          "snippet": "        \n        # Check paths exist\n        assert wrapper.linkedin_path.exists(), \"LinkedIn module path should exist\"\n        assert wrapper.cli_script.exists(), \"CLI script should exist\"\n        ",
          "values": {
            "strings": [
              "LinkedIn module path should exist",
              "CLI script should exist"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 45,
          "snippet": "    async def test_cli_availability(self):\n        \"\"\"\n        Task 7.1 Test: Wrapper poprawnie wykonuje `node scripts/linkedin-cli.js --help`\n        \"\"\"\n        wrapper = LinkedInModuleWrapper()",
          "values": {
            "strings": [
              "\n        Task 7.1 Test: Wrapper poprawnie wykonuje `node scripts/linkedin-cli.js --help`\n        "
            ],
            "numbers": [
              7,
              1
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 47,
          "snippet": "        Task 7.1 Test: Wrapper poprawnie wykonuje `node scripts/linkedin-cli.js --help`\n        \"\"\"\n        wrapper = LinkedInModuleWrapper()\n        \n        # Test CLI availability",
          "values": {
            "strings": [],
            "numbers": [
              7,
              1
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 51,
          "snippet": "        # Test CLI availability\n        is_available = await wrapper.test_cli_availability()\n        assert is_available is True, \"LinkedIn CLI should be available\"\n    \n    @pytest.mark.asyncio",
          "values": {
            "strings": [
              "LinkedIn CLI should be available"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 58,
          "snippet": "        Task 7.1 Test: Wrapper parsuje output z help command\n        \"\"\"\n        wrapper = LinkedInModuleWrapper()\n        \n        # Execute help command",
          "values": {
            "strings": [],
            "numbers": [
              7,
              1
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 74,
          "snippet": "    async def test_session_listing(self):\n        \"\"\"Test session listing functionality\"\"\"\n        wrapper = LinkedInModuleWrapper()\n        \n        try:",
          "values": {
            "strings": [
              "Test session listing functionality"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 91,
          "snippet": "                print(f\"   First session: {session.account} ({'active' if session.is_active else 'inactive'})\")\n            \n        except LinkedInCLIError as e:\n            # Expected if no sessions exist\n            print(f\"⚠️ Session listing returned error (expected if no sessions): {e}\")",
          "values": {
            "strings": [
              "   First session: {session.account} ({",
              " if session.is_active else ",
              "})",
              "⚠️ Session listing returned error (expected if no sessions): {e}"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 98,
          "snippet": "    async def test_session_validation(self):\n        \"\"\"Test session validation functionality\"\"\"\n        wrapper = LinkedInModuleWrapper()\n        \n        # Test validation (może fail jeśli no valid session)",
          "values": {
            "strings": [
              "Test session validation functionality"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 117,
          "snippet": "    async def test_error_handling(self):\n        \"\"\"Test error handling dla invalid commands\"\"\"\n        wrapper = LinkedInModuleWrapper()\n        \n        # Test with invalid command",
          "values": {
            "strings": [
              "Test error handling dla invalid commands"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 123,
          "snippet": "            await wrapper.execute_cli_command(['invalid-command'], timeout=5)\n            assert False, \"Should have raised error for invalid command\"\n        except LinkedInCLIError as e:\n            assert e.exit_code != 0, \"Should have non-zero exit code\"\n            print(f\"✅ Error handling works for invalid commands\")",
          "values": {
            "strings": [
              "invalid-command",
              "Should have raised error for invalid command",
              "Should have non-zero exit code",
              "✅ Error handling works for invalid commands"
            ],
            "numbers": [
              5,
              0
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 132,
          "snippet": "        \n        # Test basic request\n        request = LinkedInPublishRequest(\n            content=\"Test post content\",\n            account=\"test\"",
          "values": {
            "strings": [
              "Test post content",
              "test"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 143,
          "snippet": "        \n        # Test full request\n        full_request = LinkedInPublishRequest(\n            content=\"Test content with PDF\",\n            pdf_path=\"/path/to/test.pdf\",",
          "values": {
            "strings": [
              "Test content with PDF",
              "/path/to/test.pdf"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 161,
          "snippet": "async def run_manual_tests():\n    \"\"\"Run tests manually without pytest\"\"\"\n    print(\"🧪 MANUAL TESTING - LinkedIn Module Wrapper\")\n    print(\"=\" * 50)\n    ",
          "values": {
            "strings": [
              "Run tests manually without pytest",
              "\n    print(",
              ")\n    print("
            ],
            "numbers": [
              50
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 167,
          "snippet": "        # Test 1: Initialization\n        print(\"\\n1️⃣ Testing wrapper initialization...\")\n        wrapper = LinkedInModuleWrapper()\n        print(f\"   ✅ Wrapper initialized successfully\")\n        print(f\"   📁 LinkedIn path: {wrapper.linkedin_path}\")",
          "values": {
            "strings": [
              "\\n1️⃣ Testing wrapper initialization...",
              "   ✅ Wrapper initialized successfully",
              "   📁 LinkedIn path: {wrapper.linkedin_path}"
            ],
            "numbers": [
              1,
              1
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 169,
          "snippet": "        wrapper = LinkedInModuleWrapper()\n        print(f\"   ✅ Wrapper initialized successfully\")\n        print(f\"   📁 LinkedIn path: {wrapper.linkedin_path}\")\n        \n        # Test 2: CLI availability (Task 7.1 core test)",
          "values": {
            "strings": [
              "   ✅ Wrapper initialized successfully",
              "   📁 LinkedIn path: {wrapper.linkedin_path}"
            ],
            "numbers": [
              2,
              7,
              1
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 217,
          "snippet": "        print(\"\\n\" + \"=\" * 50)\n        print(\"🎉 TASK 7.1 VALIDATION COMPLETED SUCCESSFULLY!\")\n        print(\"✅ Wrapper poprawnie wykonuje `node scripts/linkedin-cli.js --help` i parsuje output\")\n        print(\"✅ All core functionality tested and working\")\n        ",
          "values": {
            "strings": [
              "\\n",
              " * 50)\n        print(",
              ")\n        print(",
              ")\n        print("
            ],
            "numbers": [
              50,
              7,
              1
            ]
          }
        }
      ]
    },
    {
      "file": "/Users/hretheum/dev/bezrobocie/vector-wave/publisher/src/adapters/linkedin/models.py",
      "exists": true,
      "hits": [
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 2,
          "snippet": "\"\"\"\nLinkedIn Adapter - Pydantic Models\nModele danych dla LinkedIn API integration through Node.js CLI\n\"\"\"",
          "values": {
            "strings": [
              "\nLinkedIn Adapter - Pydantic Models\nModele danych dla LinkedIn API integration through Node.js CLI\n"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 3,
          "snippet": "\"\"\"\nLinkedIn Adapter - Pydantic Models\nModele danych dla LinkedIn API integration through Node.js CLI\n\"\"\"\n",
          "values": {
            "strings": [
              "\nLinkedIn Adapter - Pydantic Models\nModele danych dla LinkedIn API integration through Node.js CLI\n"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 12,
          "snippet": "\n\nclass LinkedInPublishRequest(BaseModel):\n    \"\"\"Request model dla publikacji postu na LinkedIn\"\"\"\n    ",
          "values": {
            "strings": [
              "Request model dla publikacji postu na LinkedIn"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 13,
          "snippet": "\nclass LinkedInPublishRequest(BaseModel):\n    \"\"\"Request model dla publikacji postu na LinkedIn\"\"\"\n    \n    content: str = Field(",
          "values": {
            "strings": [
              "Request model dla publikacji postu na LinkedIn"
            ],
            "numbers": []
          }
        },
        {
          "type": "max_length",
          "platform": "linkedin",
          "line": 18,
          "snippet": "        ..., \n        min_length=1, \n        max_length=3000,\n        description=\"Treść postu LinkedIn (wymagana, max 3000 znaków)\"\n    )",
          "values": {
            "strings": [
              "Treść postu LinkedIn (wymagana, max 3000 znaków)"
            ],
            "numbers": [
              1,
              3000,
              3000
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 19,
          "snippet": "        min_length=1, \n        max_length=3000,\n        description=\"Treść postu LinkedIn (wymagana, max 3000 znaków)\"\n    )\n    ",
          "values": {
            "strings": [
              "Treść postu LinkedIn (wymagana, max 3000 znaków)"
            ],
            "numbers": [
              1,
              3000,
              3000
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 24,
          "snippet": "    account: str = Field(\n        default=\"default\",\n        description=\"Nazwa konta LinkedIn (domyślnie 'default')\"\n    )\n    ",
          "values": {
            "strings": [
              "default",
              "Nazwa konta LinkedIn (domyślnie "
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 40,
          "snippet": "    adapt_content: bool = Field(\n        default=True,\n        description=\"Czy adaptować treść dla LinkedIn (hashtags, formatting, etc.)\"\n    )\n    ",
          "values": {
            "strings": [
              "Czy adaptować treść dla LinkedIn (hashtags, formatting, etc.)"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 59,
          "snippet": "    )\n    \n    # PDF support for LinkedIn carousels\n    pdf_path: Optional[str] = Field(\n        default=None,",
          "values": {
            "strings": [],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 62,
          "snippet": "    pdf_path: Optional[str] = Field(\n        default=None,\n        description=\"Ścieżka do pliku PDF dla LinkedIn carousel\"\n    )\n    ",
          "values": {
            "strings": [
              "Ścieżka do pliku PDF dla LinkedIn carousel"
            ],
            "numbers": []
          }
        },
        {
          "type": "required_elements",
          "platform": "linkedin",
          "line": 73,
          "snippet": "                datetime.fromisoformat(v.replace('Z', '+00:00'))\n            except ValueError:\n                raise ValueError('schedule_time must be valid ISO 8601 format')\n        return v\n    ",
          "values": {
            "strings": [
              ", ",
              "))\n            except ValueError:\n                raise ValueError("
            ],
            "numbers": [
              0,
              0,
              8601
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 102,
          "snippet": "\n\nclass LinkedInPublishResponse(BaseModel):\n    \"\"\"Response model dla publikacji postu na LinkedIn\"\"\"\n    ",
          "values": {
            "strings": [
              "Response model dla publikacji postu na LinkedIn"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 103,
          "snippet": "\nclass LinkedInPublishResponse(BaseModel):\n    \"\"\"Response model dla publikacji postu na LinkedIn\"\"\"\n    \n    success: bool = Field(",
          "values": {
            "strings": [
              "Response model dla publikacji postu na LinkedIn"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 112,
          "snippet": "    post_url: Optional[str] = Field(\n        default=None,\n        description=\"URL opublikowanego postu LinkedIn\"\n    )\n    ",
          "values": {
            "strings": [
              "URL opublikowanego postu LinkedIn"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 191,
          "snippet": "\n\nclass LinkedInHealthResponse(BaseModel):\n    \"\"\"Response model dla health check LinkedIn adaptera\"\"\"\n    ",
          "values": {
            "strings": [
              "Response model dla health check LinkedIn adaptera"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 192,
          "snippet": "\nclass LinkedInHealthResponse(BaseModel):\n    \"\"\"Response model dla health check LinkedIn adaptera\"\"\"\n    \n    status: str = Field(",
          "values": {
            "strings": [
              "Response model dla health check LinkedIn adaptera"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 199,
          "snippet": "    )\n    \n    linkedin_cli_available: bool = Field(\n        ...,\n        description=\"Czy LinkedIn CLI jest dostępne\"",
          "values": {
            "strings": [
              "Czy LinkedIn CLI jest dostępne"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 201,
          "snippet": "    linkedin_cli_available: bool = Field(\n        ...,\n        description=\"Czy LinkedIn CLI jest dostępne\"\n    )\n    ",
          "values": {
            "strings": [
              "Czy LinkedIn CLI jest dostępne"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 206,
          "snippet": "    session_valid: Optional[bool] = Field(\n        default=None,\n        description=\"Czy sesja LinkedIn jest aktywna\"\n    )\n    ",
          "values": {
            "strings": [
              "Czy sesja LinkedIn jest aktywna"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 216,
          "snippet": "    accounts_configured: Optional[List[str]] = Field(\n        default=None,\n        description=\"Lista skonfigurowanych kont LinkedIn\"\n    )\n    ",
          "values": {
            "strings": [
              "Lista skonfigurowanych kont LinkedIn"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 230,
          "snippet": "\n\nclass LinkedInConfigResponse(BaseModel):\n    \"\"\"Response model dla config endpoint\"\"\"\n    ",
          "values": {
            "strings": [
              "Response model dla config endpoint"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 233,
          "snippet": "    \"\"\"Response model dla config endpoint\"\"\"\n    \n    linkedin_module_configured: bool = Field(\n        ...,\n        description=\"Czy LinkedIn module jest skonfigurowany\"",
          "values": {
            "strings": [
              "Response model dla config endpoint",
              "\n    \n    linkedin_module_configured: bool = Field(\n        ...,\n        description="
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 235,
          "snippet": "    linkedin_module_configured: bool = Field(\n        ...,\n        description=\"Czy LinkedIn module jest skonfigurowany\"\n    )\n    ",
          "values": {
            "strings": [
              "Czy LinkedIn module jest skonfigurowany"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 238,
          "snippet": "    )\n    \n    linkedin_module_path: str = Field(\n        ...,\n        description=\"Ścieżka do LinkedIn module\"",
          "values": {
            "strings": [
              "Ścieżka do LinkedIn module"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 240,
          "snippet": "    linkedin_module_path: str = Field(\n        ...,\n        description=\"Ścieżka do LinkedIn module\"\n    )\n    ",
          "values": {
            "strings": [
              "Ścieżka do LinkedIn module"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 245,
          "snippet": "    cli_available: bool = Field(\n        ...,\n        description=\"Czy LinkedIn CLI jest dostępne\"\n    )\n    ",
          "values": {
            "strings": [
              "Czy LinkedIn CLI jest dostępne"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 269,
          "snippet": "\n\nclass LinkedInScheduledPostsResponse(BaseModel):\n    \"\"\"Response model dla listy zaplanowanych postów\"\"\"\n    ",
          "values": {
            "strings": [
              "Response model dla listy zaplanowanych postów"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 279,
          "snippet": "    account: str = Field(\n        ...,\n        description=\"Konto LinkedIn\"\n    )\n    ",
          "values": {
            "strings": [
              "Konto LinkedIn"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 298,
          "snippet": "\n\nclass LinkedInMediaUploadRequest(BaseModel):\n    \"\"\"Request model dla upload mediów\"\"\"\n    ",
          "values": {
            "strings": [
              "Request model dla upload mediów"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 303,
          "snippet": "    account: str = Field(\n        default=\"default\",\n        description=\"Konto LinkedIn\"\n    )\n    ",
          "values": {
            "strings": [
              "default",
              "Konto LinkedIn"
            ],
            "numbers": []
          }
        },
        {
          "type": "max_length",
          "platform": "linkedin",
          "line": 308,
          "snippet": "    description: Optional[str] = Field(\n        default=None,\n        max_length=500,\n        description=\"Opis pliku multimedialnego\"\n    )",
          "values": {
            "strings": [
              "Opis pliku multimedialnego"
            ],
            "numbers": [
              500
            ]
          }
        },
        {
          "type": "max_length",
          "platform": "linkedin",
          "line": 314,
          "snippet": "    alt_text: Optional[str] = Field(\n        default=None,\n        max_length=200,\n        description=\"Tekst alternatywny dla dostępności\"\n    )",
          "values": {
            "strings": [
              "Tekst alternatywny dla dostępności"
            ],
            "numbers": [
              200
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 319,
          "snippet": "\n\nclass LinkedInMediaUploadResponse(BaseModel):\n    \"\"\"Response model dla upload mediów\"\"\"\n    ",
          "values": {
            "strings": [
              "Response model dla upload mediów"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 348,
          "snippet": "\n\nclass LinkedInErrorResponse(BaseModel):\n    \"\"\"Response model dla błędów\"\"\"\n    ",
          "values": {
            "strings": [
              "Response model dla błędów"
            ],
            "numbers": []
          }
        }
      ]
    },
    {
      "file": "/Users/hretheum/dev/bezrobocie/vector-wave/publisher/src/adapters/linkedin/test_task_7_4.py",
      "exists": true,
      "hits": [
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 3,
          "snippet": "#!/usr/bin/env python3\n\"\"\"\nTest Suite dla Task 7.4: Error Handling dla LinkedIn-Specific Issues\n\nTask 7.4 Validation:",
          "values": {
            "strings": [],
            "numbers": [
              3,
              7,
              4,
              7,
              4
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 6,
          "snippet": "\nTask 7.4 Validation:\n- Test: Wrapper kategoryzuje błędy LinkedIn (selector changes, session expired, rate limits)\n- Test: Different error types są poprawnie rozpoznawane i mapped do error codes\n\"\"\"",
          "values": {
            "strings": [],
            "numbers": [
              7,
              4
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 19,
          "snippet": "sys.path.append(str(Path(__file__).parent))\n\nfrom linkedin_wrapper import (\n    LinkedInModuleWrapper, \n    LinkedInPublishRequest, ",
          "values": {
            "strings": [],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 20,
          "snippet": "\nfrom linkedin_wrapper import (\n    LinkedInModuleWrapper, \n    LinkedInPublishRequest, \n    LinkedInErrorType,",
          "values": {
            "strings": [],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 21,
          "snippet": "from linkedin_wrapper import (\n    LinkedInModuleWrapper, \n    LinkedInPublishRequest, \n    LinkedInErrorType,\n    LinkedInErrorSeverity,",
          "values": {
            "strings": [],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 22,
          "snippet": "    LinkedInModuleWrapper, \n    LinkedInPublishRequest, \n    LinkedInErrorType,\n    LinkedInErrorSeverity,\n    LinkedInErrorDetails,",
          "values": {
            "strings": [],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 23,
          "snippet": "    LinkedInPublishRequest, \n    LinkedInErrorType,\n    LinkedInErrorSeverity,\n    LinkedInErrorDetails,\n    LinkedInErrorRecoveryPlan,",
          "values": {
            "strings": [],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 24,
          "snippet": "    LinkedInErrorType,\n    LinkedInErrorSeverity,\n    LinkedInErrorDetails,\n    LinkedInErrorRecoveryPlan,\n    LinkedInCLIError",
          "values": {
            "strings": [],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 25,
          "snippet": "    LinkedInErrorSeverity,\n    LinkedInErrorDetails,\n    LinkedInErrorRecoveryPlan,\n    LinkedInCLIError\n)",
          "values": {
            "strings": [],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 26,
          "snippet": "    LinkedInErrorDetails,\n    LinkedInErrorRecoveryPlan,\n    LinkedInCLIError\n)\n",
          "values": {
            "strings": [],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 30,
          "snippet": "\nclass TestTask74ErrorHandling:\n    \"\"\"Test suite dla Task 7.4 - LinkedIn-Specific Error Handling\"\"\"\n    \n    @pytest.fixture",
          "values": {
            "strings": [
              "Test suite dla Task 7.4 - LinkedIn-Specific Error Handling"
            ],
            "numbers": [
              74,
              7,
              4
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 35,
          "snippet": "    async def wrapper(self):\n        \"\"\"Create wrapper instance dla tests\"\"\"\n        return LinkedInModuleWrapper()\n    \n    @pytest.mark.asyncio",
          "values": {
            "strings": [
              "Create wrapper instance dla tests"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 40,
          "snippet": "    async def test_error_type_detection(self):\n        \"\"\"\n        Task 7.4: Test LinkedIn error type detection\n        \"\"\"\n        wrapper = LinkedInModuleWrapper()",
          "values": {
            "strings": [
              "\n        Task 7.4: Test LinkedIn error type detection\n        "
            ],
            "numbers": [
              7,
              4
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 42,
          "snippet": "        Task 7.4: Test LinkedIn error type detection\n        \"\"\"\n        wrapper = LinkedInModuleWrapper()\n        \n        # Test different error scenarios",
          "values": {
            "strings": [],
            "numbers": [
              7,
              4
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 46,
          "snippet": "        # Test different error scenarios\n        test_cases = [\n            (\"Session expired, please log in again\", LinkedInErrorType.SESSION_EXPIRED),\n            (\"Selector not found: .share-button\", LinkedInErrorType.SELECTOR_NOT_FOUND),\n            (\"Rate limit exceeded, please try again later\", LinkedInErrorType.RATE_LIMITED),",
          "values": {
            "strings": [
              "Session expired, please log in again",
              "Selector not found: .share-button",
              "Rate limit exceeded, please try again later"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 47,
          "snippet": "        test_cases = [\n            (\"Session expired, please log in again\", LinkedInErrorType.SESSION_EXPIRED),\n            (\"Selector not found: .share-button\", LinkedInErrorType.SELECTOR_NOT_FOUND),\n            (\"Rate limit exceeded, please try again later\", LinkedInErrorType.RATE_LIMITED),\n            (\"Content too long, exceeds character limit\", LinkedInErrorType.CONTENT_TOO_LONG),",
          "values": {
            "strings": [
              "Session expired, please log in again",
              "Selector not found: .share-button",
              "Rate limit exceeded, please try again later",
              "Content too long, exceeds character limit"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 48,
          "snippet": "            (\"Session expired, please log in again\", LinkedInErrorType.SESSION_EXPIRED),\n            (\"Selector not found: .share-button\", LinkedInErrorType.SELECTOR_NOT_FOUND),\n            (\"Rate limit exceeded, please try again later\", LinkedInErrorType.RATE_LIMITED),\n            (\"Content too long, exceeds character limit\", LinkedInErrorType.CONTENT_TOO_LONG),\n            (\"Network timeout occurred\", LinkedInErrorType.NETWORK_TIMEOUT),",
          "values": {
            "strings": [
              "Session expired, please log in again",
              "Selector not found: .share-button",
              "Rate limit exceeded, please try again later",
              "Content too long, exceeds character limit",
              "Network timeout occurred"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 49,
          "snippet": "            (\"Selector not found: .share-button\", LinkedInErrorType.SELECTOR_NOT_FOUND),\n            (\"Rate limit exceeded, please try again later\", LinkedInErrorType.RATE_LIMITED),\n            (\"Content too long, exceeds character limit\", LinkedInErrorType.CONTENT_TOO_LONG),\n            (\"Network timeout occurred\", LinkedInErrorType.NETWORK_TIMEOUT),\n            (\"Account suspended due to policy violation\", LinkedInErrorType.ACCOUNT_SUSPENDED),",
          "values": {
            "strings": [
              "Selector not found: .share-button",
              "Rate limit exceeded, please try again later",
              "Content too long, exceeds character limit",
              "Network timeout occurred",
              "Account suspended due to policy violation"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 50,
          "snippet": "            (\"Rate limit exceeded, please try again later\", LinkedInErrorType.RATE_LIMITED),\n            (\"Content too long, exceeds character limit\", LinkedInErrorType.CONTENT_TOO_LONG),\n            (\"Network timeout occurred\", LinkedInErrorType.NETWORK_TIMEOUT),\n            (\"Account suspended due to policy violation\", LinkedInErrorType.ACCOUNT_SUSPENDED),\n            (\"Browser crashed unexpectedly\", LinkedInErrorType.BROWSER_CRASHED),",
          "values": {
            "strings": [
              "Rate limit exceeded, please try again later",
              "Content too long, exceeds character limit",
              "Network timeout occurred",
              "Account suspended due to policy violation",
              "Browser crashed unexpectedly"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 51,
          "snippet": "            (\"Content too long, exceeds character limit\", LinkedInErrorType.CONTENT_TOO_LONG),\n            (\"Network timeout occurred\", LinkedInErrorType.NETWORK_TIMEOUT),\n            (\"Account suspended due to policy violation\", LinkedInErrorType.ACCOUNT_SUSPENDED),\n            (\"Browser crashed unexpectedly\", LinkedInErrorType.BROWSER_CRASHED),\n            (\"LinkedIn service unavailable\", LinkedInErrorType.LINKEDIN_DOWN),",
          "values": {
            "strings": [
              "Content too long, exceeds character limit",
              "Network timeout occurred",
              "Account suspended due to policy violation",
              "Browser crashed unexpectedly",
              "LinkedIn service unavailable"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 52,
          "snippet": "            (\"Network timeout occurred\", LinkedInErrorType.NETWORK_TIMEOUT),\n            (\"Account suspended due to policy violation\", LinkedInErrorType.ACCOUNT_SUSPENDED),\n            (\"Browser crashed unexpectedly\", LinkedInErrorType.BROWSER_CRASHED),\n            (\"LinkedIn service unavailable\", LinkedInErrorType.LINKEDIN_DOWN),\n            (\"Unknown error message\", LinkedInErrorType.UNKNOWN_ERROR)",
          "values": {
            "strings": [
              "Network timeout occurred",
              "Account suspended due to policy violation",
              "Browser crashed unexpectedly",
              "LinkedIn service unavailable",
              "Unknown error message"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 53,
          "snippet": "            (\"Account suspended due to policy violation\", LinkedInErrorType.ACCOUNT_SUSPENDED),\n            (\"Browser crashed unexpectedly\", LinkedInErrorType.BROWSER_CRASHED),\n            (\"LinkedIn service unavailable\", LinkedInErrorType.LINKEDIN_DOWN),\n            (\"Unknown error message\", LinkedInErrorType.UNKNOWN_ERROR)\n        ]",
          "values": {
            "strings": [
              "Account suspended due to policy violation",
              "Browser crashed unexpectedly",
              "LinkedIn service unavailable",
              "Unknown error message"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 54,
          "snippet": "            (\"Browser crashed unexpectedly\", LinkedInErrorType.BROWSER_CRASHED),\n            (\"LinkedIn service unavailable\", LinkedInErrorType.LINKEDIN_DOWN),\n            (\"Unknown error message\", LinkedInErrorType.UNKNOWN_ERROR)\n        ]\n        ",
          "values": {
            "strings": [
              "Browser crashed unexpectedly",
              "LinkedIn service unavailable",
              "Unknown error message"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 70,
          "snippet": "        Task 7.4: Test error severity classification\n        \"\"\"\n        wrapper = LinkedInModuleWrapper()\n        \n        # Test severity classification",
          "values": {
            "strings": [],
            "numbers": [
              7,
              4
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 74,
          "snippet": "        # Test severity classification\n        severity_cases = [\n            (LinkedInErrorType.ACCOUNT_SUSPENDED, LinkedInErrorSeverity.CRITICAL),\n            (LinkedInErrorType.SESSION_EXPIRED, LinkedInErrorSeverity.HIGH),\n            (LinkedInErrorType.SELECTOR_NOT_FOUND, LinkedInErrorSeverity.MEDIUM),",
          "values": {
            "strings": [],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 75,
          "snippet": "        severity_cases = [\n            (LinkedInErrorType.ACCOUNT_SUSPENDED, LinkedInErrorSeverity.CRITICAL),\n            (LinkedInErrorType.SESSION_EXPIRED, LinkedInErrorSeverity.HIGH),\n            (LinkedInErrorType.SELECTOR_NOT_FOUND, LinkedInErrorSeverity.MEDIUM),\n            (LinkedInErrorType.CONTENT_TOO_LONG, LinkedInErrorSeverity.LOW),",
          "values": {
            "strings": [],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 76,
          "snippet": "            (LinkedInErrorType.ACCOUNT_SUSPENDED, LinkedInErrorSeverity.CRITICAL),\n            (LinkedInErrorType.SESSION_EXPIRED, LinkedInErrorSeverity.HIGH),\n            (LinkedInErrorType.SELECTOR_NOT_FOUND, LinkedInErrorSeverity.MEDIUM),\n            (LinkedInErrorType.CONTENT_TOO_LONG, LinkedInErrorSeverity.LOW),\n            (LinkedInErrorType.UNKNOWN_ERROR, LinkedInErrorSeverity.MEDIUM)",
          "values": {
            "strings": [],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 77,
          "snippet": "            (LinkedInErrorType.SESSION_EXPIRED, LinkedInErrorSeverity.HIGH),\n            (LinkedInErrorType.SELECTOR_NOT_FOUND, LinkedInErrorSeverity.MEDIUM),\n            (LinkedInErrorType.CONTENT_TOO_LONG, LinkedInErrorSeverity.LOW),\n            (LinkedInErrorType.UNKNOWN_ERROR, LinkedInErrorSeverity.MEDIUM)\n        ]",
          "values": {
            "strings": [],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 78,
          "snippet": "            (LinkedInErrorType.SELECTOR_NOT_FOUND, LinkedInErrorSeverity.MEDIUM),\n            (LinkedInErrorType.CONTENT_TOO_LONG, LinkedInErrorSeverity.LOW),\n            (LinkedInErrorType.UNKNOWN_ERROR, LinkedInErrorSeverity.MEDIUM)\n        ]\n        ",
          "values": {
            "strings": [],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 94,
          "snippet": "        Task 7.4: Test comprehensive error analysis\n        \"\"\"\n        wrapper = LinkedInModuleWrapper()\n        \n        # Test comprehensive error analysis",
          "values": {
            "strings": [],
            "numbers": [
              7,
              4
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 98,
          "snippet": "        # Test comprehensive error analysis\n        test_output = \"❌ Error: Session expired, please log in again\"\n        error_details = wrapper.analyze_linkedin_error(test_output, \"publish\", \"default\")\n        \n        # Verify error details structure",
          "values": {
            "strings": [
              "❌ Error: Session expired, please log in again",
              "publish",
              "default"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 101,
          "snippet": "        \n        # Verify error details structure\n        assert isinstance(error_details, LinkedInErrorDetails), \"Should return LinkedInErrorDetails\"\n        assert error_details.error_type == LinkedInErrorType.SESSION_EXPIRED, \"Should detect session expired\"\n        assert error_details.severity == LinkedInErrorSeverity.HIGH, \"Should be high severity\"",
          "values": {
            "strings": [
              "Should return LinkedInErrorDetails",
              "Should detect session expired",
              "Should be high severity"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 102,
          "snippet": "        # Verify error details structure\n        assert isinstance(error_details, LinkedInErrorDetails), \"Should return LinkedInErrorDetails\"\n        assert error_details.error_type == LinkedInErrorType.SESSION_EXPIRED, \"Should detect session expired\"\n        assert error_details.severity == LinkedInErrorSeverity.HIGH, \"Should be high severity\"\n        assert error_details.account == \"default\", \"Should track account\"",
          "values": {
            "strings": [
              "Should return LinkedInErrorDetails",
              "Should detect session expired",
              "Should be high severity",
              "default",
              "Should track account"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 103,
          "snippet": "        assert isinstance(error_details, LinkedInErrorDetails), \"Should return LinkedInErrorDetails\"\n        assert error_details.error_type == LinkedInErrorType.SESSION_EXPIRED, \"Should detect session expired\"\n        assert error_details.severity == LinkedInErrorSeverity.HIGH, \"Should be high severity\"\n        assert error_details.account == \"default\", \"Should track account\"\n        assert error_details.command_executed == \"publish\", \"Should track command\"",
          "values": {
            "strings": [
              "Should return LinkedInErrorDetails",
              "Should detect session expired",
              "Should be high severity",
              "default",
              "Should track account",
              "publish",
              "Should track command"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 122,
          "snippet": "        Task 7.4: Test error code mapping to standardized codes\n        \"\"\"\n        wrapper = LinkedInModuleWrapper()\n        \n        # Test error code mapping",
          "values": {
            "strings": [],
            "numbers": [
              7,
              4
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 126,
          "snippet": "        # Test error code mapping\n        code_mapping_cases = [\n            (LinkedInErrorType.SESSION_EXPIRED, \"LN_S_001\"),\n            (LinkedInErrorType.SELECTOR_NOT_FOUND, \"LN_SEL_001\"),\n            (LinkedInErrorType.RATE_LIMITED, \"LN_RL_001\"),",
          "values": {
            "strings": [
              "LN_S_001",
              "LN_SEL_001",
              "LN_RL_001"
            ],
            "numbers": [
              1,
              1,
              1
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 127,
          "snippet": "        code_mapping_cases = [\n            (LinkedInErrorType.SESSION_EXPIRED, \"LN_S_001\"),\n            (LinkedInErrorType.SELECTOR_NOT_FOUND, \"LN_SEL_001\"),\n            (LinkedInErrorType.RATE_LIMITED, \"LN_RL_001\"),\n            (LinkedInErrorType.CONTENT_TOO_LONG, \"LN_C_001\"),",
          "values": {
            "strings": [
              "LN_S_001",
              "LN_SEL_001",
              "LN_RL_001",
              "LN_C_001"
            ],
            "numbers": [
              1,
              1,
              1,
              1
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 128,
          "snippet": "            (LinkedInErrorType.SESSION_EXPIRED, \"LN_S_001\"),\n            (LinkedInErrorType.SELECTOR_NOT_FOUND, \"LN_SEL_001\"),\n            (LinkedInErrorType.RATE_LIMITED, \"LN_RL_001\"),\n            (LinkedInErrorType.CONTENT_TOO_LONG, \"LN_C_001\"),\n            (LinkedInErrorType.NETWORK_TIMEOUT, \"LN_N_001\"),",
          "values": {
            "strings": [
              "LN_S_001",
              "LN_SEL_001",
              "LN_RL_001",
              "LN_C_001",
              "LN_N_001"
            ],
            "numbers": [
              1,
              1,
              1,
              1,
              1
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 129,
          "snippet": "            (LinkedInErrorType.SELECTOR_NOT_FOUND, \"LN_SEL_001\"),\n            (LinkedInErrorType.RATE_LIMITED, \"LN_RL_001\"),\n            (LinkedInErrorType.CONTENT_TOO_LONG, \"LN_C_001\"),\n            (LinkedInErrorType.NETWORK_TIMEOUT, \"LN_N_001\"),\n            (LinkedInErrorType.ACCOUNT_SUSPENDED, \"LN_PERM_001\"),",
          "values": {
            "strings": [
              "LN_SEL_001",
              "LN_RL_001",
              "LN_C_001",
              "LN_N_001",
              "LN_PERM_001"
            ],
            "numbers": [
              1,
              1,
              1,
              1,
              1
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 130,
          "snippet": "            (LinkedInErrorType.RATE_LIMITED, \"LN_RL_001\"),\n            (LinkedInErrorType.CONTENT_TOO_LONG, \"LN_C_001\"),\n            (LinkedInErrorType.NETWORK_TIMEOUT, \"LN_N_001\"),\n            (LinkedInErrorType.ACCOUNT_SUSPENDED, \"LN_PERM_001\"),\n            (LinkedInErrorType.BROWSER_CRASHED, \"LN_SYS_001\"),",
          "values": {
            "strings": [
              "LN_RL_001",
              "LN_C_001",
              "LN_N_001",
              "LN_PERM_001",
              "LN_SYS_001"
            ],
            "numbers": [
              1,
              1,
              1,
              1,
              1
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 131,
          "snippet": "            (LinkedInErrorType.CONTENT_TOO_LONG, \"LN_C_001\"),\n            (LinkedInErrorType.NETWORK_TIMEOUT, \"LN_N_001\"),\n            (LinkedInErrorType.ACCOUNT_SUSPENDED, \"LN_PERM_001\"),\n            (LinkedInErrorType.BROWSER_CRASHED, \"LN_SYS_001\"),\n            (LinkedInErrorType.UNKNOWN_ERROR, \"LN_GEN_001\")",
          "values": {
            "strings": [
              "LN_C_001",
              "LN_N_001",
              "LN_PERM_001",
              "LN_SYS_001",
              "LN_GEN_001"
            ],
            "numbers": [
              1,
              1,
              1,
              1,
              1
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 132,
          "snippet": "            (LinkedInErrorType.NETWORK_TIMEOUT, \"LN_N_001\"),\n            (LinkedInErrorType.ACCOUNT_SUSPENDED, \"LN_PERM_001\"),\n            (LinkedInErrorType.BROWSER_CRASHED, \"LN_SYS_001\"),\n            (LinkedInErrorType.UNKNOWN_ERROR, \"LN_GEN_001\")\n        ]",
          "values": {
            "strings": [
              "LN_N_001",
              "LN_PERM_001",
              "LN_SYS_001",
              "LN_GEN_001"
            ],
            "numbers": [
              1,
              1,
              1,
              1
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 133,
          "snippet": "            (LinkedInErrorType.ACCOUNT_SUSPENDED, \"LN_PERM_001\"),\n            (LinkedInErrorType.BROWSER_CRASHED, \"LN_SYS_001\"),\n            (LinkedInErrorType.UNKNOWN_ERROR, \"LN_GEN_001\")\n        ]\n        ",
          "values": {
            "strings": [
              "LN_PERM_001",
              "LN_SYS_001",
              "LN_GEN_001"
            ],
            "numbers": [
              1,
              1,
              1
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 149,
          "snippet": "        Task 7.4: Test recovery plan creation\n        \"\"\"\n        wrapper = LinkedInModuleWrapper()\n        \n        # Create test error details",
          "values": {
            "strings": [],
            "numbers": [
              7,
              4
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 152,
          "snippet": "        \n        # Create test error details\n        error_details = LinkedInErrorDetails(\n            error_type=LinkedInErrorType.SESSION_EXPIRED,\n            severity=LinkedInErrorSeverity.HIGH,",
          "values": {
            "strings": [],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 153,
          "snippet": "        # Create test error details\n        error_details = LinkedInErrorDetails(\n            error_type=LinkedInErrorType.SESSION_EXPIRED,\n            severity=LinkedInErrorSeverity.HIGH,\n            message=\"Session expired\",",
          "values": {
            "strings": [
              "Session expired"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 154,
          "snippet": "        error_details = LinkedInErrorDetails(\n            error_type=LinkedInErrorType.SESSION_EXPIRED,\n            severity=LinkedInErrorSeverity.HIGH,\n            message=\"Session expired\",\n            account=\"default\"",
          "values": {
            "strings": [
              "Session expired",
              "default"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 163,
          "snippet": "        \n        # Verify recovery plan structure\n        assert isinstance(recovery_plan, LinkedInErrorRecoveryPlan), \"Should return LinkedInErrorRecoveryPlan\"\n        assert len(recovery_plan.recovery_steps) > 0, \"Should have recovery steps\"\n        assert 0.0 <= recovery_plan.success_probability <= 1.0, \"Success probability should be 0.0-1.0\"",
          "values": {
            "strings": [
              "Should return LinkedInErrorRecoveryPlan",
              "Should have recovery steps",
              "Success probability should be 0.0-1.0"
            ],
            "numbers": [
              0,
              0,
              0,
              1,
              0,
              0,
              0,
              1,
              0
            ]
          }
        },
        {
          "type": "required_elements",
          "platform": "linkedin",
          "line": 168,
          "snippet": "        assert recovery_plan.estimated_time > 0, \"Should have estimated time\"\n        assert recovery_plan.automated_recovery_possible, \"Session expired should be auto-recoverable\"\n        assert not recovery_plan.requires_user_input, \"Should not require user input dla automated recovery\"\n        \n        print(f\"✅ Recovery plan creation works\")",
          "values": {
            "strings": [
              "Should have estimated time",
              "Session expired should be auto-recoverable",
              "Should not require user input dla automated recovery",
              "✅ Recovery plan creation works"
            ],
            "numbers": [
              0
            ]
          }
        },
        {
          "type": "required_elements",
          "platform": "linkedin",
          "line": 175,
          "snippet": "        print(f\"   Estimated time: {recovery_plan.estimated_time}s\")\n        print(f\"   Automated recovery: {recovery_plan.automated_recovery_possible}\")\n        print(f\"   Requires user input: {recovery_plan.requires_user_input}\")\n    \n    @pytest.mark.asyncio",
          "values": {
            "strings": [
              "   Estimated time: {recovery_plan.estimated_time}s",
              "   Automated recovery: {recovery_plan.automated_recovery_possible}",
              "   Requires user input: {recovery_plan.requires_user_input}"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 182,
          "snippet": "        Task 7.4: Test automated recovery logic\n        \"\"\"\n        wrapper = LinkedInModuleWrapper()\n        \n        # Test recovery dla different error types",
          "values": {
            "strings": [],
            "numbers": [
              7,
              4
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 186,
          "snippet": "        # Test recovery dla different error types\n        recoverable_errors = [\n            LinkedInErrorType.SESSION_EXPIRED,\n            LinkedInErrorType.RATE_LIMITED,\n            LinkedInErrorType.NETWORK_TIMEOUT,",
          "values": {
            "strings": [],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 187,
          "snippet": "        recoverable_errors = [\n            LinkedInErrorType.SESSION_EXPIRED,\n            LinkedInErrorType.RATE_LIMITED,\n            LinkedInErrorType.NETWORK_TIMEOUT,\n            LinkedInErrorType.ELEMENT_NOT_CLICKABLE",
          "values": {
            "strings": [],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 188,
          "snippet": "            LinkedInErrorType.SESSION_EXPIRED,\n            LinkedInErrorType.RATE_LIMITED,\n            LinkedInErrorType.NETWORK_TIMEOUT,\n            LinkedInErrorType.ELEMENT_NOT_CLICKABLE\n        ]",
          "values": {
            "strings": [],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 189,
          "snippet": "            LinkedInErrorType.RATE_LIMITED,\n            LinkedInErrorType.NETWORK_TIMEOUT,\n            LinkedInErrorType.ELEMENT_NOT_CLICKABLE\n        ]\n        ",
          "values": {
            "strings": [],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 193,
          "snippet": "        \n        non_recoverable_errors = [\n            LinkedInErrorType.ACCOUNT_SUSPENDED,\n            LinkedInErrorType.POSTING_DISABLED\n        ]",
          "values": {
            "strings": [],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 194,
          "snippet": "        non_recoverable_errors = [\n            LinkedInErrorType.ACCOUNT_SUSPENDED,\n            LinkedInErrorType.POSTING_DISABLED\n        ]\n        ",
          "values": {
            "strings": [],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 198,
          "snippet": "        \n        for error_type in recoverable_errors:\n            error_details = LinkedInErrorDetails(\n                error_type=error_type,\n                severity=LinkedInErrorSeverity.MEDIUM,",
          "values": {
            "strings": [],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 200,
          "snippet": "            error_details = LinkedInErrorDetails(\n                error_type=error_type,\n                severity=LinkedInErrorSeverity.MEDIUM,\n                message=f\"Test {error_type.value}\",\n                account=\"default\"",
          "values": {
            "strings": [
              "Test {error_type.value}",
              "default"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 210,
          "snippet": "        \n        for error_type in non_recoverable_errors:\n            error_details = LinkedInErrorDetails(\n                error_type=error_type,\n                severity=LinkedInErrorSeverity.CRITICAL,",
          "values": {
            "strings": [],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 212,
          "snippet": "            error_details = LinkedInErrorDetails(\n                error_type=error_type,\n                severity=LinkedInErrorSeverity.CRITICAL,\n                message=f\"Test {error_type.value}\",\n                account=\"default\"",
          "values": {
            "strings": [
              "Test {error_type.value}",
              "default"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 228,
          "snippet": "        Task 7.4: Test error statistics tracking\n        \"\"\"\n        wrapper = LinkedInModuleWrapper()\n        \n        # Add some test errors",
          "values": {
            "strings": [],
            "numbers": [
              7,
              4
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 232,
          "snippet": "        # Add some test errors\n        test_errors = [\n            (\"Session expired\", LinkedInErrorType.SESSION_EXPIRED),\n            (\"Selector not found\", LinkedInErrorType.SELECTOR_NOT_FOUND),\n            (\"Session expired\", LinkedInErrorType.SESSION_EXPIRED),",
          "values": {
            "strings": [
              "Session expired",
              "Selector not found",
              "Session expired"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 233,
          "snippet": "        test_errors = [\n            (\"Session expired\", LinkedInErrorType.SESSION_EXPIRED),\n            (\"Selector not found\", LinkedInErrorType.SELECTOR_NOT_FOUND),\n            (\"Session expired\", LinkedInErrorType.SESSION_EXPIRED),\n            (\"Rate limited\", LinkedInErrorType.RATE_LIMITED)",
          "values": {
            "strings": [
              "Session expired",
              "Selector not found",
              "Session expired",
              "Rate limited"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 234,
          "snippet": "            (\"Session expired\", LinkedInErrorType.SESSION_EXPIRED),\n            (\"Selector not found\", LinkedInErrorType.SELECTOR_NOT_FOUND),\n            (\"Session expired\", LinkedInErrorType.SESSION_EXPIRED),\n            (\"Rate limited\", LinkedInErrorType.RATE_LIMITED)\n        ]",
          "values": {
            "strings": [
              "Session expired",
              "Selector not found",
              "Session expired",
              "Rate limited"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 235,
          "snippet": "            (\"Selector not found\", LinkedInErrorType.SELECTOR_NOT_FOUND),\n            (\"Session expired\", LinkedInErrorType.SESSION_EXPIRED),\n            (\"Rate limited\", LinkedInErrorType.RATE_LIMITED)\n        ]\n        ",
          "values": {
            "strings": [
              "Selector not found",
              "Session expired",
              "Rate limited"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 239,
          "snippet": "        \n        for output, expected_type in test_errors:\n            wrapper.analyze_linkedin_error(output, \"test\", \"default\")\n        \n        # Get error statistics",
          "values": {
            "strings": [
              "test",
              "default"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 264,
          "snippet": "        Task 7.4: Test error escalation logic\n        \"\"\"\n        wrapper = LinkedInModuleWrapper()\n        \n        # Test critical errors require escalation",
          "values": {
            "strings": [],
            "numbers": [
              7,
              4
            ]
          }
        },
        {
          "type": "required_elements",
          "platform": "linkedin",
          "line": 266,
          "snippet": "        wrapper = LinkedInModuleWrapper()\n        \n        # Test critical errors require escalation\n        critical_error = LinkedInErrorDetails(\n            error_type=LinkedInErrorType.ACCOUNT_SUSPENDED,",
          "values": {
            "strings": [],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 267,
          "snippet": "        \n        # Test critical errors require escalation\n        critical_error = LinkedInErrorDetails(\n            error_type=LinkedInErrorType.ACCOUNT_SUSPENDED,\n            severity=LinkedInErrorSeverity.CRITICAL,",
          "values": {
            "strings": [],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 268,
          "snippet": "        # Test critical errors require escalation\n        critical_error = LinkedInErrorDetails(\n            error_type=LinkedInErrorType.ACCOUNT_SUSPENDED,\n            severity=LinkedInErrorSeverity.CRITICAL,\n            message=\"Account suspended\",",
          "values": {
            "strings": [
              "Account suspended"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 269,
          "snippet": "        critical_error = LinkedInErrorDetails(\n            error_type=LinkedInErrorType.ACCOUNT_SUSPENDED,\n            severity=LinkedInErrorSeverity.CRITICAL,\n            message=\"Account suspended\",\n            account=\"default\"",
          "values": {
            "strings": [
              "Account suspended",
              "default"
            ],
            "numbers": []
          }
        },
        {
          "type": "required_elements",
          "platform": "linkedin",
          "line": 274,
          "snippet": "        )\n        \n        assert wrapper._should_escalate_error(critical_error), \"Critical errors should require escalation\"\n        \n        # Test frequent same errors require escalation",
          "values": {
            "strings": [
              "Critical errors should require escalation"
            ],
            "numbers": []
          }
        },
        {
          "type": "required_elements",
          "platform": "linkedin",
          "line": 276,
          "snippet": "        assert wrapper._should_escalate_error(critical_error), \"Critical errors should require escalation\"\n        \n        # Test frequent same errors require escalation\n        for i in range(6):  # More than threshold (5)\n            wrapper._track_error_pattern(LinkedInErrorType.SELECTOR_NOT_FOUND)",
          "values": {
            "strings": [
              "Critical errors should require escalation"
            ],
            "numbers": [
              6,
              5
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 278,
          "snippet": "        # Test frequent same errors require escalation\n        for i in range(6):  # More than threshold (5)\n            wrapper._track_error_pattern(LinkedInErrorType.SELECTOR_NOT_FOUND)\n        \n        frequent_error = LinkedInErrorDetails(",
          "values": {
            "strings": [],
            "numbers": [
              6,
              5
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 280,
          "snippet": "            wrapper._track_error_pattern(LinkedInErrorType.SELECTOR_NOT_FOUND)\n        \n        frequent_error = LinkedInErrorDetails(\n            error_type=LinkedInErrorType.SELECTOR_NOT_FOUND,\n            severity=LinkedInErrorSeverity.MEDIUM,",
          "values": {
            "strings": [],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 281,
          "snippet": "        \n        frequent_error = LinkedInErrorDetails(\n            error_type=LinkedInErrorType.SELECTOR_NOT_FOUND,\n            severity=LinkedInErrorSeverity.MEDIUM,\n            message=\"Selector not found\",",
          "values": {
            "strings": [
              "Selector not found"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 282,
          "snippet": "        frequent_error = LinkedInErrorDetails(\n            error_type=LinkedInErrorType.SELECTOR_NOT_FOUND,\n            severity=LinkedInErrorSeverity.MEDIUM,\n            message=\"Selector not found\",\n            account=\"default\"",
          "values": {
            "strings": [
              "Selector not found",
              "default"
            ],
            "numbers": []
          }
        },
        {
          "type": "required_elements",
          "platform": "linkedin",
          "line": 287,
          "snippet": "        )\n        \n        assert wrapper._should_escalate_error(frequent_error), \"Frequent errors should require escalation\"\n        \n        # Test normal errors don't require escalation",
          "values": {
            "strings": [
              "Frequent errors should require escalation"
            ],
            "numbers": []
          }
        },
        {
          "type": "required_elements",
          "platform": "linkedin",
          "line": 289,
          "snippet": "        assert wrapper._should_escalate_error(frequent_error), \"Frequent errors should require escalation\"\n        \n        # Test normal errors don't require escalation\n        normal_error = LinkedInErrorDetails(\n            error_type=LinkedInErrorType.CONTENT_TOO_LONG,",
          "values": {
            "strings": [
              "Frequent errors should require escalation"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 290,
          "snippet": "        \n        # Test normal errors don't require escalation\n        normal_error = LinkedInErrorDetails(\n            error_type=LinkedInErrorType.CONTENT_TOO_LONG,\n            severity=LinkedInErrorSeverity.LOW,",
          "values": {
            "strings": [],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 291,
          "snippet": "        # Test normal errors don't require escalation\n        normal_error = LinkedInErrorDetails(\n            error_type=LinkedInErrorType.CONTENT_TOO_LONG,\n            severity=LinkedInErrorSeverity.LOW,\n            message=\"Content too long\",",
          "values": {
            "strings": [
              "t require escalation\n        normal_error = LinkedInErrorDetails(\n            error_type=LinkedInErrorType.CONTENT_TOO_LONG,\n            severity=LinkedInErrorSeverity.LOW,\n            message="
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 292,
          "snippet": "        normal_error = LinkedInErrorDetails(\n            error_type=LinkedInErrorType.CONTENT_TOO_LONG,\n            severity=LinkedInErrorSeverity.LOW,\n            message=\"Content too long\",\n            account=\"default\"",
          "values": {
            "strings": [
              "Content too long",
              "default"
            ],
            "numbers": []
          }
        },
        {
          "type": "required_elements",
          "platform": "linkedin",
          "line": 297,
          "snippet": "        )\n        \n        assert not wrapper._should_escalate_error(normal_error), \"Normal errors should not require escalation\"\n        \n        print(f\"✅ Error escalation logic works correctly\")",
          "values": {
            "strings": [
              "Normal errors should not require escalation",
              "✅ Error escalation logic works correctly"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 308,
          "snippet": "    Test: Different error types są poprawnie rozpoznawane i mapped do error codes\n    \"\"\"\n    print(\"🧪 TASK 7.4 VALIDATION - LinkedIn-Specific Error Handling\")\n    print(\"=\" * 70)\n    ",
          "values": {
            "strings": [
              "\n    print(",
              ")\n    print("
            ],
            "numbers": [
              7,
              4,
              70
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 312,
          "snippet": "    \n    try:\n        wrapper = LinkedInModuleWrapper()\n        \n        # Test 1: Error type detection",
          "values": {
            "strings": [],
            "numbers": [
              1
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 317,
          "snippet": "        print(\"\\n1️⃣ Testing error type detection...\")\n        test_cases = [\n            (\"Session expired, please log in again\", LinkedInErrorType.SESSION_EXPIRED),\n            (\"Selector not found: .share-button\", LinkedInErrorType.SELECTOR_NOT_FOUND),\n            (\"Rate limit exceeded\", LinkedInErrorType.RATE_LIMITED),",
          "values": {
            "strings": [
              "\\n1️⃣ Testing error type detection...",
              "Session expired, please log in again",
              "Selector not found: .share-button",
              "Rate limit exceeded"
            ],
            "numbers": [
              1
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 318,
          "snippet": "        test_cases = [\n            (\"Session expired, please log in again\", LinkedInErrorType.SESSION_EXPIRED),\n            (\"Selector not found: .share-button\", LinkedInErrorType.SELECTOR_NOT_FOUND),\n            (\"Rate limit exceeded\", LinkedInErrorType.RATE_LIMITED),\n            (\"Content too long\", LinkedInErrorType.CONTENT_TOO_LONG),",
          "values": {
            "strings": [
              "Session expired, please log in again",
              "Selector not found: .share-button",
              "Rate limit exceeded",
              "Content too long"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 319,
          "snippet": "            (\"Session expired, please log in again\", LinkedInErrorType.SESSION_EXPIRED),\n            (\"Selector not found: .share-button\", LinkedInErrorType.SELECTOR_NOT_FOUND),\n            (\"Rate limit exceeded\", LinkedInErrorType.RATE_LIMITED),\n            (\"Content too long\", LinkedInErrorType.CONTENT_TOO_LONG),\n            (\"Network timeout\", LinkedInErrorType.NETWORK_TIMEOUT),",
          "values": {
            "strings": [
              "Session expired, please log in again",
              "Selector not found: .share-button",
              "Rate limit exceeded",
              "Content too long",
              "Network timeout"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 320,
          "snippet": "            (\"Selector not found: .share-button\", LinkedInErrorType.SELECTOR_NOT_FOUND),\n            (\"Rate limit exceeded\", LinkedInErrorType.RATE_LIMITED),\n            (\"Content too long\", LinkedInErrorType.CONTENT_TOO_LONG),\n            (\"Network timeout\", LinkedInErrorType.NETWORK_TIMEOUT),\n            (\"Account suspended\", LinkedInErrorType.ACCOUNT_SUSPENDED)",
          "values": {
            "strings": [
              "Selector not found: .share-button",
              "Rate limit exceeded",
              "Content too long",
              "Network timeout",
              "Account suspended"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 321,
          "snippet": "            (\"Rate limit exceeded\", LinkedInErrorType.RATE_LIMITED),\n            (\"Content too long\", LinkedInErrorType.CONTENT_TOO_LONG),\n            (\"Network timeout\", LinkedInErrorType.NETWORK_TIMEOUT),\n            (\"Account suspended\", LinkedInErrorType.ACCOUNT_SUSPENDED)\n        ]",
          "values": {
            "strings": [
              "Rate limit exceeded",
              "Content too long",
              "Network timeout",
              "Account suspended"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 322,
          "snippet": "            (\"Content too long\", LinkedInErrorType.CONTENT_TOO_LONG),\n            (\"Network timeout\", LinkedInErrorType.NETWORK_TIMEOUT),\n            (\"Account suspended\", LinkedInErrorType.ACCOUNT_SUSPENDED)\n        ]\n        ",
          "values": {
            "strings": [
              "Content too long",
              "Network timeout",
              "Account suspended"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 339,
          "snippet": "        print(\"\\n2️⃣ Testing error code mapping...\")\n        mapping_cases = [\n            (LinkedInErrorType.SESSION_EXPIRED, \"LN_S_001\"),\n            (LinkedInErrorType.SELECTOR_NOT_FOUND, \"LN_SEL_001\"),\n            (LinkedInErrorType.RATE_LIMITED, \"LN_RL_001\"),",
          "values": {
            "strings": [
              "\\n2️⃣ Testing error code mapping...",
              "LN_S_001",
              "LN_SEL_001",
              "LN_RL_001"
            ],
            "numbers": [
              2,
              1,
              1,
              1
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 340,
          "snippet": "        mapping_cases = [\n            (LinkedInErrorType.SESSION_EXPIRED, \"LN_S_001\"),\n            (LinkedInErrorType.SELECTOR_NOT_FOUND, \"LN_SEL_001\"),\n            (LinkedInErrorType.RATE_LIMITED, \"LN_RL_001\"),\n            (LinkedInErrorType.CONTENT_TOO_LONG, \"LN_C_001\"),",
          "values": {
            "strings": [
              "LN_S_001",
              "LN_SEL_001",
              "LN_RL_001",
              "LN_C_001"
            ],
            "numbers": [
              1,
              1,
              1,
              1
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 341,
          "snippet": "            (LinkedInErrorType.SESSION_EXPIRED, \"LN_S_001\"),\n            (LinkedInErrorType.SELECTOR_NOT_FOUND, \"LN_SEL_001\"),\n            (LinkedInErrorType.RATE_LIMITED, \"LN_RL_001\"),\n            (LinkedInErrorType.CONTENT_TOO_LONG, \"LN_C_001\"),\n            (LinkedInErrorType.ACCOUNT_SUSPENDED, \"LN_PERM_001\")",
          "values": {
            "strings": [
              "LN_S_001",
              "LN_SEL_001",
              "LN_RL_001",
              "LN_C_001",
              "LN_PERM_001"
            ],
            "numbers": [
              1,
              1,
              1,
              1,
              1
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 342,
          "snippet": "            (LinkedInErrorType.SELECTOR_NOT_FOUND, \"LN_SEL_001\"),\n            (LinkedInErrorType.RATE_LIMITED, \"LN_RL_001\"),\n            (LinkedInErrorType.CONTENT_TOO_LONG, \"LN_C_001\"),\n            (LinkedInErrorType.ACCOUNT_SUSPENDED, \"LN_PERM_001\")\n        ]",
          "values": {
            "strings": [
              "LN_SEL_001",
              "LN_RL_001",
              "LN_C_001",
              "LN_PERM_001"
            ],
            "numbers": [
              1,
              1,
              1,
              1
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 343,
          "snippet": "            (LinkedInErrorType.RATE_LIMITED, \"LN_RL_001\"),\n            (LinkedInErrorType.CONTENT_TOO_LONG, \"LN_C_001\"),\n            (LinkedInErrorType.ACCOUNT_SUSPENDED, \"LN_PERM_001\")\n        ]\n        ",
          "values": {
            "strings": [
              "LN_RL_001",
              "LN_C_001",
              "LN_PERM_001"
            ],
            "numbers": [
              1,
              1,
              1
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 354,
          "snippet": "        print(\"\\n3️⃣ Testing comprehensive error analysis...\")\n        test_output = \"❌ Error: Session expired, please log in again\"\n        error_details = wrapper.analyze_linkedin_error(test_output, \"publish\", \"test_account\")\n        \n        print(f\"   ✅ Error analysis works\")",
          "values": {
            "strings": [
              "\\n3️⃣ Testing comprehensive error analysis...",
              "❌ Error: Session expired, please log in again",
              "publish",
              "test_account",
              "   ✅ Error analysis works"
            ],
            "numbers": [
              3
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 384,
          "snippet": "        \n        for error_output in test_errors:\n            wrapper.analyze_linkedin_error(error_output, \"test\", \"default\")\n        \n        stats = wrapper.get_error_statistics()",
          "values": {
            "strings": [
              "test",
              "default"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 394,
          "snippet": "        # Test 6: Error escalation\n        print(\"\\n6️⃣ Testing error escalation logic...\")\n        critical_error = LinkedInErrorDetails(\n            error_type=LinkedInErrorType.ACCOUNT_SUSPENDED,\n            severity=LinkedInErrorSeverity.CRITICAL,",
          "values": {
            "strings": [
              "\\n6️⃣ Testing error escalation logic..."
            ],
            "numbers": [
              6,
              6
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 395,
          "snippet": "        print(\"\\n6️⃣ Testing error escalation logic...\")\n        critical_error = LinkedInErrorDetails(\n            error_type=LinkedInErrorType.ACCOUNT_SUSPENDED,\n            severity=LinkedInErrorSeverity.CRITICAL,\n            message=\"Account suspended\",",
          "values": {
            "strings": [
              "\\n6️⃣ Testing error escalation logic...",
              "Account suspended"
            ],
            "numbers": [
              6
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 396,
          "snippet": "        critical_error = LinkedInErrorDetails(\n            error_type=LinkedInErrorType.ACCOUNT_SUSPENDED,\n            severity=LinkedInErrorSeverity.CRITICAL,\n            message=\"Account suspended\",\n            account=\"default\"",
          "values": {
            "strings": [
              "Account suspended",
              "default"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 407,
          "snippet": "        print(\"\\n\" + \"=\" * 70)\n        print(\"🎉 TASK 7.4 VALIDATION COMPLETED SUCCESSFULLY!\")\n        print(\"✅ Wrapper kategoryzuje błędy LinkedIn (selector changes, session expired, rate limits)\")\n        print(\"✅ Different error types są poprawnie rozpoznawane i mapped do error codes\")\n        print(\"✅ Comprehensive error analysis z recovery recommendations\")",
          "values": {
            "strings": [
              "\\n",
              " * 70)\n        print(",
              ")\n        print(",
              ")\n        print(",
              ")\n        print("
            ],
            "numbers": [
              70,
              7,
              4
            ]
          }
        }
      ]
    },
    {
      "file": "/Users/hretheum/dev/bezrobocie/vector-wave/publisher/src/adapters/linkedin/prometheus_metrics.py",
      "exists": true,
      "hits": [
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 2,
          "snippet": "\"\"\"\nLinkedIn Adapter - Prometheus Metrics\nMetrics collection dla LinkedIn publication adapter\n\"\"\"",
          "values": {
            "strings": [
              "\nLinkedIn Adapter - Prometheus Metrics\nMetrics collection dla LinkedIn publication adapter\n"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 3,
          "snippet": "\"\"\"\nLinkedIn Adapter - Prometheus Metrics\nMetrics collection dla LinkedIn publication adapter\n\"\"\"\n",
          "values": {
            "strings": [
              "\nLinkedIn Adapter - Prometheus Metrics\nMetrics collection dla LinkedIn publication adapter\n"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 10,
          "snippet": "from prometheus_client import Counter, Histogram, Gauge, generate_latest, CONTENT_TYPE_LATEST\n\n# Prometheus metrics dla LinkedIn Adapter\nlinkedin_publications_total = Counter(\n    'linkedin_publications_total',",
          "values": {
            "strings": [
              "linkedin_publications_total"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 11,
          "snippet": "\n# Prometheus metrics dla LinkedIn Adapter\nlinkedin_publications_total = Counter(\n    'linkedin_publications_total',\n    'Total number of LinkedIn publications',",
          "values": {
            "strings": [
              "linkedin_publications_total",
              "Total number of LinkedIn publications"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 12,
          "snippet": "# Prometheus metrics dla LinkedIn Adapter\nlinkedin_publications_total = Counter(\n    'linkedin_publications_total',\n    'Total number of LinkedIn publications',\n    ['account', 'status', 'content_type']",
          "values": {
            "strings": [
              "linkedin_publications_total",
              "Total number of LinkedIn publications",
              "account",
              "status",
              "content_type"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 13,
          "snippet": "linkedin_publications_total = Counter(\n    'linkedin_publications_total',\n    'Total number of LinkedIn publications',\n    ['account', 'status', 'content_type']\n)",
          "values": {
            "strings": [
              "linkedin_publications_total",
              "Total number of LinkedIn publications",
              "account",
              "status",
              "content_type"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 17,
          "snippet": ")\n\nlinkedin_publication_duration = Histogram(\n    'linkedin_publication_duration_seconds',\n    'Time spent publishing to LinkedIn',",
          "values": {
            "strings": [
              "linkedin_publication_duration_seconds",
              "Time spent publishing to LinkedIn"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 18,
          "snippet": "\nlinkedin_publication_duration = Histogram(\n    'linkedin_publication_duration_seconds',\n    'Time spent publishing to LinkedIn',\n    ['account', 'operation']",
          "values": {
            "strings": [
              "linkedin_publication_duration_seconds",
              "Time spent publishing to LinkedIn",
              "account",
              "operation"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 19,
          "snippet": "linkedin_publication_duration = Histogram(\n    'linkedin_publication_duration_seconds',\n    'Time spent publishing to LinkedIn',\n    ['account', 'operation']\n)",
          "values": {
            "strings": [
              "linkedin_publication_duration_seconds",
              "Time spent publishing to LinkedIn",
              "account",
              "operation"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 23,
          "snippet": ")\n\nlinkedin_session_health = Gauge(\n    'linkedin_session_health_score',\n    'LinkedIn session health score (0.0-1.0)',",
          "values": {
            "strings": [
              "linkedin_session_health_score",
              "LinkedIn session health score (0.0-1.0)"
            ],
            "numbers": [
              0,
              0,
              1,
              0
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 24,
          "snippet": "\nlinkedin_session_health = Gauge(\n    'linkedin_session_health_score',\n    'LinkedIn session health score (0.0-1.0)',\n    ['account']",
          "values": {
            "strings": [
              "linkedin_session_health_score",
              "LinkedIn session health score (0.0-1.0)",
              "account"
            ],
            "numbers": [
              0,
              0,
              1,
              0
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 25,
          "snippet": "linkedin_session_health = Gauge(\n    'linkedin_session_health_score',\n    'LinkedIn session health score (0.0-1.0)',\n    ['account']\n)",
          "values": {
            "strings": [
              "linkedin_session_health_score",
              "LinkedIn session health score (0.0-1.0)",
              "account"
            ],
            "numbers": [
              0,
              0,
              1,
              0
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 29,
          "snippet": ")\n\nlinkedin_cli_availability = Gauge(\n    'linkedin_cli_availability',\n    'LinkedIn CLI availability (1=available, 0=unavailable)'",
          "values": {
            "strings": [
              "linkedin_cli_availability",
              "LinkedIn CLI availability (1=available, 0=unavailable)"
            ],
            "numbers": [
              1,
              0
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 30,
          "snippet": "\nlinkedin_cli_availability = Gauge(\n    'linkedin_cli_availability',\n    'LinkedIn CLI availability (1=available, 0=unavailable)'\n)",
          "values": {
            "strings": [
              "linkedin_cli_availability",
              "LinkedIn CLI availability (1=available, 0=unavailable)"
            ],
            "numbers": [
              1,
              0
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 31,
          "snippet": "linkedin_cli_availability = Gauge(\n    'linkedin_cli_availability',\n    'LinkedIn CLI availability (1=available, 0=unavailable)'\n)\n",
          "values": {
            "strings": [
              "linkedin_cli_availability",
              "LinkedIn CLI availability (1=available, 0=unavailable)"
            ],
            "numbers": [
              1,
              0
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 34,
          "snippet": ")\n\nlinkedin_errors_total = Counter(\n    'linkedin_errors_total',\n    'Total number of LinkedIn errors',",
          "values": {
            "strings": [
              "linkedin_errors_total",
              "Total number of LinkedIn errors"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 35,
          "snippet": "\nlinkedin_errors_total = Counter(\n    'linkedin_errors_total',\n    'Total number of LinkedIn errors',\n    ['account', 'error_type', 'error_code']",
          "values": {
            "strings": [
              "linkedin_errors_total",
              "Total number of LinkedIn errors",
              "account",
              "error_type",
              "error_code"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 36,
          "snippet": "linkedin_errors_total = Counter(\n    'linkedin_errors_total',\n    'Total number of LinkedIn errors',\n    ['account', 'error_type', 'error_code']\n)",
          "values": {
            "strings": [
              "linkedin_errors_total",
              "Total number of LinkedIn errors",
              "account",
              "error_type",
              "error_code"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 40,
          "snippet": ")\n\nlinkedin_retry_attempts_total = Counter(\n    'linkedin_retry_attempts_total',\n    'Total number of retry attempts',",
          "values": {
            "strings": [
              "linkedin_retry_attempts_total",
              "Total number of retry attempts"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 41,
          "snippet": "\nlinkedin_retry_attempts_total = Counter(\n    'linkedin_retry_attempts_total',\n    'Total number of retry attempts',\n    ['account', 'error_type']",
          "values": {
            "strings": [
              "linkedin_retry_attempts_total",
              "Total number of retry attempts",
              "account",
              "error_type"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 46,
          "snippet": ")\n\nlinkedin_scheduled_posts_total = Gauge(\n    'linkedin_scheduled_posts_total',\n    'Number of scheduled LinkedIn posts',",
          "values": {
            "strings": [
              "linkedin_scheduled_posts_total",
              "Number of scheduled LinkedIn posts"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 47,
          "snippet": "\nlinkedin_scheduled_posts_total = Gauge(\n    'linkedin_scheduled_posts_total',\n    'Number of scheduled LinkedIn posts',\n    ['account']",
          "values": {
            "strings": [
              "linkedin_scheduled_posts_total",
              "Number of scheduled LinkedIn posts",
              "account"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 48,
          "snippet": "linkedin_scheduled_posts_total = Gauge(\n    'linkedin_scheduled_posts_total',\n    'Number of scheduled LinkedIn posts',\n    ['account']\n)",
          "values": {
            "strings": [
              "linkedin_scheduled_posts_total",
              "Number of scheduled LinkedIn posts",
              "account"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 52,
          "snippet": ")\n\nlinkedin_media_uploads_total = Counter(\n    'linkedin_media_uploads_total',\n    'Total number of media uploads',",
          "values": {
            "strings": [
              "linkedin_media_uploads_total",
              "Total number of media uploads"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 53,
          "snippet": "\nlinkedin_media_uploads_total = Counter(\n    'linkedin_media_uploads_total',\n    'Total number of media uploads',\n    ['account', 'media_type', 'status']",
          "values": {
            "strings": [
              "linkedin_media_uploads_total",
              "Total number of media uploads",
              "account",
              "media_type",
              "status"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 58,
          "snippet": ")\n\nlinkedin_content_adaptation_total = Counter(\n    'linkedin_content_adaptation_total',\n    'Total number of content adaptations',",
          "values": {
            "strings": [
              "linkedin_content_adaptation_total",
              "Total number of content adaptations"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 59,
          "snippet": "\nlinkedin_content_adaptation_total = Counter(\n    'linkedin_content_adaptation_total',\n    'Total number of content adaptations',\n    ['account', 'adaptation_type']",
          "values": {
            "strings": [
              "linkedin_content_adaptation_total",
              "Total number of content adaptations",
              "account",
              "adaptation_type"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 64,
          "snippet": ")\n\nlinkedin_http_requests_total = Counter(\n    'linkedin_http_requests_total',\n    'Total HTTP requests to LinkedIn adapter',",
          "values": {
            "strings": [
              "linkedin_http_requests_total",
              "Total HTTP requests to LinkedIn adapter"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 65,
          "snippet": "\nlinkedin_http_requests_total = Counter(\n    'linkedin_http_requests_total',\n    'Total HTTP requests to LinkedIn adapter',\n    ['method', 'endpoint', 'status_code']",
          "values": {
            "strings": [
              "linkedin_http_requests_total",
              "Total HTTP requests to LinkedIn adapter",
              "method",
              "endpoint",
              "status_code"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 66,
          "snippet": "linkedin_http_requests_total = Counter(\n    'linkedin_http_requests_total',\n    'Total HTTP requests to LinkedIn adapter',\n    ['method', 'endpoint', 'status_code']\n)",
          "values": {
            "strings": [
              "linkedin_http_requests_total",
              "Total HTTP requests to LinkedIn adapter",
              "method",
              "endpoint",
              "status_code"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 70,
          "snippet": ")\n\nlinkedin_http_request_duration = Histogram(\n    'linkedin_http_request_duration_seconds',\n    'HTTP request duration',",
          "values": {
            "strings": [
              "linkedin_http_request_duration_seconds",
              "HTTP request duration"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 71,
          "snippet": "\nlinkedin_http_request_duration = Histogram(\n    'linkedin_http_request_duration_seconds',\n    'HTTP request duration',\n    ['method', 'endpoint']",
          "values": {
            "strings": [
              "linkedin_http_request_duration_seconds",
              "HTTP request duration",
              "method",
              "endpoint"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 77,
          "snippet": "\n\nclass LinkedInMetrics:\n    \"\"\"LinkedIn adapter metrics collector\"\"\"\n    ",
          "values": {
            "strings": [
              "LinkedIn adapter metrics collector"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 78,
          "snippet": "\nclass LinkedInMetrics:\n    \"\"\"LinkedIn adapter metrics collector\"\"\"\n    \n    def __init__(self):",
          "values": {
            "strings": [
              "LinkedIn adapter metrics collector"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 86,
          "snippet": "                         duration: float = 0.0, operation: str = \"publish\"):\n        \"\"\"Track publication metrics\"\"\"\n        linkedin_publications_total.labels(\n            account=account,\n            status=status,",
          "values": {
            "strings": [
              "publish",
              "Track publication metrics"
            ],
            "numbers": [
              0,
              0
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 93,
          "snippet": "        \n        if duration > 0:\n            linkedin_publication_duration.labels(\n                account=account,\n                operation=operation",
          "values": {
            "strings": [],
            "numbers": [
              0
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 100,
          "snippet": "    def track_session_health(self, account: str, health_score: float):\n        \"\"\"Track session health score\"\"\"\n        linkedin_session_health.labels(account=account).set(health_score)\n    \n    def track_cli_availability(self, available: bool):",
          "values": {
            "strings": [
              "Track session health score"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 104,
          "snippet": "    def track_cli_availability(self, available: bool):\n        \"\"\"Track CLI availability\"\"\"\n        linkedin_cli_availability.set(1.0 if available else 0.0)\n    \n    def track_error(self, account: str, error_type: str, error_code: str = \"unknown\"):",
          "values": {
            "strings": [
              "Track CLI availability",
              "\n        linkedin_cli_availability.set(1.0 if available else 0.0)\n    \n    def track_error(self, account: str, error_type: str, error_code: str = "
            ],
            "numbers": [
              1,
              0,
              0,
              0
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 108,
          "snippet": "    def track_error(self, account: str, error_type: str, error_code: str = \"unknown\"):\n        \"\"\"Track error occurrence\"\"\"\n        linkedin_errors_total.labels(\n            account=account,\n            error_type=error_type,",
          "values": {
            "strings": [
              "unknown",
              "Track error occurrence"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 116,
          "snippet": "    def track_retry_attempt(self, account: str, error_type: str):\n        \"\"\"Track retry attempts\"\"\"\n        linkedin_retry_attempts_total.labels(\n            account=account,\n            error_type=error_type",
          "values": {
            "strings": [
              "Track retry attempts"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 123,
          "snippet": "    def track_scheduled_posts(self, account: str, count: int):\n        \"\"\"Track number of scheduled posts\"\"\"\n        linkedin_scheduled_posts_total.labels(account=account).set(count)\n    \n    def track_media_upload(self, account: str, media_type: str, status: str):",
          "values": {
            "strings": [
              "Track number of scheduled posts"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 127,
          "snippet": "    def track_media_upload(self, account: str, media_type: str, status: str):\n        \"\"\"Track media upload\"\"\"\n        linkedin_media_uploads_total.labels(\n            account=account,\n            media_type=media_type,",
          "values": {
            "strings": [
              "Track media upload"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 135,
          "snippet": "    def track_content_adaptation(self, account: str, adaptation_type: str):\n        \"\"\"Track content adaptation\"\"\"\n        linkedin_content_adaptation_total.labels(\n            account=account,\n            adaptation_type=adaptation_type",
          "values": {
            "strings": [
              "Track content adaptation"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 142,
          "snippet": "    def track_http_request(self, method: str, endpoint: str, status_code: int, duration: float):\n        \"\"\"Track HTTP request metrics\"\"\"\n        linkedin_http_requests_total.labels(\n            method=method,\n            endpoint=endpoint,",
          "values": {
            "strings": [
              "Track HTTP request metrics"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 148,
          "snippet": "        ).inc()\n        \n        linkedin_http_request_duration.labels(\n            method=method,\n            endpoint=endpoint",
          "values": {
            "strings": [],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 159,
          "snippet": "\n# Global metrics instance\nlinkedin_metrics = LinkedInMetrics()\n\n",
          "values": {
            "strings": [],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 165,
          "snippet": "                            content_type: str = \"text\", operation: str = \"publish\"):\n    \"\"\"Decorator/helper dla tracking publication metrics\"\"\"\n    linkedin_metrics.track_publication(account, status, content_type, duration, operation)\n\n",
          "values": {
            "strings": [
              "text",
              "publish",
              "Decorator/helper dla tracking publication metrics"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 191,
          "snippet": "            finally:\n                duration = time.time() - start_time\n                linkedin_metrics.track_http_request(method, endpoint, status_code, duration)\n        \n        # Preserve original function signature for FastAPI",
          "values": {
            "strings": [],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 202,
          "snippet": "    \"\"\"Helper dla tracking session metrics\"\"\"\n    if health_score is not None:\n        linkedin_metrics.track_session_health(account, health_score)\n\n",
          "values": {
            "strings": [
              "Helper dla tracking session metrics"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 207,
          "snippet": "def track_error_metrics(account: str, error_type: str, error_code: str = \"unknown\"):\n    \"\"\"Helper dla tracking error metrics\"\"\"\n    linkedin_metrics.track_error(account, error_type, error_code)\n\n",
          "values": {
            "strings": [
              "unknown",
              "Helper dla tracking error metrics"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 212,
          "snippet": "def track_media_metrics(account: str, media_type: str, status: str):\n    \"\"\"Helper dla tracking media metrics\"\"\"\n    linkedin_metrics.track_media_upload(account, media_type, status)\n\n",
          "values": {
            "strings": [
              "Helper dla tracking media metrics"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 217,
          "snippet": "def track_content_metrics(account: str, adaptation_type: str):\n    \"\"\"Helper dla tracking content adaptation metrics\"\"\"\n    linkedin_metrics.track_content_adaptation(account, adaptation_type)",
          "values": {
            "strings": [
              "Helper dla tracking content adaptation metrics"
            ],
            "numbers": []
          }
        }
      ]
    },
    {
      "file": "/Users/hretheum/dev/bezrobocie/vector-wave/publisher/src/adapters/linkedin/__init__.py",
      "exists": true,
      "hits": [
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 1,
          "snippet": "# LinkedIn Module Integration\n# Python wrapper dla existing Node.js LinkedIn CLI",
          "values": {
            "strings": [],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 2,
          "snippet": "# LinkedIn Module Integration\n# Python wrapper dla existing Node.js LinkedIn CLI",
          "values": {
            "strings": [],
            "numbers": []
          }
        }
      ]
    },
    {
      "file": "/Users/hretheum/dev/bezrobocie/vector-wave/publisher/src/adapters/linkedin/test_linkedin_adapter.py",
      "exists": true,
      "hits": [
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 3,
          "snippet": "#!/usr/bin/env python3\n\"\"\"\nTest Suite dla LinkedIn FastAPI Adapter\nTestuje FastAPI microservice integration z LinkedInModuleWrapper\n",
          "values": {
            "strings": [],
            "numbers": [
              3
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 4,
          "snippet": "\"\"\"\nTest Suite dla LinkedIn FastAPI Adapter\nTestuje FastAPI microservice integration z LinkedInModuleWrapper\n\nEnd-to-End testing for LinkedIn publication through Orchestrator",
          "values": {
            "strings": [],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 6,
          "snippet": "Testuje FastAPI microservice integration z LinkedInModuleWrapper\n\nEnd-to-End testing for LinkedIn publication through Orchestrator\n\"\"\"\n",
          "values": {
            "strings": [],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 17,
          "snippet": "\n# Test configuration\nLINKEDIN_ADAPTER_URL = \"http://localhost:8088\"\nORCHESTRATOR_URL = \"http://localhost:8085\"\n",
          "values": {
            "strings": [
              "http://localhost:8088",
              "http://localhost:8085"
            ],
            "numbers": [
              8088,
              8085
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 20,
          "snippet": "ORCHESTRATOR_URL = \"http://localhost:8085\"\n\nclass LinkedInAdapterTester:\n    \"\"\"Test suite dla LinkedIn FastAPI Adapter\"\"\"\n    ",
          "values": {
            "strings": [
              "http://localhost:8085",
              "Test suite dla LinkedIn FastAPI Adapter"
            ],
            "numbers": [
              8085
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 21,
          "snippet": "\nclass LinkedInAdapterTester:\n    \"\"\"Test suite dla LinkedIn FastAPI Adapter\"\"\"\n    \n    def __init__(self):",
          "values": {
            "strings": [
              "Test suite dla LinkedIn FastAPI Adapter"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 28,
          "snippet": "    \n    async def test_adapter_health(self):\n        \"\"\"Test LinkedIn adapter health endpoint\"\"\"\n        print(\"\\n1️⃣ Testing LinkedIn Adapter Health...\")\n        ",
          "values": {
            "strings": [
              "Test LinkedIn adapter health endpoint",
              "\n        print("
            ],
            "numbers": [
              1
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 29,
          "snippet": "    async def test_adapter_health(self):\n        \"\"\"Test LinkedIn adapter health endpoint\"\"\"\n        print(\"\\n1️⃣ Testing LinkedIn Adapter Health...\")\n        \n        try:",
          "values": {
            "strings": [
              "Test LinkedIn adapter health endpoint",
              "\n        print("
            ],
            "numbers": [
              1
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 32,
          "snippet": "        \n        try:\n            response = await self.adapter_client.get(f\"{LINKEDIN_ADAPTER_URL}/health\")\n            \n            if response.status_code == 200:",
          "values": {
            "strings": [
              "{LINKEDIN_ADAPTER_URL}/health"
            ],
            "numbers": [
              200
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 37,
          "snippet": "                health_data = response.json()\n                print(f\"   ✅ Health endpoint works: {health_data['status']}\")\n                print(f\"   📊 CLI Available: {health_data.get('linkedin_cli_available', 'unknown')}\")\n                print(f\"   📊 Session Valid: {health_data.get('session_valid', 'unknown')}\")\n                print(f\"   📊 Health Score: {health_data.get('session_health_score', 'unknown')}\")",
          "values": {
            "strings": [
              "   ✅ Health endpoint works: {health_data[",
              "]}",
              "   📊 CLI Available: {health_data.get(",
              ", ",
              ")}",
              "   📊 Session Valid: {health_data.get(",
              ", ",
              ")}",
              "   📊 Health Score: {health_data.get(",
              ", "
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 50,
          "snippet": "    \n    async def test_adapter_config(self):\n        \"\"\"Test LinkedIn adapter config endpoint\"\"\"\n        print(\"\\n2️⃣ Testing LinkedIn Adapter Config...\")\n        ",
          "values": {
            "strings": [
              "Test LinkedIn adapter config endpoint",
              "\n        print("
            ],
            "numbers": [
              2
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 51,
          "snippet": "    async def test_adapter_config(self):\n        \"\"\"Test LinkedIn adapter config endpoint\"\"\"\n        print(\"\\n2️⃣ Testing LinkedIn Adapter Config...\")\n        \n        try:",
          "values": {
            "strings": [
              "Test LinkedIn adapter config endpoint",
              "\n        print("
            ],
            "numbers": [
              2
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 54,
          "snippet": "        \n        try:\n            response = await self.adapter_client.get(f\"{LINKEDIN_ADAPTER_URL}/config\")\n            \n            if response.status_code == 200:",
          "values": {
            "strings": [
              "{LINKEDIN_ADAPTER_URL}/config"
            ],
            "numbers": [
              200
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 59,
          "snippet": "                config_data = response.json()\n                print(f\"   ✅ Config endpoint works: {config_data['status']}\")\n                print(f\"   📊 Module Configured: {config_data.get('linkedin_module_configured', 'unknown')}\")\n                print(f\"   📊 CLI Available: {config_data.get('cli_available', 'unknown')}\")\n                print(f\"   📊 Module Path: {config_data.get('linkedin_module_path', 'unknown')}\")",
          "values": {
            "strings": [
              "   ✅ Config endpoint works: {config_data[",
              "]}",
              "   📊 Module Configured: {config_data.get(",
              ", ",
              ")}",
              "   📊 CLI Available: {config_data.get(",
              ", ",
              ")}",
              "   📊 Module Path: {config_data.get(",
              ", "
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 61,
          "snippet": "                print(f\"   📊 Module Configured: {config_data.get('linkedin_module_configured', 'unknown')}\")\n                print(f\"   📊 CLI Available: {config_data.get('cli_available', 'unknown')}\")\n                print(f\"   📊 Module Path: {config_data.get('linkedin_module_path', 'unknown')}\")\n                print(f\"   📊 Capabilities: {config_data.get('capabilities', {})}\")\n                return True",
          "values": {
            "strings": [
              "   📊 Module Configured: {config_data.get(",
              ", ",
              ")}",
              "   📊 CLI Available: {config_data.get(",
              ", ",
              ")}",
              "   📊 Module Path: {config_data.get(",
              ", ",
              ")}",
              "   📊 Capabilities: {config_data.get("
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 73,
          "snippet": "    \n    async def test_adapter_metrics(self):\n        \"\"\"Test LinkedIn adapter metrics endpoint\"\"\"\n        print(\"\\n3️⃣ Testing LinkedIn Adapter Metrics...\")\n        ",
          "values": {
            "strings": [
              "Test LinkedIn adapter metrics endpoint",
              "\n        print("
            ],
            "numbers": [
              3
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 74,
          "snippet": "    async def test_adapter_metrics(self):\n        \"\"\"Test LinkedIn adapter metrics endpoint\"\"\"\n        print(\"\\n3️⃣ Testing LinkedIn Adapter Metrics...\")\n        \n        try:",
          "values": {
            "strings": [
              "Test LinkedIn adapter metrics endpoint",
              "\n        print("
            ],
            "numbers": [
              3
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 77,
          "snippet": "        \n        try:\n            response = await self.adapter_client.get(f\"{LINKEDIN_ADAPTER_URL}/metrics\")\n            \n            if response.status_code == 200:",
          "values": {
            "strings": [
              "{LINKEDIN_ADAPTER_URL}/metrics"
            ],
            "numbers": [
              200
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 86,
          "snippet": "                # Check for key metrics\n                key_metrics = [\n                    \"linkedin_publications_total\",\n                    \"linkedin_session_health\",\n                    \"linkedin_cli_availability\",",
          "values": {
            "strings": [
              "linkedin_publications_total",
              "linkedin_session_health",
              "linkedin_cli_availability"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 87,
          "snippet": "                key_metrics = [\n                    \"linkedin_publications_total\",\n                    \"linkedin_session_health\",\n                    \"linkedin_cli_availability\",\n                    \"linkedin_errors_total\"",
          "values": {
            "strings": [
              "linkedin_publications_total",
              "linkedin_session_health",
              "linkedin_cli_availability",
              "linkedin_errors_total"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 88,
          "snippet": "                    \"linkedin_publications_total\",\n                    \"linkedin_session_health\",\n                    \"linkedin_cli_availability\",\n                    \"linkedin_errors_total\"\n                ]",
          "values": {
            "strings": [
              "linkedin_publications_total",
              "linkedin_session_health",
              "linkedin_cli_availability",
              "linkedin_errors_total"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 89,
          "snippet": "                    \"linkedin_session_health\",\n                    \"linkedin_cli_availability\",\n                    \"linkedin_errors_total\"\n                ]\n                ",
          "values": {
            "strings": [
              "linkedin_session_health",
              "linkedin_cli_availability",
              "linkedin_errors_total"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 108,
          "snippet": "    \n    async def test_adapter_direct_publish(self):\n        \"\"\"Test direct publish to LinkedIn adapter\"\"\"\n        print(\"\\n4️⃣ Testing Direct LinkedIn Adapter Publish...\")\n        ",
          "values": {
            "strings": [
              "Test direct publish to LinkedIn adapter",
              "\n        print("
            ],
            "numbers": [
              4
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 109,
          "snippet": "    async def test_adapter_direct_publish(self):\n        \"\"\"Test direct publish to LinkedIn adapter\"\"\"\n        print(\"\\n4️⃣ Testing Direct LinkedIn Adapter Publish...\")\n        \n        try:",
          "values": {
            "strings": [
              "Test direct publish to LinkedIn adapter",
              "\n        print("
            ],
            "numbers": [
              4
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 114,
          "snippet": "            # Test publish request\n            publish_data = {\n                \"content\": \"🧪 Test post from LinkedIn Adapter - direct API call. This is testing the LinkedIn FastAPI adapter integration.\",\n                \"account\": \"default\",\n                \"adapt_content\": True,",
          "values": {
            "strings": [
              "content",
              "🧪 Test post from LinkedIn Adapter - direct API call. This is testing the LinkedIn FastAPI adapter integration.",
              "account",
              "default",
              "adapt_content"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 118,
          "snippet": "                \"adapt_content\": True,\n                \"adaptation_options\": {\n                    \"hashtags\": [\"TestPost\", \"LinkedInAPI\", \"Integration\"],\n                    \"max_hashtags\": 3\n                }",
          "values": {
            "strings": [
              "adapt_content",
              "adaptation_options",
              "hashtags",
              "TestPost",
              "LinkedInAPI",
              "Integration",
              "max_hashtags"
            ],
            "numbers": [
              3
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 126,
          "snippet": "            \n            response = await self.adapter_client.post(\n                f\"{LINKEDIN_ADAPTER_URL}/publish\",\n                json=publish_data,\n                headers={\"Content-Type\": \"application/json\"}",
          "values": {
            "strings": [
              "{LINKEDIN_ADAPTER_URL}/publish",
              "Content-Type",
              "application/json"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 160,
          "snippet": "            return False\n    \n    async def test_orchestrator_linkedin_integration(self):\n        \"\"\"Test LinkedIn publication through Orchestrator\"\"\"\n        print(\"\\n5️⃣ Testing Orchestrator → LinkedIn Integration...\")",
          "values": {
            "strings": [
              "Test LinkedIn publication through Orchestrator",
              "\n        print("
            ],
            "numbers": [
              5
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 161,
          "snippet": "    \n    async def test_orchestrator_linkedin_integration(self):\n        \"\"\"Test LinkedIn publication through Orchestrator\"\"\"\n        print(\"\\n5️⃣ Testing Orchestrator → LinkedIn Integration...\")\n        ",
          "values": {
            "strings": [
              "Test LinkedIn publication through Orchestrator",
              "\n        print("
            ],
            "numbers": [
              5
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 162,
          "snippet": "    async def test_orchestrator_linkedin_integration(self):\n        \"\"\"Test LinkedIn publication through Orchestrator\"\"\"\n        print(\"\\n5️⃣ Testing Orchestrator → LinkedIn Integration...\")\n        \n        try:",
          "values": {
            "strings": [
              "Test LinkedIn publication through Orchestrator",
              "\n        print("
            ],
            "numbers": [
              5
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 165,
          "snippet": "        \n        try:\n            # Test orchestrator publish request z LinkedIn platform\n            orchestrator_data = {\n                \"content\": {",
          "values": {
            "strings": [
              "content"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 168,
          "snippet": "            orchestrator_data = {\n                \"content\": {\n                    \"title\": \"🚀 Test LinkedIn Integration\",\n                    \"body\": \"Testing LinkedIn publication through Multi-Channel Publisher Orchestrator. This validates the complete integration pipeline from Orchestrator → LinkedIn Adapter → Node.js CLI.\",\n                    \"summary\": \"LinkedIn integration test post\"",
          "values": {
            "strings": [
              "content",
              "title",
              "🚀 Test LinkedIn Integration",
              "body",
              "Testing LinkedIn publication through Multi-Channel Publisher Orchestrator. This validates the complete integration pipeline from Orchestrator → LinkedIn Adapter → Node.js CLI.",
              "summary",
              "LinkedIn integration test post"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 169,
          "snippet": "                \"content\": {\n                    \"title\": \"🚀 Test LinkedIn Integration\",\n                    \"body\": \"Testing LinkedIn publication through Multi-Channel Publisher Orchestrator. This validates the complete integration pipeline from Orchestrator → LinkedIn Adapter → Node.js CLI.\",\n                    \"summary\": \"LinkedIn integration test post\"\n                },",
          "values": {
            "strings": [
              "content",
              "title",
              "🚀 Test LinkedIn Integration",
              "body",
              "Testing LinkedIn publication through Multi-Channel Publisher Orchestrator. This validates the complete integration pipeline from Orchestrator → LinkedIn Adapter → Node.js CLI.",
              "summary",
              "LinkedIn integration test post"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 170,
          "snippet": "                    \"title\": \"🚀 Test LinkedIn Integration\",\n                    \"body\": \"Testing LinkedIn publication through Multi-Channel Publisher Orchestrator. This validates the complete integration pipeline from Orchestrator → LinkedIn Adapter → Node.js CLI.\",\n                    \"summary\": \"LinkedIn integration test post\"\n                },\n                \"platforms\": {",
          "values": {
            "strings": [
              "title",
              "🚀 Test LinkedIn Integration",
              "body",
              "Testing LinkedIn publication through Multi-Channel Publisher Orchestrator. This validates the complete integration pipeline from Orchestrator → LinkedIn Adapter → Node.js CLI.",
              "summary",
              "LinkedIn integration test post",
              "platforms"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 173,
          "snippet": "                },\n                \"platforms\": {\n                    \"linkedin\": {\n                        \"enabled\": True,\n                        \"schedule_time\": None,",
          "values": {
            "strings": [
              "platforms",
              "linkedin",
              "enabled",
              "schedule_time"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 179,
          "snippet": "                            \"adapt_content\": True,\n                            \"adaptation_options\": {\n                                \"hashtags\": [\"Orchestrator\", \"LinkedIn\", \"Integration\", \"Test\"],\n                                \"max_hashtags\": 4\n                            }",
          "values": {
            "strings": [
              "adapt_content",
              "adaptation_options",
              "hashtags",
              "Orchestrator",
              "LinkedIn",
              "Integration",
              "Test",
              "max_hashtags"
            ],
            "numbers": [
              4
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 205,
          "snippet": "                print(f\"   📊 Status: {result.get('status', 'unknown')}\")\n                \n                # Check LinkedIn platform job\n                linkedin_jobs = [job for job in result.get('platform_jobs', []) if job.get('platform') == 'linkedin']\n                ",
          "values": {
            "strings": [
              "   📊 Status: {result.get(",
              ", ",
              ")}",
              "platform_jobs",
              "platform",
              "linkedin"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 206,
          "snippet": "                \n                # Check LinkedIn platform job\n                linkedin_jobs = [job for job in result.get('platform_jobs', []) if job.get('platform') == 'linkedin']\n                \n                if linkedin_jobs:",
          "values": {
            "strings": [
              "platform_jobs",
              "platform",
              "linkedin"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 208,
          "snippet": "                linkedin_jobs = [job for job in result.get('platform_jobs', []) if job.get('platform') == 'linkedin']\n                \n                if linkedin_jobs:\n                    linkedin_job = linkedin_jobs[0]\n                    print(f\"   📊 LinkedIn Job ID: {linkedin_job.get('job_id', 'unknown')}\")",
          "values": {
            "strings": [
              "platform_jobs",
              "platform",
              "linkedin",
              "   📊 LinkedIn Job ID: {linkedin_job.get(",
              ", ",
              ")}"
            ],
            "numbers": [
              0
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 209,
          "snippet": "                \n                if linkedin_jobs:\n                    linkedin_job = linkedin_jobs[0]\n                    print(f\"   📊 LinkedIn Job ID: {linkedin_job.get('job_id', 'unknown')}\")\n                    print(f\"   📊 LinkedIn Job Status: {linkedin_job.get('status', 'unknown')}\")",
          "values": {
            "strings": [
              "   📊 LinkedIn Job ID: {linkedin_job.get(",
              ", ",
              ")}",
              "   📊 LinkedIn Job Status: {linkedin_job.get(",
              ", ",
              ")}"
            ],
            "numbers": [
              0
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 210,
          "snippet": "                if linkedin_jobs:\n                    linkedin_job = linkedin_jobs[0]\n                    print(f\"   📊 LinkedIn Job ID: {linkedin_job.get('job_id', 'unknown')}\")\n                    print(f\"   📊 LinkedIn Job Status: {linkedin_job.get('status', 'unknown')}\")\n                    print(f\"   📊 LinkedIn Scheduled For: {linkedin_job.get('scheduled_for', 'immediate')}\")",
          "values": {
            "strings": [
              "   📊 LinkedIn Job ID: {linkedin_job.get(",
              ", ",
              ")}",
              "   📊 LinkedIn Job Status: {linkedin_job.get(",
              ", ",
              ")}",
              "   📊 LinkedIn Scheduled For: {linkedin_job.get(",
              ", ",
              ")}"
            ],
            "numbers": [
              0
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 211,
          "snippet": "                    linkedin_job = linkedin_jobs[0]\n                    print(f\"   📊 LinkedIn Job ID: {linkedin_job.get('job_id', 'unknown')}\")\n                    print(f\"   📊 LinkedIn Job Status: {linkedin_job.get('status', 'unknown')}\")\n                    print(f\"   📊 LinkedIn Scheduled For: {linkedin_job.get('scheduled_for', 'immediate')}\")\n                    ",
          "values": {
            "strings": [
              "   📊 LinkedIn Job ID: {linkedin_job.get(",
              ", ",
              ")}",
              "   📊 LinkedIn Job Status: {linkedin_job.get(",
              ", ",
              ")}",
              "   📊 LinkedIn Scheduled For: {linkedin_job.get(",
              ", ",
              ")}"
            ],
            "numbers": [
              0
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 212,
          "snippet": "                    print(f\"   📊 LinkedIn Job ID: {linkedin_job.get('job_id', 'unknown')}\")\n                    print(f\"   📊 LinkedIn Job Status: {linkedin_job.get('status', 'unknown')}\")\n                    print(f\"   📊 LinkedIn Scheduled For: {linkedin_job.get('scheduled_for', 'immediate')}\")\n                    \n                    # Wait a bit and check job status",
          "values": {
            "strings": [
              "   📊 LinkedIn Job ID: {linkedin_job.get(",
              ", ",
              ")}",
              "   📊 LinkedIn Job Status: {linkedin_job.get(",
              ", ",
              ")}",
              "   📊 LinkedIn Scheduled For: {linkedin_job.get(",
              ", ",
              ")}"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 215,
          "snippet": "                    \n                    # Wait a bit and check job status\n                    if linkedin_job.get('job_id'):\n                        print(f\"   ⏳ Waiting 5 seconds dla job processing...\")\n                        await asyncio.sleep(5)",
          "values": {
            "strings": [
              "job_id",
              "   ⏳ Waiting 5 seconds dla job processing..."
            ],
            "numbers": [
              5,
              5
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 221,
          "snippet": "                        # Check job status\n                        job_status_response = await self.orchestrator_client.get(\n                            f\"{ORCHESTRATOR_URL}/job/{linkedin_job['job_id']}/status\"\n                        )\n                        ",
          "values": {
            "strings": [
              "{ORCHESTRATOR_URL}/job/{linkedin_job[",
              "]}/status"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 232,
          "snippet": "                                print(f\"   🔗 Published Post URL: {job_status['result']['adapter_response']['post_url']}\")\n                else:\n                    print(f\"   ⚠️ No LinkedIn job found in response\")\n                \n                return True",
          "values": {
            "strings": [
              "   🔗 Published Post URL: {job_status[",
              "][",
              "][",
              "]}",
              "   ⚠️ No LinkedIn job found in response"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 245,
          "snippet": "    \n    async def test_orchestrator_health(self):\n        \"\"\"Test Orchestrator health z LinkedIn adapter\"\"\"\n        print(\"\\n6️⃣ Testing Orchestrator Health (LinkedIn Adapter)...\")\n        ",
          "values": {
            "strings": [
              "Test Orchestrator health z LinkedIn adapter",
              "\n        print("
            ],
            "numbers": [
              6
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 246,
          "snippet": "    async def test_orchestrator_health(self):\n        \"\"\"Test Orchestrator health z LinkedIn adapter\"\"\"\n        print(\"\\n6️⃣ Testing Orchestrator Health (LinkedIn Adapter)...\")\n        \n        try:",
          "values": {
            "strings": [
              "Test Orchestrator health z LinkedIn adapter",
              "\n        print("
            ],
            "numbers": [
              6
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 258,
          "snippet": "                # Check adapter statuses\n                adapter_statuses = health_data.get('adapter_statuses', {})\n                linkedin_status = adapter_statuses.get('linkedin', {})\n                \n                print(f\"   📊 LinkedIn Adapter Status: {linkedin_status.get('status', 'unknown')}\")",
          "values": {
            "strings": [
              "adapter_statuses",
              "linkedin",
              "   📊 LinkedIn Adapter Status: {linkedin_status.get(",
              ", ",
              ")}"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 260,
          "snippet": "                linkedin_status = adapter_statuses.get('linkedin', {})\n                \n                print(f\"   📊 LinkedIn Adapter Status: {linkedin_status.get('status', 'unknown')}\")\n                print(f\"   📊 LinkedIn Adapter Healthy: {linkedin_status.get('healthy', 'unknown')}\")\n                ",
          "values": {
            "strings": [
              "linkedin",
              "   📊 LinkedIn Adapter Status: {linkedin_status.get(",
              ", ",
              ")}",
              "   📊 LinkedIn Adapter Healthy: {linkedin_status.get(",
              ", ",
              ")}"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 261,
          "snippet": "                \n                print(f\"   📊 LinkedIn Adapter Status: {linkedin_status.get('status', 'unknown')}\")\n                print(f\"   📊 LinkedIn Adapter Healthy: {linkedin_status.get('healthy', 'unknown')}\")\n                \n                return True",
          "values": {
            "strings": [
              "   📊 LinkedIn Adapter Status: {linkedin_status.get(",
              ", ",
              ")}",
              "   📊 LinkedIn Adapter Healthy: {linkedin_status.get(",
              ", ",
              ")}"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 277,
          "snippet": "        await self.orchestrator_client.aclose()\n\nasync def run_comprehensive_linkedin_test():\n    \"\"\"Run complete LinkedIn adapter integration test\"\"\"\n    print(\"🔥 LINKEDIN ADAPTER INTEGRATION TEST\")",
          "values": {
            "strings": [
              "Run complete LinkedIn adapter integration test",
              "\n    print("
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 278,
          "snippet": "\nasync def run_comprehensive_linkedin_test():\n    \"\"\"Run complete LinkedIn adapter integration test\"\"\"\n    print(\"🔥 LINKEDIN ADAPTER INTEGRATION TEST\")\n    print(\"=\" * 60)",
          "values": {
            "strings": [
              "Run complete LinkedIn adapter integration test",
              "\n    print(",
              ")\n    print("
            ],
            "numbers": [
              60
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 279,
          "snippet": "async def run_comprehensive_linkedin_test():\n    \"\"\"Run complete LinkedIn adapter integration test\"\"\"\n    print(\"🔥 LINKEDIN ADAPTER INTEGRATION TEST\")\n    print(\"=\" * 60)\n    print(\"Testing complete integration:\")",
          "values": {
            "strings": [
              "Run complete LinkedIn adapter integration test",
              "\n    print(",
              ")\n    print(",
              " * 60)\n    print("
            ],
            "numbers": [
              60
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 282,
          "snippet": "    print(\"=\" * 60)\n    print(\"Testing complete integration:\")\n    print(\"• LinkedIn FastAPI Adapter\")  \n    print(\"• LinkedInModuleWrapper\")\n    print(\"• Orchestrator Integration\")",
          "values": {
            "strings": [
              " * 60)\n    print(",
              ")\n    print(",
              ")  \n    print(",
              ")\n    print("
            ],
            "numbers": [
              60
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 283,
          "snippet": "    print(\"Testing complete integration:\")\n    print(\"• LinkedIn FastAPI Adapter\")  \n    print(\"• LinkedInModuleWrapper\")\n    print(\"• Orchestrator Integration\")\n    print(\"• End-to-End Publication\")",
          "values": {
            "strings": [
              "Testing complete integration:",
              "• LinkedIn FastAPI Adapter",
              "• LinkedInModuleWrapper",
              "• Orchestrator Integration",
              "• End-to-End Publication"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 288,
          "snippet": "    print()\n    \n    tester = LinkedInAdapterTester()\n    \n    try:",
          "values": {
            "strings": [],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 299,
          "snippet": "        results.append(await tester.test_adapter_direct_publish())\n        results.append(await tester.test_orchestrator_health())\n        results.append(await tester.test_orchestrator_linkedin_integration())\n        \n        # Summary",
          "values": {
            "strings": [],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 306,
          "snippet": "        \n        print(\"\\n\" + \"=\" * 60)\n        print(f\"🎯 LINKEDIN INTEGRATION TEST RESULTS\")\n        print(f\"📊 Tests Passed: {passed}/{total} ({passed/total*100:.1f}%)\")\n        ",
          "values": {
            "strings": [
              "\\n",
              " * 60)\n        print(f",
              ")\n        print(f"
            ],
            "numbers": [
              60,
              100,
              1
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 310,
          "snippet": "        \n        if passed == total:\n            print(\"🎉 ALL LINKEDIN INTEGRATION TESTS PASSED!\")\n            print(\"✅ LinkedIn FastAPI Adapter: WORKING\")\n            print(\"✅ Orchestrator Integration: WORKING\") ",
          "values": {
            "strings": [
              "🎉 ALL LINKEDIN INTEGRATION TESTS PASSED!",
              "✅ LinkedIn FastAPI Adapter: WORKING",
              "✅ Orchestrator Integration: WORKING"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 311,
          "snippet": "        if passed == total:\n            print(\"🎉 ALL LINKEDIN INTEGRATION TESTS PASSED!\")\n            print(\"✅ LinkedIn FastAPI Adapter: WORKING\")\n            print(\"✅ Orchestrator Integration: WORKING\") \n            print(\"✅ End-to-End Publication: WORKING\")",
          "values": {
            "strings": [
              "🎉 ALL LINKEDIN INTEGRATION TESTS PASSED!",
              "✅ LinkedIn FastAPI Adapter: WORKING",
              "✅ Orchestrator Integration: WORKING",
              "✅ End-to-End Publication: WORKING"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 314,
          "snippet": "            print(\"✅ Orchestrator Integration: WORKING\") \n            print(\"✅ End-to-End Publication: WORKING\")\n            print(\"🚀 LinkedIn Module ready dla production!\")\n            return True\n        else:",
          "values": {
            "strings": [
              "✅ Orchestrator Integration: WORKING",
              "✅ End-to-End Publication: WORKING",
              "🚀 LinkedIn Module ready dla production!"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 329,
          "snippet": "async def run_quick_smoke_test():\n    \"\"\"Quick smoke test dla basic functionality\"\"\"\n    print(\"💨 QUICK SMOKE TEST - LinkedIn Adapter\")\n    print(\"=\" * 50)\n    ",
          "values": {
            "strings": [
              "Quick smoke test dla basic functionality",
              "\n    print(",
              ")\n    print("
            ],
            "numbers": [
              50
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 335,
          "snippet": "        async with httpx.AsyncClient(timeout=10.0) as client:\n            # Test adapter health\n            response = await client.get(f\"{LINKEDIN_ADAPTER_URL}/health\")\n            if response.status_code == 200:\n                print(\"✅ LinkedIn Adapter is responding\")",
          "values": {
            "strings": [
              "{LINKEDIN_ADAPTER_URL}/health",
              "✅ LinkedIn Adapter is responding"
            ],
            "numbers": [
              10,
              0,
              200
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 337,
          "snippet": "            response = await client.get(f\"{LINKEDIN_ADAPTER_URL}/health\")\n            if response.status_code == 200:\n                print(\"✅ LinkedIn Adapter is responding\")\n                health = response.json()\n                print(f\"   Status: {health.get('status', 'unknown')}\")",
          "values": {
            "strings": [
              "{LINKEDIN_ADAPTER_URL}/health",
              "✅ LinkedIn Adapter is responding",
              "   Status: {health.get(",
              ", ",
              ")}"
            ],
            "numbers": [
              200
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 342,
          "snippet": "                return True\n            else:\n                print(f\"❌ LinkedIn Adapter not responding: {response.status_code}\")\n                return False\n                ",
          "values": {
            "strings": [
              "❌ LinkedIn Adapter not responding: {response.status_code}"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 352,
          "snippet": "    import argparse\n    \n    parser = argparse.ArgumentParser(description=\"LinkedIn Adapter Integration Tests\")\n    parser.add_argument(\"--quick\", action=\"store_true\", help=\"Run quick smoke test only\")\n    parser.add_argument(\"--adapter-url\", default=LINKEDIN_ADAPTER_URL, help=\"LinkedIn Adapter URL\")",
          "values": {
            "strings": [
              "LinkedIn Adapter Integration Tests",
              "--quick",
              "store_true",
              "Run quick smoke test only",
              "--adapter-url",
              "LinkedIn Adapter URL"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 354,
          "snippet": "    parser = argparse.ArgumentParser(description=\"LinkedIn Adapter Integration Tests\")\n    parser.add_argument(\"--quick\", action=\"store_true\", help=\"Run quick smoke test only\")\n    parser.add_argument(\"--adapter-url\", default=LINKEDIN_ADAPTER_URL, help=\"LinkedIn Adapter URL\")\n    parser.add_argument(\"--orchestrator-url\", default=ORCHESTRATOR_URL, help=\"Orchestrator URL\")\n    ",
          "values": {
            "strings": [
              "LinkedIn Adapter Integration Tests",
              "--quick",
              "store_true",
              "Run quick smoke test only",
              "--adapter-url",
              "LinkedIn Adapter URL",
              "--orchestrator-url",
              "Orchestrator URL"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 360,
          "snippet": "    \n    # Update URLs if provided\n    LINKEDIN_ADAPTER_URL = args.adapter_url\n    ORCHESTRATOR_URL = args.orchestrator_url\n    ",
          "values": {
            "strings": [],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 366,
          "snippet": "        success = asyncio.run(run_quick_smoke_test())\n    else:\n        success = asyncio.run(run_comprehensive_linkedin_test())\n    \n    sys.exit(0 if success else 1)",
          "values": {
            "strings": [],
            "numbers": [
              0,
              1
            ]
          }
        }
      ]
    },
    {
      "file": "/Users/hretheum/dev/bezrobocie/vector-wave/publisher/src/adapters/linkedin/README.md",
      "exists": true,
      "hits": [
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 1,
          "snippet": "# LinkedIn Module Integration\n\n## 📋 **Status: ALL TASKS 7.1-7.8 COMPLETED** ✅",
          "values": {
            "strings": [],
            "numbers": [
              7,
              1,
              7,
              8
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 5,
          "snippet": "## 📋 **Status: ALL TASKS 7.1-7.8 COMPLETED** ✅\n\n**Python wrapper dla existing LinkedIn Node.js CLI - PRODUCTION READY & ORCHESTRATOR INTEGRATED**\n\n---",
          "values": {
            "strings": [],
            "numbers": [
              7,
              1,
              7,
              8
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 9,
          "snippet": "---\n\n## 🎯 **Task 7.1: LinkedInModuleWrapper Implementation** ✅ **COMPLETED**\n\n### ✅ **COMPLETED REQUIREMENTS:**",
          "values": {
            "strings": [],
            "numbers": [
              7,
              1
            ]
          }
        },
        {
          "type": "required_elements",
          "platform": "linkedin",
          "line": 11,
          "snippet": "## 🎯 **Task 7.1: LinkedInModuleWrapper Implementation** ✅ **COMPLETED**\n\n### ✅ **COMPLETED REQUIREMENTS:**\n- **✅ Python wrapper dla existing LinkedIn Node.js module z CLI execution**\n- **✅ Test: Wrapper poprawnie wykonuje `node scripts/linkedin-cli.js --help` i parsuje output**",
          "values": {
            "strings": [],
            "numbers": [
              7,
              1
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 12,
          "snippet": "\n### ✅ **COMPLETED REQUIREMENTS:**\n- **✅ Python wrapper dla existing LinkedIn Node.js module z CLI execution**\n- **✅ Test: Wrapper poprawnie wykonuje `node scripts/linkedin-cli.js --help` i parsuje output**\n",
          "values": {
            "strings": [],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 13,
          "snippet": "### ✅ **COMPLETED REQUIREMENTS:**\n- **✅ Python wrapper dla existing LinkedIn Node.js module z CLI execution**\n- **✅ Test: Wrapper poprawnie wykonuje `node scripts/linkedin-cli.js --help` i parsuje output**\n\n## 🎯 **Task 7.2: CLI Command Execution i Output Parsing** ✅ **COMPLETED**",
          "values": {
            "strings": [],
            "numbers": [
              7,
              2
            ]
          }
        },
        {
          "type": "required_elements",
          "platform": "linkedin",
          "line": 17,
          "snippet": "## 🎯 **Task 7.2: CLI Command Execution i Output Parsing** ✅ **COMPLETED**\n\n### ✅ **COMPLETED REQUIREMENTS:**\n- **✅ Wrapper wykonuje LinkedIn CLI commands i parsuje success/error responses**\n- **✅ Test: Po wykonaniu `publish`, wrapper zwraca structured response z success/error status**",
          "values": {
            "strings": [],
            "numbers": [
              7,
              2
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 18,
          "snippet": "\n### ✅ **COMPLETED REQUIREMENTS:**\n- **✅ Wrapper wykonuje LinkedIn CLI commands i parsuje success/error responses**\n- **✅ Test: Po wykonaniu `publish`, wrapper zwraca structured response z success/error status**\n- **✅ Enhanced parsing dla wszystkich command types**",
          "values": {
            "strings": [],
            "numbers": []
          }
        },
        {
          "type": "required_elements",
          "platform": "linkedin",
          "line": 25,
          "snippet": "## 🎯 **Task 7.3: Session Validation Integration** ✅ **COMPLETED**\n\n### ✅ **COMPLETED REQUIREMENTS:**\n- **✅ Wrapper sprawdza status LinkedIn session przed publikacją**\n- **✅ Test: `validate_session()` zwraca poprawny status dla aktywnych i wygasłych sesji**",
          "values": {
            "strings": [],
            "numbers": [
              7,
              3
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 26,
          "snippet": "\n### ✅ **COMPLETED REQUIREMENTS:**\n- **✅ Wrapper sprawdza status LinkedIn session przed publikacją**\n- **✅ Test: `validate_session()` zwraca poprawny status dla aktywnych i wygasłych sesji**\n- **✅ Comprehensive session validation z health scoring (0.0-1.0)**",
          "values": {
            "strings": [],
            "numbers": [
              0,
              0,
              1,
              0
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 69,
          "snippet": "\n🎉 TASK 7.2 VALIDATION COMPLETED SUCCESSFULLY!\n✅ Wrapper wykonuje LinkedIn CLI commands i parsuje success/error responses\n✅ Structured response format z comprehensive parsing\n✅ Enhanced error categorization i recovery suggestions",
          "values": {
            "strings": [],
            "numbers": [
              7,
              2
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 113,
          "snippet": "\n🎉 TASK 7.3 VALIDATION COMPLETED SUCCESSFULLY!\n✅ Wrapper sprawdza status LinkedIn session przed publikacją\n✅ validate_session() zwraca poprawny status dla różnych stanów sesji\n✅ Comprehensive session validation z health scoring",
          "values": {
            "strings": [],
            "numbers": [
              7,
              3
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 123,
          "snippet": "### 📊 **TASK 7.1 VALIDATION RESULTS:**\n```\n🧪 MANUAL TESTING - LinkedIn Module Wrapper\n==================================================\n",
          "values": {
            "strings": [],
            "numbers": [
              7,
              1
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 128,
          "snippet": "1️⃣ Testing wrapper initialization...\n   ✅ Wrapper initialized successfully\n   📁 LinkedIn path: /Users/hretheum/dev/bezrobocie/vector-wave/linkedin\n\n2️⃣ Testing CLI availability (Task 7.1 core test)...",
          "values": {
            "strings": [],
            "numbers": [
              1,
              2,
              7,
              1
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 144,
          "snippet": "6️⃣ Testing wrapper information...\n   wrapper_version: 1.0.0\n   linkedin_module_path: /Users/hretheum/dev/bezrobocie/vector-wave/linkedin\n   cli_script_path: /Users/hretheum/dev/bezrobocie/vector-wave/linkedin/scripts/linkedin-cli.js\n   cli_exists: True",
          "values": {
            "strings": [],
            "numbers": [
              6,
              1,
              0,
              0
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 145,
          "snippet": "   wrapper_version: 1.0.0\n   linkedin_module_path: /Users/hretheum/dev/bezrobocie/vector-wave/linkedin\n   cli_script_path: /Users/hretheum/dev/bezrobocie/vector-wave/linkedin/scripts/linkedin-cli.js\n   cli_exists: True\n   module_exists: True",
          "values": {
            "strings": [],
            "numbers": [
              1,
              0,
              0
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 150,
          "snippet": "\n🎉 TASK 7.1 VALIDATION COMPLETED SUCCESSFULLY!\n✅ Wrapper poprawnie wykonuje `node scripts/linkedin-cli.js --help` i parsuje output\n✅ All core functionality tested and working\n```",
          "values": {
            "strings": [],
            "numbers": [
              7,
              1
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 160,
          "snippet": "### **Core Components:**\n\n#### **1. LinkedInModuleWrapper Class**\n```python\nclass LinkedInModuleWrapper:",
          "values": {
            "strings": [],
            "numbers": [
              1
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 162,
          "snippet": "#### **1. LinkedInModuleWrapper Class**\n```python\nclass LinkedInModuleWrapper:\n    \"\"\"Enhanced Python wrapper dla LinkedIn Node.js CLI - Tasks 7.1, 7.2 & 7.3\"\"\"\n    ",
          "values": {
            "strings": [
              "Enhanced Python wrapper dla LinkedIn Node.js CLI - Tasks 7.1, 7.2 & 7.3"
            ],
            "numbers": [
              1,
              7,
              1,
              7,
              2,
              7,
              3
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 163,
          "snippet": "```python\nclass LinkedInModuleWrapper:\n    \"\"\"Enhanced Python wrapper dla LinkedIn Node.js CLI - Tasks 7.1, 7.2 & 7.3\"\"\"\n    \n    def __init__(self, linkedin_module_path: Optional[str] = None)",
          "values": {
            "strings": [
              "Enhanced Python wrapper dla LinkedIn Node.js CLI - Tasks 7.1, 7.2 & 7.3"
            ],
            "numbers": [
              7,
              1,
              7,
              2,
              7,
              3
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 165,
          "snippet": "    \"\"\"Enhanced Python wrapper dla LinkedIn Node.js CLI - Tasks 7.1, 7.2 & 7.3\"\"\"\n    \n    def __init__(self, linkedin_module_path: Optional[str] = None)\n    async def execute_cli_command(self, command: List[str], timeout: int = 60) -> Dict[str, Any]\n    def parse_cli_output(self, output: str, command_type: str) -> Dict[str, Any]",
          "values": {
            "strings": [
              "Enhanced Python wrapper dla LinkedIn Node.js CLI - Tasks 7.1, 7.2 & 7.3"
            ],
            "numbers": [
              7,
              1,
              7,
              2,
              7,
              3,
              60
            ]
          }
        },
        {
          "type": "required_elements",
          "platform": "linkedin",
          "line": 175,
          "snippet": "    \n    # Task 7.3 Session Validation Methods\n    async def validate_session_comprehensive(self, account: str, include_diagnostics: bool) -> SessionValidationResult\n    async def ensure_valid_session(self, account: str, recreation_threshold: float) -> SessionValidationResult\n    async def start_session_health_monitoring(self, account: str, check_interval: int, auto_recreation: bool) -> bool",
          "values": {
            "strings": [],
            "numbers": [
              7,
              3
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 185,
          "snippet": "```python\n@dataclass\nclass LinkedInPublishRequest:\n    content: str\n    pdf_path: Optional[str] = None",
          "values": {
            "strings": [],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 193,
          "snippet": "\n@dataclass\nclass LinkedInPublishResponse:\n    success: bool\n    post_url: Optional[str] = None",
          "values": {
            "strings": [],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 239,
          "snippet": "- `async def test_cli_availability() -> bool`\n- `async def get_help() -> Dict[str, Any]`\n- `async def list_sessions() -> List[LinkedInSessionInfo]`\n- `async def validate_session(account: str) -> Dict[str, Any]`\n- `async def publish_post(request: LinkedInPublishRequest) -> LinkedInPublishResponse`",
          "values": {
            "strings": [],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 241,
          "snippet": "- `async def list_sessions() -> List[LinkedInSessionInfo]`\n- `async def validate_session(account: str) -> Dict[str, Any]`\n- `async def publish_post(request: LinkedInPublishRequest) -> LinkedInPublishResponse`\n- `async def diagnose_selectors(account: str, fix: bool) -> Dict[str, Any]`\n",
          "values": {
            "strings": [],
            "numbers": []
          }
        },
        {
          "type": "required_elements",
          "platform": "linkedin",
          "line": 252,
          "snippet": "\n**Session Validation Methods (Task 7.3):**\n- `async def validate_session_comprehensive(account: str, include_diagnostics: bool) -> SessionValidationResult`\n- `async def ensure_valid_session(account: str, recreation_threshold: float) -> SessionValidationResult`\n- `async def start_session_health_monitoring(account: str, check_interval: int, auto_recreation: bool) -> bool`",
          "values": {
            "strings": [],
            "numbers": [
              7,
              3
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 266,
          "snippet": "### **Integration Flow:**\n```\nMulti-Channel Publisher → LinkedInModuleWrapper → Node.js CLI → LinkedIn\n                                ↓\n                          subprocess execution",
          "values": {
            "strings": [],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 277,
          "snippet": "### **Auto-Detection Logic:**\n```python\n# Auto-detect LinkedIn module location\npossible_paths = [\n    \"/Users/hretheum/dev/bezrobocie/vector-wave/linkedin\",",
          "values": {
            "strings": [
              "/Users/hretheum/dev/bezrobocie/vector-wave/linkedin"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 279,
          "snippet": "# Auto-detect LinkedIn module location\npossible_paths = [\n    \"/Users/hretheum/dev/bezrobocie/vector-wave/linkedin\",\n    \"../../../linkedin\",\n    \"../../linkedin\", ",
          "values": {
            "strings": [
              "/Users/hretheum/dev/bezrobocie/vector-wave/linkedin",
              "../../../linkedin",
              "../../linkedin"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 280,
          "snippet": "possible_paths = [\n    \"/Users/hretheum/dev/bezrobocie/vector-wave/linkedin\",\n    \"../../../linkedin\",\n    \"../../linkedin\", \n    \"../linkedin\",",
          "values": {
            "strings": [
              "/Users/hretheum/dev/bezrobocie/vector-wave/linkedin",
              "../../../linkedin",
              "../../linkedin",
              "../linkedin"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 281,
          "snippet": "    \"/Users/hretheum/dev/bezrobocie/vector-wave/linkedin\",\n    \"../../../linkedin\",\n    \"../../linkedin\", \n    \"../linkedin\",\n    \"./linkedin\"",
          "values": {
            "strings": [
              "/Users/hretheum/dev/bezrobocie/vector-wave/linkedin",
              "../../../linkedin",
              "../../linkedin",
              "../linkedin",
              "./linkedin"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 282,
          "snippet": "    \"../../../linkedin\",\n    \"../../linkedin\", \n    \"../linkedin\",\n    \"./linkedin\"\n]",
          "values": {
            "strings": [
              "../../../linkedin",
              "../../linkedin",
              "../linkedin",
              "./linkedin"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 283,
          "snippet": "    \"../../linkedin\", \n    \"../linkedin\",\n    \"./linkedin\"\n]\n```",
          "values": {
            "strings": [
              "../../linkedin",
              "../linkedin",
              "./linkedin"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 289,
          "snippet": "### **Error Handling:**\n```python\nclass LinkedInCLIError(Exception):\n    \"\"\"Custom exception dla LinkedIn CLI errors\"\"\"\n    def __init__(self, message: str, cli_output: str = \"\", exit_code: int = 0)",
          "values": {
            "strings": [
              "Custom exception dla LinkedIn CLI errors",
              "\n    def __init__(self, message: str, cli_output: str = "
            ],
            "numbers": [
              0
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 290,
          "snippet": "```python\nclass LinkedInCLIError(Exception):\n    \"\"\"Custom exception dla LinkedIn CLI errors\"\"\"\n    def __init__(self, message: str, cli_output: str = \"\", exit_code: int = 0)\n```",
          "values": {
            "strings": [
              "Custom exception dla LinkedIn CLI errors",
              "\n    def __init__(self, message: str, cli_output: str = "
            ],
            "numbers": [
              0
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 299,
          "snippet": "\n### **Test Files:**\n- **`test_linkedin_wrapper.py`** - Comprehensive test suite (Task 7.1)\n- **`test_task_7_2.py`** - Enhanced CLI parsing tests (Task 7.2)\n- **`test_task_7_3.py`** - Session validation integration tests (Task 7.3)",
          "values": {
            "strings": [],
            "numbers": [
              7,
              1,
              7,
              2,
              7,
              2,
              7,
              3,
              7,
              3
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 302,
          "snippet": "- **`test_task_7_2.py`** - Enhanced CLI parsing tests (Task 7.2)\n- **`test_task_7_3.py`** - Session validation integration tests (Task 7.3)\n- **`linkedin_wrapper.py`** - Built-in test functions\n\n### **Test Coverage:**",
          "values": {
            "strings": [],
            "numbers": [
              7,
              2,
              7,
              2,
              7,
              3,
              7,
              3
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 337,
          "snippet": "```bash\n# Task 7.1 testing\npython3 src/adapters/linkedin/test_linkedin_wrapper.py\n\n# Task 7.2 enhanced testing",
          "values": {
            "strings": [],
            "numbers": [
              7,
              1,
              3,
              7,
              2
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 340,
          "snippet": "\n# Task 7.2 enhanced testing\npython3 src/adapters/linkedin/test_task_7_2.py\n\n# Task 7.3 session validation testing",
          "values": {
            "strings": [],
            "numbers": [
              7,
              2,
              3,
              7,
              2,
              7,
              3
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 343,
          "snippet": "\n# Task 7.3 session validation testing\npython3 src/adapters/linkedin/test_task_7_3.py\n\n# Pytest (requires pytest installation)",
          "values": {
            "strings": [],
            "numbers": [
              7,
              3,
              3,
              7,
              3
            ]
          }
        },
        {
          "type": "required_elements",
          "platform": "linkedin",
          "line": 345,
          "snippet": "python3 src/adapters/linkedin/test_task_7_3.py\n\n# Pytest (requires pytest installation)\npytest src/adapters/linkedin/test_linkedin_wrapper.py -v\npytest src/adapters/linkedin/test_task_7_2.py -v",
          "values": {
            "strings": [],
            "numbers": [
              3,
              7,
              3,
              7,
              2
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 346,
          "snippet": "\n# Pytest (requires pytest installation)\npytest src/adapters/linkedin/test_linkedin_wrapper.py -v\npytest src/adapters/linkedin/test_task_7_2.py -v\npytest src/adapters/linkedin/test_task_7_3.py -v",
          "values": {
            "strings": [],
            "numbers": [
              7,
              2,
              7,
              3
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 347,
          "snippet": "# Pytest (requires pytest installation)\npytest src/adapters/linkedin/test_linkedin_wrapper.py -v\npytest src/adapters/linkedin/test_task_7_2.py -v\npytest src/adapters/linkedin/test_task_7_3.py -v\n```",
          "values": {
            "strings": [],
            "numbers": [
              7,
              2,
              7,
              3
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 348,
          "snippet": "pytest src/adapters/linkedin/test_linkedin_wrapper.py -v\npytest src/adapters/linkedin/test_task_7_2.py -v\npytest src/adapters/linkedin/test_task_7_3.py -v\n```\n",
          "values": {
            "strings": [],
            "numbers": [
              7,
              2,
              7,
              3
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 356,
          "snippet": "\n```\npublisher/src/adapters/linkedin/\n├── __init__.py                 # Module initialization\n├── linkedin_wrapper.py         # Main wrapper implementation (Tasks 7.1, 7.2 & 7.3)",
          "values": {
            "strings": [],
            "numbers": [
              7,
              1,
              7,
              2,
              7,
              3
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 358,
          "snippet": "publisher/src/adapters/linkedin/\n├── __init__.py                 # Module initialization\n├── linkedin_wrapper.py         # Main wrapper implementation (Tasks 7.1, 7.2 & 7.3)\n├── test_linkedin_wrapper.py    # Task 7.1 test suite\n├── test_task_7_2.py            # Task 7.2 enhanced tests",
          "values": {
            "strings": [],
            "numbers": [
              7,
              1,
              7,
              2,
              7,
              3,
              7,
              1,
              7,
              2
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 359,
          "snippet": "├── __init__.py                 # Module initialization\n├── linkedin_wrapper.py         # Main wrapper implementation (Tasks 7.1, 7.2 & 7.3)\n├── test_linkedin_wrapper.py    # Task 7.1 test suite\n├── test_task_7_2.py            # Task 7.2 enhanced tests\n├── test_task_7_3.py            # Task 7.3 session validation tests",
          "values": {
            "strings": [],
            "numbers": [
              7,
              1,
              7,
              2,
              7,
              3,
              7,
              1,
              7,
              2
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 369,
          "snippet": "## 🔗 **DEPENDENCIES**\n\n### **Existing LinkedIn Module:**\n- **Location**: `/Users/hretheum/dev/bezrobocie/vector-wave/linkedin`\n- **CLI Script**: `scripts/linkedin-cli.js`",
          "values": {
            "strings": [],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 370,
          "snippet": "\n### **Existing LinkedIn Module:**\n- **Location**: `/Users/hretheum/dev/bezrobocie/vector-wave/linkedin`\n- **CLI Script**: `scripts/linkedin-cli.js`\n- **Dependencies**: Node.js, npm packages (commander, stagehand, etc.)",
          "values": {
            "strings": [],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 371,
          "snippet": "### **Existing LinkedIn Module:**\n- **Location**: `/Users/hretheum/dev/bezrobocie/vector-wave/linkedin`\n- **CLI Script**: `scripts/linkedin-cli.js`\n- **Dependencies**: Node.js, npm packages (commander, stagehand, etc.)\n",
          "values": {
            "strings": [],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 390,
          "snippet": "### **Basic Usage:**\n```python\nfrom linkedin_wrapper import LinkedInModuleWrapper, LinkedInPublishRequest\n\n# Initialize wrapper",
          "values": {
            "strings": [],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 393,
          "snippet": "\n# Initialize wrapper\nwrapper = LinkedInModuleWrapper()\n\n# Test CLI availability",
          "values": {
            "strings": [],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 405,
          "snippet": "\n# Publish post\nrequest = LinkedInPublishRequest(\n    content=\"Test post from Python wrapper\",\n    account=\"default\"",
          "values": {
            "strings": [
              "Test post from Python wrapper",
              "default"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 415,
          "snippet": "```python\n# Publish with PDF and scheduling\nrequest = LinkedInPublishRequest(\n    content=\"Scheduled post with attachment\",\n    pdf_path=\"/path/to/presentation.pdf\",",
          "values": {
            "strings": [
              "Scheduled post with attachment",
              "/path/to/presentation.pdf"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 434,
          "snippet": "1. **Session Creation**: Interactive process - wrapper służy głównie do validation\n2. **Session Validation Timeout**: Some commands may timeout during validation (normal behavior)\n3. **Help Parsing**: LinkedIn CLI help output format może się zmieniać\n4. **Path Dependencies**: Wymaga existing LinkedIn module w określonej lokalizacji\n",
          "values": {
            "strings": [],
            "numbers": [
              1,
              2,
              3,
              4
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 435,
          "snippet": "2. **Session Validation Timeout**: Some commands may timeout during validation (normal behavior)\n3. **Help Parsing**: LinkedIn CLI help output format może się zmieniać\n4. **Path Dependencies**: Wymaga existing LinkedIn module w określonej lokalizacji\n\n---",
          "values": {
            "strings": [],
            "numbers": [
              2,
              3,
              4
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 464,
          "snippet": "- ✅ Session cache i monitoring infrastructure\n\n### **Task 7.4: Error Handling dla LinkedIn-Specific Issues** ⏳ **READY TO START**\n- LinkedIn-specific error categorization (partially implemented)\n- Platform-specific error recovery",
          "values": {
            "strings": [],
            "numbers": [
              7,
              4
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 465,
          "snippet": "\n### **Task 7.4: Error Handling dla LinkedIn-Specific Issues** ⏳ **READY TO START**\n- LinkedIn-specific error categorization (partially implemented)\n- Platform-specific error recovery\n- Automated diagnostics integration",
          "values": {
            "strings": [],
            "numbers": [
              7,
              4
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 470,
          "snippet": "\n### **Task 7.5-7.8: Content Adaptation & Integration** ⏳ **PENDING**\n- Content formatting dla LinkedIn\n- Media upload support\n- Orchestrator integration",
          "values": {
            "strings": [],
            "numbers": [
              7,
              5,
              7,
              8
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 477,
          "snippet": "\n**Status**: ✅ **TASKS 7.1, 7.2 & 7.3 COMPLETED SUCCESSFULLY**  \n**Next**: Ready dla Task 7.4 implementation (Error Handling dla LinkedIn-Specific Issues)  \n**Integration**: Fully enhanced wrapper ready dla Orchestrator integration\n",
          "values": {
            "strings": [],
            "numbers": [
              7,
              1,
              7,
              2,
              7,
              3,
              7,
              4
            ]
          }
        }
      ]
    },
    {
      "file": "/Users/hretheum/dev/bezrobocie/vector-wave/publisher/src/adapters/linkedin/test_task_7_2.py",
      "exists": true,
      "hits": [
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 6,
          "snippet": "\nTask 7.2 Validation:\n- Test: Wrapper wykonuje LinkedIn CLI commands i parsuje success/error responses\n- Test: Po wykonaniu `publish`, wrapper zwraca structured response z success/error status\n\"\"\"",
          "values": {
            "strings": [],
            "numbers": [
              7,
              2
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 18,
          "snippet": "sys.path.append(str(Path(__file__).parent))\n\nfrom linkedin_wrapper import LinkedInModuleWrapper, LinkedInPublishRequest, LinkedInCLIError\n\nclass TestTask72Enhanced:",
          "values": {
            "strings": [],
            "numbers": [
              72
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 26,
          "snippet": "    async def wrapper(self):\n        \"\"\"Create wrapper instance dla tests\"\"\"\n        return LinkedInModuleWrapper()\n    \n    @pytest.mark.asyncio",
          "values": {
            "strings": [
              "Create wrapper instance dla tests"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 33,
          "snippet": "        Task 7.2: Enhanced help command parsing\n        \"\"\"\n        wrapper = LinkedInModuleWrapper()\n        \n        # Execute enhanced help",
          "values": {
            "strings": [],
            "numbers": [
              7,
              2
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 54,
          "snippet": "        Task 7.2: Enhanced session list parsing z comprehensive information\n        \"\"\"\n        wrapper = LinkedInModuleWrapper()\n        \n        try:",
          "values": {
            "strings": [],
            "numbers": [
              7,
              2
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 83,
          "snippet": "        Task 7.2: Enhanced diagnostics parsing z detailed selector status\n        \"\"\"\n        wrapper = LinkedInModuleWrapper()\n        \n        try:",
          "values": {
            "strings": [],
            "numbers": [
              7,
              2
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 111,
          "snippet": "        Task 7.2: Test unified enhanced command execution\n        \"\"\"\n        wrapper = LinkedInModuleWrapper()\n        \n        # Test enhanced command execution",
          "values": {
            "strings": [],
            "numbers": [
              7,
              2
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 133,
          "snippet": "        Task 7.2: Test structured response format consistency\n        \"\"\"\n        wrapper = LinkedInModuleWrapper()\n        \n        # Test multiple commands dla consistency",
          "values": {
            "strings": [],
            "numbers": [
              7,
              2
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 163,
          "snippet": "        Task 7.2: Test error categorization dla different error types\n        \"\"\"\n        wrapper = LinkedInModuleWrapper()\n        \n        # Test error categorization with various outputs",
          "values": {
            "strings": [],
            "numbers": [
              7,
              2
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 189,
          "snippet": "        Note: This test may fail without valid session, but tests response structure\n        \"\"\"\n        wrapper = LinkedInModuleWrapper()\n        \n        # Create test publish request",
          "values": {
            "strings": [],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 192,
          "snippet": "        \n        # Create test publish request\n        request = LinkedInPublishRequest(\n            content=\"Test post for Task 7.2 validation\",\n            account=\"default\"",
          "values": {
            "strings": [
              "Test post for Task 7.2 validation",
              "default"
            ],
            "numbers": [
              7,
              2
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 230,
          "snippet": "    \n    try:\n        wrapper = LinkedInModuleWrapper()\n        \n        # Test 1: Enhanced help parsing",
          "values": {
            "strings": [],
            "numbers": [
              1
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 291,
          "snippet": "        # Test 6: Publish response structure (may fail without session)\n        print(\"\\n6️⃣ Testing publish response structure...\")\n        request = LinkedInPublishRequest(\n            content=\"Test post for Task 7.2\",\n            account=\"default\"",
          "values": {
            "strings": [
              "\\n6️⃣ Testing publish response structure...",
              "Test post for Task 7.2",
              "default"
            ],
            "numbers": [
              6,
              6,
              7,
              2
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 308,
          "snippet": "        print(\"\\n\" + \"=\" * 60)\n        print(\"🎉 TASK 7.2 VALIDATION COMPLETED SUCCESSFULLY!\")\n        print(\"✅ Wrapper wykonuje LinkedIn CLI commands i parsuje success/error responses\")\n        print(\"✅ Structured response format z comprehensive parsing\")\n        print(\"✅ Enhanced error categorization i recovery suggestions\")",
          "values": {
            "strings": [
              "\\n",
              " * 60)\n        print(",
              ")\n        print(",
              ")\n        print(",
              ")\n        print("
            ],
            "numbers": [
              60,
              7,
              2
            ]
          }
        }
      ]
    },
    {
      "file": "/Users/hretheum/dev/bezrobocie/vector-wave/publisher/src/adapters/linkedin/session_health_monitor.py",
      "exists": true,
      "hits": [
        {
          "type": "required_elements",
          "platform": "linkedin",
          "line": 91,
          "snippet": "    \n    # Platform-specific settings\n    requires_manual_login: bool = Field(default=True, description=\"Whether platform requires manual login\")\n    session_duration_hours: Optional[int] = Field(default=None, description=\"Expected session duration\")\n    supports_headless: bool = Field(default=False, description=\"Whether platform supports headless browsing\")",
          "values": {
            "strings": [
              "Whether platform requires manual login",
              "Expected session duration",
              "Whether platform supports headless browsing"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 118,
          "snippet": "        # Platform adapters endpoints\n        self.platform_urls = {\n            \"linkedin\": \"http://localhost:8088\",\n            \"twitter\": \"http://localhost:8083\",   # API-based, no sessions\n            \"ghost\": \"http://localhost:8086\",     # API-based, no sessions  ",
          "values": {
            "strings": [
              "linkedin",
              "http://localhost:8088",
              "twitter",
              "http://localhost:8083",
              "ghost",
              "http://localhost:8086"
            ],
            "numbers": [
              8088,
              8083,
              8086
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 119,
          "snippet": "        self.platform_urls = {\n            \"linkedin\": \"http://localhost:8088\",\n            \"twitter\": \"http://localhost:8083\",   # API-based, no sessions\n            \"ghost\": \"http://localhost:8086\",     # API-based, no sessions  \n            \"beehiiv\": \"http://localhost:8084\"    # API-based, no sessions",
          "values": {
            "strings": [
              "linkedin",
              "http://localhost:8088",
              "twitter",
              "http://localhost:8083",
              "ghost",
              "http://localhost:8086",
              "beehiiv",
              "http://localhost:8084"
            ],
            "numbers": [
              8088,
              8083,
              8086,
              8084
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 120,
          "snippet": "            \"linkedin\": \"http://localhost:8088\",\n            \"twitter\": \"http://localhost:8083\",   # API-based, no sessions\n            \"ghost\": \"http://localhost:8086\",     # API-based, no sessions  \n            \"beehiiv\": \"http://localhost:8084\"    # API-based, no sessions\n        }",
          "values": {
            "strings": [
              "linkedin",
              "http://localhost:8088",
              "twitter",
              "http://localhost:8083",
              "ghost",
              "http://localhost:8086",
              "beehiiv",
              "http://localhost:8084"
            ],
            "numbers": [
              8088,
              8083,
              8086,
              8084
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 121,
          "snippet": "            \"twitter\": \"http://localhost:8083\",   # API-based, no sessions\n            \"ghost\": \"http://localhost:8086\",     # API-based, no sessions  \n            \"beehiiv\": \"http://localhost:8084\"    # API-based, no sessions\n        }\n        ",
          "values": {
            "strings": [
              "twitter",
              "http://localhost:8083",
              "ghost",
              "http://localhost:8086",
              "beehiiv",
              "http://localhost:8084"
            ],
            "numbers": [
              8083,
              8086,
              8084
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 132,
          "snippet": "        \"\"\"Setup default session configurations for known platforms\"\"\"\n        \n        # LinkedIn - primary browser-based platform\n        self.platform_configs[\"linkedin\"] = PlatformSessionConfig(\n            platform=\"linkedin\",",
          "values": {
            "strings": [
              "Setup default session configurations for known platforms",
              "\n        \n        # LinkedIn - primary browser-based platform\n        self.platform_configs[",
              "] = PlatformSessionConfig(\n            platform="
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 133,
          "snippet": "        \n        # LinkedIn - primary browser-based platform\n        self.platform_configs[\"linkedin\"] = PlatformSessionConfig(\n            platform=\"linkedin\",\n            check_interval_minutes=5,",
          "values": {
            "strings": [
              "linkedin",
              "linkedin"
            ],
            "numbers": [
              5
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 134,
          "snippet": "        # LinkedIn - primary browser-based platform\n        self.platform_configs[\"linkedin\"] = PlatformSessionConfig(\n            platform=\"linkedin\",\n            check_interval_minutes=5,\n            health_threshold=0.7,",
          "values": {
            "strings": [
              "linkedin",
              "linkedin"
            ],
            "numbers": [
              5,
              0,
              7
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 139,
          "snippet": "            expiration_warning_hours=24,\n            expiration_critical_hours=2,\n            auto_refresh=False,  # LinkedIn requires manual login\n            refresh_threshold=0.3,\n            requires_manual_login=True,",
          "values": {
            "strings": [],
            "numbers": [
              24,
              2,
              0,
              3
            ]
          }
        },
        {
          "type": "required_elements",
          "platform": "linkedin",
          "line": 141,
          "snippet": "            auto_refresh=False,  # LinkedIn requires manual login\n            refresh_threshold=0.3,\n            requires_manual_login=True,\n            session_duration_hours=168,  # ~7 days typical\n            supports_headless=True",
          "values": {
            "strings": [],
            "numbers": [
              0,
              3,
              168,
              7
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 146,
          "snippet": "        )\n        \n        # Twitter - API-based but may have session components\n        self.platform_configs[\"twitter\"] = PlatformSessionConfig(\n            platform=\"twitter\",",
          "values": {
            "strings": [
              "twitter",
              "twitter"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 147,
          "snippet": "        \n        # Twitter - API-based but may have session components\n        self.platform_configs[\"twitter\"] = PlatformSessionConfig(\n            platform=\"twitter\",\n            check_interval_minutes=15,  # Less frequent for API",
          "values": {
            "strings": [
              "twitter",
              "twitter"
            ],
            "numbers": [
              15
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 148,
          "snippet": "        # Twitter - API-based but may have session components\n        self.platform_configs[\"twitter\"] = PlatformSessionConfig(\n            platform=\"twitter\",\n            check_interval_minutes=15,  # Less frequent for API\n            health_threshold=0.8,",
          "values": {
            "strings": [
              "twitter",
              "twitter"
            ],
            "numbers": [
              15,
              0,
              8
            ]
          }
        },
        {
          "type": "required_elements",
          "platform": "linkedin",
          "line": 154,
          "snippet": "            expiration_critical_hours=24,\n            auto_refresh=False,\n            requires_manual_login=False,  # Uses API keys\n            supports_headless=True\n        )",
          "values": {
            "strings": [],
            "numbers": [
              24
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 158,
          "snippet": "        )\n        \n        # Ghost - API-based\n        self.platform_configs[\"ghost\"] = PlatformSessionConfig(\n            platform=\"ghost\", ",
          "values": {
            "strings": [
              "ghost",
              "ghost"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 159,
          "snippet": "        \n        # Ghost - API-based\n        self.platform_configs[\"ghost\"] = PlatformSessionConfig(\n            platform=\"ghost\", \n            check_interval_minutes=30,  # Even less frequent",
          "values": {
            "strings": [
              "ghost",
              "ghost"
            ],
            "numbers": [
              30
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 160,
          "snippet": "        # Ghost - API-based\n        self.platform_configs[\"ghost\"] = PlatformSessionConfig(\n            platform=\"ghost\", \n            check_interval_minutes=30,  # Even less frequent\n            health_threshold=0.9,",
          "values": {
            "strings": [
              "ghost",
              "ghost"
            ],
            "numbers": [
              30,
              0,
              9
            ]
          }
        },
        {
          "type": "required_elements",
          "platform": "linkedin",
          "line": 166,
          "snippet": "            expiration_critical_hours=24,\n            auto_refresh=False,\n            requires_manual_login=False,\n            supports_headless=True\n        )",
          "values": {
            "strings": [],
            "numbers": [
              24
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 170,
          "snippet": "        )\n        \n        # Beehiiv - API-based\n        self.platform_configs[\"beehiiv\"] = PlatformSessionConfig(\n            platform=\"beehiiv\",",
          "values": {
            "strings": [
              "beehiiv",
              "beehiiv"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 171,
          "snippet": "        \n        # Beehiiv - API-based\n        self.platform_configs[\"beehiiv\"] = PlatformSessionConfig(\n            platform=\"beehiiv\",\n            check_interval_minutes=60,  # Least frequent",
          "values": {
            "strings": [
              "beehiiv",
              "beehiiv"
            ],
            "numbers": [
              60
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 172,
          "snippet": "        # Beehiiv - API-based\n        self.platform_configs[\"beehiiv\"] = PlatformSessionConfig(\n            platform=\"beehiiv\",\n            check_interval_minutes=60,  # Least frequent\n            health_threshold=0.9, ",
          "values": {
            "strings": [
              "beehiiv",
              "beehiiv"
            ],
            "numbers": [
              60,
              0,
              9
            ]
          }
        },
        {
          "type": "required_elements",
          "platform": "linkedin",
          "line": 178,
          "snippet": "            expiration_critical_hours=168,  # 7 days\n            auto_refresh=False,\n            requires_manual_login=False,\n            supports_headless=True\n        )",
          "values": {
            "strings": [],
            "numbers": [
              168,
              7
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 205,
          "snippet": "            # Call platform-specific session validation\n            async with httpx.AsyncClient(timeout=10.0) as client:\n                if platform == \"linkedin\":\n                    # LinkedIn has comprehensive session validation\n                    url = f\"{self.platform_urls[platform]}/session/validate\"",
          "values": {
            "strings": [
              "linkedin",
              "{self.platform_urls[platform]}/session/validate"
            ],
            "numbers": [
              10,
              0
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 206,
          "snippet": "            async with httpx.AsyncClient(timeout=10.0) as client:\n                if platform == \"linkedin\":\n                    # LinkedIn has comprehensive session validation\n                    url = f\"{self.platform_urls[platform]}/session/validate\"\n                    response = await client.post(url, json={",
          "values": {
            "strings": [
              "linkedin",
              "{self.platform_urls[platform]}/session/validate"
            ],
            "numbers": [
              10,
              0
            ]
          }
        },
        {
          "type": "required_elements",
          "platform": "linkedin",
          "line": 210,
          "snippet": "                    response = await client.post(url, json={\n                        \"account\": account,\n                        \"include_diagnostics\": True\n                    })\n                    ",
          "values": {
            "strings": [
              "account",
              "include_diagnostics"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 215,
          "snippet": "                    if response.status_code == 200:\n                        data = response.json()\n                        result = self._parse_linkedin_session_response(data, account)\n                    else:\n                        result = SessionValidationResult(",
          "values": {
            "strings": [],
            "numbers": [
              200
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 279,
          "snippet": "            return result\n    \n    def _parse_linkedin_session_response(self, data: Dict[str, Any], account: str) -> SessionValidationResult:\n        \"\"\"Parse LinkedIn session validation response\"\"\"\n        # LinkedIn returns structured session data",
          "values": {
            "strings": [
              "Parse LinkedIn session validation response"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 280,
          "snippet": "    \n    def _parse_linkedin_session_response(self, data: Dict[str, Any], account: str) -> SessionValidationResult:\n        \"\"\"Parse LinkedIn session validation response\"\"\"\n        # LinkedIn returns structured session data\n        is_valid = data.get(\"session_valid\", False)",
          "values": {
            "strings": [
              "Parse LinkedIn session validation response",
              "\n        # LinkedIn returns structured session data\n        is_valid = data.get("
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 281,
          "snippet": "    def _parse_linkedin_session_response(self, data: Dict[str, Any], account: str) -> SessionValidationResult:\n        \"\"\"Parse LinkedIn session validation response\"\"\"\n        # LinkedIn returns structured session data\n        is_valid = data.get(\"session_valid\", False)\n        health_score = data.get(\"health_score\", 0.0)",
          "values": {
            "strings": [
              "Parse LinkedIn session validation response",
              "\n        # LinkedIn returns structured session data\n        is_valid = data.get(",
              ", False)\n        health_score = data.get("
            ],
            "numbers": [
              0,
              0
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 295,
          "snippet": "        \n        return SessionValidationResult(\n            platform=\"linkedin\",\n            account=account,\n            is_valid=is_valid,",
          "values": {
            "strings": [
              "linkedin"
            ],
            "numbers": []
          }
        },
        {
          "type": "required_elements",
          "platform": "linkedin",
          "line": 437,
          "snippet": "        \n        if result.health_score < config.refresh_threshold:\n            if config.requires_manual_login:\n                recommendations.extend([\n                    \"URGENT: Manual session recreation required\",",
          "values": {
            "strings": [
              "URGENT: Manual session recreation required"
            ],
            "numbers": []
          }
        },
        {
          "type": "required_elements",
          "platform": "linkedin",
          "line": 439,
          "snippet": "            if config.requires_manual_login:\n                recommendations.extend([\n                    \"URGENT: Manual session recreation required\",\n                    f\"Login to {result.platform} manually\",\n                    \"Verify credentials and account status\",",
          "values": {
            "strings": [
              "URGENT: Manual session recreation required",
              "Login to {result.platform} manually",
              "Verify credentials and account status"
            ],
            "numbers": []
          }
        },
        {
          "type": "required_elements",
          "platform": "linkedin",
          "line": 466,
          "snippet": "        recommendations = []\n        \n        if config.requires_manual_login:\n            recommendations.extend([\n                f\"Schedule manual login to {result.platform}\",",
          "values": {
            "strings": [
              "Schedule manual login to {result.platform}"
            ],
            "numbers": []
          }
        }
      ]
    },
    {
      "file": "/Users/hretheum/dev/bezrobocie/vector-wave/publisher/src/adapters/linkedin/test_task_7_3.py",
      "exists": true,
      "hits": [
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 6,
          "snippet": "\nTask 7.3 Validation:\n- Test: Wrapper sprawdza status LinkedIn session przed publikacją\n- Test: `validate_session()` zwraca poprawny status dla aktywnych i wygasłych sesji\n\"\"\"",
          "values": {
            "strings": [],
            "numbers": [
              7,
              3
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 19,
          "snippet": "sys.path.append(str(Path(__file__).parent))\n\nfrom linkedin_wrapper import (\n    LinkedInModuleWrapper, \n    LinkedInPublishRequest, ",
          "values": {
            "strings": [],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 20,
          "snippet": "\nfrom linkedin_wrapper import (\n    LinkedInModuleWrapper, \n    LinkedInPublishRequest, \n    SessionValidationResult,",
          "values": {
            "strings": [],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 21,
          "snippet": "from linkedin_wrapper import (\n    LinkedInModuleWrapper, \n    LinkedInPublishRequest, \n    SessionValidationResult,\n    SessionHealthMonitor,",
          "values": {
            "strings": [],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 24,
          "snippet": "    SessionValidationResult,\n    SessionHealthMonitor,\n    LinkedInCLIError\n)\n",
          "values": {
            "strings": [],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 33,
          "snippet": "    async def wrapper(self):\n        \"\"\"Create wrapper instance dla tests\"\"\"\n        return LinkedInModuleWrapper()\n    \n    @pytest.mark.asyncio",
          "values": {
            "strings": [
              "Create wrapper instance dla tests"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 40,
          "snippet": "        Task 7.3: Test comprehensive session validation functionality\n        \"\"\"\n        wrapper = LinkedInModuleWrapper()\n        \n        try:",
          "values": {
            "strings": [],
            "numbers": [
              7,
              3
            ]
          }
        },
        {
          "type": "required_elements",
          "platform": "linkedin",
          "line": 44,
          "snippet": "        try:\n            # Test comprehensive session validation\n            result = await wrapper.validate_session_comprehensive(\"default\", include_diagnostics=False)\n            \n            # Verify comprehensive validation result structure",
          "values": {
            "strings": [
              "default"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 78,
          "snippet": "        Task 7.3: Test ensure valid session przed publikacją\n        \"\"\"\n        wrapper = LinkedInModuleWrapper()\n        \n        try:",
          "values": {
            "strings": [],
            "numbers": [
              7,
              3
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 108,
          "snippet": "        Task 7.3: Test session health monitoring setup\n        \"\"\"\n        wrapper = LinkedInModuleWrapper()\n        \n        try:",
          "values": {
            "strings": [],
            "numbers": [
              7,
              3
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 150,
          "snippet": "        Task 7.3: Test session health score calculation logic\n        \"\"\"\n        wrapper = LinkedInModuleWrapper()\n        \n        # Test health score calculation z different scenarios",
          "values": {
            "strings": [],
            "numbers": [
              7,
              3
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 193,
          "snippet": "        Task 7.3: Test session recommendations generation\n        \"\"\"\n        wrapper = LinkedInModuleWrapper()\n        \n        # Test recommendation generation z different result states",
          "values": {
            "strings": [],
            "numbers": [
              7,
              3
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 234,
          "snippet": "        Task 7.3: Test publish post z session validation integration\n        \"\"\"\n        wrapper = LinkedInModuleWrapper()\n        \n        # Create test publish request",
          "values": {
            "strings": [],
            "numbers": [
              7,
              3
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 237,
          "snippet": "        \n        # Create test publish request\n        request = LinkedInPublishRequest(\n            content=\"Test post z Task 7.3 session validation\",\n            account=\"default\"",
          "values": {
            "strings": [
              "Test post z Task 7.3 session validation",
              "default"
            ],
            "numbers": [
              7,
              3
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 278,
          "snippet": "        Task 7.3: Test session validation cache functionality\n        \"\"\"\n        wrapper = LinkedInModuleWrapper()\n        \n        try:",
          "values": {
            "strings": [],
            "numbers": [
              7,
              3
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 304,
          "snippet": "    \"\"\"\n    Complete Task 7.3 validation\n    Test: Wrapper sprawdza status LinkedIn session przed publikacją\n    \"\"\"\n    print(\"🧪 TASK 7.3 VALIDATION - Session Validation Integration\")",
          "values": {
            "strings": [
              "\n    Complete Task 7.3 validation\n    Test: Wrapper sprawdza status LinkedIn session przed publikacją\n    ",
              "\n    print("
            ],
            "numbers": [
              7,
              3,
              7,
              3
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 310,
          "snippet": "    \n    try:\n        wrapper = LinkedInModuleWrapper()\n        \n        # Test 1: Comprehensive session validation",
          "values": {
            "strings": [],
            "numbers": [
              1
            ]
          }
        },
        {
          "type": "required_elements",
          "platform": "linkedin",
          "line": 315,
          "snippet": "        print(\"\\n1️⃣ Testing comprehensive session validation...\")\n        try:\n            result = await wrapper.validate_session_comprehensive(\"default\", include_diagnostics=False)\n            print(f\"   ✅ Comprehensive validation works\")\n            print(f\"   📊 Account: {result.account}\")",
          "values": {
            "strings": [
              "\\n1️⃣ Testing comprehensive session validation...",
              "default",
              "   ✅ Comprehensive validation works",
              "   📊 Account: {result.account}"
            ],
            "numbers": [
              1
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 384,
          "snippet": "        # Test 6: Publish z session validation\n        print(\"\\n6️⃣ Testing publish z session validation integration...\")\n        request = LinkedInPublishRequest(\n            content=\"Test post dla Task 7.3 validation\",\n            account=\"default\"",
          "values": {
            "strings": [
              "\\n6️⃣ Testing publish z session validation integration...",
              "Test post dla Task 7.3 validation",
              "default"
            ],
            "numbers": [
              6,
              6,
              7,
              3
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 406,
          "snippet": "        print(\"\\n\" + \"=\" * 65)\n        print(\"🎉 TASK 7.3 VALIDATION COMPLETED SUCCESSFULLY!\")\n        print(\"✅ Wrapper sprawdza status LinkedIn session przed publikacją\")\n        print(\"✅ validate_session() zwraca poprawny status dla różnych stanów sesji\")\n        print(\"✅ Comprehensive session validation z health scoring\")",
          "values": {
            "strings": [
              "\\n",
              " * 65)\n        print(",
              ")\n        print(",
              ")\n        print(",
              ")\n        print("
            ],
            "numbers": [
              65,
              7,
              3
            ]
          }
        }
      ]
    },
    {
      "file": "/Users/hretheum/dev/bezrobocie/vector-wave/publisher/src/adapters/linkedin/main.py",
      "exists": true,
      "hits": [
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 2,
          "snippet": "\"\"\"\nLinkedIn Adapter - FastAPI Application\nMikroserwis do publikacji treści na LinkedIn przez Node.js CLI\n",
          "values": {
            "strings": [],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 3,
          "snippet": "\"\"\"\nLinkedIn Adapter - FastAPI Application\nMikroserwis do publikacji treści na LinkedIn przez Node.js CLI\n\nIntegracja z LinkedInModuleWrapper (Tasks 7.1-7.8)",
          "values": {
            "strings": [],
            "numbers": [
              7,
              1,
              7,
              8
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 5,
          "snippet": "Mikroserwis do publikacji treści na LinkedIn przez Node.js CLI\n\nIntegracja z LinkedInModuleWrapper (Tasks 7.1-7.8)\n- FastAPI application z pełną funkcjonalnością LinkedIn\n- Integration z Orchestrator",
          "values": {
            "strings": [],
            "numbers": [
              7,
              1,
              7,
              8
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 6,
          "snippet": "\nIntegracja z LinkedInModuleWrapper (Tasks 7.1-7.8)\n- FastAPI application z pełną funkcjonalnością LinkedIn\n- Integration z Orchestrator\n- Prometheus metrics",
          "values": {
            "strings": [],
            "numbers": [
              7,
              1,
              7,
              8
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 23,
          "snippet": "\nfrom models import (\n    LinkedInPublishRequest, LinkedInPublishResponse, LinkedInHealthResponse,\n    LinkedInConfigResponse, LinkedInScheduledPostsResponse, LinkedInMediaUploadRequest,\n    LinkedInMediaUploadResponse, LinkedInErrorResponse",
          "values": {
            "strings": [],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 24,
          "snippet": "from models import (\n    LinkedInPublishRequest, LinkedInPublishResponse, LinkedInHealthResponse,\n    LinkedInConfigResponse, LinkedInScheduledPostsResponse, LinkedInMediaUploadRequest,\n    LinkedInMediaUploadResponse, LinkedInErrorResponse\n)",
          "values": {
            "strings": [],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 25,
          "snippet": "    LinkedInPublishRequest, LinkedInPublishResponse, LinkedInHealthResponse,\n    LinkedInConfigResponse, LinkedInScheduledPostsResponse, LinkedInMediaUploadRequest,\n    LinkedInMediaUploadResponse, LinkedInErrorResponse\n)\nfrom linkedin_wrapper import LinkedInModuleWrapper, LinkedInErrorType, LinkedInErrorSeverity, LinkedInPublishRequest as WrapperPublishRequest",
          "values": {
            "strings": [],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 27,
          "snippet": "    LinkedInMediaUploadResponse, LinkedInErrorResponse\n)\nfrom linkedin_wrapper import LinkedInModuleWrapper, LinkedInErrorType, LinkedInErrorSeverity, LinkedInPublishRequest as WrapperPublishRequest\nfrom prometheus_metrics import (\n    linkedin_metrics, track_publication_metrics, track_http_metrics,",
          "values": {
            "strings": [],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 29,
          "snippet": "from linkedin_wrapper import LinkedInModuleWrapper, LinkedInErrorType, LinkedInErrorSeverity, LinkedInPublishRequest as WrapperPublishRequest\nfrom prometheus_metrics import (\n    linkedin_metrics, track_publication_metrics, track_http_metrics,\n    track_session_metrics, track_error_metrics, track_media_metrics,\n    track_content_metrics, CONTENT_TYPE_LATEST",
          "values": {
            "strings": [],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 48,
          "snippet": "logger = logging.getLogger(__name__)\n\n# Task 5.3: Retry configuration for LinkedIn Adapter\nclass RetryConfig:\n    MAX_RETRIES = 3",
          "values": {
            "strings": [],
            "numbers": [
              5,
              3,
              3
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 55,
          "snippet": "    MAX_DELAY = 30.0  # seconds\n    \n    # LinkedIn-specific retryable errors\n    RETRYABLE_ERRORS = {\n        LinkedInErrorType.NETWORK_TIMEOUT,",
          "values": {
            "strings": [],
            "numbers": [
              30,
              0
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 57,
          "snippet": "    # LinkedIn-specific retryable errors\n    RETRYABLE_ERRORS = {\n        LinkedInErrorType.NETWORK_TIMEOUT,\n        LinkedInErrorType.CONNECTION_FAILED,\n        LinkedInErrorType.RATE_LIMITED,",
          "values": {
            "strings": [],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 58,
          "snippet": "    RETRYABLE_ERRORS = {\n        LinkedInErrorType.NETWORK_TIMEOUT,\n        LinkedInErrorType.CONNECTION_FAILED,\n        LinkedInErrorType.RATE_LIMITED,\n        LinkedInErrorType.ELEMENT_NOT_CLICKABLE",
          "values": {
            "strings": [],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 59,
          "snippet": "        LinkedInErrorType.NETWORK_TIMEOUT,\n        LinkedInErrorType.CONNECTION_FAILED,\n        LinkedInErrorType.RATE_LIMITED,\n        LinkedInErrorType.ELEMENT_NOT_CLICKABLE\n    }",
          "values": {
            "strings": [],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 60,
          "snippet": "        LinkedInErrorType.CONNECTION_FAILED,\n        LinkedInErrorType.RATE_LIMITED,\n        LinkedInErrorType.ELEMENT_NOT_CLICKABLE\n    }\n",
          "values": {
            "strings": [],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 65,
          "snippet": "# FastAPI application\napp = FastAPI(\n    title=\"LinkedIn Adapter\",\n    description=\"Mikroserwis do publikacji treści na LinkedIn przez Node.js CLI\",\n    version=\"1.0.0\",",
          "values": {
            "strings": [
              "LinkedIn Adapter",
              "Mikroserwis do publikacji treści na LinkedIn przez Node.js CLI",
              "1.0.0"
            ],
            "numbers": [
              1,
              0,
              0
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 66,
          "snippet": "app = FastAPI(\n    title=\"LinkedIn Adapter\",\n    description=\"Mikroserwis do publikacji treści na LinkedIn przez Node.js CLI\",\n    version=\"1.0.0\",\n    docs_url=\"/docs\",",
          "values": {
            "strings": [
              "LinkedIn Adapter",
              "Mikroserwis do publikacji treści na LinkedIn przez Node.js CLI",
              "1.0.0",
              "/docs"
            ],
            "numbers": [
              1,
              0,
              0
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 72,
          "snippet": ")\n\n# Global LinkedIn wrapper instance\nlinkedin_wrapper: Optional[LinkedInModuleWrapper] = None\n",
          "values": {
            "strings": [],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 73,
          "snippet": "\n# Global LinkedIn wrapper instance\nlinkedin_wrapper: Optional[LinkedInModuleWrapper] = None\n\n@app.on_event(\"startup\")",
          "values": {
            "strings": [
              "startup"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 77,
          "snippet": "@app.on_event(\"startup\")\nasync def startup_event():\n    \"\"\"Initialize LinkedIn wrapper on startup\"\"\"\n    global linkedin_wrapper\n    ",
          "values": {
            "strings": [
              "startup",
              "Initialize LinkedIn wrapper on startup"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 78,
          "snippet": "async def startup_event():\n    \"\"\"Initialize LinkedIn wrapper on startup\"\"\"\n    global linkedin_wrapper\n    \n    try:",
          "values": {
            "strings": [
              "Initialize LinkedIn wrapper on startup"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 81,
          "snippet": "    \n    try:\n        # Initialize LinkedIn wrapper\n        linkedin_wrapper = LinkedInModuleWrapper()\n        ",
          "values": {
            "strings": [],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 82,
          "snippet": "    try:\n        # Initialize LinkedIn wrapper\n        linkedin_wrapper = LinkedInModuleWrapper()\n        \n        # Test CLI availability",
          "values": {
            "strings": [],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 85,
          "snippet": "        \n        # Test CLI availability\n        cli_available = await linkedin_wrapper.test_cli_availability()\n        linkedin_metrics.track_cli_availability(cli_available)\n        ",
          "values": {
            "strings": [],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 86,
          "snippet": "        # Test CLI availability\n        cli_available = await linkedin_wrapper.test_cli_availability()\n        linkedin_metrics.track_cli_availability(cli_available)\n        \n        if cli_available:",
          "values": {
            "strings": [],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 89,
          "snippet": "        \n        if cli_available:\n            logger.info(\"✅ LinkedIn Adapter initialized successfully\")\n        else:\n            logger.warning(\"⚠️ LinkedIn CLI not available - running in degraded mode\")",
          "values": {
            "strings": [
              "✅ LinkedIn Adapter initialized successfully",
              "⚠️ LinkedIn CLI not available - running in degraded mode"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 91,
          "snippet": "            logger.info(\"✅ LinkedIn Adapter initialized successfully\")\n        else:\n            logger.warning(\"⚠️ LinkedIn CLI not available - running in degraded mode\")\n            \n    except Exception as e:",
          "values": {
            "strings": [
              "✅ LinkedIn Adapter initialized successfully",
              "⚠️ LinkedIn CLI not available - running in degraded mode"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 94,
          "snippet": "            \n    except Exception as e:\n        logger.error(f\"❌ Failed to initialize LinkedIn Adapter: {e}\")\n        linkedin_metrics.track_cli_availability(False)\n",
          "values": {
            "strings": [
              "❌ Failed to initialize LinkedIn Adapter: {e}"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 95,
          "snippet": "    except Exception as e:\n        logger.error(f\"❌ Failed to initialize LinkedIn Adapter: {e}\")\n        linkedin_metrics.track_cli_availability(False)\n\n",
          "values": {
            "strings": [
              "❌ Failed to initialize LinkedIn Adapter: {e}"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 102,
          "snippet": "    \"\"\"Root endpoint z informacjami o serwisie\"\"\"\n    return {\n        \"service\": \"LinkedIn Adapter\",\n        \"status\": \"running\",\n        \"version\": \"1.0.0\",",
          "values": {
            "strings": [
              "Root endpoint z informacjami o serwisie",
              "\n    return {\n        ",
              ": ",
              ",\n        ",
              ": ",
              ",\n        ",
              ": "
            ],
            "numbers": [
              1,
              0,
              0
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 105,
          "snippet": "        \"status\": \"running\",\n        \"version\": \"1.0.0\",\n        \"description\": \"Mikroserwis do publikacji treści na LinkedIn\",\n        \"endpoints\": {\n            \"publish\": \"POST /publish - Publikuj post na LinkedIn\",",
          "values": {
            "strings": [
              "status",
              "running",
              "version",
              "1.0.0",
              "description",
              "Mikroserwis do publikacji treści na LinkedIn",
              "endpoints",
              "publish",
              "POST /publish - Publikuj post na LinkedIn"
            ],
            "numbers": [
              1,
              0,
              0
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 107,
          "snippet": "        \"description\": \"Mikroserwis do publikacji treści na LinkedIn\",\n        \"endpoints\": {\n            \"publish\": \"POST /publish - Publikuj post na LinkedIn\",\n            \"health\": \"GET /health - Status serwisu\",\n            \"config\": \"GET /config - Konfiguracja LinkedIn\",",
          "values": {
            "strings": [
              "description",
              "Mikroserwis do publikacji treści na LinkedIn",
              "endpoints",
              "publish",
              "POST /publish - Publikuj post na LinkedIn",
              "health",
              "GET /health - Status serwisu",
              "config",
              "GET /config - Konfiguracja LinkedIn"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 109,
          "snippet": "            \"publish\": \"POST /publish - Publikuj post na LinkedIn\",\n            \"health\": \"GET /health - Status serwisu\",\n            \"config\": \"GET /config - Konfiguracja LinkedIn\",\n            \"scheduled\": \"GET /scheduled/{account} - Zaplanowane posty\",\n            \"upload\": \"POST /upload - Upload mediów\",",
          "values": {
            "strings": [
              "publish",
              "POST /publish - Publikuj post na LinkedIn",
              "health",
              "GET /health - Status serwisu",
              "config",
              "GET /config - Konfiguracja LinkedIn",
              "scheduled",
              "GET /scheduled/{account} - Zaplanowane posty",
              "upload",
              "POST /upload - Upload mediów"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 129,
          "snippet": "\n\n@app.post(\"/publish\", response_model=LinkedInPublishResponse)\n@track_http_metrics(\"POST\", \"/publish\")\nasync def publish_content(request: LinkedInPublishRequest):",
          "values": {
            "strings": [
              "/publish",
              "POST",
              "/publish"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 131,
          "snippet": "@app.post(\"/publish\", response_model=LinkedInPublishResponse)\n@track_http_metrics(\"POST\", \"/publish\")\nasync def publish_content(request: LinkedInPublishRequest):\n    \"\"\"\n    Publikacja treści na LinkedIn",
          "values": {
            "strings": [
              "/publish",
              "POST",
              "/publish"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 133,
          "snippet": "async def publish_content(request: LinkedInPublishRequest):\n    \"\"\"\n    Publikacja treści na LinkedIn\n    \n    Integruje wszystkie funkcjonalności LinkedInModuleWrapper:",
          "values": {
            "strings": [],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 135,
          "snippet": "    Publikacja treści na LinkedIn\n    \n    Integruje wszystkie funkcjonalności LinkedInModuleWrapper:\n    - Content adaptation (Task 7.5)\n    - Scheduling (Task 7.6) ",
          "values": {
            "strings": [],
            "numbers": [
              7,
              5,
              7,
              6
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 144,
          "snippet": "    start_time = time.time()\n    \n    if not linkedin_wrapper:\n        raise HTTPException(\n            status_code=503,",
          "values": {
            "strings": [],
            "numbers": [
              503
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 147,
          "snippet": "        raise HTTPException(\n            status_code=503,\n            detail=\"LinkedIn Adapter not initialized\"\n        )\n    ",
          "values": {
            "strings": [
              "LinkedIn Adapter not initialized"
            ],
            "numbers": [
              503
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 151,
          "snippet": "    \n    try:\n        logger.info(f\"[LinkedIn Adapter] Publishing content dla account: {request.account}\")\n        \n        # Convert to wrapper request format",
          "values": {
            "strings": [
              "[LinkedIn Adapter] Publishing content dla account: {request.account}"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 166,
          "snippet": "        # Handle media upload if provided\n        if request.media_files:\n            logger.info(f\"[LinkedIn Adapter] Publishing z {len(request.media_files)} media files\")\n            \n            # Use publish_with_media dla multi-media posts",
          "values": {
            "strings": [
              "[LinkedIn Adapter] Publishing z {len(request.media_files)} media files"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 177,
          "snippet": "            }\n            \n            wrapper_response = await linkedin_wrapper.publish_with_media(\n                request.content,\n                request.media_files,",
          "values": {
            "strings": [],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 185,
          "snippet": "        else:\n            # Standard publish\n            wrapper_response = await linkedin_wrapper.publish_post(wrapper_request)\n        \n        # Track metrics",
          "values": {
            "strings": [],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 214,
          "snippet": "        \n        # Convert wrapper response to API response\n        response = LinkedInPublishResponse(\n            success=wrapper_response.success,\n            post_url=wrapper_response.post_url,",
          "values": {
            "strings": [],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 237,
          "snippet": "            track_error_metrics(request.account, wrapper_response.error_type or \"unknown\")\n        \n        logger.info(f\"[LinkedIn Adapter] Publication completed: {status}\")\n        \n        return response",
          "values": {
            "strings": [
              "unknown",
              "[LinkedIn Adapter] Publication completed: {status}"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 245,
          "snippet": "        error_msg = str(e)\n        \n        logger.error(f\"[LinkedIn Adapter] Publication failed: {error_msg}\")\n        \n        # Track error metrics",
          "values": {
            "strings": [
              "[LinkedIn Adapter] Publication failed: {error_msg}"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 252,
          "snippet": "        \n        # Return structured error response\n        return LinkedInPublishResponse(\n            success=False,\n            status=\"failed\",",
          "values": {
            "strings": [
              "failed"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 261,
          "snippet": "\n\n@app.get(\"/health\", response_model=LinkedInHealthResponse)\n@track_http_metrics(\"GET\", \"/health\")\nasync def health_check():",
          "values": {
            "strings": [
              "/health",
              "GET",
              "/health"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 264,
          "snippet": "@track_http_metrics(\"GET\", \"/health\")\nasync def health_check():\n    \"\"\"Sprawdzenie stanu serwisu LinkedIn\"\"\"\n    \n    if not linkedin_wrapper:",
          "values": {
            "strings": [
              "GET",
              "/health",
              "Sprawdzenie stanu serwisu LinkedIn"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 266,
          "snippet": "    \"\"\"Sprawdzenie stanu serwisu LinkedIn\"\"\"\n    \n    if not linkedin_wrapper:\n        return LinkedInHealthResponse(\n            status=\"unhealthy\",",
          "values": {
            "strings": [
              "Sprawdzenie stanu serwisu LinkedIn",
              "\n    \n    if not linkedin_wrapper:\n        return LinkedInHealthResponse(\n            status="
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 267,
          "snippet": "    \n    if not linkedin_wrapper:\n        return LinkedInHealthResponse(\n            status=\"unhealthy\",\n            linkedin_cli_available=False,",
          "values": {
            "strings": [
              "unhealthy"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 269,
          "snippet": "        return LinkedInHealthResponse(\n            status=\"unhealthy\",\n            linkedin_cli_available=False,\n            message=\"LinkedIn Adapter not initialized\"\n        )",
          "values": {
            "strings": [
              "unhealthy",
              "LinkedIn Adapter not initialized"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 270,
          "snippet": "            status=\"unhealthy\",\n            linkedin_cli_available=False,\n            message=\"LinkedIn Adapter not initialized\"\n        )\n    ",
          "values": {
            "strings": [
              "unhealthy",
              "LinkedIn Adapter not initialized"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 275,
          "snippet": "    try:\n        # Test CLI availability\n        cli_available = await linkedin_wrapper.test_cli_availability()\n        linkedin_metrics.track_cli_availability(cli_available)\n        ",
          "values": {
            "strings": [],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 276,
          "snippet": "        # Test CLI availability\n        cli_available = await linkedin_wrapper.test_cli_availability()\n        linkedin_metrics.track_cli_availability(cli_available)\n        \n        # Get session info for default account",
          "values": {
            "strings": [],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 284,
          "snippet": "        \n        try:\n            session_validation = await linkedin_wrapper.validate_session_comprehensive(\"default\")\n            session_valid = session_validation.is_valid\n            session_health_score = session_validation.health_score",
          "values": {
            "strings": [
              "default"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 291,
          "snippet": "            \n        except Exception as e:\n            logger.warning(f\"[LinkedIn Adapter] Session check failed: {e}\")\n        \n        # Determine overall status",
          "values": {
            "strings": [
              "[LinkedIn Adapter] Session check failed: {e}"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 301,
          "snippet": "            status = \"unhealthy\"\n        \n        return LinkedInHealthResponse(\n            status=status,\n            linkedin_cli_available=cli_available,",
          "values": {
            "strings": [
              "unhealthy"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 303,
          "snippet": "        return LinkedInHealthResponse(\n            status=status,\n            linkedin_cli_available=cli_available,\n            session_valid=session_valid,\n            session_health_score=session_health_score,",
          "values": {
            "strings": [],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 306,
          "snippet": "            session_valid=session_valid,\n            session_health_score=session_health_score,\n            message=f\"LinkedIn Adapter is {status}\",\n            last_check=time.strftime('%Y-%m-%dT%H:%M:%SZ')\n        )",
          "values": {
            "strings": [
              "LinkedIn Adapter is {status}",
              "%Y-%m-%dT%H:%M:%SZ"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 311,
          "snippet": "        \n    except Exception as e:\n        logger.error(f\"[LinkedIn Adapter] Health check failed: {e}\")\n        \n        return LinkedInHealthResponse(",
          "values": {
            "strings": [
              "[LinkedIn Adapter] Health check failed: {e}"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 313,
          "snippet": "        logger.error(f\"[LinkedIn Adapter] Health check failed: {e}\")\n        \n        return LinkedInHealthResponse(\n            status=\"unhealthy\",\n            linkedin_cli_available=False,",
          "values": {
            "strings": [
              "[LinkedIn Adapter] Health check failed: {e}",
              "unhealthy"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 315,
          "snippet": "        return LinkedInHealthResponse(\n            status=\"unhealthy\",\n            linkedin_cli_available=False,\n            message=f\"Health check failed: {str(e)}\"\n        )",
          "values": {
            "strings": [
              "unhealthy",
              "Health check failed: {str(e)}"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 320,
          "snippet": "\n\n@app.get(\"/config\", response_model=LinkedInConfigResponse)\n@track_http_metrics(\"GET\", \"/config\")\nasync def get_config():",
          "values": {
            "strings": [
              "/config",
              "GET",
              "/config"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 323,
          "snippet": "@track_http_metrics(\"GET\", \"/config\")\nasync def get_config():\n    \"\"\"Informacje o konfiguracji LinkedIn\"\"\"\n    \n    if not linkedin_wrapper:",
          "values": {
            "strings": [
              "GET",
              "/config",
              "Informacje o konfiguracji LinkedIn"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 325,
          "snippet": "    \"\"\"Informacje o konfiguracji LinkedIn\"\"\"\n    \n    if not linkedin_wrapper:\n        return LinkedInConfigResponse(\n            linkedin_module_configured=False,",
          "values": {
            "strings": [
              "Informacje o konfiguracji LinkedIn"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 326,
          "snippet": "    \n    if not linkedin_wrapper:\n        return LinkedInConfigResponse(\n            linkedin_module_configured=False,\n            linkedin_module_path=\"\",",
          "values": {
            "strings": [],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 327,
          "snippet": "    if not linkedin_wrapper:\n        return LinkedInConfigResponse(\n            linkedin_module_configured=False,\n            linkedin_module_path=\"\",\n            cli_available=False,",
          "values": {
            "strings": [],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 328,
          "snippet": "        return LinkedInConfigResponse(\n            linkedin_module_configured=False,\n            linkedin_module_path=\"\",\n            cli_available=False,\n            status=\"unconfigured\",",
          "values": {
            "strings": [
              ",\n            cli_available=False,\n            status="
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 331,
          "snippet": "            cli_available=False,\n            status=\"unconfigured\",\n            message=\"LinkedIn Adapter not initialized\"\n        )\n    ",
          "values": {
            "strings": [
              "unconfigured",
              "LinkedIn Adapter not initialized"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 336,
          "snippet": "    try:\n        # Get wrapper configuration\n        cli_available = await linkedin_wrapper.test_cli_availability()\n        \n        # Get available accounts (if CLI works)",
          "values": {
            "strings": [],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 342,
          "snippet": "        try:\n            if cli_available:\n                sessions = await linkedin_wrapper.list_sessions()\n                accounts_available = [session.account for session in sessions]\n        except:",
          "values": {
            "strings": [],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 358,
          "snippet": "        status = \"configured\" if cli_available else \"degraded\"\n        \n        return LinkedInConfigResponse(\n            linkedin_module_configured=True,\n            linkedin_module_path=str(linkedin_wrapper.linkedin_path),",
          "values": {
            "strings": [
              "configured",
              "degraded"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 359,
          "snippet": "        \n        return LinkedInConfigResponse(\n            linkedin_module_configured=True,\n            linkedin_module_path=str(linkedin_wrapper.linkedin_path),\n            cli_available=cli_available,",
          "values": {
            "strings": [],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 360,
          "snippet": "        return LinkedInConfigResponse(\n            linkedin_module_configured=True,\n            linkedin_module_path=str(linkedin_wrapper.linkedin_path),\n            cli_available=cli_available,\n            accounts_available=accounts_available,",
          "values": {
            "strings": [],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 365,
          "snippet": "            status=status,\n            capabilities=capabilities,\n            message=f\"LinkedIn module {status}\"\n        )\n        ",
          "values": {
            "strings": [
              "LinkedIn module {status}"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 369,
          "snippet": "        \n    except Exception as e:\n        logger.error(f\"[LinkedIn Adapter] Config check failed: {e}\")\n        \n        return LinkedInConfigResponse(",
          "values": {
            "strings": [
              "[LinkedIn Adapter] Config check failed: {e}"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 371,
          "snippet": "        logger.error(f\"[LinkedIn Adapter] Config check failed: {e}\")\n        \n        return LinkedInConfigResponse(\n            linkedin_module_configured=False,\n            linkedin_module_path=\"\",",
          "values": {
            "strings": [
              "[LinkedIn Adapter] Config check failed: {e}"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 372,
          "snippet": "        \n        return LinkedInConfigResponse(\n            linkedin_module_configured=False,\n            linkedin_module_path=\"\",\n            cli_available=False,",
          "values": {
            "strings": [],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 373,
          "snippet": "        return LinkedInConfigResponse(\n            linkedin_module_configured=False,\n            linkedin_module_path=\"\",\n            cli_available=False,\n            status=\"error\",",
          "values": {
            "strings": [
              ",\n            cli_available=False,\n            status="
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 380,
          "snippet": "\n\n@app.get(\"/scheduled/{account}\", response_model=LinkedInScheduledPostsResponse)\n@track_http_metrics(\"GET\", \"/scheduled/{account}\")\nasync def get_scheduled_posts(account: str):",
          "values": {
            "strings": [
              "/scheduled/{account}",
              "GET",
              "/scheduled/{account}"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 385,
          "snippet": "    \"\"\"Lista zaplanowanych postów dla konta\"\"\"\n    \n    if not linkedin_wrapper:\n        raise HTTPException(\n            status_code=503,",
          "values": {
            "strings": [
              "Lista zaplanowanych postów dla konta"
            ],
            "numbers": [
              503
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 388,
          "snippet": "        raise HTTPException(\n            status_code=503,\n            detail=\"LinkedIn Adapter not initialized\"\n        )\n    ",
          "values": {
            "strings": [
              "LinkedIn Adapter not initialized"
            ],
            "numbers": [
              503
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 392,
          "snippet": "    \n    try:\n        scheduled_posts_result = await linkedin_wrapper.get_scheduled_posts(account)\n        \n        # Track scheduled posts count",
          "values": {
            "strings": [],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 396,
          "snippet": "        # Track scheduled posts count\n        total_scheduled = len(scheduled_posts_result.get(\"scheduled_posts\", []))\n        linkedin_metrics.track_scheduled_posts(account, total_scheduled)\n        \n        return LinkedInScheduledPostsResponse(",
          "values": {
            "strings": [
              "scheduled_posts"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 398,
          "snippet": "        linkedin_metrics.track_scheduled_posts(account, total_scheduled)\n        \n        return LinkedInScheduledPostsResponse(\n            success=scheduled_posts_result.get(\"success\", False),\n            account=account,",
          "values": {
            "strings": [
              "success"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 407,
          "snippet": "        \n    except Exception as e:\n        logger.error(f\"[LinkedIn Adapter] Get scheduled posts failed: {e}\")\n        track_error_metrics(account, \"api_error\")\n        ",
          "values": {
            "strings": [
              "[LinkedIn Adapter] Get scheduled posts failed: {e}",
              "api_error"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 416,
          "snippet": "\n\n@app.post(\"/upload\", response_model=LinkedInMediaUploadResponse)\n@track_http_metrics(\"POST\", \"/upload\")\nasync def upload_media(",
          "values": {
            "strings": [
              "/upload",
              "POST",
              "/upload"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 424,
          "snippet": "    alt_text: Optional[str] = None\n):\n    \"\"\"Upload media file to LinkedIn\"\"\"\n    \n    if not linkedin_wrapper:",
          "values": {
            "strings": [
              "Upload media file to LinkedIn"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 426,
          "snippet": "    \"\"\"Upload media file to LinkedIn\"\"\"\n    \n    if not linkedin_wrapper:\n        raise HTTPException(\n            status_code=503,",
          "values": {
            "strings": [
              "Upload media file to LinkedIn"
            ],
            "numbers": [
              503
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 429,
          "snippet": "        raise HTTPException(\n            status_code=503,\n            detail=\"LinkedIn Adapter not initialized\"\n        )\n    ",
          "values": {
            "strings": [
              "LinkedIn Adapter not initialized"
            ],
            "numbers": [
              503
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 447,
          "snippet": "        \n        # Upload using wrapper\n        upload_result = await linkedin_wrapper.upload_media_to_linkedin(\n            tmp_file_path,\n            account,",
          "values": {
            "strings": [],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 462,
          "snippet": "        \n        if upload_result[\"success\"]:\n            return LinkedInMediaUploadResponse(\n                success=True,\n                media_id=upload_result.get(\"media_id\"),",
          "values": {
            "strings": [
              "success",
              "media_id"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 471,
          "snippet": "        else:\n            track_error_metrics(account, \"media_upload_error\")\n            return LinkedInMediaUploadResponse(\n                success=False,\n                message=upload_result.get(\"error\", \"Upload failed\")",
          "values": {
            "strings": [
              "media_upload_error",
              "error",
              "Upload failed"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 477,
          "snippet": "            \n    except Exception as e:\n        logger.error(f\"[LinkedIn Adapter] Media upload failed: {e}\")\n        track_error_metrics(account, \"upload_error\")\n        ",
          "values": {
            "strings": [
              "[LinkedIn Adapter] Media upload failed: {e}",
              "upload_error"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 497,
          "snippet": "    try:\n        # Update CLI availability metric\n        if linkedin_wrapper:\n            cli_available = await linkedin_wrapper.test_cli_availability()\n            linkedin_metrics.track_cli_availability(cli_available)",
          "values": {
            "strings": [],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 498,
          "snippet": "        # Update CLI availability metric\n        if linkedin_wrapper:\n            cli_available = await linkedin_wrapper.test_cli_availability()\n            linkedin_metrics.track_cli_availability(cli_available)\n        ",
          "values": {
            "strings": [],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 499,
          "snippet": "        if linkedin_wrapper:\n            cli_available = await linkedin_wrapper.test_cli_availability()\n            linkedin_metrics.track_cli_availability(cli_available)\n        \n        metrics_data = linkedin_metrics.get_metrics_data()",
          "values": {
            "strings": [],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 501,
          "snippet": "            linkedin_metrics.track_cli_availability(cli_available)\n        \n        metrics_data = linkedin_metrics.get_metrics_data()\n        \n        return PlainTextResponse(",
          "values": {
            "strings": [],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 509,
          "snippet": "        \n    except Exception as e:\n        logger.error(f\"[LinkedIn Adapter] Metrics collection failed: {e}\")\n        return PlainTextResponse(\n            content=f\"# Error collecting metrics: {str(e)}\",",
          "values": {
            "strings": [
              "[LinkedIn Adapter] Metrics collection failed: {e}",
              "# Error collecting metrics: {str(e)}"
            ],
            "numbers": []
          }
        },
        {
          "type": "required_elements",
          "platform": "linkedin",
          "line": 520,
          "snippet": "@app.post(\"/session/validate\")\n@track_http_metrics(\"POST\", \"/session/validate\")\nasync def validate_session_health(account: str = \"default\", include_diagnostics: bool = True):\n    \"\"\"Validate session health for centralized monitoring (Task 8.4)\"\"\"\n    if not linkedin_wrapper:",
          "values": {
            "strings": [
              "/session/validate",
              "POST",
              "/session/validate",
              "default",
              "Validate session health for centralized monitoring (Task 8.4)"
            ],
            "numbers": [
              8,
              4
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 522,
          "snippet": "async def validate_session_health(account: str = \"default\", include_diagnostics: bool = True):\n    \"\"\"Validate session health for centralized monitoring (Task 8.4)\"\"\"\n    if not linkedin_wrapper:\n        return {\n            \"session_valid\": False,",
          "values": {
            "strings": [
              "default",
              "Validate session health for centralized monitoring (Task 8.4)",
              "\n    if not linkedin_wrapper:\n        return {\n            "
            ],
            "numbers": [
              8,
              4
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 527,
          "snippet": "            \"health_score\": 0.0,\n            \"status\": \"error\",\n            \"error_message\": \"LinkedIn Adapter not initialized\",\n            \"recommendations\": [\"Initialize LinkedIn wrapper\"]\n        }",
          "values": {
            "strings": [
              "health_score",
              "status",
              "error",
              "error_message",
              "LinkedIn Adapter not initialized",
              "recommendations",
              "Initialize LinkedIn wrapper"
            ],
            "numbers": [
              0,
              0
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 528,
          "snippet": "            \"status\": \"error\",\n            \"error_message\": \"LinkedIn Adapter not initialized\",\n            \"recommendations\": [\"Initialize LinkedIn wrapper\"]\n        }\n    ",
          "values": {
            "strings": [
              "status",
              "error",
              "error_message",
              "LinkedIn Adapter not initialized",
              "recommendations",
              "Initialize LinkedIn wrapper"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 533,
          "snippet": "    try:\n        # Use existing comprehensive session validation\n        session_validation = await linkedin_wrapper.validate_session_comprehensive(account)\n        \n        # Map to session health monitor format",
          "values": {
            "strings": [],
            "numbers": []
          }
        },
        {
          "type": "required_elements",
          "platform": "linkedin",
          "line": 545,
          "snippet": "        }\n        \n        if include_diagnostics:\n            response.update({\n                \"validation_duration\": getattr(session_validation, 'validation_duration', 0.0),",
          "values": {
            "strings": [
              "validation_duration",
              "validation_duration"
            ],
            "numbers": [
              0,
              0
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 561,
          "snippet": "        \n    except Exception as e:\n        logger.error(f\"[LinkedIn Adapter] Session validation failed: {e}\")\n        track_error_metrics(account, \"session_validation_error\")\n        ",
          "values": {
            "strings": [
              "[LinkedIn Adapter] Session validation failed: {e}",
              "session_validation_error"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 569,
          "snippet": "            \"status\": \"error\",\n            \"error_message\": str(e),\n            \"recommendations\": [\"Check LinkedIn wrapper status\", \"Verify browser connection\"]\n        }\n",
          "values": {
            "strings": [
              "status",
              "error",
              "error_message",
              "recommendations",
              "Check LinkedIn wrapper status",
              "Verify browser connection"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 580,
          "snippet": "    # Use session health monitor if available for centralized tracking\n    if session_health_monitor:\n        result = session_health_monitor.get_session_status(\"linkedin\", account)\n        if result:\n            return {",
          "values": {
            "strings": [
              "linkedin"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 583,
          "snippet": "        if result:\n            return {\n                \"platform\": \"linkedin\",\n                \"account\": account,\n                \"status\": result.status.value,",
          "values": {
            "strings": [
              "platform",
              "linkedin",
              "account",
              "status"
            ],
            "numbers": []
          }
        },
        {
          "type": "required_elements",
          "platform": "linkedin",
          "line": 597,
          "snippet": "    \n    # Fallback to direct validation\n    return await validate_session_health(account, include_diagnostics=False)\n\n",
          "values": {
            "strings": [],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 612,
          "snippet": "    \n    try:\n        success = await session_health_monitor.start_monitoring(\"linkedin\", account)\n        \n        if success:",
          "values": {
            "strings": [
              "linkedin"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 615,
          "snippet": "        \n        if success:\n            logger.info(f\"[LinkedIn Adapter] Started session monitoring for {account}\")\n            return {\n                \"success\": True,",
          "values": {
            "strings": [
              "[LinkedIn Adapter] Started session monitoring for {account}",
              "success"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 630,
          "snippet": "            \n    except Exception as e:\n        logger.error(f\"[LinkedIn Adapter] Failed to start session monitoring: {e}\")\n        return {\n            \"success\": False,",
          "values": {
            "strings": [
              "[LinkedIn Adapter] Failed to start session monitoring: {e}",
              "success"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 650,
          "snippet": "    \n    try:\n        success = await session_health_monitor.stop_monitoring(\"linkedin\", account)\n        \n        if success:",
          "values": {
            "strings": [
              "linkedin"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 653,
          "snippet": "        \n        if success:\n            logger.info(f\"[LinkedIn Adapter] Stopped session monitoring for {account}\")\n            return {\n                \"success\": True,",
          "values": {
            "strings": [
              "[LinkedIn Adapter] Stopped session monitoring for {account}",
              "success"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 667,
          "snippet": "            \n    except Exception as e:\n        logger.error(f\"[LinkedIn Adapter] Failed to stop session monitoring: {e}\")\n        return {\n            \"success\": False,",
          "values": {
            "strings": [
              "[LinkedIn Adapter] Failed to stop session monitoring: {e}",
              "success"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 681,
          "snippet": "    if not session_health_monitor:\n        return {\n            \"platform\": \"linkedin\",\n            \"account\": account,\n            \"history\": [],",
          "values": {
            "strings": [
              "platform",
              "linkedin",
              "account",
              "history"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 688,
          "snippet": "    \n    try:\n        history = session_health_monitor.get_session_history(\"linkedin\", account, hours)\n        \n        from datetime import datetime, timezone",
          "values": {
            "strings": [
              "linkedin"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 693,
          "snippet": "        \n        return {\n            \"platform\": \"linkedin\",\n            \"account\": account,\n            \"hours_requested\": hours,",
          "values": {
            "strings": [
              "platform",
              "linkedin",
              "account",
              "hours_requested"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 702,
          "snippet": "        \n    except Exception as e:\n        logger.error(f\"[LinkedIn Adapter] Failed to get session history: {e}\")\n        return {\n            \"platform\": \"linkedin\",",
          "values": {
            "strings": [
              "[LinkedIn Adapter] Failed to get session history: {e}",
              "platform",
              "linkedin"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 704,
          "snippet": "        logger.error(f\"[LinkedIn Adapter] Failed to get session history: {e}\")\n        return {\n            \"platform\": \"linkedin\",\n            \"account\": account,\n            \"history\": [],",
          "values": {
            "strings": [
              "[LinkedIn Adapter] Failed to get session history: {e}",
              "platform",
              "linkedin",
              "account",
              "history"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 731,
          "snippet": "    \"\"\"Handle general exceptions\"\"\"\n    \n    logger.error(f\"[LinkedIn Adapter] Unhandled exception: {exc}\")\n    \n    return JSONResponse(",
          "values": {
            "strings": [
              "Handle general exceptions",
              "\n    \n    logger.error(f"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 750,
          "snippet": "    port = int(os.getenv(\"PORT\", \"8088\"))\n    \n    logger.info(f\"🚀 Starting LinkedIn Adapter on {host}:{port}\")\n    \n    uvicorn.run(",
          "values": {
            "strings": [
              "PORT",
              "8088",
              "🚀 Starting LinkedIn Adapter on {host}:{port}"
            ],
            "numbers": [
              8088
            ]
          }
        }
      ]
    },
    {
      "file": "/Users/hretheum/dev/bezrobocie/vector-wave/publisher/src/adapters/linkedin/test_task_7_5_to_7_8.py",
      "exists": true,
      "hits": [
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 3,
          "snippet": "#!/usr/bin/env python3\n\"\"\"\nTest Suite dla Tasks 7.5-7.8: LinkedIn Module Integration Testing\n\nTask 7.5: Content Adaptation dla LinkedIn Format",
          "values": {
            "strings": [],
            "numbers": [
              3,
              7,
              5,
              7,
              8,
              7,
              5
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 5,
          "snippet": "Test Suite dla Tasks 7.5-7.8: LinkedIn Module Integration Testing\n\nTask 7.5: Content Adaptation dla LinkedIn Format\nTask 7.6: Scheduled Publication Support  \nTask 7.7: Media Upload Integration",
          "values": {
            "strings": [],
            "numbers": [
              7,
              5,
              7,
              8,
              7,
              5,
              7,
              6,
              7,
              7
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 22,
          "snippet": "sys.path.append(str(Path(__file__).parent))\n\nfrom linkedin_wrapper import (\n    LinkedInModuleWrapper, \n    LinkedInPublishRequest, ",
          "values": {
            "strings": [],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 23,
          "snippet": "\nfrom linkedin_wrapper import (\n    LinkedInModuleWrapper, \n    LinkedInPublishRequest, \n    LinkedInPublishResponse",
          "values": {
            "strings": [],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 24,
          "snippet": "from linkedin_wrapper import (\n    LinkedInModuleWrapper, \n    LinkedInPublishRequest, \n    LinkedInPublishResponse\n)",
          "values": {
            "strings": [],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 25,
          "snippet": "    LinkedInModuleWrapper, \n    LinkedInPublishRequest, \n    LinkedInPublishResponse\n)\n",
          "values": {
            "strings": [],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 28,
          "snippet": ")\n\nclass TestLinkedInIntegration:\n    \"\"\"Complete integration test suite dla LinkedIn Module Tasks 7.5-7.8\"\"\"\n    ",
          "values": {
            "strings": [
              "Complete integration test suite dla LinkedIn Module Tasks 7.5-7.8"
            ],
            "numbers": [
              7,
              5,
              7,
              8
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 29,
          "snippet": "\nclass TestLinkedInIntegration:\n    \"\"\"Complete integration test suite dla LinkedIn Module Tasks 7.5-7.8\"\"\"\n    \n    @pytest.fixture",
          "values": {
            "strings": [
              "Complete integration test suite dla LinkedIn Module Tasks 7.5-7.8"
            ],
            "numbers": [
              7,
              5,
              7,
              8
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 34,
          "snippet": "    async def wrapper(self):\n        \"\"\"Create wrapper instance dla tests\"\"\"\n        return LinkedInModuleWrapper()\n    \n    @pytest.fixture",
          "values": {
            "strings": [
              "Create wrapper instance dla tests"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 70,
          "snippet": "    @pytest.mark.asyncio\n    async def test_content_adaptation_basic(self, sample_content):\n        \"\"\"Test basic content adaptation dla LinkedIn format\"\"\"\n        wrapper = LinkedInModuleWrapper()\n        ",
          "values": {
            "strings": [
              "Test basic content adaptation dla LinkedIn format"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 71,
          "snippet": "    async def test_content_adaptation_basic(self, sample_content):\n        \"\"\"Test basic content adaptation dla LinkedIn format\"\"\"\n        wrapper = LinkedInModuleWrapper()\n        \n        adapted = wrapper.adapt_content_for_linkedin(sample_content)",
          "values": {
            "strings": [
              "Test basic content adaptation dla LinkedIn format"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 73,
          "snippet": "        wrapper = LinkedInModuleWrapper()\n        \n        adapted = wrapper.adapt_content_for_linkedin(sample_content)\n        \n        # Verify adaptation result structure",
          "values": {
            "strings": [],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 97,
          "snippet": "    async def test_content_adaptation_with_options(self, sample_content):\n        \"\"\"Test content adaptation z custom options\"\"\"\n        wrapper = LinkedInModuleWrapper()\n        \n        options = {",
          "values": {
            "strings": [
              "Test content adaptation z custom options"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 100,
          "snippet": "        \n        options = {\n            \"hashtags\": [\"CustomTag\", \"TestPost\", \"LinkedIn\"],\n            \"max_hashtags\": 3,\n            \"add_hashtags\": True,",
          "values": {
            "strings": [
              "hashtags",
              "CustomTag",
              "TestPost",
              "LinkedIn",
              "max_hashtags",
              "add_hashtags"
            ],
            "numbers": [
              3
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 106,
          "snippet": "        }\n        \n        adapted = wrapper.adapt_content_for_linkedin(sample_content, options)\n        \n        # Verify custom hashtags were used",
          "values": {
            "strings": [],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 109,
          "snippet": "        \n        # Verify custom hashtags were used\n        assert set(adapted[\"hashtags\"]) == set([\"CustomTag\", \"TestPost\", \"LinkedIn\"])\n        assert len(adapted[\"hashtags\"]) <= 3\n        ",
          "values": {
            "strings": [
              "hashtags",
              "CustomTag",
              "TestPost",
              "LinkedIn",
              "hashtags"
            ],
            "numbers": [
              3
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 117,
          "snippet": "    @pytest.mark.asyncio\n    async def test_content_validation(self):\n        \"\"\"Test LinkedIn content validation\"\"\"\n        wrapper = LinkedInModuleWrapper()\n        ",
          "values": {
            "strings": [
              "Test LinkedIn content validation"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 118,
          "snippet": "    async def test_content_validation(self):\n        \"\"\"Test LinkedIn content validation\"\"\"\n        wrapper = LinkedInModuleWrapper()\n        \n        # Test valid content",
          "values": {
            "strings": [
              "Test LinkedIn content validation"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 121,
          "snippet": "        \n        # Test valid content\n        valid_content = \"This is a valid LinkedIn post about technology.\"\n        validation = wrapper.validate_linkedin_content(valid_content)\n        ",
          "values": {
            "strings": [
              "This is a valid LinkedIn post about technology."
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 122,
          "snippet": "        # Test valid content\n        valid_content = \"This is a valid LinkedIn post about technology.\"\n        validation = wrapper.validate_linkedin_content(valid_content)\n        \n        assert validation[\"valid\"] == True",
          "values": {
            "strings": [
              "This is a valid LinkedIn post about technology.",
              "valid"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 128,
          "snippet": "        \n        # Test content too long\n        long_content = \"x\" * 3001  # Exceeds LinkedIn limit\n        validation = wrapper.validate_linkedin_content(long_content)\n        ",
          "values": {
            "strings": [],
            "numbers": [
              3001
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 129,
          "snippet": "        # Test content too long\n        long_content = \"x\" * 3001  # Exceeds LinkedIn limit\n        validation = wrapper.validate_linkedin_content(long_content)\n        \n        assert validation[\"valid\"] == False",
          "values": {
            "strings": [
              " * 3001  # Exceeds LinkedIn limit\n        validation = wrapper.validate_linkedin_content(long_content)\n        \n        assert validation["
            ],
            "numbers": [
              3001
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 133,
          "snippet": "        assert validation[\"valid\"] == False\n        assert len(validation[\"errors\"]) > 0\n        assert \"exceeds LinkedIn limit\" in validation[\"errors\"][0]\n        \n        print(f\"✅ Content validation tests passed\")",
          "values": {
            "strings": [
              "valid",
              "errors",
              "exceeds LinkedIn limit",
              "errors",
              "✅ Content validation tests passed"
            ],
            "numbers": [
              0,
              0
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 142,
          "snippet": "    async def test_schedule_time_validation(self):\n        \"\"\"Test schedule time validation\"\"\"\n        wrapper = LinkedInModuleWrapper()\n        \n        # Test valid future time",
          "values": {
            "strings": [
              "Test schedule time validation"
            ],
            "numbers": []
          }
        },
        {
          "type": "required_elements",
          "platform": "linkedin",
          "line": 158,
          "snippet": "        assert validation[\"valid\"] == False\n        assert len(validation[\"errors\"]) > 0\n        assert \"must be in the future\" in validation[\"errors\"][0]\n        \n        # Test too close time (invalid)",
          "values": {
            "strings": [
              "valid",
              "errors",
              "must be in the future",
              "errors"
            ],
            "numbers": [
              0,
              0
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 172,
          "snippet": "    async def test_scheduled_post_management(self):\n        \"\"\"Test scheduled post management functions\"\"\"\n        wrapper = LinkedInModuleWrapper()\n        \n        # Test get scheduled posts (will likely timeout but should handle gracefully)",
          "values": {
            "strings": [
              "Test scheduled post management functions"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 193,
          "snippet": "    async def test_media_file_validation(self, sample_media_files):\n        \"\"\"Test media file validation\"\"\"\n        wrapper = LinkedInModuleWrapper()\n        \n        for media_file in sample_media_files:",
          "values": {
            "strings": [
              "Test media file validation"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 224,
          "snippet": "    async def test_media_type_detection(self):\n        \"\"\"Test media type detection\"\"\"\n        wrapper = LinkedInModuleWrapper()\n        \n        test_cases = [",
          "values": {
            "strings": [
              "Test media type detection"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 245,
          "snippet": "    async def test_upload_timeout_calculation(self):\n        \"\"\"Test upload timeout calculation\"\"\"\n        wrapper = LinkedInModuleWrapper()\n        \n        test_cases = [",
          "values": {
            "strings": [
              "Test upload timeout calculation"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 267,
          "snippet": "    async def test_publish_request_with_adaptation(self, sample_content):\n        \"\"\"Test publish request z content adaptation\"\"\"\n        wrapper = LinkedInModuleWrapper()\n        \n        # Create request z content adaptation enabled",
          "values": {
            "strings": [
              "Test publish request z content adaptation"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 270,
          "snippet": "        \n        # Create request z content adaptation enabled\n        request = LinkedInPublishRequest(\n            content=sample_content,\n            account=\"test_account\",",
          "values": {
            "strings": [
              "test_account"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 289,
          "snippet": "    \n    @pytest.mark.asyncio\n    async def test_linkedin_wrapper_comprehensive(self, sample_content):\n        \"\"\"Comprehensive test of LinkedIn wrapper functionality\"\"\"\n        wrapper = LinkedInModuleWrapper()",
          "values": {
            "strings": [
              "Comprehensive test of LinkedIn wrapper functionality"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 290,
          "snippet": "    @pytest.mark.asyncio\n    async def test_linkedin_wrapper_comprehensive(self, sample_content):\n        \"\"\"Comprehensive test of LinkedIn wrapper functionality\"\"\"\n        wrapper = LinkedInModuleWrapper()\n        ",
          "values": {
            "strings": [
              "Comprehensive test of LinkedIn wrapper functionality"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 291,
          "snippet": "    async def test_linkedin_wrapper_comprehensive(self, sample_content):\n        \"\"\"Comprehensive test of LinkedIn wrapper functionality\"\"\"\n        wrapper = LinkedInModuleWrapper()\n        \n        # Test 1: CLI availability check",
          "values": {
            "strings": [
              "Comprehensive test of LinkedIn wrapper functionality"
            ],
            "numbers": [
              1
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 306,
          "snippet": "        \n        # Test 3: Content adaptation\n        adapted = wrapper.adapt_content_for_linkedin(sample_content)\n        assert adapted[\"adapted_length\"] > 0\n        print(f\"   Content adaptation works: ✅\")",
          "values": {
            "strings": [
              "adapted_length",
              "   Content adaptation works: ✅"
            ],
            "numbers": [
              3,
              0
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 311,
          "snippet": "        \n        # Test 4: Content validation\n        validation = wrapper.validate_linkedin_content(sample_content)\n        assert validation[\"valid\"] == True\n        print(f\"   Content validation works: ✅\")",
          "values": {
            "strings": [
              "valid",
              "   Content validation works: ✅"
            ],
            "numbers": [
              4
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 323,
          "snippet": "        # Test 6: Error handling\n        error_output = \"Session expired, please log in again\"\n        error_details = wrapper.analyze_linkedin_error(error_output, \"test\", \"default\")\n        assert error_details.error_type.value == \"session_expired\"\n        print(f\"   Error handling works: ✅\")",
          "values": {
            "strings": [
              "Session expired, please log in again",
              "test",
              "default",
              "session_expired",
              "   Error handling works: ✅"
            ],
            "numbers": [
              6
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 332,
          "snippet": "        print(f\"   Error code mapping works: ✅\")\n        \n        print(f\"✅ Comprehensive LinkedIn wrapper test passed\")\n    \n    @pytest.mark.asyncio",
          "values": {
            "strings": [
              "   Error code mapping works: ✅",
              "✅ Comprehensive LinkedIn wrapper test passed"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 337,
          "snippet": "    async def test_orchestrator_integration_readiness(self):\n        \"\"\"Test readiness dla Orchestrator integration\"\"\"\n        wrapper = LinkedInModuleWrapper()\n        \n        # Test all required methods exist",
          "values": {
            "strings": [
              "Test readiness dla Orchestrator integration"
            ],
            "numbers": []
          }
        },
        {
          "type": "required_elements",
          "platform": "linkedin",
          "line": 339,
          "snippet": "        wrapper = LinkedInModuleWrapper()\n        \n        # Test all required methods exist\n        required_methods = [\n            'publish_post',",
          "values": {
            "strings": [
              "publish_post"
            ],
            "numbers": []
          }
        },
        {
          "type": "required_elements",
          "platform": "linkedin",
          "line": 340,
          "snippet": "        \n        # Test all required methods exist\n        required_methods = [\n            'publish_post',\n            'schedule_linkedin_post', ",
          "values": {
            "strings": [
              "publish_post",
              "schedule_linkedin_post"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 342,
          "snippet": "        required_methods = [\n            'publish_post',\n            'schedule_linkedin_post', \n            'adapt_content_for_linkedin',\n            'validate_linkedin_content',",
          "values": {
            "strings": [
              "publish_post",
              "schedule_linkedin_post",
              "adapt_content_for_linkedin",
              "validate_linkedin_content"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 343,
          "snippet": "            'publish_post',\n            'schedule_linkedin_post', \n            'adapt_content_for_linkedin',\n            'validate_linkedin_content',\n            'upload_media_to_linkedin',",
          "values": {
            "strings": [
              "publish_post",
              "schedule_linkedin_post",
              "adapt_content_for_linkedin",
              "validate_linkedin_content",
              "upload_media_to_linkedin"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 344,
          "snippet": "            'schedule_linkedin_post', \n            'adapt_content_for_linkedin',\n            'validate_linkedin_content',\n            'upload_media_to_linkedin',\n            'publish_with_media',",
          "values": {
            "strings": [
              "schedule_linkedin_post",
              "adapt_content_for_linkedin",
              "validate_linkedin_content",
              "upload_media_to_linkedin",
              "publish_with_media"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 345,
          "snippet": "            'adapt_content_for_linkedin',\n            'validate_linkedin_content',\n            'upload_media_to_linkedin',\n            'publish_with_media',\n            'validate_session_comprehensive',",
          "values": {
            "strings": [
              "adapt_content_for_linkedin",
              "validate_linkedin_content",
              "upload_media_to_linkedin",
              "publish_with_media",
              "validate_session_comprehensive"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 348,
          "snippet": "            'publish_with_media',\n            'validate_session_comprehensive',\n            'analyze_linkedin_error',\n            'get_error_statistics'\n        ]",
          "values": {
            "strings": [
              "publish_with_media",
              "validate_session_comprehensive",
              "analyze_linkedin_error",
              "get_error_statistics"
            ],
            "numbers": []
          }
        },
        {
          "type": "required_elements",
          "platform": "linkedin",
          "line": 352,
          "snippet": "        ]\n        \n        for method_name in required_methods:\n            assert hasattr(wrapper, method_name), f\"Missing method: {method_name}\"\n            method = getattr(wrapper, method_name)",
          "values": {
            "strings": [
              "Missing method: {method_name}"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 359,
          "snippet": "        \n        # Test data models exist\n        assert LinkedInPublishRequest is not None\n        assert LinkedInPublishResponse is not None\n        ",
          "values": {
            "strings": [],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 360,
          "snippet": "        # Test data models exist\n        assert LinkedInPublishRequest is not None\n        assert LinkedInPublishResponse is not None\n        \n        # Test request creation z all options",
          "values": {
            "strings": [],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 363,
          "snippet": "        \n        # Test request creation z all options\n        request = LinkedInPublishRequest(\n            content=\"Test content\",\n            pdf_path=\"/test/file.pdf\",",
          "values": {
            "strings": [
              "Test content",
              "/test/file.pdf"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 382,
          "snippet": "\nasync def run_task_7_5_validation():\n    \"\"\"Task 7.5: Content Adaptation dla LinkedIn Format\"\"\"\n    print(\"🧪 TASK 7.5 VALIDATION - Content Adaptation dla LinkedIn Format\")\n    print(\"=\" * 70)",
          "values": {
            "strings": [
              "Task 7.5: Content Adaptation dla LinkedIn Format",
              "\n    print(",
              ")\n    print("
            ],
            "numbers": [
              7,
              5,
              7,
              5,
              7,
              5,
              70
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 383,
          "snippet": "async def run_task_7_5_validation():\n    \"\"\"Task 7.5: Content Adaptation dla LinkedIn Format\"\"\"\n    print(\"🧪 TASK 7.5 VALIDATION - Content Adaptation dla LinkedIn Format\")\n    print(\"=\" * 70)\n    ",
          "values": {
            "strings": [
              "Task 7.5: Content Adaptation dla LinkedIn Format",
              "\n    print(",
              ")\n    print("
            ],
            "numbers": [
              7,
              5,
              7,
              5,
              7,
              5,
              70
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 386,
          "snippet": "    print(\"=\" * 70)\n    \n    wrapper = LinkedInModuleWrapper()\n    \n    # Test content",
          "values": {
            "strings": [],
            "numbers": [
              70
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 402,
          "snippet": "    # Test basic adaptation\n    print(\"\\n1️⃣ Testing basic content adaptation...\")\n    adapted = wrapper.adapt_content_for_linkedin(sample_content)\n    \n    print(f\"   ✅ Content adapted successfully\")",
          "values": {
            "strings": [
              "\\n1️⃣ Testing basic content adaptation...",
              "   ✅ Content adapted successfully"
            ],
            "numbers": [
              1
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 413,
          "snippet": "    # Test content validation\n    print(\"\\n2️⃣ Testing content validation...\")\n    validation = wrapper.validate_linkedin_content(adapted[\"formatted_content\"])\n    \n    print(f\"   ✅ Content validation: {validation['valid']}\")",
          "values": {
            "strings": [
              "\\n2️⃣ Testing content validation...",
              "formatted_content",
              "   ✅ Content validation: {validation[",
              "]}"
            ],
            "numbers": [
              2
            ]
          }
        },
        {
          "type": "hashtag_rules",
          "platform": "linkedin",
          "line": 417,
          "snippet": "    print(f\"   ✅ Content validation: {validation['valid']}\")\n    print(f\"   📊 Character count: {validation['stats']['character_count']}\")\n    print(f\"   📊 Hashtag count: {validation['stats']['hashtag_count']}\")\n    print(f\"   📊 Mention count: {validation['stats']['mention_count']}\")\n    ",
          "values": {
            "strings": [
              "   ✅ Content validation: {validation[",
              "]}",
              "   📊 Character count: {validation[",
              "][",
              "]}",
              "   📊 Hashtag count: {validation[",
              "][",
              "]}",
              "   📊 Mention count: {validation[",
              "]["
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 428,
          "snippet": "    print(\"=\" * 70)\n    \n    wrapper = LinkedInModuleWrapper()\n    \n    # Test schedule validation",
          "values": {
            "strings": [],
            "numbers": [
              70
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 456,
          "snippet": "    print(\"=\" * 70)\n    \n    wrapper = LinkedInModuleWrapper()\n    \n    # Create temporary test files",
          "values": {
            "strings": [],
            "numbers": [
              70
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 512,
          "snippet": "    print(\"=\" * 70)\n    \n    wrapper = LinkedInModuleWrapper()\n    \n    # Test 1: CLI availability",
          "values": {
            "strings": [],
            "numbers": [
              70,
              1
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 517,
          "snippet": "    print(\"\\n1️⃣ Testing CLI availability...\")\n    cli_available = await wrapper.test_cli_availability()\n    print(f\"   ✅ LinkedIn CLI available: {cli_available}\")\n    \n    # Test 2: All required methods exist",
          "values": {
            "strings": [
              "\\n1️⃣ Testing CLI availability...",
              "   ✅ LinkedIn CLI available: {cli_available}"
            ],
            "numbers": [
              1,
              2
            ]
          }
        },
        {
          "type": "required_elements",
          "platform": "linkedin",
          "line": 519,
          "snippet": "    print(f\"   ✅ LinkedIn CLI available: {cli_available}\")\n    \n    # Test 2: All required methods exist\n    print(\"\\n2️⃣ Testing Orchestrator integration readiness...\")\n    ",
          "values": {
            "strings": [
              "   ✅ LinkedIn CLI available: {cli_available}",
              "\\n2️⃣ Testing Orchestrator integration readiness..."
            ],
            "numbers": [
              2,
              2
            ]
          }
        },
        {
          "type": "required_elements",
          "platform": "linkedin",
          "line": 522,
          "snippet": "    print(\"\\n2️⃣ Testing Orchestrator integration readiness...\")\n    \n    required_methods = [\n        'publish_post',\n        'schedule_linkedin_post',",
          "values": {
            "strings": [
              "\\n2️⃣ Testing Orchestrator integration readiness...",
              "publish_post",
              "schedule_linkedin_post"
            ],
            "numbers": [
              2
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 524,
          "snippet": "    required_methods = [\n        'publish_post',\n        'schedule_linkedin_post',\n        'adapt_content_for_linkedin', \n        'validate_linkedin_content',",
          "values": {
            "strings": [
              "publish_post",
              "schedule_linkedin_post",
              "adapt_content_for_linkedin",
              "validate_linkedin_content"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 525,
          "snippet": "        'publish_post',\n        'schedule_linkedin_post',\n        'adapt_content_for_linkedin', \n        'validate_linkedin_content',\n        'upload_media_to_linkedin',",
          "values": {
            "strings": [
              "publish_post",
              "schedule_linkedin_post",
              "adapt_content_for_linkedin",
              "validate_linkedin_content",
              "upload_media_to_linkedin"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 526,
          "snippet": "        'schedule_linkedin_post',\n        'adapt_content_for_linkedin', \n        'validate_linkedin_content',\n        'upload_media_to_linkedin',\n        'publish_with_media',",
          "values": {
            "strings": [
              "schedule_linkedin_post",
              "adapt_content_for_linkedin",
              "validate_linkedin_content",
              "upload_media_to_linkedin",
              "publish_with_media"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 527,
          "snippet": "        'adapt_content_for_linkedin', \n        'validate_linkedin_content',\n        'upload_media_to_linkedin',\n        'publish_with_media',\n        'validate_session_comprehensive',",
          "values": {
            "strings": [
              "adapt_content_for_linkedin",
              "validate_linkedin_content",
              "upload_media_to_linkedin",
              "publish_with_media",
              "validate_session_comprehensive"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 530,
          "snippet": "        'publish_with_media',\n        'validate_session_comprehensive',\n        'analyze_linkedin_error',\n        'get_error_statistics'\n    ]",
          "values": {
            "strings": [
              "publish_with_media",
              "validate_session_comprehensive",
              "analyze_linkedin_error",
              "get_error_statistics"
            ],
            "numbers": []
          }
        },
        {
          "type": "required_elements",
          "platform": "linkedin",
          "line": 534,
          "snippet": "    ]\n    \n    for method_name in required_methods:\n        has_method = hasattr(wrapper, method_name)\n        is_callable = callable(getattr(wrapper, method_name, None))",
          "values": {
            "strings": [],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 542,
          "snippet": "    print(\"\\n3️⃣ Testing data models...\")\n    \n    # Test LinkedInPublishRequest\n    request = LinkedInPublishRequest(\n        content=\"Test integration content\",",
          "values": {
            "strings": [
              "\\n3️⃣ Testing data models...",
              "Test integration content"
            ],
            "numbers": [
              3
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 543,
          "snippet": "    \n    # Test LinkedInPublishRequest\n    request = LinkedInPublishRequest(\n        content=\"Test integration content\",\n        account=\"test_account\",",
          "values": {
            "strings": [
              "Test integration content",
              "test_account"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 550,
          "snippet": "    )\n    \n    print(f\"   ✅ LinkedInPublishRequest: ✓\")\n    print(f\"      Content: {request.content[:30]}...\")\n    print(f\"      Adaptation enabled: {request.adapt_content}\")",
          "values": {
            "strings": [
              "   ✅ LinkedInPublishRequest: ✓",
              "      Content: {request.content[:30]}...",
              "      Adaptation enabled: {request.adapt_content}"
            ],
            "numbers": [
              30
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 560,
          "snippet": "    try:\n        # Simulate content adaptation\n        adapted_content = wrapper.adapt_content_for_linkedin(\n            \"Test post about technology and innovation in business automation.\",\n            {\"hashtags\": [\"Technology\", \"Innovation\"], \"max_hashtags\": 2}",
          "values": {
            "strings": [
              "Test post about technology and innovation in business automation.",
              "hashtags",
              "Technology",
              "Innovation",
              "max_hashtags"
            ],
            "numbers": [
              2
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 566,
          "snippet": "        \n        # Simulate content validation\n        validation = wrapper.validate_linkedin_content(adapted_content[\"formatted_content\"])\n        \n        # Simulate error handling",
          "values": {
            "strings": [
              "formatted_content"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 569,
          "snippet": "        \n        # Simulate error handling\n        error_details = wrapper.analyze_linkedin_error(\n            \"Rate limit exceeded, please try again later\",\n            \"publish\",",
          "values": {
            "strings": [
              "Rate limit exceeded, please try again later",
              "publish"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 588,
          "snippet": "    # Test that wrapper can be imported and initialized\n    try:\n        test_wrapper = LinkedInModuleWrapper()\n        print(f\"   ✅ Wrapper initialization: ✓\")\n        ",
          "values": {
            "strings": [
              "   ✅ Wrapper initialization: ✓"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 606,
          "snippet": "    \n    print(\"\\n🎉 TASK 7.8 COMPLETED SUCCESSFULLY!\")\n    print(\"🚀 LinkedIn Module is ready dla Orchestrator integration!\")\n    return True\n",
          "values": {
            "strings": [
              "\\n🎉 TASK 7.8 COMPLETED SUCCESSFULLY!",
              "🚀 LinkedIn Module is ready dla Orchestrator integration!"
            ],
            "numbers": [
              7,
              8
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 611,
          "snippet": "async def run_all_tasks_validation():\n    \"\"\"Run complete validation dla Tasks 7.5-7.8\"\"\"\n    print(\"🔥 COMPLETE LINKEDIN MODULE VALIDATION (Tasks 7.5-7.8)\")\n    print(\"=\" * 70)\n    ",
          "values": {
            "strings": [
              "Run complete validation dla Tasks 7.5-7.8",
              "\n    print(",
              ")\n    print("
            ],
            "numbers": [
              7,
              5,
              7,
              8,
              7,
              5,
              7,
              8,
              70
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 623,
          "snippet": "        print(\"\\n\" + \"=\" * 70)\n        print(\"🎉 ALL TASKS (7.5-7.8) COMPLETED SUCCESSFULLY!\")\n        print(\"✅ Task 7.5: Content Adaptation dla LinkedIn Format\")\n        print(\"✅ Task 7.6: Scheduled Publication Support\")\n        print(\"✅ Task 7.7: Media Upload Integration\")",
          "values": {
            "strings": [
              "\\n",
              " * 70)\n        print(",
              ")\n        print(",
              ")\n        print(",
              ")\n        print("
            ],
            "numbers": [
              70,
              7,
              5,
              7,
              8,
              7,
              5,
              7,
              6,
              7
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 627,
          "snippet": "        print(\"✅ Task 7.7: Media Upload Integration\")\n        print(\"✅ Task 7.8: Integration Testing z Orchestrator\")\n        print(\"\\n🚀 LinkedIn Module is PRODUCTION READY dla Orchestrator!\")\n        \n        return True",
          "values": {
            "strings": [
              "✅ Task 7.7: Media Upload Integration",
              "✅ Task 7.8: Integration Testing z Orchestrator",
              "\\n🚀 LinkedIn Module is PRODUCTION READY dla Orchestrator!"
            ],
            "numbers": [
              7,
              7,
              7,
              8
            ]
          }
        }
      ]
    },
    {
      "file": "/Users/hretheum/dev/bezrobocie/vector-wave/publisher/src/adapters/linkedin/linkedin_wrapper.py",
      "exists": true,
      "hits": [
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 3,
          "snippet": "#!/usr/bin/env python3\n\"\"\"\nLinkedIn Module Wrapper\n\nPython wrapper dla existing LinkedIn Node.js CLI.",
          "values": {
            "strings": [],
            "numbers": [
              3
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 5,
          "snippet": "LinkedIn Module Wrapper\n\nPython wrapper dla existing LinkedIn Node.js CLI.\nZapewnia integration z Multi-Channel Publisher przez execution\ni parsing Node.js commands.",
          "values": {
            "strings": [],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 9,
          "snippet": "i parsing Node.js commands.\n\nTask 7.1: LinkedInModuleWrapper implementation\n\"\"\"\n",
          "values": {
            "strings": [],
            "numbers": [
              7,
              1
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 27,
          "snippet": "logger = logging.getLogger(__name__)\n\n# Task 7.4: LinkedIn-Specific Error Classification\n\nclass LinkedInErrorType(Enum):",
          "values": {
            "strings": [],
            "numbers": [
              7,
              4
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 29,
          "snippet": "# Task 7.4: LinkedIn-Specific Error Classification\n\nclass LinkedInErrorType(Enum):\n    \"\"\"Task 7.4: Comprehensive LinkedIn error types\"\"\"\n    # Session-related errors",
          "values": {
            "strings": [
              "Task 7.4: Comprehensive LinkedIn error types"
            ],
            "numbers": [
              7,
              4,
              7,
              4
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 30,
          "snippet": "\nclass LinkedInErrorType(Enum):\n    \"\"\"Task 7.4: Comprehensive LinkedIn error types\"\"\"\n    # Session-related errors\n    SESSION_EXPIRED = \"session_expired\"",
          "values": {
            "strings": [
              "Task 7.4: Comprehensive LinkedIn error types",
              "\n    # Session-related errors\n    SESSION_EXPIRED = "
            ],
            "numbers": [
              7,
              4
            ]
          }
        },
        {
          "type": "required_elements",
          "platform": "linkedin",
          "line": 35,
          "snippet": "    SESSION_INVALID = \"session_invalid\" \n    SESSION_NOT_FOUND = \"session_not_found\"\n    LOGIN_REQUIRED = \"login_required\"\n    \n    # Selector-related errors",
          "values": {
            "strings": [
              "session_invalid",
              "session_not_found",
              "login_required"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 60,
          "snippet": "    PROXY_ERROR = \"proxy_error\"\n    \n    # LinkedIn platform errors\n    LINKEDIN_DOWN = \"linkedin_down\"\n    MAINTENANCE_MODE = \"maintenance_mode\"",
          "values": {
            "strings": [
              "proxy_error",
              "linkedin_down",
              "maintenance_mode"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 61,
          "snippet": "    \n    # LinkedIn platform errors\n    LINKEDIN_DOWN = \"linkedin_down\"\n    MAINTENANCE_MODE = \"maintenance_mode\"\n    FEATURE_DISABLED = \"feature_disabled\"",
          "values": {
            "strings": [
              "linkedin_down",
              "maintenance_mode",
              "feature_disabled"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 82,
          "snippet": "    VALIDATION_ERROR = \"validation_error\"\n\nclass LinkedInErrorSeverity(Enum):\n    \"\"\"Task 7.4: Error severity classification\"\"\"\n    CRITICAL = \"critical\"      # Requires immediate attention, blocks all functionality",
          "values": {
            "strings": [
              "validation_error",
              "Task 7.4: Error severity classification",
              "\n    CRITICAL = "
            ],
            "numbers": [
              7,
              4
            ]
          }
        },
        {
          "type": "required_elements",
          "platform": "linkedin",
          "line": 84,
          "snippet": "class LinkedInErrorSeverity(Enum):\n    \"\"\"Task 7.4: Error severity classification\"\"\"\n    CRITICAL = \"critical\"      # Requires immediate attention, blocks all functionality\n    HIGH = \"high\"             # Significant impact, affects core functionality\n    MEDIUM = \"medium\"         # Moderate impact, some functionality affected",
          "values": {
            "strings": [
              "Task 7.4: Error severity classification",
              "\n    CRITICAL = ",
              "      # Requires immediate attention, blocks all functionality\n    HIGH = ",
              "             # Significant impact, affects core functionality\n    MEDIUM = "
            ],
            "numbers": [
              7,
              4
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 91,
          "snippet": "\n@dataclass\nclass LinkedInErrorDetails:\n    \"\"\"Task 7.4: Comprehensive LinkedIn error details\"\"\"\n    error_type: LinkedInErrorType",
          "values": {
            "strings": [
              "Task 7.4: Comprehensive LinkedIn error details"
            ],
            "numbers": [
              7,
              4
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 92,
          "snippet": "@dataclass\nclass LinkedInErrorDetails:\n    \"\"\"Task 7.4: Comprehensive LinkedIn error details\"\"\"\n    error_type: LinkedInErrorType\n    severity: LinkedInErrorSeverity",
          "values": {
            "strings": [
              "Task 7.4: Comprehensive LinkedIn error details"
            ],
            "numbers": [
              7,
              4
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 93,
          "snippet": "class LinkedInErrorDetails:\n    \"\"\"Task 7.4: Comprehensive LinkedIn error details\"\"\"\n    error_type: LinkedInErrorType\n    severity: LinkedInErrorSeverity\n    message: str",
          "values": {
            "strings": [
              "Task 7.4: Comprehensive LinkedIn error details"
            ],
            "numbers": [
              7,
              4
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 94,
          "snippet": "    \"\"\"Task 7.4: Comprehensive LinkedIn error details\"\"\"\n    error_type: LinkedInErrorType\n    severity: LinkedInErrorSeverity\n    message: str\n    error_code: Optional[str] = None",
          "values": {
            "strings": [
              "Task 7.4: Comprehensive LinkedIn error details"
            ],
            "numbers": [
              7,
              4
            ]
          }
        },
        {
          "type": "required_elements",
          "platform": "linkedin",
          "line": 103,
          "snippet": "    is_recoverable: bool = False\n    auto_retry_possible: bool = False\n    manual_intervention_required: bool = True\n    estimated_recovery_time: Optional[int] = None  # seconds\n    ",
          "values": {
            "strings": [],
            "numbers": []
          }
        },
        {
          "type": "required_elements",
          "platform": "linkedin",
          "line": 114,
          "snippet": "    immediate_actions: List[str] = None\n    preventive_measures: List[str] = None\n    escalation_required: bool = False\n    \n    def __post_init__(self):",
          "values": {
            "strings": [],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 125,
          "snippet": "\n@dataclass \nclass LinkedInErrorRecoveryPlan:\n    \"\"\"Task 7.4: Error recovery plan z actionable steps\"\"\"\n    error_details: LinkedInErrorDetails",
          "values": {
            "strings": [
              "Task 7.4: Error recovery plan z actionable steps"
            ],
            "numbers": [
              7,
              4
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 127,
          "snippet": "class LinkedInErrorRecoveryPlan:\n    \"\"\"Task 7.4: Error recovery plan z actionable steps\"\"\"\n    error_details: LinkedInErrorDetails\n    recovery_steps: List[str]\n    success_probability: float  # 0.0-1.0",
          "values": {
            "strings": [
              "Task 7.4: Error recovery plan z actionable steps"
            ],
            "numbers": [
              7,
              4,
              0,
              0,
              1,
              0
            ]
          }
        },
        {
          "type": "required_elements",
          "platform": "linkedin",
          "line": 131,
          "snippet": "    success_probability: float  # 0.0-1.0\n    estimated_time: int  # seconds\n    requires_user_input: bool = False\n    automated_recovery_possible: bool = False\n    ",
          "values": {
            "strings": [],
            "numbers": [
              0,
              0,
              1,
              0
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 145,
          "snippet": "\n@dataclass\nclass LinkedInPublishRequest:\n    \"\"\"Enhanced request model dla LinkedIn publication - Task 7.5\"\"\"\n    content: str",
          "values": {
            "strings": [
              "Enhanced request model dla LinkedIn publication - Task 7.5"
            ],
            "numbers": [
              7,
              5
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 146,
          "snippet": "@dataclass\nclass LinkedInPublishRequest:\n    \"\"\"Enhanced request model dla LinkedIn publication - Task 7.5\"\"\"\n    content: str\n    pdf_path: Optional[str] = None",
          "values": {
            "strings": [
              "Enhanced request model dla LinkedIn publication - Task 7.5"
            ],
            "numbers": [
              7,
              5
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 168,
          "snippet": "\n@dataclass\nclass LinkedInPublishResponse:\n    \"\"\"Enhanced response model dla LinkedIn publication - Task 7.2\"\"\"\n    success: bool",
          "values": {
            "strings": [
              "Enhanced response model dla LinkedIn publication - Task 7.2"
            ],
            "numbers": [
              7,
              2
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 169,
          "snippet": "@dataclass\nclass LinkedInPublishResponse:\n    \"\"\"Enhanced response model dla LinkedIn publication - Task 7.2\"\"\"\n    success: bool\n    post_url: Optional[str] = None",
          "values": {
            "strings": [
              "Enhanced response model dla LinkedIn publication - Task 7.2"
            ],
            "numbers": [
              7,
              2
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 189,
          "snippet": "\n@dataclass\nclass LinkedInSessionInfo:\n    \"\"\"Enhanced session information model - Task 7.3\"\"\"\n    account: str",
          "values": {
            "strings": [
              "Enhanced session information model - Task 7.3"
            ],
            "numbers": [
              7,
              3
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 249,
          "snippet": "    monitoring_active: bool = False\n\nclass LinkedInCLIError(Exception):\n    \"\"\"Custom exception dla LinkedIn CLI errors\"\"\"\n    def __init__(self, message: str, cli_output: str = \"\", exit_code: int = 0):",
          "values": {
            "strings": [
              "Custom exception dla LinkedIn CLI errors",
              "\n    def __init__(self, message: str, cli_output: str = "
            ],
            "numbers": [
              0
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 250,
          "snippet": "\nclass LinkedInCLIError(Exception):\n    \"\"\"Custom exception dla LinkedIn CLI errors\"\"\"\n    def __init__(self, message: str, cli_output: str = \"\", exit_code: int = 0):\n        super().__init__(message)",
          "values": {
            "strings": [
              "Custom exception dla LinkedIn CLI errors",
              "\n    def __init__(self, message: str, cli_output: str = "
            ],
            "numbers": [
              0
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 256,
          "snippet": "        self.exit_code = exit_code\n\nclass LinkedInModuleWrapper:\n    \"\"\"\n    Python wrapper dla LinkedIn Node.js CLI",
          "values": {
            "strings": [],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 258,
          "snippet": "class LinkedInModuleWrapper:\n    \"\"\"\n    Python wrapper dla LinkedIn Node.js CLI\n    \n    Task 7.1: Implementacja LinkedInModuleWrapper klasy",
          "values": {
            "strings": [],
            "numbers": [
              7,
              1
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 260,
          "snippet": "    Python wrapper dla LinkedIn Node.js CLI\n    \n    Task 7.1: Implementacja LinkedInModuleWrapper klasy\n    - Python wrapper dla existing LinkedIn Node.js module z CLI execution\n    - Test: Wrapper poprawnie wykonuje `node scripts/linkedin-cli.js --help` i parsuje output",
          "values": {
            "strings": [],
            "numbers": [
              7,
              1
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 261,
          "snippet": "    \n    Task 7.1: Implementacja LinkedInModuleWrapper klasy\n    - Python wrapper dla existing LinkedIn Node.js module z CLI execution\n    - Test: Wrapper poprawnie wykonuje `node scripts/linkedin-cli.js --help` i parsuje output\n    \"\"\"",
          "values": {
            "strings": [],
            "numbers": [
              7,
              1
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 262,
          "snippet": "    Task 7.1: Implementacja LinkedInModuleWrapper klasy\n    - Python wrapper dla existing LinkedIn Node.js module z CLI execution\n    - Test: Wrapper poprawnie wykonuje `node scripts/linkedin-cli.js --help` i parsuje output\n    \"\"\"\n    ",
          "values": {
            "strings": [],
            "numbers": [
              7,
              1
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 265,
          "snippet": "    \"\"\"\n    \n    def __init__(self, linkedin_module_path: Optional[str] = None):\n        \"\"\"\n        Initialize LinkedIn wrapper",
          "values": {
            "strings": [
              "\n    \n    def __init__(self, linkedin_module_path: Optional[str] = None):\n        "
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 267,
          "snippet": "    def __init__(self, linkedin_module_path: Optional[str] = None):\n        \"\"\"\n        Initialize LinkedIn wrapper\n        \n        Args:",
          "values": {
            "strings": [],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 270,
          "snippet": "        \n        Args:\n            linkedin_module_path: Path do LinkedIn module (domyślnie: auto-detect)\n        \"\"\"\n        ",
          "values": {
            "strings": [],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 273,
          "snippet": "        \"\"\"\n        \n        # Auto-detect LinkedIn module path\n        if linkedin_module_path is None:\n            # Szukaj w standardowych lokalizacjach",
          "values": {
            "strings": [],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 274,
          "snippet": "        \n        # Auto-detect LinkedIn module path\n        if linkedin_module_path is None:\n            # Szukaj w standardowych lokalizacjach\n            possible_paths = [",
          "values": {
            "strings": [],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 277,
          "snippet": "            # Szukaj w standardowych lokalizacjach\n            possible_paths = [\n                \"/app/linkedin\",  # Docker container path (first priority)\n                \"/Users/hretheum/dev/bezrobocie/vector-wave/linkedin\",\n                \"../../../linkedin\",",
          "values": {
            "strings": [
              "/app/linkedin",
              "/Users/hretheum/dev/bezrobocie/vector-wave/linkedin",
              "../../../linkedin"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 278,
          "snippet": "            possible_paths = [\n                \"/app/linkedin\",  # Docker container path (first priority)\n                \"/Users/hretheum/dev/bezrobocie/vector-wave/linkedin\",\n                \"../../../linkedin\",\n                \"../../linkedin\", ",
          "values": {
            "strings": [
              "/app/linkedin",
              "/Users/hretheum/dev/bezrobocie/vector-wave/linkedin",
              "../../../linkedin",
              "../../linkedin"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 279,
          "snippet": "                \"/app/linkedin\",  # Docker container path (first priority)\n                \"/Users/hretheum/dev/bezrobocie/vector-wave/linkedin\",\n                \"../../../linkedin\",\n                \"../../linkedin\", \n                \"../linkedin\",",
          "values": {
            "strings": [
              "/app/linkedin",
              "/Users/hretheum/dev/bezrobocie/vector-wave/linkedin",
              "../../../linkedin",
              "../../linkedin",
              "../linkedin"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 280,
          "snippet": "                \"/Users/hretheum/dev/bezrobocie/vector-wave/linkedin\",\n                \"../../../linkedin\",\n                \"../../linkedin\", \n                \"../linkedin\",\n                \"./linkedin\"",
          "values": {
            "strings": [
              "/Users/hretheum/dev/bezrobocie/vector-wave/linkedin",
              "../../../linkedin",
              "../../linkedin",
              "../linkedin",
              "./linkedin"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 281,
          "snippet": "                \"../../../linkedin\",\n                \"../../linkedin\", \n                \"../linkedin\",\n                \"./linkedin\"\n            ]",
          "values": {
            "strings": [
              "../../../linkedin",
              "../../linkedin",
              "../linkedin",
              "./linkedin"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 282,
          "snippet": "                \"../../linkedin\", \n                \"../linkedin\",\n                \"./linkedin\"\n            ]\n        ",
          "values": {
            "strings": [
              "../../linkedin",
              "../linkedin",
              "./linkedin"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 292,
          "snippet": "            for path in possible_paths:\n                full_path = Path(path).resolve()\n                cli_path = full_path / \"scripts\" / \"linkedin-cli.js\"\n                if cli_path.exists():\n                    linkedin_module_path = str(full_path)",
          "values": {
            "strings": [
              "scripts",
              "linkedin-cli.js"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 294,
          "snippet": "                cli_path = full_path / \"scripts\" / \"linkedin-cli.js\"\n                if cli_path.exists():\n                    linkedin_module_path = str(full_path)\n                    break\n            ",
          "values": {
            "strings": [
              "scripts",
              "linkedin-cli.js"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 297,
          "snippet": "                    break\n            \n            if linkedin_module_path is None:\n                raise LinkedInCLIError(\"LinkedIn module not found. Please provide linkedin_module_path.\")\n        ",
          "values": {
            "strings": [
              "LinkedIn module not found. Please provide linkedin_module_path."
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 298,
          "snippet": "            \n            if linkedin_module_path is None:\n                raise LinkedInCLIError(\"LinkedIn module not found. Please provide linkedin_module_path.\")\n        \n        self.linkedin_path = Path(linkedin_module_path)",
          "values": {
            "strings": [
              "LinkedIn module not found. Please provide linkedin_module_path."
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 300,
          "snippet": "                raise LinkedInCLIError(\"LinkedIn module not found. Please provide linkedin_module_path.\")\n        \n        self.linkedin_path = Path(linkedin_module_path)\n        self.cli_script = self.linkedin_path / \"scripts\" / \"linkedin-cli.js\"\n        ",
          "values": {
            "strings": [
              "LinkedIn module not found. Please provide linkedin_module_path.",
              "scripts",
              "linkedin-cli.js"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 301,
          "snippet": "        \n        self.linkedin_path = Path(linkedin_module_path)\n        self.cli_script = self.linkedin_path / \"scripts\" / \"linkedin-cli.js\"\n        \n        # Validate paths",
          "values": {
            "strings": [
              "scripts",
              "linkedin-cli.js"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 304,
          "snippet": "        \n        # Validate paths\n        if not self.linkedin_path.exists():\n            raise LinkedInCLIError(f\"LinkedIn module path does not exist: {self.linkedin_path}\")\n        ",
          "values": {
            "strings": [
              "LinkedIn module path does not exist: {self.linkedin_path}"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 305,
          "snippet": "        # Validate paths\n        if not self.linkedin_path.exists():\n            raise LinkedInCLIError(f\"LinkedIn module path does not exist: {self.linkedin_path}\")\n        \n        if not self.cli_script.exists():",
          "values": {
            "strings": [
              "LinkedIn module path does not exist: {self.linkedin_path}"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 308,
          "snippet": "        \n        if not self.cli_script.exists():\n            raise LinkedInCLIError(f\"LinkedIn CLI script not found: {self.cli_script}\")\n        \n        # Environment setup",
          "values": {
            "strings": [
              "LinkedIn CLI script not found: {self.cli_script}"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 320,
          "snippet": "        \n        # Task 7.4: Error handling infrastructure\n        self.error_history: List[LinkedInErrorDetails] = []\n        self.recovery_plans: Dict[str, LinkedInErrorRecoveryPlan] = {}\n        self.error_patterns: Dict[LinkedInErrorType, int] = {}",
          "values": {
            "strings": [],
            "numbers": [
              7,
              4
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 321,
          "snippet": "        # Task 7.4: Error handling infrastructure\n        self.error_history: List[LinkedInErrorDetails] = []\n        self.recovery_plans: Dict[str, LinkedInErrorRecoveryPlan] = {}\n        self.error_patterns: Dict[LinkedInErrorType, int] = {}\n        self.auto_recovery_enabled: bool = True",
          "values": {
            "strings": [],
            "numbers": [
              7,
              4
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 322,
          "snippet": "        self.error_history: List[LinkedInErrorDetails] = []\n        self.recovery_plans: Dict[str, LinkedInErrorRecoveryPlan] = {}\n        self.error_patterns: Dict[LinkedInErrorType, int] = {}\n        self.auto_recovery_enabled: bool = True\n        ",
          "values": {
            "strings": [],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 325,
          "snippet": "        self.auto_recovery_enabled: bool = True\n        \n        logger.info(f\"[LinkedInWrapper] Initialized with LinkedIn module: {self.linkedin_path}\")\n        logger.info(f\"[LinkedInWrapper] Task 7.3 session monitoring infrastructure ready\")\n        logger.info(f\"[LinkedInWrapper] Task 7.4 error handling infrastructure ready\")",
          "values": {
            "strings": [
              "[LinkedInWrapper] Initialized with LinkedIn module: {self.linkedin_path}",
              "[LinkedInWrapper] Task 7.3 session monitoring infrastructure ready",
              "[LinkedInWrapper] Task 7.4 error handling infrastructure ready"
            ],
            "numbers": [
              7,
              3,
              7,
              4
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 326,
          "snippet": "        \n        logger.info(f\"[LinkedInWrapper] Initialized with LinkedIn module: {self.linkedin_path}\")\n        logger.info(f\"[LinkedInWrapper] Task 7.3 session monitoring infrastructure ready\")\n        logger.info(f\"[LinkedInWrapper] Task 7.4 error handling infrastructure ready\")\n    ",
          "values": {
            "strings": [
              "[LinkedInWrapper] Initialized with LinkedIn module: {self.linkedin_path}",
              "[LinkedInWrapper] Task 7.3 session monitoring infrastructure ready",
              "[LinkedInWrapper] Task 7.4 error handling infrastructure ready"
            ],
            "numbers": [
              7,
              3,
              7,
              4
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 327,
          "snippet": "        logger.info(f\"[LinkedInWrapper] Initialized with LinkedIn module: {self.linkedin_path}\")\n        logger.info(f\"[LinkedInWrapper] Task 7.3 session monitoring infrastructure ready\")\n        logger.info(f\"[LinkedInWrapper] Task 7.4 error handling infrastructure ready\")\n    \n    async def execute_cli_command(self, command: List[str], timeout: int = 60) -> Dict[str, Any]:",
          "values": {
            "strings": [
              "[LinkedInWrapper] Initialized with LinkedIn module: {self.linkedin_path}",
              "[LinkedInWrapper] Task 7.3 session monitoring infrastructure ready",
              "[LinkedInWrapper] Task 7.4 error handling infrastructure ready"
            ],
            "numbers": [
              7,
              3,
              7,
              4,
              60
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 331,
          "snippet": "    async def execute_cli_command(self, command: List[str], timeout: int = 60) -> Dict[str, Any]:\n        \"\"\"\n        Execute LinkedIn CLI command and return parsed result\n        \n        Args:",
          "values": {
            "strings": [],
            "numbers": [
              60
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 343,
          "snippet": "        full_command = ['node', str(self.cli_script)] + command\n        \n        logger.info(f\"[LinkedInWrapper] Executing: {' '.join(full_command)}\")\n        \n        try:",
          "values": {
            "strings": [
              "node",
              "[LinkedInWrapper] Executing: {",
              ".join(full_command)}"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 346,
          "snippet": "        \n        try:\n            # Change to LinkedIn directory for relative path resolution\n            process = await asyncio.create_subprocess_exec(\n                *full_command,",
          "values": {
            "strings": [],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 352,
          "snippet": "                stderr=asyncio.subprocess.PIPE,\n                env=self.env,\n                cwd=str(self.linkedin_path)\n            )\n            ",
          "values": {
            "strings": [],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 364,
          "snippet": "                process.kill()\n                await process.wait()\n                raise LinkedInCLIError(\n                    f\"Command timed out after {timeout} seconds\",\n                    cli_output=\"TIMEOUT\"",
          "values": {
            "strings": [
              "Command timed out after {timeout} seconds",
              "TIMEOUT"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 385,
          "snippet": "            \n            if process.returncode == 0:\n                logger.info(f\"[LinkedInWrapper] Command successful\")\n                logger.debug(f\"[LinkedInWrapper] Output: {stdout_text[:200]}...\")\n            else:",
          "values": {
            "strings": [
              "[LinkedInWrapper] Command successful",
              "[LinkedInWrapper] Output: {stdout_text[:200]}..."
            ],
            "numbers": [
              0,
              200
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 386,
          "snippet": "            if process.returncode == 0:\n                logger.info(f\"[LinkedInWrapper] Command successful\")\n                logger.debug(f\"[LinkedInWrapper] Output: {stdout_text[:200]}...\")\n            else:\n                logger.error(f\"[LinkedInWrapper] Command failed with exit code {process.returncode}\")",
          "values": {
            "strings": [
              "[LinkedInWrapper] Command successful",
              "[LinkedInWrapper] Output: {stdout_text[:200]}...",
              "[LinkedInWrapper] Command failed with exit code {process.returncode}"
            ],
            "numbers": [
              0,
              200
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 388,
          "snippet": "                logger.debug(f\"[LinkedInWrapper] Output: {stdout_text[:200]}...\")\n            else:\n                logger.error(f\"[LinkedInWrapper] Command failed with exit code {process.returncode}\")\n                logger.error(f\"[LinkedInWrapper] Error: {stderr_text}\")\n            ",
          "values": {
            "strings": [
              "[LinkedInWrapper] Output: {stdout_text[:200]}...",
              "[LinkedInWrapper] Command failed with exit code {process.returncode}",
              "[LinkedInWrapper] Error: {stderr_text}"
            ],
            "numbers": [
              200
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 389,
          "snippet": "            else:\n                logger.error(f\"[LinkedInWrapper] Command failed with exit code {process.returncode}\")\n                logger.error(f\"[LinkedInWrapper] Error: {stderr_text}\")\n            \n            return result",
          "values": {
            "strings": [
              "[LinkedInWrapper] Command failed with exit code {process.returncode}",
              "[LinkedInWrapper] Error: {stderr_text}"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 394,
          "snippet": "            \n        except Exception as e:\n            logger.error(f\"[LinkedInWrapper] Command execution failed: {e}\")\n            raise LinkedInCLIError(\n                f\"Failed to execute CLI command: {str(e)}\",",
          "values": {
            "strings": [
              "[LinkedInWrapper] Command execution failed: {e}",
              "Failed to execute CLI command: {str(e)}"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 395,
          "snippet": "        except Exception as e:\n            logger.error(f\"[LinkedInWrapper] Command execution failed: {e}\")\n            raise LinkedInCLIError(\n                f\"Failed to execute CLI command: {str(e)}\",\n                cli_output=str(e)",
          "values": {
            "strings": [
              "[LinkedInWrapper] Command execution failed: {e}",
              "Failed to execute CLI command: {str(e)}"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 443,
          "snippet": "                \n        except Exception as e:\n            logger.warning(f\"[LinkedInWrapper] Failed to parse output for {command_type}: {e}\")\n            return {\n                \"raw_output\": output, ",
          "values": {
            "strings": [
              "[LinkedInWrapper] Failed to parse output for {command_type}: {e}",
              "raw_output"
            ],
            "numbers": []
          }
        },
        {
          "type": "required_elements",
          "platform": "linkedin",
          "line": 523,
          "snippet": "            \"error_message\": error_message,\n            \"can_use_existing\": status == \"exists\",\n            \"requires_manual_login\": \"Please log in manually\" in output,\n            \"creation_timestamp\": time.time()\n        }",
          "values": {
            "strings": [
              "error_message",
              "can_use_existing",
              "exists",
              "requires_manual_login",
              "Please log in manually",
              "creation_timestamp"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 622,
          "snippet": "        \n        for line in lines:\n            if 'linkedin-cli' in line and ('session' in line or 'publish' in line or 'diagnose' in line):\n                # Extract command part\n                if 'linkedin-cli' in line:",
          "values": {
            "strings": [
              "linkedin-cli",
              "session",
              "publish",
              "diagnose",
              "linkedin-cli"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 624,
          "snippet": "            if 'linkedin-cli' in line and ('session' in line or 'publish' in line or 'diagnose' in line):\n                # Extract command part\n                if 'linkedin-cli' in line:\n                    command_part = line.split('linkedin-cli')[1].strip()\n                    commands.append(command_part)",
          "values": {
            "strings": [
              "linkedin-cli",
              "session",
              "publish",
              "diagnose",
              "linkedin-cli",
              "linkedin-cli"
            ],
            "numbers": [
              1
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 625,
          "snippet": "                # Extract command part\n                if 'linkedin-cli' in line:\n                    command_part = line.split('linkedin-cli')[1].strip()\n                    commands.append(command_part)\n        ",
          "values": {
            "strings": [
              "linkedin-cli",
              "linkedin-cli"
            ],
            "numbers": [
              1
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 638,
          "snippet": "        return None\n    \n    def parse_session_list(self, output: str) -> List[LinkedInSessionInfo]:\n        \"\"\"Parse session list output\"\"\"\n        sessions = []",
          "values": {
            "strings": [
              "Parse session list output"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 678,
          "snippet": "                \n                # Session complete, add to list\n                sessions.append(LinkedInSessionInfo(**current_session))\n                current_session = None\n        ",
          "values": {
            "strings": [],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 715,
          "snippet": "        \n        for line in lines:\n            if 'linkedin-cli' in line and ('-' in line or 'description' in line.lower()):\n                parts = line.split()\n                if len(parts) >= 2:",
          "values": {
            "strings": [
              "linkedin-cli",
              " in line or "
            ],
            "numbers": [
              2
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 730,
          "snippet": "        \n        for line in lines:\n            if 'linkedin-cli' in line and ('--' in line or 'example' in line.lower()):\n                examples.append(line.strip())\n        ",
          "values": {
            "strings": [
              "linkedin-cli",
              "--",
              "example"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 844,
          "snippet": "    async def test_cli_availability(self) -> bool:\n        \"\"\"\n        Test if LinkedIn CLI is available and working\n        \n        Returns:",
          "values": {
            "strings": [],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 853,
          "snippet": "            return result[\"success\"]\n        except Exception as e:\n            logger.error(f\"[LinkedInWrapper] CLI availability test failed: {e}\")\n            return False\n    ",
          "values": {
            "strings": [
              "success",
              "[LinkedInWrapper] CLI availability test failed: {e}"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 866,
          "snippet": "        \n        if not result[\"success\"]:\n            raise LinkedInCLIError(\n                \"Failed to get help information\",\n                cli_output=result[\"full_output\"],",
          "values": {
            "strings": [
              "success",
              "Failed to get help information",
              "full_output"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 874,
          "snippet": "        return self.parse_cli_output(result[\"output\"], \"help\")\n    \n    async def list_sessions(self) -> List[LinkedInSessionInfo]:\n        \"\"\"\n        List all available LinkedIn sessions",
          "values": {
            "strings": [
              "output",
              "help"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 876,
          "snippet": "    async def list_sessions(self) -> List[LinkedInSessionInfo]:\n        \"\"\"\n        List all available LinkedIn sessions\n        \n        Returns:",
          "values": {
            "strings": [],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 884,
          "snippet": "        \n        if not result[\"success\"]:\n            raise LinkedInCLIError(\n                \"Failed to list sessions\",\n                cli_output=result[\"full_output\"],",
          "values": {
            "strings": [
              "success",
              "Failed to list sessions",
              "full_output"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 895,
          "snippet": "    async def validate_session(self, account: str = \"default\") -> Dict[str, Any]:\n        \"\"\"\n        Validate LinkedIn session\n        \n        Args:",
          "values": {
            "strings": [
              "default"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 919,
          "snippet": "    async def create_session(self, account: str = \"default\", overwrite: bool = False) -> Dict[str, Any]:\n        \"\"\"\n        Create new LinkedIn session\n        \n        Args:",
          "values": {
            "strings": [
              "default"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 941,
          "snippet": "        }\n    \n    async def publish_post(self, request: LinkedInPublishRequest) -> LinkedInPublishResponse:\n        \"\"\"\n        Enhanced publish post to LinkedIn with Task 7.3 session validation",
          "values": {
            "strings": [],
            "numbers": [
              7,
              3
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 943,
          "snippet": "    async def publish_post(self, request: LinkedInPublishRequest) -> LinkedInPublishResponse:\n        \"\"\"\n        Enhanced publish post to LinkedIn with Task 7.3 session validation\n        \n        Task 7.2: Enhanced CLI execution and structured response handling",
          "values": {
            "strings": [],
            "numbers": [
              7,
              3,
              7,
              2
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 957,
          "snippet": "        \n        try:\n            logger.info(f\"[LinkedInWrapper] Starting publication dla account: {request.account}\")\n            \n            # Task 7.3: Validate session przed publikacją",
          "values": {
            "strings": [
              "[LinkedInWrapper] Starting publication dla account: {request.account}"
            ],
            "numbers": [
              7,
              3
            ]
          }
        },
        {
          "type": "required_elements",
          "platform": "linkedin",
          "line": 960,
          "snippet": "            \n            # Task 7.3: Validate session przed publikacją\n            session_validation = await self.validate_session_comprehensive(request.account, include_diagnostics=True)\n            \n            if not session_validation.is_valid:",
          "values": {
            "strings": [],
            "numbers": [
              7,
              3
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 963,
          "snippet": "            \n            if not session_validation.is_valid:\n                logger.error(f\"[LinkedInWrapper] Session validation failed dla {request.account}: {session_validation.error_message}\")\n                return LinkedInPublishResponse(\n                    success=False,",
          "values": {
            "strings": [
              "[LinkedInWrapper] Session validation failed dla {request.account}: {session_validation.error_message}"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 964,
          "snippet": "            if not session_validation.is_valid:\n                logger.error(f\"[LinkedInWrapper] Session validation failed dla {request.account}: {session_validation.error_message}\")\n                return LinkedInPublishResponse(\n                    success=False,\n                    error=f\"Session validation failed: {session_validation.error_message}\",",
          "values": {
            "strings": [
              "[LinkedInWrapper] Session validation failed dla {request.account}: {session_validation.error_message}",
              "Session validation failed: {session_validation.error_message}"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 976,
          "snippet": "            # Check session health score\n            if session_validation.health_score < 0.7:\n                logger.warning(f\"[LinkedInWrapper] Session health below threshold ({session_validation.health_score:.2f}) dla {request.account}\")\n                # Attempt session recreation\n                enhanced_session = await self.ensure_valid_session(request.account)",
          "values": {
            "strings": [
              "[LinkedInWrapper] Session health below threshold ({session_validation.health_score:.2f}) dla {request.account}"
            ],
            "numbers": [
              0,
              7,
              2
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 980,
          "snippet": "                enhanced_session = await self.ensure_valid_session(request.account)\n                if not enhanced_session.is_valid:\n                    return LinkedInPublishResponse(\n                        success=False,\n                        error=f\"Session recreation failed: {enhanced_session.error_message}\",",
          "values": {
            "strings": [
              "Session recreation failed: {enhanced_session.error_message}"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 990,
          "snippet": "                    )\n            \n            logger.info(f\"[LinkedInWrapper] Session validation passed dla {request.account} (health: {session_validation.health_score:.2f})\")\n            \n            # Task 7.5: Adapt content dla LinkedIn format if needed",
          "values": {
            "strings": [
              "[LinkedInWrapper] Session validation passed dla {request.account} (health: {session_validation.health_score:.2f})"
            ],
            "numbers": [
              2,
              7,
              5
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 992,
          "snippet": "            logger.info(f\"[LinkedInWrapper] Session validation passed dla {request.account} (health: {session_validation.health_score:.2f})\")\n            \n            # Task 7.5: Adapt content dla LinkedIn format if needed\n            adapted_content = request.content\n            content_adaptation = None",
          "values": {
            "strings": [
              "[LinkedInWrapper] Session validation passed dla {request.account} (health: {session_validation.health_score:.2f})"
            ],
            "numbers": [
              2,
              7,
              5
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 999,
          "snippet": "            if hasattr(request, 'adapt_content') and request.adapt_content:\n                adaptation_options = getattr(request, 'adaptation_options', {})\n                content_adaptation = self.adapt_content_for_linkedin(request.content, adaptation_options)\n                adapted_content = content_adaptation[\"formatted_content\"]\n                ",
          "values": {
            "strings": [
              "adapt_content",
              "adaptation_options",
              "formatted_content"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 1002,
          "snippet": "                adapted_content = content_adaptation[\"formatted_content\"]\n                \n                logger.info(f\"[LinkedInWrapper] Content adapted dla LinkedIn: {content_adaptation['original_length']} → {content_adaptation['adapted_length']} chars\")\n                \n                # Log any warnings from adaptation",
          "values": {
            "strings": [
              "formatted_content",
              "[LinkedInWrapper] Content adapted dla LinkedIn: {content_adaptation[",
              "]} → {content_adaptation[",
              "]} chars"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 1007,
          "snippet": "                if content_adaptation.get(\"warnings\"):\n                    for warning in content_adaptation[\"warnings\"]:\n                        logger.warning(f\"[LinkedInWrapper] Content adaptation warning: {warning}\")\n            \n            # Build command z adapted content",
          "values": {
            "strings": [
              "warnings",
              "warnings",
              "[LinkedInWrapper] Content adaptation warning: {warning}"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 1023,
          "snippet": "                command.extend(['--schedule', request.schedule_time])\n            \n            logger.info(f\"[LinkedInWrapper] Executing publish command dla account: {request.account}\")\n            \n            # Execute publish command",
          "values": {
            "strings": [
              "--schedule",
              "[LinkedInWrapper] Executing publish command dla account: {request.account}"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 1030,
          "snippet": "            # Task 7.4: Analyze errors if command failed\n            if not result.get(\"success\", True):\n                error_details = self.analyze_linkedin_error(\n                    result[\"output\"], \n                    ' '.join(command),",
          "values": {
            "strings": [
              "success",
              "output"
            ],
            "numbers": [
              7,
              4
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 1041,
          "snippet": "                # Attempt automated recovery if possible\n                if recovery_plan.automated_recovery_possible and self.auto_recovery_enabled:\n                    logger.info(f\"[LinkedInWrapper] Attempting automated recovery dla publish error\")\n                    recovery_success = await self.attempt_automated_recovery(recovery_plan)\n                    ",
          "values": {
            "strings": [
              "[LinkedInWrapper] Attempting automated recovery dla publish error"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 1046,
          "snippet": "                    if recovery_success:\n                        # Retry publish after successful recovery\n                        logger.info(f\"[LinkedInWrapper] Retrying publish after successful recovery\")\n                        result = await self.execute_cli_command(command, timeout=120)\n                ",
          "values": {
            "strings": [
              "[LinkedInWrapper] Retrying publish after successful recovery"
            ],
            "numbers": [
              120
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 1052,
          "snippet": "                if not result.get(\"success\", True):\n                    error_code = self.map_error_to_code(error_details.error_type)\n                    return LinkedInPublishResponse(\n                        success=False,\n                        error=f\"[{error_code}] {error_details.message}\",",
          "values": {
            "strings": [
              "success",
              "[{error_code}] {error_details.message}"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 1068,
          "snippet": "            \n            # Create enhanced response\n            response = LinkedInPublishResponse(\n                success=parsed.get(\"published\", False),\n                post_url=parsed.get(\"post_url\"),",
          "values": {
            "strings": [
              "published",
              "post_url"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 1101,
          "snippet": "                    response.__dict__['content_suggestions'] = content_adaptation['suggestions']\n            \n            logger.info(f\"[LinkedInWrapper] Publish completed with status: {response.status}\")\n            \n            return response",
          "values": {
            "strings": [
              "content_suggestions",
              "suggestions",
              "[LinkedInWrapper] Publish completed with status: {response.status}"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 1108,
          "snippet": "            execution_time = time.time() - start_time\n            \n            logger.error(f\"[LinkedInWrapper] Publish failed: {e}\")\n            \n            return LinkedInPublishResponse(",
          "values": {
            "strings": [
              "[LinkedInWrapper] Publish failed: {e}"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 1110,
          "snippet": "            logger.error(f\"[LinkedInWrapper] Publish failed: {e}\")\n            \n            return LinkedInPublishResponse(\n                success=False,\n                error=str(e),",
          "values": {
            "strings": [
              "[LinkedInWrapper] Publish failed: {e}"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 1119,
          "snippet": "    async def diagnose_selectors(self, account: str = \"default\", fix: bool = False) -> Dict[str, Any]:\n        \"\"\"\n        Enhanced LinkedIn selector diagnostics with structured response\n        \n        Task 7.2: Enhanced diagnostic parsing and error categorization",
          "values": {
            "strings": [
              "default"
            ],
            "numbers": [
              7,
              2
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 1134,
          "snippet": "            command.append('--fix')\n        \n        logger.info(f\"[LinkedInWrapper] Running diagnostics for account: {account}\")\n        \n        result = await self.execute_cli_command(command, timeout=60)",
          "values": {
            "strings": [
              "--fix",
              "[LinkedInWrapper] Running diagnostics for account: {account}"
            ],
            "numbers": [
              60
            ]
          }
        },
        {
          "type": "required_elements",
          "platform": "linkedin",
          "line": 1146,
          "snippet": "            \"cli_output\": result[\"output\"],\n            \"error_message\": result[\"error\"] if not result[\"success\"] else None,\n            **parsed  # Include all enhanced parsing results\n        }\n        ",
          "values": {
            "strings": [
              "cli_output",
              "output",
              "error_message",
              "error",
              "success"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 1149,
          "snippet": "        }\n        \n        logger.info(f\"[LinkedInWrapper] Diagnostics completed - {enhanced_result.get('working_selectors', 0)}/{enhanced_result.get('total_selectors', 0)} selectors working\")\n        \n        return enhanced_result",
          "values": {
            "strings": [
              "[LinkedInWrapper] Diagnostics completed - {enhanced_result.get(",
              ", 0)}/{enhanced_result.get(",
              ", 0)} selectors working"
            ],
            "numbers": [
              0,
              0
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 1188,
          "snippet": "            \n        except Exception as e:\n            logger.error(f\"[LinkedInWrapper] Failed to get enhanced session info: {e}\")\n            return {\n                \"account\": account,",
          "values": {
            "strings": [
              "[LinkedInWrapper] Failed to get enhanced session info: {e}",
              "account"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 1237,
          "snippet": "            \n        except Exception as e:\n            logger.error(f\"[LinkedInWrapper] Enhanced command execution failed: {e}\")\n            return {\n                \"command\": ' '.join(full_command),",
          "values": {
            "strings": [
              "[LinkedInWrapper] Enhanced command execution failed: {e}",
              "command"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 1267,
          "snippet": "            return \"generic\"\n    \n    # Task 7.4: LinkedIn-Specific Error Handling\n    \n    def analyze_linkedin_error(self, output: str, command: str = \"\", account: str = \"default\") -> LinkedInErrorDetails:",
          "values": {
            "strings": [
              "generic",
              ", account: str = "
            ],
            "numbers": [
              7,
              4
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 1269,
          "snippet": "    # Task 7.4: LinkedIn-Specific Error Handling\n    \n    def analyze_linkedin_error(self, output: str, command: str = \"\", account: str = \"default\") -> LinkedInErrorDetails:\n        \"\"\"\n        Task 7.4: Comprehensive LinkedIn error analysis",
          "values": {
            "strings": [
              ", account: str = ",
              ") -> LinkedInErrorDetails:\n        "
            ],
            "numbers": [
              7,
              4,
              7,
              4
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 1271,
          "snippet": "    def analyze_linkedin_error(self, output: str, command: str = \"\", account: str = \"default\") -> LinkedInErrorDetails:\n        \"\"\"\n        Task 7.4: Comprehensive LinkedIn error analysis\n        \n        Args:",
          "values": {
            "strings": [
              ", account: str = ",
              ") -> LinkedInErrorDetails:\n        "
            ],
            "numbers": [
              7,
              4
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 1281,
          "snippet": "            Detailed error analysis z recovery recommendations\n        \"\"\"\n        logger.info(f\"[LinkedInWrapper] Analyzing LinkedIn error dla command: {command}\")\n        \n        # Detect error type using pattern matching",
          "values": {
            "strings": [
              "\n        logger.info(f"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 1288,
          "snippet": "        \n        # Create error details\n        error_details = LinkedInErrorDetails(\n            error_type=error_type,\n            severity=severity,",
          "values": {
            "strings": [],
            "numbers": []
          }
        },
        {
          "type": "required_elements",
          "platform": "linkedin",
          "line": 1311,
          "snippet": "        \n        # Determine if escalation is needed\n        error_details.escalation_required = self._should_escalate_error(error_details)\n        \n        logger.info(f\"[LinkedInWrapper] Error analyzed: {error_type.value} (severity: {severity.value})\")",
          "values": {
            "strings": [
              "[LinkedInWrapper] Error analyzed: {error_type.value} (severity: {severity.value})"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 1313,
          "snippet": "        error_details.escalation_required = self._should_escalate_error(error_details)\n        \n        logger.info(f\"[LinkedInWrapper] Error analyzed: {error_type.value} (severity: {severity.value})\")\n        \n        return error_details",
          "values": {
            "strings": [
              "[LinkedInWrapper] Error analyzed: {error_type.value} (severity: {severity.value})"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 1317,
          "snippet": "        return error_details\n    \n    def _detect_error_type(self, output: str) -> LinkedInErrorType:\n        \"\"\"Detect LinkedIn error type from CLI output\"\"\"\n        output_lower = output.lower()",
          "values": {
            "strings": [
              "Detect LinkedIn error type from CLI output"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 1318,
          "snippet": "    \n    def _detect_error_type(self, output: str) -> LinkedInErrorType:\n        \"\"\"Detect LinkedIn error type from CLI output\"\"\"\n        output_lower = output.lower()\n        ",
          "values": {
            "strings": [
              "Detect LinkedIn error type from CLI output"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 1324,
          "snippet": "        if any(phrase in output_lower for phrase in ['session expired', 'session invalid', 'session not found']):\n            if 'expired' in output_lower:\n                return LinkedInErrorType.SESSION_EXPIRED\n            elif 'invalid' in output_lower:\n                return LinkedInErrorType.SESSION_INVALID",
          "values": {
            "strings": [
              "session expired",
              "session invalid",
              "session not found",
              "expired",
              "invalid"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 1326,
          "snippet": "                return LinkedInErrorType.SESSION_EXPIRED\n            elif 'invalid' in output_lower:\n                return LinkedInErrorType.SESSION_INVALID\n            else:\n                return LinkedInErrorType.SESSION_NOT_FOUND",
          "values": {
            "strings": [
              "invalid"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 1328,
          "snippet": "                return LinkedInErrorType.SESSION_INVALID\n            else:\n                return LinkedInErrorType.SESSION_NOT_FOUND\n        \n        if any(phrase in output_lower for phrase in ['login required', 'please log in', 'not logged in']):",
          "values": {
            "strings": [
              "login required",
              "please log in",
              "not logged in"
            ],
            "numbers": []
          }
        },
        {
          "type": "required_elements",
          "platform": "linkedin",
          "line": 1330,
          "snippet": "                return LinkedInErrorType.SESSION_NOT_FOUND\n        \n        if any(phrase in output_lower for phrase in ['login required', 'please log in', 'not logged in']):\n            return LinkedInErrorType.LOGIN_REQUIRED\n        ",
          "values": {
            "strings": [
              "login required",
              "please log in",
              "not logged in"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 1331,
          "snippet": "        \n        if any(phrase in output_lower for phrase in ['login required', 'please log in', 'not logged in']):\n            return LinkedInErrorType.LOGIN_REQUIRED\n        \n        # Selector-related errors",
          "values": {
            "strings": [
              "login required",
              "please log in",
              "not logged in"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 1335,
          "snippet": "        # Selector-related errors\n        if any(phrase in output_lower for phrase in ['selector not found', 'element not found', 'could not find element']):\n            return LinkedInErrorType.SELECTOR_NOT_FOUND\n        \n        if any(phrase in output_lower for phrase in ['selector changed', 'page structure changed', 'layout changed']):",
          "values": {
            "strings": [
              "selector not found",
              "element not found",
              "could not find element",
              "selector changed",
              "page structure changed",
              "layout changed"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 1338,
          "snippet": "        \n        if any(phrase in output_lower for phrase in ['selector changed', 'page structure changed', 'layout changed']):\n            return LinkedInErrorType.SELECTOR_CHANGED\n        \n        if any(phrase in output_lower for phrase in ['element not clickable', 'element not interactable', 'cannot click']):",
          "values": {
            "strings": [
              "selector changed",
              "page structure changed",
              "layout changed",
              "element not clickable",
              "element not interactable",
              "cannot click"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 1341,
          "snippet": "        \n        if any(phrase in output_lower for phrase in ['element not clickable', 'element not interactable', 'cannot click']):\n            return LinkedInErrorType.ELEMENT_NOT_CLICKABLE\n        \n        # Rate limiting",
          "values": {
            "strings": [
              "element not clickable",
              "element not interactable",
              "cannot click"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 1346,
          "snippet": "        if any(phrase in output_lower for phrase in ['rate limited', 'rate limit exceeded', 'too many requests']):\n            if 'daily limit' in output_lower:\n                return LinkedInErrorType.DAILY_LIMIT_EXCEEDED\n            elif 'too many' in output_lower:\n                return LinkedInErrorType.TOO_MANY_REQUESTS",
          "values": {
            "strings": [
              "rate limited",
              "rate limit exceeded",
              "too many requests",
              "daily limit",
              "too many"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 1348,
          "snippet": "                return LinkedInErrorType.DAILY_LIMIT_EXCEEDED\n            elif 'too many' in output_lower:\n                return LinkedInErrorType.TOO_MANY_REQUESTS\n            else:\n                return LinkedInErrorType.RATE_LIMITED",
          "values": {
            "strings": [
              "too many"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 1350,
          "snippet": "                return LinkedInErrorType.TOO_MANY_REQUESTS\n            else:\n                return LinkedInErrorType.RATE_LIMITED\n        \n        # Content-related errors",
          "values": {
            "strings": [],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 1354,
          "snippet": "        # Content-related errors\n        if any(phrase in output_lower for phrase in ['content too long', 'text too long', 'exceeds character limit']):\n            return LinkedInErrorType.CONTENT_TOO_LONG\n        \n        if any(phrase in output_lower for phrase in ['content rejected', 'post rejected', 'inappropriate content']):",
          "values": {
            "strings": [
              "content too long",
              "text too long",
              "exceeds character limit",
              "content rejected",
              "post rejected",
              "inappropriate content"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 1358,
          "snippet": "        if any(phrase in output_lower for phrase in ['content rejected', 'post rejected', 'inappropriate content']):\n            if 'inappropriate' in output_lower:\n                return LinkedInErrorType.INAPPROPRIATE_CONTENT\n            else:\n                return LinkedInErrorType.CONTENT_REJECTED",
          "values": {
            "strings": [
              "content rejected",
              "post rejected",
              "inappropriate content",
              "inappropriate"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 1360,
          "snippet": "                return LinkedInErrorType.INAPPROPRIATE_CONTENT\n            else:\n                return LinkedInErrorType.CONTENT_REJECTED\n        \n        if any(phrase in output_lower for phrase in ['duplicate content', 'duplicate post', 'already posted']):",
          "values": {
            "strings": [
              "duplicate content",
              "duplicate post",
              "already posted"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 1363,
          "snippet": "        \n        if any(phrase in output_lower for phrase in ['duplicate content', 'duplicate post', 'already posted']):\n            return LinkedInErrorType.DUPLICATE_CONTENT\n        \n        # Network errors",
          "values": {
            "strings": [
              "duplicate content",
              "duplicate post",
              "already posted"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 1367,
          "snippet": "        # Network errors\n        if any(phrase in output_lower for phrase in ['timeout', 'timed out', 'connection timeout']):\n            return LinkedInErrorType.NETWORK_TIMEOUT\n        \n        if any(phrase in output_lower for phrase in ['connection failed', 'network error', 'connection refused']):",
          "values": {
            "strings": [
              "timeout",
              "timed out",
              "connection timeout",
              "connection failed",
              "network error",
              "connection refused"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 1370,
          "snippet": "        \n        if any(phrase in output_lower for phrase in ['connection failed', 'network error', 'connection refused']):\n            return LinkedInErrorType.CONNECTION_FAILED\n        \n        if any(phrase in output_lower for phrase in ['dns error', 'hostname not found', 'dns resolution failed']):",
          "values": {
            "strings": [
              "connection failed",
              "network error",
              "connection refused",
              "dns error",
              "hostname not found",
              "dns resolution failed"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 1373,
          "snippet": "        \n        if any(phrase in output_lower for phrase in ['dns error', 'hostname not found', 'dns resolution failed']):\n            return LinkedInErrorType.DNS_RESOLUTION_FAILED\n        \n        # Platform errors",
          "values": {
            "strings": [
              "dns error",
              "hostname not found",
              "dns resolution failed"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 1376,
          "snippet": "        \n        # Platform errors\n        if any(phrase in output_lower for phrase in ['linkedin down', 'service unavailable', 'linkedin unavailable']):\n            return LinkedInErrorType.LINKEDIN_DOWN\n        ",
          "values": {
            "strings": [
              "linkedin down",
              "service unavailable",
              "linkedin unavailable"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 1377,
          "snippet": "        # Platform errors\n        if any(phrase in output_lower for phrase in ['linkedin down', 'service unavailable', 'linkedin unavailable']):\n            return LinkedInErrorType.LINKEDIN_DOWN\n        \n        if any(phrase in output_lower for phrase in ['maintenance mode', 'under maintenance', 'scheduled maintenance']):",
          "values": {
            "strings": [
              "linkedin down",
              "service unavailable",
              "linkedin unavailable",
              "maintenance mode",
              "under maintenance",
              "scheduled maintenance"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 1380,
          "snippet": "        \n        if any(phrase in output_lower for phrase in ['maintenance mode', 'under maintenance', 'scheduled maintenance']):\n            return LinkedInErrorType.MAINTENANCE_MODE\n        \n        # Permission errors",
          "values": {
            "strings": [
              "maintenance mode",
              "under maintenance",
              "scheduled maintenance"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 1384,
          "snippet": "        # Permission errors\n        if any(phrase in output_lower for phrase in ['account suspended', 'account disabled', 'account banned']):\n            return LinkedInErrorType.ACCOUNT_SUSPENDED\n        \n        if any(phrase in output_lower for phrase in ['posting disabled', 'posting not allowed', 'cannot post']):",
          "values": {
            "strings": [
              "account suspended",
              "account disabled",
              "account banned",
              "posting disabled",
              "posting not allowed",
              "cannot post"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 1387,
          "snippet": "        \n        if any(phrase in output_lower for phrase in ['posting disabled', 'posting not allowed', 'cannot post']):\n            return LinkedInErrorType.POSTING_DISABLED\n        \n        if any(phrase in output_lower for phrase in ['insufficient permissions', 'access denied', 'permission denied']):",
          "values": {
            "strings": [
              "posting disabled",
              "posting not allowed",
              "cannot post",
              "insufficient permissions",
              "access denied",
              "permission denied"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 1390,
          "snippet": "        \n        if any(phrase in output_lower for phrase in ['insufficient permissions', 'access denied', 'permission denied']):\n            return LinkedInErrorType.INSUFFICIENT_PERMISSIONS\n        \n        # Browser/CLI errors",
          "values": {
            "strings": [
              "insufficient permissions",
              "access denied",
              "permission denied"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 1394,
          "snippet": "        # Browser/CLI errors\n        if any(phrase in output_lower for phrase in ['browser crashed', 'browser error', 'browser not responding']):\n            return LinkedInErrorType.BROWSER_CRASHED\n        \n        if any(phrase in output_lower for phrase in ['browser not found', 'chromium not found', 'chrome not found']):",
          "values": {
            "strings": [
              "browser crashed",
              "browser error",
              "browser not responding",
              "browser not found",
              "chromium not found",
              "chrome not found"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 1397,
          "snippet": "        \n        if any(phrase in output_lower for phrase in ['browser not found', 'chromium not found', 'chrome not found']):\n            return LinkedInErrorType.BROWSER_NOT_FOUND\n        \n        if any(phrase in output_lower for phrase in ['node error', 'nodejs error', 'node.js error']):",
          "values": {
            "strings": [
              "browser not found",
              "chromium not found",
              "chrome not found",
              "node error",
              "nodejs error",
              "node.js error"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 1400,
          "snippet": "        \n        if any(phrase in output_lower for phrase in ['node error', 'nodejs error', 'node.js error']):\n            return LinkedInErrorType.NODE_JS_ERROR\n        \n        # Default to unknown",
          "values": {
            "strings": [
              "node error",
              "nodejs error",
              "node.js error"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 1403,
          "snippet": "        \n        # Default to unknown\n        return LinkedInErrorType.UNKNOWN_ERROR\n    \n    def _determine_error_severity(self, error_type: LinkedInErrorType, output: str) -> LinkedInErrorSeverity:",
          "values": {
            "strings": [],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 1405,
          "snippet": "        return LinkedInErrorType.UNKNOWN_ERROR\n    \n    def _determine_error_severity(self, error_type: LinkedInErrorType, output: str) -> LinkedInErrorSeverity:\n        \"\"\"Determine error severity based on type and context\"\"\"\n        critical_errors = [",
          "values": {
            "strings": [
              "Determine error severity based on type and context"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 1408,
          "snippet": "        \"\"\"Determine error severity based on type and context\"\"\"\n        critical_errors = [\n            LinkedInErrorType.ACCOUNT_SUSPENDED,\n            LinkedInErrorType.BROWSER_CRASHED,\n            LinkedInErrorType.CLI_ERROR,",
          "values": {
            "strings": [
              "Determine error severity based on type and context"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 1409,
          "snippet": "        critical_errors = [\n            LinkedInErrorType.ACCOUNT_SUSPENDED,\n            LinkedInErrorType.BROWSER_CRASHED,\n            LinkedInErrorType.CLI_ERROR,\n            LinkedInErrorType.NODE_JS_ERROR",
          "values": {
            "strings": [],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 1410,
          "snippet": "            LinkedInErrorType.ACCOUNT_SUSPENDED,\n            LinkedInErrorType.BROWSER_CRASHED,\n            LinkedInErrorType.CLI_ERROR,\n            LinkedInErrorType.NODE_JS_ERROR\n        ]",
          "values": {
            "strings": [],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 1411,
          "snippet": "            LinkedInErrorType.BROWSER_CRASHED,\n            LinkedInErrorType.CLI_ERROR,\n            LinkedInErrorType.NODE_JS_ERROR\n        ]\n        ",
          "values": {
            "strings": [],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 1415,
          "snippet": "        \n        high_errors = [\n            LinkedInErrorType.SESSION_EXPIRED,\n            LinkedInErrorType.SESSION_INVALID,\n            LinkedInErrorType.LINKEDIN_DOWN,",
          "values": {
            "strings": [],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 1416,
          "snippet": "        high_errors = [\n            LinkedInErrorType.SESSION_EXPIRED,\n            LinkedInErrorType.SESSION_INVALID,\n            LinkedInErrorType.LINKEDIN_DOWN,\n            LinkedInErrorType.POSTING_DISABLED,",
          "values": {
            "strings": [],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 1417,
          "snippet": "            LinkedInErrorType.SESSION_EXPIRED,\n            LinkedInErrorType.SESSION_INVALID,\n            LinkedInErrorType.LINKEDIN_DOWN,\n            LinkedInErrorType.POSTING_DISABLED,\n            LinkedInErrorType.DAILY_LIMIT_EXCEEDED",
          "values": {
            "strings": [],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 1418,
          "snippet": "            LinkedInErrorType.SESSION_INVALID,\n            LinkedInErrorType.LINKEDIN_DOWN,\n            LinkedInErrorType.POSTING_DISABLED,\n            LinkedInErrorType.DAILY_LIMIT_EXCEEDED\n        ]",
          "values": {
            "strings": [],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 1419,
          "snippet": "            LinkedInErrorType.LINKEDIN_DOWN,\n            LinkedInErrorType.POSTING_DISABLED,\n            LinkedInErrorType.DAILY_LIMIT_EXCEEDED\n        ]\n        ",
          "values": {
            "strings": [],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 1423,
          "snippet": "        \n        medium_errors = [\n            LinkedInErrorType.SELECTOR_NOT_FOUND,\n            LinkedInErrorType.SELECTOR_CHANGED,\n            LinkedInErrorType.RATE_LIMITED,",
          "values": {
            "strings": [],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 1424,
          "snippet": "        medium_errors = [\n            LinkedInErrorType.SELECTOR_NOT_FOUND,\n            LinkedInErrorType.SELECTOR_CHANGED,\n            LinkedInErrorType.RATE_LIMITED,\n            LinkedInErrorType.CONTENT_REJECTED,",
          "values": {
            "strings": [],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 1425,
          "snippet": "            LinkedInErrorType.SELECTOR_NOT_FOUND,\n            LinkedInErrorType.SELECTOR_CHANGED,\n            LinkedInErrorType.RATE_LIMITED,\n            LinkedInErrorType.CONTENT_REJECTED,\n            LinkedInErrorType.NETWORK_TIMEOUT",
          "values": {
            "strings": [],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 1426,
          "snippet": "            LinkedInErrorType.SELECTOR_CHANGED,\n            LinkedInErrorType.RATE_LIMITED,\n            LinkedInErrorType.CONTENT_REJECTED,\n            LinkedInErrorType.NETWORK_TIMEOUT\n        ]",
          "values": {
            "strings": [],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 1427,
          "snippet": "            LinkedInErrorType.RATE_LIMITED,\n            LinkedInErrorType.CONTENT_REJECTED,\n            LinkedInErrorType.NETWORK_TIMEOUT\n        ]\n        ",
          "values": {
            "strings": [],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 1431,
          "snippet": "        \n        low_errors = [\n            LinkedInErrorType.CONTENT_TOO_LONG,\n            LinkedInErrorType.DUPLICATE_CONTENT,\n            LinkedInErrorType.ELEMENT_NOT_CLICKABLE",
          "values": {
            "strings": [],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 1432,
          "snippet": "        low_errors = [\n            LinkedInErrorType.CONTENT_TOO_LONG,\n            LinkedInErrorType.DUPLICATE_CONTENT,\n            LinkedInErrorType.ELEMENT_NOT_CLICKABLE\n        ]",
          "values": {
            "strings": [],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 1433,
          "snippet": "            LinkedInErrorType.CONTENT_TOO_LONG,\n            LinkedInErrorType.DUPLICATE_CONTENT,\n            LinkedInErrorType.ELEMENT_NOT_CLICKABLE\n        ]\n        ",
          "values": {
            "strings": [],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 1437,
          "snippet": "        \n        if error_type in critical_errors:\n            return LinkedInErrorSeverity.CRITICAL\n        elif error_type in high_errors:\n            return LinkedInErrorSeverity.HIGH",
          "values": {
            "strings": [],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 1439,
          "snippet": "            return LinkedInErrorSeverity.CRITICAL\n        elif error_type in high_errors:\n            return LinkedInErrorSeverity.HIGH\n        elif error_type in medium_errors:\n            return LinkedInErrorSeverity.MEDIUM",
          "values": {
            "strings": [],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 1441,
          "snippet": "            return LinkedInErrorSeverity.HIGH\n        elif error_type in medium_errors:\n            return LinkedInErrorSeverity.MEDIUM\n        elif error_type in low_errors:\n            return LinkedInErrorSeverity.LOW",
          "values": {
            "strings": [],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 1443,
          "snippet": "            return LinkedInErrorSeverity.MEDIUM\n        elif error_type in low_errors:\n            return LinkedInErrorSeverity.LOW\n        else:\n            return LinkedInErrorSeverity.MEDIUM  # Default",
          "values": {
            "strings": [],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 1445,
          "snippet": "            return LinkedInErrorSeverity.LOW\n        else:\n            return LinkedInErrorSeverity.MEDIUM  # Default\n    \n    def _extract_error_message(self, output: str) -> str:",
          "values": {
            "strings": [],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 1469,
          "snippet": "        return \"Unknown error occurred\"\n    \n    def _enrich_error_details(self, error_details: LinkedInErrorDetails, output: str):\n        \"\"\"Enrich error details z additional context\"\"\"\n        ",
          "values": {
            "strings": [
              "Unknown error occurred",
              "Enrich error details z additional context"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 1474,
          "snippet": "        # Set recoverability based on error type\n        recoverable_errors = [\n            LinkedInErrorType.SESSION_EXPIRED,\n            LinkedInErrorType.SELECTOR_NOT_FOUND,\n            LinkedInErrorType.NETWORK_TIMEOUT,",
          "values": {
            "strings": [],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 1475,
          "snippet": "        recoverable_errors = [\n            LinkedInErrorType.SESSION_EXPIRED,\n            LinkedInErrorType.SELECTOR_NOT_FOUND,\n            LinkedInErrorType.NETWORK_TIMEOUT,\n            LinkedInErrorType.RATE_LIMITED,",
          "values": {
            "strings": [],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 1476,
          "snippet": "            LinkedInErrorType.SESSION_EXPIRED,\n            LinkedInErrorType.SELECTOR_NOT_FOUND,\n            LinkedInErrorType.NETWORK_TIMEOUT,\n            LinkedInErrorType.RATE_LIMITED,\n            LinkedInErrorType.CONTENT_TOO_LONG,",
          "values": {
            "strings": [],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 1477,
          "snippet": "            LinkedInErrorType.SELECTOR_NOT_FOUND,\n            LinkedInErrorType.NETWORK_TIMEOUT,\n            LinkedInErrorType.RATE_LIMITED,\n            LinkedInErrorType.CONTENT_TOO_LONG,\n            LinkedInErrorType.ELEMENT_NOT_CLICKABLE",
          "values": {
            "strings": [],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 1478,
          "snippet": "            LinkedInErrorType.NETWORK_TIMEOUT,\n            LinkedInErrorType.RATE_LIMITED,\n            LinkedInErrorType.CONTENT_TOO_LONG,\n            LinkedInErrorType.ELEMENT_NOT_CLICKABLE\n        ]",
          "values": {
            "strings": [],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 1479,
          "snippet": "            LinkedInErrorType.RATE_LIMITED,\n            LinkedInErrorType.CONTENT_TOO_LONG,\n            LinkedInErrorType.ELEMENT_NOT_CLICKABLE\n        ]\n        ",
          "values": {
            "strings": [],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 1483,
          "snippet": "        \n        auto_retry_errors = [\n            LinkedInErrorType.NETWORK_TIMEOUT,\n            LinkedInErrorType.CONNECTION_FAILED,\n            LinkedInErrorType.ELEMENT_NOT_CLICKABLE",
          "values": {
            "strings": [],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 1484,
          "snippet": "        auto_retry_errors = [\n            LinkedInErrorType.NETWORK_TIMEOUT,\n            LinkedInErrorType.CONNECTION_FAILED,\n            LinkedInErrorType.ELEMENT_NOT_CLICKABLE\n        ]",
          "values": {
            "strings": [],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 1485,
          "snippet": "            LinkedInErrorType.NETWORK_TIMEOUT,\n            LinkedInErrorType.CONNECTION_FAILED,\n            LinkedInErrorType.ELEMENT_NOT_CLICKABLE\n        ]\n        ",
          "values": {
            "strings": [],
            "numbers": []
          }
        },
        {
          "type": "required_elements",
          "platform": "linkedin",
          "line": 1490,
          "snippet": "        error_details.is_recoverable = error_details.error_type in recoverable_errors\n        error_details.auto_retry_possible = error_details.error_type in auto_retry_errors\n        error_details.manual_intervention_required = not error_details.auto_retry_possible\n        \n        # Set estimated recovery time",
          "values": {
            "strings": [],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 1494,
          "snippet": "        # Set estimated recovery time\n        recovery_times = {\n            LinkedInErrorType.SESSION_EXPIRED: 30,\n            LinkedInErrorType.RATE_LIMITED: 300,\n            LinkedInErrorType.NETWORK_TIMEOUT: 60,",
          "values": {
            "strings": [],
            "numbers": [
              30,
              300,
              60
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 1495,
          "snippet": "        recovery_times = {\n            LinkedInErrorType.SESSION_EXPIRED: 30,\n            LinkedInErrorType.RATE_LIMITED: 300,\n            LinkedInErrorType.NETWORK_TIMEOUT: 60,\n            LinkedInErrorType.SELECTOR_NOT_FOUND: 120,",
          "values": {
            "strings": [],
            "numbers": [
              30,
              300,
              60,
              120
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 1496,
          "snippet": "            LinkedInErrorType.SESSION_EXPIRED: 30,\n            LinkedInErrorType.RATE_LIMITED: 300,\n            LinkedInErrorType.NETWORK_TIMEOUT: 60,\n            LinkedInErrorType.SELECTOR_NOT_FOUND: 120,\n            LinkedInErrorType.CONTENT_TOO_LONG: 10",
          "values": {
            "strings": [],
            "numbers": [
              30,
              300,
              60,
              120,
              10
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 1497,
          "snippet": "            LinkedInErrorType.RATE_LIMITED: 300,\n            LinkedInErrorType.NETWORK_TIMEOUT: 60,\n            LinkedInErrorType.SELECTOR_NOT_FOUND: 120,\n            LinkedInErrorType.CONTENT_TOO_LONG: 10\n        }",
          "values": {
            "strings": [],
            "numbers": [
              300,
              60,
              120,
              10
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 1498,
          "snippet": "            LinkedInErrorType.NETWORK_TIMEOUT: 60,\n            LinkedInErrorType.SELECTOR_NOT_FOUND: 120,\n            LinkedInErrorType.CONTENT_TOO_LONG: 10\n        }\n        ",
          "values": {
            "strings": [],
            "numbers": [
              60,
              120,
              10
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 1510,
          "snippet": "                error_details.error_code = code_part.strip()\n    \n    def _generate_immediate_actions(self, error_details: LinkedInErrorDetails) -> List[str]:\n        \"\"\"Generate immediate action recommendations\"\"\"\n        actions = []",
          "values": {
            "strings": [
              "Generate immediate action recommendations"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 1516,
          "snippet": "        error_type = error_details.error_type\n        \n        if error_type == LinkedInErrorType.SESSION_EXPIRED:\n            actions.extend([\n                \"Create new session using 'session create' command\",",
          "values": {
            "strings": [
              "Create new session using ",
              " command"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 1523,
          "snippet": "            ])\n        \n        elif error_type == LinkedInErrorType.SELECTOR_NOT_FOUND:\n            actions.extend([\n                \"Run diagnostics to check current selectors\",",
          "values": {
            "strings": [
              "Run diagnostics to check current selectors"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 1526,
          "snippet": "            actions.extend([\n                \"Run diagnostics to check current selectors\",\n                \"Update selectors if LinkedIn UI changed\",\n                \"Try alternative publishing method\"\n            ])",
          "values": {
            "strings": [
              "Run diagnostics to check current selectors",
              "Update selectors if LinkedIn UI changed",
              "Try alternative publishing method"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 1530,
          "snippet": "            ])\n        \n        elif error_type == LinkedInErrorType.RATE_LIMITED:\n            actions.extend([\n                f\"Wait {error_details.estimated_recovery_time // 60} minutes before retry\",",
          "values": {
            "strings": [
              "Wait {error_details.estimated_recovery_time // 60} minutes before retry"
            ],
            "numbers": [
              60
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 1537,
          "snippet": "            ])\n        \n        elif error_type == LinkedInErrorType.CONTENT_TOO_LONG:\n            actions.extend([\n                \"Reduce content length to fit LinkedIn limits\",",
          "values": {
            "strings": [
              "Reduce content length to fit LinkedIn limits"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 1539,
          "snippet": "        elif error_type == LinkedInErrorType.CONTENT_TOO_LONG:\n            actions.extend([\n                \"Reduce content length to fit LinkedIn limits\",\n                \"Split content into multiple posts\",\n                \"Use summary/preview approach\"",
          "values": {
            "strings": [
              "Reduce content length to fit LinkedIn limits",
              "Split content into multiple posts",
              "Use summary/preview approach"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 1544,
          "snippet": "            ])\n        \n        elif error_type == LinkedInErrorType.NETWORK_TIMEOUT:\n            actions.extend([\n                \"Check internet connectivity\",",
          "values": {
            "strings": [
              "Check internet connectivity"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 1551,
          "snippet": "            ])\n        \n        elif error_type == LinkedInErrorType.BROWSER_CRASHED:\n            actions.extend([\n                \"Restart browser/CLI process\",",
          "values": {
            "strings": [
              "Restart browser/CLI process"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 1558,
          "snippet": "            ])\n        \n        elif error_type == LinkedInErrorType.LINKEDIN_DOWN:\n            actions.extend([\n                \"Check LinkedIn status page\",",
          "values": {
            "strings": [
              "Check LinkedIn status page"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 1560,
          "snippet": "        elif error_type == LinkedInErrorType.LINKEDIN_DOWN:\n            actions.extend([\n                \"Check LinkedIn status page\",\n                \"Wait for service restoration\",\n                \"Monitor LinkedIn announcements\"",
          "values": {
            "strings": [
              "Check LinkedIn status page",
              "Wait for service restoration",
              "Monitor LinkedIn announcements"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 1562,
          "snippet": "                \"Check LinkedIn status page\",\n                \"Wait for service restoration\",\n                \"Monitor LinkedIn announcements\"\n            ])\n        ",
          "values": {
            "strings": [
              "Check LinkedIn status page",
              "Wait for service restoration",
              "Monitor LinkedIn announcements"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 1565,
          "snippet": "            ])\n        \n        elif error_type == LinkedInErrorType.POSTING_DISABLED:\n            actions.extend([\n                \"Review account status\",",
          "values": {
            "strings": [
              "Review account status"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 1569,
          "snippet": "                \"Review account status\",\n                \"Check for policy violations\",\n                \"Contact LinkedIn support if needed\"\n            ])\n        ",
          "values": {
            "strings": [
              "Review account status",
              "Check for policy violations",
              "Contact LinkedIn support if needed"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 1582,
          "snippet": "        return actions\n    \n    def _generate_preventive_measures(self, error_details: LinkedInErrorDetails) -> List[str]:\n        \"\"\"Generate preventive measures to avoid similar errors\"\"\"\n        measures = []",
          "values": {
            "strings": [
              "Generate preventive measures to avoid similar errors"
            ],
            "numbers": []
          }
        },
        {
          "type": "forbidden_phrases",
          "platform": "linkedin",
          "line": 1583,
          "snippet": "    \n    def _generate_preventive_measures(self, error_details: LinkedInErrorDetails) -> List[str]:\n        \"\"\"Generate preventive measures to avoid similar errors\"\"\"\n        measures = []\n        ",
          "values": {
            "strings": [
              "Generate preventive measures to avoid similar errors"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 1588,
          "snippet": "        error_type = error_details.error_type\n        \n        if error_type in [LinkedInErrorType.SESSION_EXPIRED, LinkedInErrorType.SESSION_INVALID]:\n            measures.extend([\n                \"Enable session health monitoring\",",
          "values": {
            "strings": [
              "Enable session health monitoring"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 1595,
          "snippet": "            ])\n        \n        elif error_type in [LinkedInErrorType.SELECTOR_NOT_FOUND, LinkedInErrorType.SELECTOR_CHANGED]:\n            measures.extend([\n                \"Enable automatic selector diagnostics\",",
          "values": {
            "strings": [
              "Enable automatic selector diagnostics"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 1599,
          "snippet": "                \"Enable automatic selector diagnostics\",\n                \"Implement fallback selector strategies\",\n                \"Monitor LinkedIn UI changes\"\n            ])\n        ",
          "values": {
            "strings": [
              "Enable automatic selector diagnostics",
              "Implement fallback selector strategies",
              "Monitor LinkedIn UI changes"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 1602,
          "snippet": "            ])\n        \n        elif error_type in [LinkedInErrorType.RATE_LIMITED, LinkedInErrorType.TOO_MANY_REQUESTS]:\n            measures.extend([\n                \"Implement intelligent posting delays\",",
          "values": {
            "strings": [
              "Implement intelligent posting delays"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 1609,
          "snippet": "            ])\n        \n        elif error_type == LinkedInErrorType.NETWORK_TIMEOUT:\n            measures.extend([\n                \"Implement retry logic with exponential backoff\",",
          "values": {
            "strings": [
              "Implement retry logic with exponential backoff"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 1616,
          "snippet": "            ])\n        \n        elif error_type == LinkedInErrorType.CONTENT_TOO_LONG:\n            measures.extend([\n                \"Implement content length validation\",",
          "values": {
            "strings": [
              "Implement content length validation"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 1632,
          "snippet": "        return measures\n    \n    def _track_error_pattern(self, error_type: LinkedInErrorType):\n        \"\"\"Track error patterns dla analysis\"\"\"\n        if error_type in self.error_patterns:",
          "values": {
            "strings": [
              "Track error patterns dla analysis"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 1639,
          "snippet": "            self.error_patterns[error_type] = 1\n    \n    def _should_escalate_error(self, error_details: LinkedInErrorDetails) -> bool:\n        \"\"\"Determine if error requires escalation\"\"\"\n        ",
          "values": {
            "strings": [
              "Determine if error requires escalation"
            ],
            "numbers": [
              1
            ]
          }
        },
        {
          "type": "required_elements",
          "platform": "linkedin",
          "line": 1640,
          "snippet": "    \n    def _should_escalate_error(self, error_details: LinkedInErrorDetails) -> bool:\n        \"\"\"Determine if error requires escalation\"\"\"\n        \n        # Critical errors always require escalation",
          "values": {
            "strings": [
              "Determine if error requires escalation"
            ],
            "numbers": []
          }
        },
        {
          "type": "required_elements",
          "platform": "linkedin",
          "line": 1642,
          "snippet": "        \"\"\"Determine if error requires escalation\"\"\"\n        \n        # Critical errors always require escalation\n        if error_details.severity == LinkedInErrorSeverity.CRITICAL:\n            return True",
          "values": {
            "strings": [
              "Determine if error requires escalation"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 1643,
          "snippet": "        \n        # Critical errors always require escalation\n        if error_details.severity == LinkedInErrorSeverity.CRITICAL:\n            return True\n        ",
          "values": {
            "strings": [],
            "numbers": []
          }
        },
        {
          "type": "required_elements",
          "platform": "linkedin",
          "line": 1646,
          "snippet": "            return True\n        \n        # Frequent same errors require escalation\n        error_count = self.error_patterns.get(error_details.error_type, 0)\n        if error_count >= 5:  # 5 same errors in session",
          "values": {
            "strings": [],
            "numbers": [
              0,
              5,
              5
            ]
          }
        },
        {
          "type": "required_elements",
          "platform": "linkedin",
          "line": 1651,
          "snippet": "            return True\n        \n        # Account-level issues require escalation\n        account_critical_errors = [\n            LinkedInErrorType.ACCOUNT_SUSPENDED,",
          "values": {
            "strings": [],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 1653,
          "snippet": "        # Account-level issues require escalation\n        account_critical_errors = [\n            LinkedInErrorType.ACCOUNT_SUSPENDED,\n            LinkedInErrorType.POSTING_DISABLED,\n            LinkedInErrorType.INSUFFICIENT_PERMISSIONS",
          "values": {
            "strings": [],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 1654,
          "snippet": "        account_critical_errors = [\n            LinkedInErrorType.ACCOUNT_SUSPENDED,\n            LinkedInErrorType.POSTING_DISABLED,\n            LinkedInErrorType.INSUFFICIENT_PERMISSIONS\n        ]",
          "values": {
            "strings": [],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 1655,
          "snippet": "            LinkedInErrorType.ACCOUNT_SUSPENDED,\n            LinkedInErrorType.POSTING_DISABLED,\n            LinkedInErrorType.INSUFFICIENT_PERMISSIONS\n        ]\n        ",
          "values": {
            "strings": [],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 1663,
          "snippet": "        return False\n    \n    def create_recovery_plan(self, error_details: LinkedInErrorDetails) -> LinkedInErrorRecoveryPlan:\n        \"\"\"\n        Task 7.4: Create automated recovery plan dla LinkedIn error",
          "values": {
            "strings": [],
            "numbers": [
              7,
              4
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 1665,
          "snippet": "    def create_recovery_plan(self, error_details: LinkedInErrorDetails) -> LinkedInErrorRecoveryPlan:\n        \"\"\"\n        Task 7.4: Create automated recovery plan dla LinkedIn error\n        \n        Args:",
          "values": {
            "strings": [],
            "numbers": [
              7,
              4
            ]
          }
        },
        {
          "type": "required_elements",
          "platform": "linkedin",
          "line": 1676,
          "snippet": "        success_probability = 0.0\n        estimated_time = 60\n        requires_user_input = True\n        automated_recovery_possible = False\n        ",
          "values": {
            "strings": [],
            "numbers": [
              0,
              0,
              60
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 1681,
          "snippet": "        error_type = error_details.error_type\n        \n        if error_type == LinkedInErrorType.SESSION_EXPIRED:\n            recovery_steps = [\n                \"Validate current session status\",",
          "values": {
            "strings": [
              "Validate current session status"
            ],
            "numbers": []
          }
        },
        {
          "type": "required_elements",
          "platform": "linkedin",
          "line": 1691,
          "snippet": "            estimated_time = 60\n            automated_recovery_possible = True\n            requires_user_input = False\n        \n        elif error_type == LinkedInErrorType.SELECTOR_NOT_FOUND:",
          "values": {
            "strings": [],
            "numbers": [
              60
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 1693,
          "snippet": "            requires_user_input = False\n        \n        elif error_type == LinkedInErrorType.SELECTOR_NOT_FOUND:\n            recovery_steps = [\n                \"Run selector diagnostics\",",
          "values": {
            "strings": [
              "Run selector diagnostics"
            ],
            "numbers": []
          }
        },
        {
          "type": "required_elements",
          "platform": "linkedin",
          "line": 1703,
          "snippet": "            estimated_time = 120\n            automated_recovery_possible = True\n            requires_user_input = False\n        \n        elif error_type == LinkedInErrorType.RATE_LIMITED:",
          "values": {
            "strings": [],
            "numbers": [
              120
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 1705,
          "snippet": "            requires_user_input = False\n        \n        elif error_type == LinkedInErrorType.RATE_LIMITED:\n            wait_time = error_details.estimated_recovery_time or 300\n            recovery_steps = [",
          "values": {
            "strings": [],
            "numbers": [
              300
            ]
          }
        },
        {
          "type": "required_elements",
          "platform": "linkedin",
          "line": 1715,
          "snippet": "            estimated_time = wait_time\n            automated_recovery_possible = True\n            requires_user_input = False\n        \n        elif error_type == LinkedInErrorType.CONTENT_TOO_LONG:",
          "values": {
            "strings": [],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 1717,
          "snippet": "            requires_user_input = False\n        \n        elif error_type == LinkedInErrorType.CONTENT_TOO_LONG:\n            recovery_steps = [\n                \"Analyze content length requirements\",",
          "values": {
            "strings": [
              "Analyze content length requirements"
            ],
            "numbers": []
          }
        },
        {
          "type": "required_elements",
          "platform": "linkedin",
          "line": 1719,
          "snippet": "        elif error_type == LinkedInErrorType.CONTENT_TOO_LONG:\n            recovery_steps = [\n                \"Analyze content length requirements\",\n                \"Truncate content to fit limits\",\n                \"Retry publication z shortened content\"",
          "values": {
            "strings": [
              "Analyze content length requirements",
              "Truncate content to fit limits",
              "Retry publication z shortened content"
            ],
            "numbers": []
          }
        },
        {
          "type": "required_elements",
          "platform": "linkedin",
          "line": 1726,
          "snippet": "            estimated_time = 30\n            automated_recovery_possible = True\n            requires_user_input = False\n        \n        elif error_type == LinkedInErrorType.NETWORK_TIMEOUT:",
          "values": {
            "strings": [],
            "numbers": [
              30
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 1728,
          "snippet": "            requires_user_input = False\n        \n        elif error_type == LinkedInErrorType.NETWORK_TIMEOUT:\n            recovery_steps = [\n                \"Check network connectivity\",",
          "values": {
            "strings": [
              "Check network connectivity"
            ],
            "numbers": []
          }
        },
        {
          "type": "required_elements",
          "platform": "linkedin",
          "line": 1737,
          "snippet": "            estimated_time = 60\n            automated_recovery_possible = True\n            requires_user_input = False\n        \n        elif error_type == LinkedInErrorType.ELEMENT_NOT_CLICKABLE:",
          "values": {
            "strings": [],
            "numbers": [
              60
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 1739,
          "snippet": "            requires_user_input = False\n        \n        elif error_type == LinkedInErrorType.ELEMENT_NOT_CLICKABLE:\n            recovery_steps = [\n                \"Wait dla page load completion\",",
          "values": {
            "strings": [
              "Wait dla page load completion"
            ],
            "numbers": []
          }
        },
        {
          "type": "required_elements",
          "platform": "linkedin",
          "line": 1749,
          "snippet": "            estimated_time = 45\n            automated_recovery_possible = True\n            requires_user_input = False\n        \n        elif error_type in [LinkedInErrorType.ACCOUNT_SUSPENDED, LinkedInErrorType.POSTING_DISABLED]:",
          "values": {
            "strings": [],
            "numbers": [
              45
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 1751,
          "snippet": "            requires_user_input = False\n        \n        elif error_type in [LinkedInErrorType.ACCOUNT_SUSPENDED, LinkedInErrorType.POSTING_DISABLED]:\n            recovery_steps = [\n                \"Review account status i notifications\",",
          "values": {
            "strings": [
              "Review account status i notifications"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 1755,
          "snippet": "                \"Review account status i notifications\",\n                \"Check dla policy violations\",\n                \"Contact LinkedIn support if needed\",\n                \"Wait dla account restoration\"\n            ]",
          "values": {
            "strings": [
              "Review account status i notifications",
              "Check dla policy violations",
              "Contact LinkedIn support if needed",
              "Wait dla account restoration"
            ],
            "numbers": []
          }
        },
        {
          "type": "required_elements",
          "platform": "linkedin",
          "line": 1761,
          "snippet": "            estimated_time = 3600  # 1 hour minimum\n            automated_recovery_possible = False\n            requires_user_input = True\n        \n        elif error_type == LinkedInErrorType.LINKEDIN_DOWN:",
          "values": {
            "strings": [],
            "numbers": [
              3600,
              1
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 1763,
          "snippet": "            requires_user_input = True\n        \n        elif error_type == LinkedInErrorType.LINKEDIN_DOWN:\n            recovery_steps = [\n                \"Check LinkedIn status page\",",
          "values": {
            "strings": [
              "Check LinkedIn status page"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 1765,
          "snippet": "        elif error_type == LinkedInErrorType.LINKEDIN_DOWN:\n            recovery_steps = [\n                \"Check LinkedIn status page\",\n                \"Monitor service restoration\",\n                \"Retry after service is restored\"",
          "values": {
            "strings": [
              "Check LinkedIn status page",
              "Monitor service restoration",
              "Retry after service is restored"
            ],
            "numbers": []
          }
        },
        {
          "type": "required_elements",
          "platform": "linkedin",
          "line": 1772,
          "snippet": "            estimated_time = 1800  # 30 minutes average\n            automated_recovery_possible = True\n            requires_user_input = False\n        \n        else:",
          "values": {
            "strings": [],
            "numbers": [
              1800,
              30
            ]
          }
        },
        {
          "type": "required_elements",
          "platform": "linkedin",
          "line": 1785,
          "snippet": "            estimated_time = 120\n            automated_recovery_possible = False\n            requires_user_input = True\n        \n        recovery_plan = LinkedInErrorRecoveryPlan(",
          "values": {
            "strings": [],
            "numbers": [
              120
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 1787,
          "snippet": "            requires_user_input = True\n        \n        recovery_plan = LinkedInErrorRecoveryPlan(\n            error_details=error_details,\n            recovery_steps=recovery_steps,",
          "values": {
            "strings": [],
            "numbers": []
          }
        },
        {
          "type": "required_elements",
          "platform": "linkedin",
          "line": 1792,
          "snippet": "            success_probability=success_probability,\n            estimated_time=estimated_time,\n            requires_user_input=requires_user_input,\n            automated_recovery_possible=automated_recovery_possible\n        )",
          "values": {
            "strings": [],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 1800,
          "snippet": "        self.recovery_plans[plan_key] = recovery_plan\n        \n        logger.info(f\"[LinkedInWrapper] Recovery plan created dla {error_type.value} (success probability: {success_probability:.1%})\")\n        \n        return recovery_plan",
          "values": {
            "strings": [
              "[LinkedInWrapper] Recovery plan created dla {error_type.value} (success probability: {success_probability:.1%})"
            ],
            "numbers": [
              1
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 1804,
          "snippet": "        return recovery_plan\n    \n    async def attempt_automated_recovery(self, recovery_plan: LinkedInErrorRecoveryPlan) -> bool:\n        \"\"\"\n        Task 7.4: Attempt automated recovery based on recovery plan",
          "values": {
            "strings": [],
            "numbers": [
              7,
              4
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 1815,
          "snippet": "        \"\"\"\n        if not recovery_plan.automated_recovery_possible:\n            logger.info(f\"[LinkedInWrapper] Automated recovery not possible dla error type: {recovery_plan.error_details.error_type.value}\")\n            return False\n        ",
          "values": {
            "strings": [
              "\n        if not recovery_plan.automated_recovery_possible:\n            logger.info(f"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 1819,
          "snippet": "        \n        if not self.auto_recovery_enabled:\n            logger.info(f\"[LinkedInWrapper] Automated recovery disabled\")\n            return False\n        ",
          "values": {
            "strings": [
              "[LinkedInWrapper] Automated recovery disabled"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 1825,
          "snippet": "        error_type = error_details.error_type\n        \n        logger.info(f\"[LinkedInWrapper] Attempting automated recovery dla {error_type.value}\")\n        \n        recovery_plan.attempts_made += 1",
          "values": {
            "strings": [
              "[LinkedInWrapper] Attempting automated recovery dla {error_type.value}"
            ],
            "numbers": [
              1
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 1831,
          "snippet": "        \n        try:\n            if error_type == LinkedInErrorType.SESSION_EXPIRED:\n                # Attempt session recreation\n                result = await self.ensure_valid_session(error_details.account or \"default\")",
          "values": {
            "strings": [
              "default"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 1836,
          "snippet": "                success = result.is_valid and result.health_score >= 0.7\n                \n            elif error_type == LinkedInErrorType.SELECTOR_NOT_FOUND:\n                # Run diagnostics z auto-fix\n                diagnostics = await self.diagnose_selectors(error_details.account or \"default\", fix=True)",
          "values": {
            "strings": [
              "default"
            ],
            "numbers": [
              0,
              7
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 1841,
          "snippet": "                success = diagnostics.get(\"selectors_working\", False)\n                \n            elif error_type == LinkedInErrorType.RATE_LIMITED:\n                # Wait dla rate limit reset\n                wait_time = min(error_details.estimated_recovery_time or 300, 1800)  # Max 30 min",
          "values": {
            "strings": [
              "selectors_working"
            ],
            "numbers": [
              300,
              1800,
              30
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 1844,
          "snippet": "                # Wait dla rate limit reset\n                wait_time = min(error_details.estimated_recovery_time or 300, 1800)  # Max 30 min\n                logger.info(f\"[LinkedInWrapper] Waiting {wait_time}s dla rate limit reset\")\n                await asyncio.sleep(wait_time)\n                success = True  # Assume rate limit reset after wait",
          "values": {
            "strings": [
              "[LinkedInWrapper] Waiting {wait_time}s dla rate limit reset"
            ],
            "numbers": [
              300,
              1800,
              30
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 1848,
          "snippet": "                success = True  # Assume rate limit reset after wait\n                \n            elif error_type == LinkedInErrorType.NETWORK_TIMEOUT:\n                # Test network connectivity\n                try:",
          "values": {
            "strings": [],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 1856,
          "snippet": "                    success = False\n                \n            elif error_type == LinkedInErrorType.ELEMENT_NOT_CLICKABLE:\n                # Wait dla page stabilization\n                await asyncio.sleep(5)",
          "values": {
            "strings": [],
            "numbers": [
              5
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 1873,
          "snippet": "            \n            if success:\n                logger.info(f\"[LinkedInWrapper] Automated recovery successful dla {error_type.value}\")\n            else:\n                logger.warning(f\"[LinkedInWrapper] Automated recovery failed dla {error_type.value}\")",
          "values": {
            "strings": [
              "[LinkedInWrapper] Automated recovery successful dla {error_type.value}",
              "[LinkedInWrapper] Automated recovery failed dla {error_type.value}"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 1875,
          "snippet": "                logger.info(f\"[LinkedInWrapper] Automated recovery successful dla {error_type.value}\")\n            else:\n                logger.warning(f\"[LinkedInWrapper] Automated recovery failed dla {error_type.value}\")\n            \n            return success",
          "values": {
            "strings": [
              "[LinkedInWrapper] Automated recovery successful dla {error_type.value}",
              "[LinkedInWrapper] Automated recovery failed dla {error_type.value}"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 1880,
          "snippet": "            \n        except Exception as e:\n            logger.error(f\"[LinkedInWrapper] Automated recovery exception: {e}\")\n            recovery_plan.recovery_history.append({\n                \"attempt\": recovery_plan.attempts_made,",
          "values": {
            "strings": [
              "[LinkedInWrapper] Automated recovery exception: {e}",
              "attempt"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 1941,
          "snippet": "        }\n    \n    def map_error_to_code(self, error_type: LinkedInErrorType) -> str:\n        \"\"\"\n        Task 7.4: Map LinkedIn error types to standardized error codes",
          "values": {
            "strings": [],
            "numbers": [
              7,
              4
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 1943,
          "snippet": "    def map_error_to_code(self, error_type: LinkedInErrorType) -> str:\n        \"\"\"\n        Task 7.4: Map LinkedIn error types to standardized error codes\n        \n        Args:",
          "values": {
            "strings": [],
            "numbers": [
              7,
              4
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 1946,
          "snippet": "        \n        Args:\n            error_type: LinkedIn error type\n            \n        Returns:",
          "values": {
            "strings": [],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 1953,
          "snippet": "        error_code_mapping = {\n            # Session errors (LN_S_xxx)\n            LinkedInErrorType.SESSION_EXPIRED: \"LN_S_001\",\n            LinkedInErrorType.SESSION_INVALID: \"LN_S_002\", \n            LinkedInErrorType.SESSION_NOT_FOUND: \"LN_S_003\",",
          "values": {
            "strings": [
              "LN_S_001",
              "LN_S_002",
              "LN_S_003"
            ],
            "numbers": [
              1,
              2,
              3
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 1954,
          "snippet": "            # Session errors (LN_S_xxx)\n            LinkedInErrorType.SESSION_EXPIRED: \"LN_S_001\",\n            LinkedInErrorType.SESSION_INVALID: \"LN_S_002\", \n            LinkedInErrorType.SESSION_NOT_FOUND: \"LN_S_003\",\n            LinkedInErrorType.LOGIN_REQUIRED: \"LN_S_004\",",
          "values": {
            "strings": [
              "LN_S_001",
              "LN_S_002",
              "LN_S_003",
              "LN_S_004"
            ],
            "numbers": [
              1,
              2,
              3,
              4
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 1955,
          "snippet": "            LinkedInErrorType.SESSION_EXPIRED: \"LN_S_001\",\n            LinkedInErrorType.SESSION_INVALID: \"LN_S_002\", \n            LinkedInErrorType.SESSION_NOT_FOUND: \"LN_S_003\",\n            LinkedInErrorType.LOGIN_REQUIRED: \"LN_S_004\",\n            ",
          "values": {
            "strings": [
              "LN_S_001",
              "LN_S_002",
              "LN_S_003",
              "LN_S_004"
            ],
            "numbers": [
              1,
              2,
              3,
              4
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 1956,
          "snippet": "            LinkedInErrorType.SESSION_INVALID: \"LN_S_002\", \n            LinkedInErrorType.SESSION_NOT_FOUND: \"LN_S_003\",\n            LinkedInErrorType.LOGIN_REQUIRED: \"LN_S_004\",\n            \n            # Selector errors (LN_SEL_xxx)",
          "values": {
            "strings": [
              "LN_S_002",
              "LN_S_003",
              "LN_S_004"
            ],
            "numbers": [
              2,
              3,
              4
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 1959,
          "snippet": "            \n            # Selector errors (LN_SEL_xxx)\n            LinkedInErrorType.SELECTOR_NOT_FOUND: \"LN_SEL_001\",\n            LinkedInErrorType.SELECTOR_CHANGED: \"LN_SEL_002\",\n            LinkedInErrorType.PAGE_STRUCTURE_CHANGED: \"LN_SEL_003\",",
          "values": {
            "strings": [
              "LN_SEL_001",
              "LN_SEL_002",
              "LN_SEL_003"
            ],
            "numbers": [
              1,
              2,
              3
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 1960,
          "snippet": "            # Selector errors (LN_SEL_xxx)\n            LinkedInErrorType.SELECTOR_NOT_FOUND: \"LN_SEL_001\",\n            LinkedInErrorType.SELECTOR_CHANGED: \"LN_SEL_002\",\n            LinkedInErrorType.PAGE_STRUCTURE_CHANGED: \"LN_SEL_003\",\n            LinkedInErrorType.ELEMENT_NOT_CLICKABLE: \"LN_SEL_004\",",
          "values": {
            "strings": [
              "LN_SEL_001",
              "LN_SEL_002",
              "LN_SEL_003",
              "LN_SEL_004"
            ],
            "numbers": [
              1,
              2,
              3,
              4
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 1961,
          "snippet": "            LinkedInErrorType.SELECTOR_NOT_FOUND: \"LN_SEL_001\",\n            LinkedInErrorType.SELECTOR_CHANGED: \"LN_SEL_002\",\n            LinkedInErrorType.PAGE_STRUCTURE_CHANGED: \"LN_SEL_003\",\n            LinkedInErrorType.ELEMENT_NOT_CLICKABLE: \"LN_SEL_004\",\n            ",
          "values": {
            "strings": [
              "LN_SEL_001",
              "LN_SEL_002",
              "LN_SEL_003",
              "LN_SEL_004"
            ],
            "numbers": [
              1,
              2,
              3,
              4
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 1962,
          "snippet": "            LinkedInErrorType.SELECTOR_CHANGED: \"LN_SEL_002\",\n            LinkedInErrorType.PAGE_STRUCTURE_CHANGED: \"LN_SEL_003\",\n            LinkedInErrorType.ELEMENT_NOT_CLICKABLE: \"LN_SEL_004\",\n            \n            # Rate limiting errors (LN_RL_xxx)",
          "values": {
            "strings": [
              "LN_SEL_002",
              "LN_SEL_003",
              "LN_SEL_004"
            ],
            "numbers": [
              2,
              3,
              4
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 1965,
          "snippet": "            \n            # Rate limiting errors (LN_RL_xxx)\n            LinkedInErrorType.RATE_LIMITED: \"LN_RL_001\",\n            LinkedInErrorType.TOO_MANY_REQUESTS: \"LN_RL_002\",\n            LinkedInErrorType.DAILY_LIMIT_EXCEEDED: \"LN_RL_003\",",
          "values": {
            "strings": [
              "LN_RL_001",
              "LN_RL_002",
              "LN_RL_003"
            ],
            "numbers": [
              1,
              2,
              3
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 1966,
          "snippet": "            # Rate limiting errors (LN_RL_xxx)\n            LinkedInErrorType.RATE_LIMITED: \"LN_RL_001\",\n            LinkedInErrorType.TOO_MANY_REQUESTS: \"LN_RL_002\",\n            LinkedInErrorType.DAILY_LIMIT_EXCEEDED: \"LN_RL_003\",\n            ",
          "values": {
            "strings": [
              "LN_RL_001",
              "LN_RL_002",
              "LN_RL_003"
            ],
            "numbers": [
              1,
              2,
              3
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 1967,
          "snippet": "            LinkedInErrorType.RATE_LIMITED: \"LN_RL_001\",\n            LinkedInErrorType.TOO_MANY_REQUESTS: \"LN_RL_002\",\n            LinkedInErrorType.DAILY_LIMIT_EXCEEDED: \"LN_RL_003\",\n            \n            # Content errors (LN_C_xxx)",
          "values": {
            "strings": [
              "LN_RL_001",
              "LN_RL_002",
              "LN_RL_003"
            ],
            "numbers": [
              1,
              2,
              3
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 1970,
          "snippet": "            \n            # Content errors (LN_C_xxx)\n            LinkedInErrorType.CONTENT_TOO_LONG: \"LN_C_001\",\n            LinkedInErrorType.CONTENT_REJECTED: \"LN_C_002\",\n            LinkedInErrorType.INAPPROPRIATE_CONTENT: \"LN_C_003\",",
          "values": {
            "strings": [
              "LN_C_001",
              "LN_C_002",
              "LN_C_003"
            ],
            "numbers": [
              1,
              2,
              3
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 1971,
          "snippet": "            # Content errors (LN_C_xxx)\n            LinkedInErrorType.CONTENT_TOO_LONG: \"LN_C_001\",\n            LinkedInErrorType.CONTENT_REJECTED: \"LN_C_002\",\n            LinkedInErrorType.INAPPROPRIATE_CONTENT: \"LN_C_003\",\n            LinkedInErrorType.DUPLICATE_CONTENT: \"LN_C_004\",",
          "values": {
            "strings": [
              "LN_C_001",
              "LN_C_002",
              "LN_C_003",
              "LN_C_004"
            ],
            "numbers": [
              1,
              2,
              3,
              4
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 1972,
          "snippet": "            LinkedInErrorType.CONTENT_TOO_LONG: \"LN_C_001\",\n            LinkedInErrorType.CONTENT_REJECTED: \"LN_C_002\",\n            LinkedInErrorType.INAPPROPRIATE_CONTENT: \"LN_C_003\",\n            LinkedInErrorType.DUPLICATE_CONTENT: \"LN_C_004\",\n            ",
          "values": {
            "strings": [
              "LN_C_001",
              "LN_C_002",
              "LN_C_003",
              "LN_C_004"
            ],
            "numbers": [
              1,
              2,
              3,
              4
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 1973,
          "snippet": "            LinkedInErrorType.CONTENT_REJECTED: \"LN_C_002\",\n            LinkedInErrorType.INAPPROPRIATE_CONTENT: \"LN_C_003\",\n            LinkedInErrorType.DUPLICATE_CONTENT: \"LN_C_004\",\n            \n            # Network errors (LN_N_xxx)",
          "values": {
            "strings": [
              "LN_C_002",
              "LN_C_003",
              "LN_C_004"
            ],
            "numbers": [
              2,
              3,
              4
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 1976,
          "snippet": "            \n            # Network errors (LN_N_xxx)\n            LinkedInErrorType.NETWORK_TIMEOUT: \"LN_N_001\",\n            LinkedInErrorType.CONNECTION_FAILED: \"LN_N_002\",\n            LinkedInErrorType.DNS_RESOLUTION_FAILED: \"LN_N_003\",",
          "values": {
            "strings": [
              "LN_N_001",
              "LN_N_002",
              "LN_N_003"
            ],
            "numbers": [
              1,
              2,
              3
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 1977,
          "snippet": "            # Network errors (LN_N_xxx)\n            LinkedInErrorType.NETWORK_TIMEOUT: \"LN_N_001\",\n            LinkedInErrorType.CONNECTION_FAILED: \"LN_N_002\",\n            LinkedInErrorType.DNS_RESOLUTION_FAILED: \"LN_N_003\",\n            LinkedInErrorType.PROXY_ERROR: \"LN_N_004\",",
          "values": {
            "strings": [
              "LN_N_001",
              "LN_N_002",
              "LN_N_003",
              "LN_N_004"
            ],
            "numbers": [
              1,
              2,
              3,
              4
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 1978,
          "snippet": "            LinkedInErrorType.NETWORK_TIMEOUT: \"LN_N_001\",\n            LinkedInErrorType.CONNECTION_FAILED: \"LN_N_002\",\n            LinkedInErrorType.DNS_RESOLUTION_FAILED: \"LN_N_003\",\n            LinkedInErrorType.PROXY_ERROR: \"LN_N_004\",\n            ",
          "values": {
            "strings": [
              "LN_N_001",
              "LN_N_002",
              "LN_N_003",
              "LN_N_004"
            ],
            "numbers": [
              1,
              2,
              3,
              4
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 1979,
          "snippet": "            LinkedInErrorType.CONNECTION_FAILED: \"LN_N_002\",\n            LinkedInErrorType.DNS_RESOLUTION_FAILED: \"LN_N_003\",\n            LinkedInErrorType.PROXY_ERROR: \"LN_N_004\",\n            \n            # Platform errors (LN_P_xxx)",
          "values": {
            "strings": [
              "LN_N_002",
              "LN_N_003",
              "LN_N_004"
            ],
            "numbers": [
              2,
              3,
              4
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 1982,
          "snippet": "            \n            # Platform errors (LN_P_xxx)\n            LinkedInErrorType.LINKEDIN_DOWN: \"LN_P_001\",\n            LinkedInErrorType.MAINTENANCE_MODE: \"LN_P_002\",\n            LinkedInErrorType.FEATURE_DISABLED: \"LN_P_003\",",
          "values": {
            "strings": [
              "LN_P_001",
              "LN_P_002",
              "LN_P_003"
            ],
            "numbers": [
              1,
              2,
              3
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 1983,
          "snippet": "            # Platform errors (LN_P_xxx)\n            LinkedInErrorType.LINKEDIN_DOWN: \"LN_P_001\",\n            LinkedInErrorType.MAINTENANCE_MODE: \"LN_P_002\",\n            LinkedInErrorType.FEATURE_DISABLED: \"LN_P_003\",\n            LinkedInErrorType.API_DEPRECATED: \"LN_P_004\",",
          "values": {
            "strings": [
              "LN_P_001",
              "LN_P_002",
              "LN_P_003",
              "LN_P_004"
            ],
            "numbers": [
              1,
              2,
              3,
              4
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 1984,
          "snippet": "            LinkedInErrorType.LINKEDIN_DOWN: \"LN_P_001\",\n            LinkedInErrorType.MAINTENANCE_MODE: \"LN_P_002\",\n            LinkedInErrorType.FEATURE_DISABLED: \"LN_P_003\",\n            LinkedInErrorType.API_DEPRECATED: \"LN_P_004\",\n            ",
          "values": {
            "strings": [
              "LN_P_001",
              "LN_P_002",
              "LN_P_003",
              "LN_P_004"
            ],
            "numbers": [
              1,
              2,
              3,
              4
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 1985,
          "snippet": "            LinkedInErrorType.MAINTENANCE_MODE: \"LN_P_002\",\n            LinkedInErrorType.FEATURE_DISABLED: \"LN_P_003\",\n            LinkedInErrorType.API_DEPRECATED: \"LN_P_004\",\n            \n            # Permission errors (LN_PERM_xxx)",
          "values": {
            "strings": [
              "LN_P_002",
              "LN_P_003",
              "LN_P_004"
            ],
            "numbers": [
              2,
              3,
              4
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 1988,
          "snippet": "            \n            # Permission errors (LN_PERM_xxx)\n            LinkedInErrorType.ACCOUNT_SUSPENDED: \"LN_PERM_001\",\n            LinkedInErrorType.POSTING_DISABLED: \"LN_PERM_002\",\n            LinkedInErrorType.INSUFFICIENT_PERMISSIONS: \"LN_PERM_003\",",
          "values": {
            "strings": [
              "LN_PERM_001",
              "LN_PERM_002",
              "LN_PERM_003"
            ],
            "numbers": [
              1,
              2,
              3
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 1989,
          "snippet": "            # Permission errors (LN_PERM_xxx)\n            LinkedInErrorType.ACCOUNT_SUSPENDED: \"LN_PERM_001\",\n            LinkedInErrorType.POSTING_DISABLED: \"LN_PERM_002\",\n            LinkedInErrorType.INSUFFICIENT_PERMISSIONS: \"LN_PERM_003\",\n            LinkedInErrorType.COMPANY_PAGE_ACCESS_DENIED: \"LN_PERM_004\",",
          "values": {
            "strings": [
              "LN_PERM_001",
              "LN_PERM_002",
              "LN_PERM_003",
              "LN_PERM_004"
            ],
            "numbers": [
              1,
              2,
              3,
              4
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 1990,
          "snippet": "            LinkedInErrorType.ACCOUNT_SUSPENDED: \"LN_PERM_001\",\n            LinkedInErrorType.POSTING_DISABLED: \"LN_PERM_002\",\n            LinkedInErrorType.INSUFFICIENT_PERMISSIONS: \"LN_PERM_003\",\n            LinkedInErrorType.COMPANY_PAGE_ACCESS_DENIED: \"LN_PERM_004\",\n            ",
          "values": {
            "strings": [
              "LN_PERM_001",
              "LN_PERM_002",
              "LN_PERM_003",
              "LN_PERM_004"
            ],
            "numbers": [
              1,
              2,
              3,
              4
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 1991,
          "snippet": "            LinkedInErrorType.POSTING_DISABLED: \"LN_PERM_002\",\n            LinkedInErrorType.INSUFFICIENT_PERMISSIONS: \"LN_PERM_003\",\n            LinkedInErrorType.COMPANY_PAGE_ACCESS_DENIED: \"LN_PERM_004\",\n            \n            # System errors (LN_SYS_xxx)",
          "values": {
            "strings": [
              "LN_PERM_002",
              "LN_PERM_003",
              "LN_PERM_004"
            ],
            "numbers": [
              2,
              3,
              4
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 1994,
          "snippet": "            \n            # System errors (LN_SYS_xxx)\n            LinkedInErrorType.BROWSER_CRASHED: \"LN_SYS_001\",\n            LinkedInErrorType.BROWSER_NOT_FOUND: \"LN_SYS_002\",\n            LinkedInErrorType.CLI_ERROR: \"LN_SYS_003\",",
          "values": {
            "strings": [
              "LN_SYS_001",
              "LN_SYS_002",
              "LN_SYS_003"
            ],
            "numbers": [
              1,
              2,
              3
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 1995,
          "snippet": "            # System errors (LN_SYS_xxx)\n            LinkedInErrorType.BROWSER_CRASHED: \"LN_SYS_001\",\n            LinkedInErrorType.BROWSER_NOT_FOUND: \"LN_SYS_002\",\n            LinkedInErrorType.CLI_ERROR: \"LN_SYS_003\",\n            LinkedInErrorType.NODE_JS_ERROR: \"LN_SYS_004\",",
          "values": {
            "strings": [
              "LN_SYS_001",
              "LN_SYS_002",
              "LN_SYS_003",
              "LN_SYS_004"
            ],
            "numbers": [
              1,
              2,
              3,
              4
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 1996,
          "snippet": "            LinkedInErrorType.BROWSER_CRASHED: \"LN_SYS_001\",\n            LinkedInErrorType.BROWSER_NOT_FOUND: \"LN_SYS_002\",\n            LinkedInErrorType.CLI_ERROR: \"LN_SYS_003\",\n            LinkedInErrorType.NODE_JS_ERROR: \"LN_SYS_004\",\n            ",
          "values": {
            "strings": [
              "LN_SYS_001",
              "LN_SYS_002",
              "LN_SYS_003",
              "LN_SYS_004"
            ],
            "numbers": [
              1,
              2,
              3,
              4
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 1997,
          "snippet": "            LinkedInErrorType.BROWSER_NOT_FOUND: \"LN_SYS_002\",\n            LinkedInErrorType.CLI_ERROR: \"LN_SYS_003\",\n            LinkedInErrorType.NODE_JS_ERROR: \"LN_SYS_004\",\n            \n            # Generic errors (LN_GEN_xxx)",
          "values": {
            "strings": [
              "LN_SYS_002",
              "LN_SYS_003",
              "LN_SYS_004"
            ],
            "numbers": [
              2,
              3,
              4
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 2000,
          "snippet": "            \n            # Generic errors (LN_GEN_xxx)\n            LinkedInErrorType.UNKNOWN_ERROR: \"LN_GEN_001\",\n            LinkedInErrorType.VALIDATION_ERROR: \"LN_GEN_002\"\n        }",
          "values": {
            "strings": [
              "LN_GEN_001",
              "LN_GEN_002"
            ],
            "numbers": [
              1,
              2
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 2001,
          "snippet": "            # Generic errors (LN_GEN_xxx)\n            LinkedInErrorType.UNKNOWN_ERROR: \"LN_GEN_001\",\n            LinkedInErrorType.VALIDATION_ERROR: \"LN_GEN_002\"\n        }\n        ",
          "values": {
            "strings": [
              "LN_GEN_001",
              "LN_GEN_002"
            ],
            "numbers": [
              1,
              2
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 2006,
          "snippet": "        return error_code_mapping.get(error_type, \"LN_GEN_999\")\n    \n    # Task 7.5: Content Adaptation dla LinkedIn Format\n    \n    def adapt_content_for_linkedin(self, content: str, options: Optional[Dict[str, Any]] = None) -> Dict[str, Any]:",
          "values": {
            "strings": [
              "LN_GEN_999"
            ],
            "numbers": [
              999,
              7,
              5
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 2008,
          "snippet": "    # Task 7.5: Content Adaptation dla LinkedIn Format\n    \n    def adapt_content_for_linkedin(self, content: str, options: Optional[Dict[str, Any]] = None) -> Dict[str, Any]:\n        \"\"\"\n        Task 7.5: Adapt content z AI Writing Flow do LinkedIn requirements",
          "values": {
            "strings": [],
            "numbers": [
              7,
              5,
              7,
              5
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 2010,
          "snippet": "    def adapt_content_for_linkedin(self, content: str, options: Optional[Dict[str, Any]] = None) -> Dict[str, Any]:\n        \"\"\"\n        Task 7.5: Adapt content z AI Writing Flow do LinkedIn requirements\n        \n        Args:",
          "values": {
            "strings": [],
            "numbers": [
              7,
              5
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 2017,
          "snippet": "            \n        Returns:\n            Adapted content z LinkedIn formatting\n        \"\"\"\n        if options is None:",
          "values": {
            "strings": [],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 2022,
          "snippet": "            options = {}\n        \n        logger.info(f\"[LinkedInWrapper] Adapting content dla LinkedIn format\")\n        \n        # Initialize adaptation result",
          "values": {
            "strings": [
              "[LinkedInWrapper] Adapting content dla LinkedIn format"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 2036,
          "snippet": "        }\n        \n        # Apply LinkedIn content formatting\n        formatted_content = self._format_linkedin_content(content, options, adapted_content)\n        ",
          "values": {
            "strings": [],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 2037,
          "snippet": "        \n        # Apply LinkedIn content formatting\n        formatted_content = self._format_linkedin_content(content, options, adapted_content)\n        \n        # Add hashtags if specified",
          "values": {
            "strings": [],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 2041,
          "snippet": "        # Add hashtags if specified\n        if options.get(\"add_hashtags\", True):\n            formatted_content = self._add_linkedin_hashtags(formatted_content, options, adapted_content)\n        \n        # Process mentions if any",
          "values": {
            "strings": [
              "add_hashtags"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 2045,
          "snippet": "        # Process mentions if any\n        if options.get(\"process_mentions\", True):\n            formatted_content = self._process_linkedin_mentions(formatted_content, adapted_content)\n        \n        # Ensure LinkedIn character limits",
          "values": {
            "strings": [
              "process_mentions"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 2047,
          "snippet": "            formatted_content = self._process_linkedin_mentions(formatted_content, adapted_content)\n        \n        # Ensure LinkedIn character limits\n        formatted_content = self._enforce_linkedin_limits(formatted_content, adapted_content)\n        ",
          "values": {
            "strings": [],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 2048,
          "snippet": "        \n        # Ensure LinkedIn character limits\n        formatted_content = self._enforce_linkedin_limits(formatted_content, adapted_content)\n        \n        # Add LinkedIn best practices formatting",
          "values": {
            "strings": [],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 2050,
          "snippet": "        formatted_content = self._enforce_linkedin_limits(formatted_content, adapted_content)\n        \n        # Add LinkedIn best practices formatting\n        formatted_content = self._apply_linkedin_best_practices(formatted_content, adapted_content)\n        ",
          "values": {
            "strings": [],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 2051,
          "snippet": "        \n        # Add LinkedIn best practices formatting\n        formatted_content = self._apply_linkedin_best_practices(formatted_content, adapted_content)\n        \n        adapted_content[\"formatted_content\"] = formatted_content",
          "values": {
            "strings": [
              "formatted_content"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 2056,
          "snippet": "        adapted_content[\"adapted_length\"] = len(formatted_content)\n        \n        logger.info(f\"[LinkedInWrapper] Content adapted: {adapted_content['original_length']} → {adapted_content['adapted_length']} chars\")\n        \n        return adapted_content",
          "values": {
            "strings": [
              "adapted_length",
              "[LinkedInWrapper] Content adapted: {adapted_content[",
              "]} → {adapted_content[",
              "]} chars"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 2060,
          "snippet": "        return adapted_content\n    \n    def _format_linkedin_content(self, content: str, options: Dict[str, Any], result: Dict[str, Any]) -> str:\n        \"\"\"Format content according to LinkedIn best practices\"\"\"\n        ",
          "values": {
            "strings": [
              "Format content according to LinkedIn best practices"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 2061,
          "snippet": "    \n    def _format_linkedin_content(self, content: str, options: Dict[str, Any], result: Dict[str, Any]) -> str:\n        \"\"\"Format content according to LinkedIn best practices\"\"\"\n        \n        # Clean up common formatting issues",
          "values": {
            "strings": [
              "Format content according to LinkedIn best practices"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 2066,
          "snippet": "        formatted = content.strip()\n        \n        # Fix line breaks - LinkedIn prefers double line breaks dla paragraphs\n        formatted = re.sub(r'\\n{3,}', '\\n\\n', formatted)  # Max 2 line breaks\n        ",
          "values": {
            "strings": [
              "\\n{3,}",
              "\\n\\n"
            ],
            "numbers": [
              3,
              2
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 2069,
          "snippet": "        formatted = re.sub(r'\\n{3,}', '\\n\\n', formatted)  # Max 2 line breaks\n        \n        # Format bullet points dla LinkedIn\n        formatted = re.sub(r'^\\s*[-•]\\s*', '• ', formatted, flags=re.MULTILINE)\n        ",
          "values": {
            "strings": [
              "\\n{3,}",
              "\\n\\n",
              "^\\s*[-•]\\s*",
              "• "
            ],
            "numbers": [
              3,
              2
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 2083,
          "snippet": "        return formatted\n    \n    def _add_linkedin_hashtags(self, content: str, options: Dict[str, Any], result: Dict[str, Any]) -> str:\n        \"\"\"Add relevant hashtags dla LinkedIn\"\"\"\n        ",
          "values": {
            "strings": [
              "Add relevant hashtags dla LinkedIn"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 2084,
          "snippet": "    \n    def _add_linkedin_hashtags(self, content: str, options: Dict[str, Any], result: Dict[str, Any]) -> str:\n        \"\"\"Add relevant hashtags dla LinkedIn\"\"\"\n        \n        hashtags = options.get(\"hashtags\", [])",
          "values": {
            "strings": [
              "Add relevant hashtags dla LinkedIn",
              "\n        \n        hashtags = options.get("
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 2090,
          "snippet": "        # Auto-generate hashtags if none provided\n        if not hashtags and options.get(\"auto_hashtags\", True):\n            hashtags = self._generate_linkedin_hashtags(content)\n        \n        # Validate and clean hashtags",
          "values": {
            "strings": [
              "auto_hashtags"
            ],
            "numbers": []
          }
        },
        {
          "type": "hashtag_rules",
          "platform": "linkedin",
          "line": 2096,
          "snippet": "        for tag in hashtags:\n            clean_tag = self._clean_hashtag(tag)\n            if clean_tag and len(clean_tag) <= 100:  # LinkedIn hashtag limit\n                valid_hashtags.append(clean_tag)\n        ",
          "values": {
            "strings": [],
            "numbers": [
              100
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 2099,
          "snippet": "                valid_hashtags.append(clean_tag)\n        \n        # Limit number of hashtags (LinkedIn best practice: 3-5)\n        max_hashtags = options.get(\"max_hashtags\", 5)\n        valid_hashtags = valid_hashtags[:max_hashtags]",
          "values": {
            "strings": [
              "max_hashtags"
            ],
            "numbers": [
              3,
              5,
              5
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 2116,
          "snippet": "        return content\n    \n    def _generate_linkedin_hashtags(self, content: str) -> List[str]:\n        \"\"\"Auto-generate relevant hashtags based on content\"\"\"\n        ",
          "values": {
            "strings": [
              "Auto-generate relevant hashtags based on content"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 2119,
          "snippet": "        \"\"\"Auto-generate relevant hashtags based on content\"\"\"\n        \n        # Common LinkedIn hashtags mapping\n        hashtag_keywords = {\n            'ai': ['AI', 'ArtificialIntelligence', 'MachineLearning'],",
          "values": {
            "strings": [
              "Auto-generate relevant hashtags based on content",
              "\n        \n        # Common LinkedIn hashtags mapping\n        hashtag_keywords = {\n            ",
              ": [",
              ", ",
              ", "
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 2130,
          "snippet": "            'automation': ['Automation', 'ProcessImprovement', 'Efficiency'],\n            'python': ['Python', 'Programming', 'Coding'],\n            'linkedin': ['LinkedIn', 'SocialMedia', 'Networking']\n        }\n        ",
          "values": {
            "strings": [
              "automation",
              "Automation",
              "ProcessImprovement",
              "Efficiency",
              "python",
              "Python",
              "Programming",
              "Coding",
              "linkedin",
              "LinkedIn"
            ],
            "numbers": []
          }
        },
        {
          "type": "required_elements",
          "platform": "linkedin",
          "line": 2151,
          "snippet": "        clean = re.sub(r'[^a-zA-Z0-9_]', '', clean)\n        \n        # Must start with letter\n        if clean and clean[0].isalpha():\n            return clean",
          "values": {
            "strings": [
              "[^a-zA-Z0-9_]"
            ],
            "numbers": [
              0,
              9,
              0
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 2157,
          "snippet": "        return \"\"\n    \n    def _process_linkedin_mentions(self, content: str, result: Dict[str, Any]) -> str:\n        \"\"\"Process and validate LinkedIn mentions\"\"\"\n        ",
          "values": {
            "strings": [
              "\n    \n    def _process_linkedin_mentions(self, content: str, result: Dict[str, Any]) -> str:\n        ",
              "Process and validate LinkedIn mentions"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 2158,
          "snippet": "    \n    def _process_linkedin_mentions(self, content: str, result: Dict[str, Any]) -> str:\n        \"\"\"Process and validate LinkedIn mentions\"\"\"\n        \n        # Find existing @mentions in content",
          "values": {
            "strings": [
              "Process and validate LinkedIn mentions"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 2165,
          "snippet": "        valid_mentions = []\n        for mention in mentions:\n            # Validate mention format (LinkedIn username rules)\n            if self._is_valid_linkedin_mention(mention):\n                valid_mentions.append(mention)",
          "values": {
            "strings": [],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 2166,
          "snippet": "        for mention in mentions:\n            # Validate mention format (LinkedIn username rules)\n            if self._is_valid_linkedin_mention(mention):\n                valid_mentions.append(mention)\n            else:",
          "values": {
            "strings": [],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 2175,
          "snippet": "        return content\n    \n    def _is_valid_linkedin_mention(self, username: str) -> bool:\n        \"\"\"Validate LinkedIn username format\"\"\"\n        # LinkedIn username rules: 3-100 chars, letters, numbers, hyphens",
          "values": {
            "strings": [
              "Validate LinkedIn username format"
            ],
            "numbers": [
              3,
              100
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 2176,
          "snippet": "    \n    def _is_valid_linkedin_mention(self, username: str) -> bool:\n        \"\"\"Validate LinkedIn username format\"\"\"\n        # LinkedIn username rules: 3-100 chars, letters, numbers, hyphens\n        if not (3 <= len(username) <= 100):",
          "values": {
            "strings": [
              "Validate LinkedIn username format"
            ],
            "numbers": [
              3,
              100,
              3,
              100
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 2177,
          "snippet": "    def _is_valid_linkedin_mention(self, username: str) -> bool:\n        \"\"\"Validate LinkedIn username format\"\"\"\n        # LinkedIn username rules: 3-100 chars, letters, numbers, hyphens\n        if not (3 <= len(username) <= 100):\n            return False",
          "values": {
            "strings": [
              "Validate LinkedIn username format"
            ],
            "numbers": [
              3,
              100,
              3,
              100
            ]
          }
        },
        {
          "type": "required_elements",
          "platform": "linkedin",
          "line": 2181,
          "snippet": "            return False\n        \n        # Must contain only valid characters\n        if not re.match(r'^[a-zA-Z0-9-]+$', username):\n            return False",
          "values": {
            "strings": [
              "^[a-zA-Z0-9-]+$"
            ],
            "numbers": [
              0,
              9
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 2191,
          "snippet": "        return True\n    \n    def _enforce_linkedin_limits(self, content: str, result: Dict[str, Any]) -> str:\n        \"\"\"Enforce LinkedIn character limits\"\"\"\n        ",
          "values": {
            "strings": [
              "Enforce LinkedIn character limits"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 2192,
          "snippet": "    \n    def _enforce_linkedin_limits(self, content: str, result: Dict[str, Any]) -> str:\n        \"\"\"Enforce LinkedIn character limits\"\"\"\n        \n        # LinkedIn post limit: 3000 characters",
          "values": {
            "strings": [
              "Enforce LinkedIn character limits"
            ],
            "numbers": [
              3000
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 2194,
          "snippet": "        \"\"\"Enforce LinkedIn character limits\"\"\"\n        \n        # LinkedIn post limit: 3000 characters\n        max_length = 3000\n        ",
          "values": {
            "strings": [
              "Enforce LinkedIn character limits"
            ],
            "numbers": [
              3000,
              3000
            ]
          }
        },
        {
          "type": "max_length",
          "platform": "linkedin",
          "line": 2195,
          "snippet": "        \n        # LinkedIn post limit: 3000 characters\n        max_length = 3000\n        \n        if len(content) <= max_length:",
          "values": {
            "strings": [],
            "numbers": [
              3000,
              3000
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 2234,
          "snippet": "        return truncated_content.strip()\n    \n    def _apply_linkedin_best_practices(self, content: str, result: Dict[str, Any]) -> str:\n        \"\"\"Apply LinkedIn best practices dla better engagement\"\"\"\n        ",
          "values": {
            "strings": [
              "Apply LinkedIn best practices dla better engagement"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 2235,
          "snippet": "    \n    def _apply_linkedin_best_practices(self, content: str, result: Dict[str, Any]) -> str:\n        \"\"\"Apply LinkedIn best practices dla better engagement\"\"\"\n        \n        lines = content.split('\\n')",
          "values": {
            "strings": [
              "Apply LinkedIn best practices dla better engagement",
              "\n        \n        lines = content.split("
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 2275,
          "snippet": "        return '\\n'.join(improved_lines)\n    \n    def validate_linkedin_content(self, content: str) -> Dict[str, Any]:\n        \"\"\"\n        Task 7.5: Validate content against LinkedIn requirements",
          "values": {
            "strings": [
              "\\n"
            ],
            "numbers": [
              7,
              5
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 2277,
          "snippet": "    def validate_linkedin_content(self, content: str) -> Dict[str, Any]:\n        \"\"\"\n        Task 7.5: Validate content against LinkedIn requirements\n        \n        Args:",
          "values": {
            "strings": [],
            "numbers": [
              7,
              5
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 2300,
          "snippet": "        # Check character limit\n        if len(content) > 3000:\n            validation[\"errors\"].append(\"Content exceeds LinkedIn limit of 3000 characters\")\n            validation[\"valid\"] = False\n        ",
          "values": {
            "strings": [
              "errors",
              "Content exceeds LinkedIn limit of 3000 characters",
              "valid"
            ],
            "numbers": [
              3000,
              3000
            ]
          }
        },
        {
          "type": "hashtag_rules",
          "platform": "linkedin",
          "line": 2308,
          "snippet": "            validation[\"valid\"] = False\n        \n        # Check hashtag limits\n        hashtag_count = validation[\"stats\"][\"hashtag_count\"]\n        if hashtag_count > 30:  # LinkedIn soft limit",
          "values": {
            "strings": [
              "valid",
              "stats",
              "hashtag_count"
            ],
            "numbers": [
              30
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 2310,
          "snippet": "        # Check hashtag limits\n        hashtag_count = validation[\"stats\"][\"hashtag_count\"]\n        if hashtag_count > 30:  # LinkedIn soft limit\n            validation[\"warnings\"].append(f\"Too many hashtags ({hashtag_count}). Recommended: 3-5\")\n        ",
          "values": {
            "strings": [
              "stats",
              "hashtag_count",
              "warnings",
              "Too many hashtags ({hashtag_count}). Recommended: 3-5"
            ],
            "numbers": [
              30,
              3,
              5
            ]
          }
        },
        {
          "type": "required_elements",
          "platform": "linkedin",
          "line": 2369,
          "snippet": "            # Validate schedule constraints\n            if scheduled_dt <= now:\n                validation[\"errors\"].append(\"Schedule time must be in the future\")\n                return validation\n            ",
          "values": {
            "strings": [
              "errors",
              "Schedule time must be in the future"
            ],
            "numbers": []
          }
        },
        {
          "type": "required_elements",
          "platform": "linkedin",
          "line": 2374,
          "snippet": "            # Check minimum schedule time (5 minutes from now)\n            if time_diff.total_seconds() < 300:  # 5 minutes\n                validation[\"errors\"].append(\"Schedule time must be at least 5 minutes from now\")\n                return validation\n            ",
          "values": {
            "strings": [
              "errors",
              "Schedule time must be at least 5 minutes from now"
            ],
            "numbers": [
              5,
              300,
              5,
              5
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 2377,
          "snippet": "                return validation\n            \n            # Check maximum schedule time (LinkedIn limit: usually 3 months)\n            if time_diff.days > 90:\n                validation[\"warnings\"].append(\"Schedule time is very far in the future (>90 days)\")",
          "values": {
            "strings": [
              "warnings",
              "Schedule time is very far in the future (>90 days)"
            ],
            "numbers": [
              3,
              90,
              90
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 2396,
          "snippet": "        return validation\n    \n    async def schedule_linkedin_post(self, request: LinkedInPublishRequest) -> LinkedInPublishResponse:\n        \"\"\"\n        Task 7.6: Schedule LinkedIn post dla future publication",
          "values": {
            "strings": [],
            "numbers": [
              7,
              6
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 2398,
          "snippet": "    async def schedule_linkedin_post(self, request: LinkedInPublishRequest) -> LinkedInPublishResponse:\n        \"\"\"\n        Task 7.6: Schedule LinkedIn post dla future publication\n        \n        Args:",
          "values": {
            "strings": [],
            "numbers": [
              7,
              6
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 2408,
          "snippet": "        start_time = time.time()\n        \n        logger.info(f\"[LinkedInWrapper] Scheduling LinkedIn post dla {request.account}\")\n        \n        try:",
          "values": {
            "strings": [
              "[LinkedInWrapper] Scheduling LinkedIn post dla {request.account}"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 2413,
          "snippet": "            # Validate schedule time\n            if not request.schedule_time:\n                return LinkedInPublishResponse(\n                    success=False,\n                    error=\"Schedule time is required dla scheduled posts\",",
          "values": {
            "strings": [
              "Schedule time is required dla scheduled posts"
            ],
            "numbers": []
          }
        },
        {
          "type": "required_elements",
          "platform": "linkedin",
          "line": 2415,
          "snippet": "                return LinkedInPublishResponse(\n                    success=False,\n                    error=\"Schedule time is required dla scheduled posts\",\n                    execution_time=time.time() - start_time,\n                    cli_output=\"Missing schedule_time parameter\",",
          "values": {
            "strings": [
              "Schedule time is required dla scheduled posts",
              "Missing schedule_time parameter"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 2426,
          "snippet": "            if not schedule_validation[\"valid\"]:\n                errors = \"; \".join(schedule_validation[\"errors\"])\n                return LinkedInPublishResponse(\n                    success=False,\n                    error=f\"Invalid schedule time: {errors}\",",
          "values": {
            "strings": [
              "valid",
              "; ",
              "errors",
              "Invalid schedule time: {errors}"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 2437,
          "snippet": "            # Log schedule warnings\n            for warning in schedule_validation[\"warnings\"]:\n                logger.warning(f\"[LinkedInWrapper] Schedule warning: {warning}\")\n            \n            # Set immediate to False dla scheduled posts",
          "values": {
            "strings": [
              "warnings",
              "[LinkedInWrapper] Schedule warning: {warning}"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 2446,
          "snippet": "            \n        except Exception as e:\n            logger.error(f\"[LinkedInWrapper] Schedule post failed: {e}\")\n            return LinkedInPublishResponse(\n                success=False,",
          "values": {
            "strings": [
              "[LinkedInWrapper] Schedule post failed: {e}"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 2447,
          "snippet": "        except Exception as e:\n            logger.error(f\"[LinkedInWrapper] Schedule post failed: {e}\")\n            return LinkedInPublishResponse(\n                success=False,\n                error=str(e),",
          "values": {
            "strings": [
              "[LinkedInWrapper] Schedule post failed: {e}"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 2466,
          "snippet": "            List of scheduled posts z details\n        \"\"\"\n        logger.info(f\"[LinkedInWrapper] Getting scheduled posts dla {account}\")\n        \n        try:",
          "values": {
            "strings": [
              "\n        logger.info(f"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 2469,
          "snippet": "        \n        try:\n            # Execute LinkedIn CLI command to get scheduled posts\n            result = await self.execute_cli_command(['schedule', 'list', '--account', account])\n            ",
          "values": {
            "strings": [
              "schedule",
              "list",
              "--account"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 2492,
          "snippet": "            \n        except Exception as e:\n            logger.error(f\"[LinkedInWrapper] Failed to get scheduled posts: {e}\")\n            return {\n                \"success\": False,",
          "values": {
            "strings": [
              "[LinkedInWrapper] Failed to get scheduled posts: {e}",
              "success"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 2501,
          "snippet": "    \n    def _parse_scheduled_posts(self, cli_output: str) -> List[Dict[str, Any]]:\n        \"\"\"Parse scheduled posts from LinkedIn CLI output\"\"\"\n        posts = []\n        lines = cli_output.split('\\n')",
          "values": {
            "strings": [
              "Parse scheduled posts from LinkedIn CLI output",
              "\n        posts = []\n        lines = cli_output.split("
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 2532,
          "snippet": "    async def cancel_scheduled_post(self, post_id: str, account: str = \"default\") -> Dict[str, Any]:\n        \"\"\"\n        Task 7.6: Cancel scheduled LinkedIn post\n        \n        Args:",
          "values": {
            "strings": [
              "default"
            ],
            "numbers": [
              7,
              6
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 2541,
          "snippet": "            Cancellation result\n        \"\"\"\n        logger.info(f\"[LinkedInWrapper] Cancelling scheduled post {post_id} dla {account}\")\n        \n        try:",
          "values": {
            "strings": [
              "\n        logger.info(f"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 2544,
          "snippet": "        \n        try:\n            # Execute LinkedIn CLI command to cancel scheduled post\n            result = await self.execute_cli_command(['schedule', 'cancel', '--id', post_id, '--account', account])\n            ",
          "values": {
            "strings": [
              "schedule",
              "cancel",
              "--id",
              "--account"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 2548,
          "snippet": "            \n            if result.get(\"success\"):\n                logger.info(f\"[LinkedInWrapper] Successfully cancelled scheduled post {post_id}\")\n                return {\n                    \"success\": True,",
          "values": {
            "strings": [
              "success",
              "[LinkedInWrapper] Successfully cancelled scheduled post {post_id}",
              "success"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 2557,
          "snippet": "                }\n            else:\n                error_details = self.analyze_linkedin_error(result[\"output\"], f\"schedule cancel {post_id}\", account)\n                return {\n                    \"success\": False,",
          "values": {
            "strings": [
              "output",
              "schedule cancel {post_id}",
              "success"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 2568,
          "snippet": "                \n        except Exception as e:\n            logger.error(f\"[LinkedInWrapper] Failed to cancel scheduled post {post_id}: {e}\")\n            return {\n                \"success\": False,",
          "values": {
            "strings": [
              "[LinkedInWrapper] Failed to cancel scheduled post {post_id}: {e}",
              "success"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 2578,
          "snippet": "    async def update_scheduled_post(self, post_id: str, updates: Dict[str, Any], account: str = \"default\") -> Dict[str, Any]:\n        \"\"\"\n        Task 7.6: Update scheduled LinkedIn post\n        \n        Args:",
          "values": {
            "strings": [
              "default"
            ],
            "numbers": [
              7,
              6
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 2588,
          "snippet": "            Update result\n        \"\"\"\n        logger.info(f\"[LinkedInWrapper] Updating scheduled post {post_id} dla {account}\")\n        \n        try:",
          "values": {
            "strings": [
              "\n        logger.info(f"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 2599,
          "snippet": "                if updates.get('adapt_content', True):\n                    adaptation_options = updates.get('adaptation_options', {})\n                    adapted = self.adapt_content_for_linkedin(updates['content'], adaptation_options)\n                    command.extend(['--content', adapted['formatted_content']])\n                else:",
          "values": {
            "strings": [
              "adapt_content",
              "adaptation_options",
              "content",
              "--content",
              "formatted_content"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 2621,
          "snippet": "            \n            if result.get(\"success\"):\n                logger.info(f\"[LinkedInWrapper] Successfully updated scheduled post {post_id}\")\n                return {\n                    \"success\": True,",
          "values": {
            "strings": [
              "success",
              "[LinkedInWrapper] Successfully updated scheduled post {post_id}",
              "success"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 2631,
          "snippet": "                }\n            else:\n                error_details = self.analyze_linkedin_error(result[\"output\"], f\"schedule update {post_id}\", account)\n                return {\n                    \"success\": False,",
          "values": {
            "strings": [
              "output",
              "schedule update {post_id}",
              "success"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 2643,
          "snippet": "                \n        except Exception as e:\n            logger.error(f\"[LinkedInWrapper] Failed to update scheduled post {post_id}: {e}\")\n            return {\n                \"success\": False,",
          "values": {
            "strings": [
              "[LinkedInWrapper] Failed to update scheduled post {post_id}: {e}",
              "success"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 2655,
          "snippet": "    def validate_media_file(self, file_path: str) -> Dict[str, Any]:\n        \"\"\"\n        Task 7.7: Validate media file dla LinkedIn upload\n        \n        Args:",
          "values": {
            "strings": [],
            "numbers": [
              7,
              7
            ]
          }
        },
        {
          "type": "required_elements",
          "platform": "linkedin",
          "line": 2732,
          "snippet": "            # Special validation dla videos\n            if media_type == 'video':\n                validation[\"warnings\"].append(\"Video uploads require longer processing time\")\n            \n            validation[\"valid\"] = True",
          "values": {
            "strings": [
              "video",
              "warnings",
              "Video uploads require longer processing time",
              "valid"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 2756,
          "snippet": "            return 'unknown'\n    \n    async def upload_media_to_linkedin(self, file_path: str, account: str = \"default\", \n                                     media_options: Optional[Dict[str, Any]] = None) -> Dict[str, Any]:\n        \"\"\"",
          "values": {
            "strings": [
              "unknown",
              "default"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 2759,
          "snippet": "                                     media_options: Optional[Dict[str, Any]] = None) -> Dict[str, Any]:\n        \"\"\"\n        Task 7.7: Upload media file to LinkedIn\n        \n        Args:",
          "values": {
            "strings": [],
            "numbers": [
              7,
              7
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 2772,
          "snippet": "            media_options = {}\n        \n        logger.info(f\"[LinkedInWrapper] Uploading media file dla {account}: {file_path}\")\n        \n        try:",
          "values": {
            "strings": [
              "[LinkedInWrapper] Uploading media file dla {account}: {file_path}"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 2789,
          "snippet": "            # Log validation warnings\n            for warning in validation[\"warnings\"]:\n                logger.warning(f\"[LinkedInWrapper] Media upload warning: {warning}\")\n            \n            file_info = validation[\"file_info\"]",
          "values": {
            "strings": [
              "warnings",
              "[LinkedInWrapper] Media upload warning: {warning}",
              "file_info"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 2806,
          "snippet": "            timeout = self._calculate_upload_timeout(file_info[\"file_size\"])\n            \n            logger.info(f\"[LinkedInWrapper] Starting media upload (timeout: {timeout}s)\")\n            \n            # Execute upload command",
          "values": {
            "strings": [
              "file_size",
              "[LinkedInWrapper] Starting media upload (timeout: {timeout}s)"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 2815,
          "snippet": "                media_info = self._parse_media_upload_result(result[\"output\"])\n                \n                logger.info(f\"[LinkedInWrapper] Media upload successful: {media_info.get('media_id', 'unknown')}\")\n                \n                return {",
          "values": {
            "strings": [
              "output",
              "[LinkedInWrapper] Media upload successful: {media_info.get(",
              ", ",
              ")}"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 2828,
          "snippet": "            else:\n                # Analyze upload error\n                error_details = self.analyze_linkedin_error(result[\"output\"], f\"media upload {file_path}\", account)\n                \n                return {",
          "values": {
            "strings": [
              "output",
              "media upload {file_path}"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 2841,
          "snippet": "                \n        except Exception as e:\n            logger.error(f\"[LinkedInWrapper] Media upload failed: {e}\")\n            return {\n                \"success\": False,",
          "values": {
            "strings": [
              "[LinkedInWrapper] Media upload failed: {e}",
              "success"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 2884,
          "snippet": "    async def publish_with_media(self, content: str, media_files: List[str], \n                               account: str = \"default\", \n                               publish_options: Optional[Dict[str, Any]] = None) -> LinkedInPublishResponse:\n        \"\"\"\n        Task 7.7: Publish LinkedIn post z media attachments",
          "values": {
            "strings": [
              "default"
            ],
            "numbers": [
              7,
              7
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 2886,
          "snippet": "                               publish_options: Optional[Dict[str, Any]] = None) -> LinkedInPublishResponse:\n        \"\"\"\n        Task 7.7: Publish LinkedIn post z media attachments\n        \n        Args:",
          "values": {
            "strings": [],
            "numbers": [
              7,
              7
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 2902,
          "snippet": "        start_time = time.time()\n        \n        logger.info(f\"[LinkedInWrapper] Publishing post z {len(media_files)} media files dla {account}\")\n        \n        try:",
          "values": {
            "strings": [
              "[LinkedInWrapper] Publishing post z {len(media_files)} media files dla {account}"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 2910,
          "snippet": "            \n            for media_file in media_files:\n                upload_result = await self.upload_media_to_linkedin(\n                    media_file, \n                    account, ",
          "values": {
            "strings": [],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 2918,
          "snippet": "                if upload_result[\"success\"]:\n                    uploaded_media.append(upload_result)\n                    logger.info(f\"[LinkedInWrapper] Media uploaded: {upload_result['media_id']}\")\n                else:\n                    upload_errors.append(f\"{media_file}: {upload_result['error']}\")",
          "values": {
            "strings": [
              "success",
              "[LinkedInWrapper] Media uploaded: {upload_result[",
              "]}",
              "{media_file}: {upload_result[",
              "]}"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 2921,
          "snippet": "                else:\n                    upload_errors.append(f\"{media_file}: {upload_result['error']}\")\n                    logger.error(f\"[LinkedInWrapper] Media upload failed dla {media_file}: {upload_result['error']}\")\n            \n            # Check if any uploads failed",
          "values": {
            "strings": [
              "{media_file}: {upload_result[",
              "]}",
              "[LinkedInWrapper] Media upload failed dla {media_file}: {upload_result[",
              "]}"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 2926,
          "snippet": "            if upload_errors and not publish_options.get('allow_partial_media', False):\n                error_msg = \"; \".join(upload_errors)\n                return LinkedInPublishResponse(\n                    success=False,\n                    error=f\"Media upload failed: {error_msg}\",",
          "values": {
            "strings": [
              "allow_partial_media",
              "; ",
              "Media upload failed: {error_msg}"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 2939,
          "snippet": "            \n            # Build publish request\n            request = LinkedInPublishRequest(\n                content=content,\n                account=account,",
          "values": {
            "strings": [],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 2948,
          "snippet": "            )\n            \n            # Add media IDs to content if needed (LinkedIn CLI specific)\n            if media_ids:\n                # Some CLI tools require media IDs in content or separate parameter",
          "values": {
            "strings": [],
            "numbers": []
          }
        },
        {
          "type": "required_elements",
          "platform": "linkedin",
          "line": 2950,
          "snippet": "            # Add media IDs to content if needed (LinkedIn CLI specific)\n            if media_ids:\n                # Some CLI tools require media IDs in content or separate parameter\n                media_id_str = \",\".join(media_ids)\n                request.pdf_path = f\"media_ids:{media_id_str}\"  # Using pdf_path dla media IDs",
          "values": {
            "strings": [
              ".join(media_ids)\n                request.pdf_path = f"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 2964,
          "snippet": "                response.__dict__['media_upload_errors'] = upload_errors\n            \n            logger.info(f\"[LinkedInWrapper] Post published z {len(uploaded_media)} media attachments\")\n            \n            return response",
          "values": {
            "strings": [
              "media_upload_errors",
              "[LinkedInWrapper] Post published z {len(uploaded_media)} media attachments"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 2969,
          "snippet": "            \n        except Exception as e:\n            logger.error(f\"[LinkedInWrapper] Publish z media failed: {e}\")\n            return LinkedInPublishResponse(\n                success=False,",
          "values": {
            "strings": [
              "[LinkedInWrapper] Publish z media failed: {e}"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 2970,
          "snippet": "        except Exception as e:\n            logger.error(f\"[LinkedInWrapper] Publish z media failed: {e}\")\n            return LinkedInPublishResponse(\n                success=False,\n                error=str(e),",
          "values": {
            "strings": [
              "[LinkedInWrapper] Publish z media failed: {e}"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 2981,
          "snippet": "    async def get_media_library(self, account: str = \"default\") -> Dict[str, Any]:\n        \"\"\"\n        Task 7.7: Get LinkedIn media library dla account\n        \n        Args:",
          "values": {
            "strings": [
              "default"
            ],
            "numbers": [
              7,
              7
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 2989,
          "snippet": "            Media library contents\n        \"\"\"\n        logger.info(f\"[LinkedInWrapper] Getting media library dla {account}\")\n        \n        try:",
          "values": {
            "strings": [
              "\n        logger.info(f"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 2992,
          "snippet": "        \n        try:\n            # Execute LinkedIn CLI command to get media library\n            result = await self.execute_cli_command(['media', 'list', '--account', account])\n            ",
          "values": {
            "strings": [
              "media",
              "list",
              "--account"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 3015,
          "snippet": "            \n        except Exception as e:\n            logger.error(f\"[LinkedInWrapper] Failed to get media library: {e}\")\n            return {\n                \"success\": False,",
          "values": {
            "strings": [
              "[LinkedInWrapper] Failed to get media library: {e}",
              "success"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 3024,
          "snippet": "    \n    def _parse_media_library(self, cli_output: str) -> List[Dict[str, Any]]:\n        \"\"\"Parse media library from LinkedIn CLI output\"\"\"\n        media_items = []\n        lines = cli_output.split('\\n')",
          "values": {
            "strings": [
              "Parse media library from LinkedIn CLI output",
              "\n        media_items = []\n        lines = cli_output.split("
            ],
            "numbers": []
          }
        },
        {
          "type": "required_elements",
          "platform": "linkedin",
          "line": 3058,
          "snippet": "    \n    async def validate_session_comprehensive(self, account: str = \"default\", \n                                           include_diagnostics: bool = True) -> SessionValidationResult:\n        \"\"\"\n        Task 7.3: Comprehensive session validation przed publikacją",
          "values": {
            "strings": [
              "default"
            ],
            "numbers": [
              7,
              3
            ]
          }
        },
        {
          "type": "required_elements",
          "platform": "linkedin",
          "line": 3064,
          "snippet": "        Args:\n            account: Account name to validate\n            include_diagnostics: Whether to run selector diagnostics\n            \n        Returns:",
          "values": {
            "strings": [],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 3071,
          "snippet": "        start_time = time.time()\n        \n        logger.info(f\"[LinkedInWrapper] Starting comprehensive session validation dla account: {account}\")\n        \n        try:",
          "values": {
            "strings": [
              "[LinkedInWrapper] Starting comprehensive session validation dla account: {account}"
            ],
            "numbers": []
          }
        },
        {
          "type": "required_elements",
          "platform": "linkedin",
          "line": 3093,
          "snippet": "            )\n            \n            # Enhanced validation: Include selector diagnostics\n            if include_diagnostics and result.is_valid:\n                try:",
          "values": {
            "strings": [],
            "numbers": []
          }
        },
        {
          "type": "required_elements",
          "platform": "linkedin",
          "line": 3094,
          "snippet": "            \n            # Enhanced validation: Include selector diagnostics\n            if include_diagnostics and result.is_valid:\n                try:\n                    diagnostics = await self.diagnose_selectors(account)",
          "values": {
            "strings": [],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 3110,
          "snippet": "                        \n                except Exception as e:\n                    logger.warning(f\"[LinkedInWrapper] Diagnostics failed during validation: {e}\")\n                    result.selector_status = {\"error\": str(e)}\n            ",
          "values": {
            "strings": [
              "[LinkedInWrapper] Diagnostics failed during validation: {e}",
              "error"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 3119,
          "snippet": "            self.session_cache[account] = result\n            \n            logger.info(f\"[LinkedInWrapper] Session validation completed - Status: {result.status}, Health: {result.health_score:.2f}\")\n            \n            return result",
          "values": {
            "strings": [
              "[LinkedInWrapper] Session validation completed - Status: {result.status}, Health: {result.health_score:.2f}"
            ],
            "numbers": [
              2
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 3133,
          "snippet": "                validation_duration=time.time() - start_time\n            )\n            error_result.recommendations = [\"Check network connectivity\", \"Verify LinkedIn CLI is working\"]\n            \n            logger.error(f\"[LinkedInWrapper] Session validation failed dla {account}: {e}\")",
          "values": {
            "strings": [
              "Check network connectivity",
              "Verify LinkedIn CLI is working",
              "[LinkedInWrapper] Session validation failed dla {account}: {e}"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 3135,
          "snippet": "            error_result.recommendations = [\"Check network connectivity\", \"Verify LinkedIn CLI is working\"]\n            \n            logger.error(f\"[LinkedInWrapper] Session validation failed dla {account}: {e}\")\n            return error_result\n    ",
          "values": {
            "strings": [
              "Check network connectivity",
              "Verify LinkedIn CLI is working",
              "[LinkedInWrapper] Session validation failed dla {account}: {e}"
            ],
            "numbers": []
          }
        },
        {
          "type": "required_elements",
          "platform": "linkedin",
          "line": 3198,
          "snippet": "        Args:\n            account: Account name\n            recreation_threshold: Minimum health score required\n            \n        Returns:",
          "values": {
            "strings": [],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 3203,
          "snippet": "            Session validation result (will attempt recreation if needed)\n        \"\"\"\n        logger.info(f\"[LinkedInWrapper] Ensuring valid session dla account: {account}\")\n        \n        # Check current session",
          "values": {
            "strings": [
              "\n        logger.info(f"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 3210,
          "snippet": "        # If session is healthy enough, return it\n        if result.is_valid and result.health_score >= recreation_threshold:\n            logger.info(f\"[LinkedInWrapper] Session {account} is healthy (score: {result.health_score:.2f})\")\n            return result\n        ",
          "values": {
            "strings": [
              "[LinkedInWrapper] Session {account} is healthy (score: {result.health_score:.2f})"
            ],
            "numbers": [
              2
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 3215,
          "snippet": "        # If session needs recreation\n        if result.needs_recreation or result.health_score < recreation_threshold:\n            logger.warning(f\"[LinkedInWrapper] Session {account} needs recreation (health: {result.health_score:.2f})\")\n            \n            # Attempt to create new session",
          "values": {
            "strings": [
              "[LinkedInWrapper] Session {account} needs recreation (health: {result.health_score:.2f})"
            ],
            "numbers": [
              2
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 3223,
          "snippet": "                \n                if create_parsed.get(\"success\") or create_parsed.get(\"status\") == \"exists\":\n                    logger.info(f\"[LinkedInWrapper] Session recreation successful dla {account}\")\n                    # Re-validate after creation\n                    return await self.validate_session_comprehensive(account)",
          "values": {
            "strings": [
              "success",
              "status",
              "exists",
              "[LinkedInWrapper] Session recreation successful dla {account}"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 3227,
          "snippet": "                    return await self.validate_session_comprehensive(account)\n                else:\n                    logger.error(f\"[LinkedInWrapper] Session creation failed dla {account}\")\n                    result.error_message = f\"Recreation failed: {create_parsed.get('error_message', 'Unknown error')}\"\n                    result.recommendations.append(\"Manual session creation required\")",
          "values": {
            "strings": [
              "[LinkedInWrapper] Session creation failed dla {account}",
              "Recreation failed: {create_parsed.get(",
              ", ",
              ")}",
              "Manual session creation required"
            ],
            "numbers": []
          }
        },
        {
          "type": "required_elements",
          "platform": "linkedin",
          "line": 3229,
          "snippet": "                    logger.error(f\"[LinkedInWrapper] Session creation failed dla {account}\")\n                    result.error_message = f\"Recreation failed: {create_parsed.get('error_message', 'Unknown error')}\"\n                    result.recommendations.append(\"Manual session creation required\")\n                    \n            except Exception as e:",
          "values": {
            "strings": [
              "[LinkedInWrapper] Session creation failed dla {account}",
              "Recreation failed: {create_parsed.get(",
              ", ",
              ")}",
              "Manual session creation required"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 3232,
          "snippet": "                    \n            except Exception as e:\n                logger.error(f\"[LinkedInWrapper] Session recreation exception dla {account}: {e}\")\n                result.error_message = f\"Recreation exception: {str(e)}\"\n                result.recommendations.append(\"Manual intervention required\")",
          "values": {
            "strings": [
              "[LinkedInWrapper] Session recreation exception dla {account}: {e}",
              "Recreation exception: {str(e)}",
              "Manual intervention required"
            ],
            "numbers": []
          }
        },
        {
          "type": "required_elements",
          "platform": "linkedin",
          "line": 3234,
          "snippet": "                logger.error(f\"[LinkedInWrapper] Session recreation exception dla {account}: {e}\")\n                result.error_message = f\"Recreation exception: {str(e)}\"\n                result.recommendations.append(\"Manual intervention required\")\n        \n        return result",
          "values": {
            "strings": [
              "[LinkedInWrapper] Session recreation exception dla {account}: {e}",
              "Recreation exception: {str(e)}",
              "Manual intervention required"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 3253,
          "snippet": "        \"\"\"\n        if account in self.monitoring_tasks:\n            logger.warning(f\"[LinkedInWrapper] Monitoring already active dla account: {account}\")\n            return False\n        ",
          "values": {
            "strings": [
              "\n        if account in self.monitoring_tasks:\n            logger.warning(f"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 3272,
          "snippet": "        )\n        \n        logger.info(f\"[LinkedInWrapper] Started session health monitoring dla {account} (interval: {check_interval}s)\")\n        return True\n    ",
          "values": {
            "strings": [
              "[LinkedInWrapper] Started session health monitoring dla {account} (interval: {check_interval}s)"
            ],
            "numbers": []
          }
        },
        {
          "type": "required_elements",
          "platform": "linkedin",
          "line": 3283,
          "snippet": "                try:\n                    # Validate session\n                    result = await self.validate_session_comprehensive(account, include_diagnostics=False)\n                    \n                    # Update monitor state",
          "values": {
            "strings": [],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 3290,
          "snippet": "                    if result.is_valid and result.health_score >= monitor.health_threshold:\n                        monitor.consecutive_failures = 0\n                        logger.debug(f\"[LinkedInWrapper] Session {account} health check passed (score: {result.health_score:.2f})\")\n                    else:\n                        monitor.consecutive_failures += 1",
          "values": {
            "strings": [
              "[LinkedInWrapper] Session {account} health check passed (score: {result.health_score:.2f})"
            ],
            "numbers": [
              0,
              2,
              1
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 3293,
          "snippet": "                    else:\n                        monitor.consecutive_failures += 1\n                        logger.warning(f\"[LinkedInWrapper] Session {account} health check failed (failures: {monitor.consecutive_failures})\")\n                        \n                        # Auto-recreation if enabled",
          "values": {
            "strings": [
              "[LinkedInWrapper] Session {account} health check failed (failures: {monitor.consecutive_failures})"
            ],
            "numbers": [
              1
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 3297,
          "snippet": "                        # Auto-recreation if enabled\n                        if monitor.auto_recreation and monitor.consecutive_failures >= monitor.max_validation_failures:\n                            logger.info(f\"[LinkedInWrapper] Attempting auto-recreation dla {account}\")\n                            await self.ensure_valid_session(account)\n                            monitor.consecutive_failures = 0",
          "values": {
            "strings": [
              "[LinkedInWrapper] Attempting auto-recreation dla {account}"
            ],
            "numbers": [
              0
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 3307,
          "snippet": "                    break\n                except Exception as e:\n                    logger.error(f\"[LinkedInWrapper] Session monitoring error dla {account}: {e}\")\n                    await asyncio.sleep(60)  # Wait 1 minute on error\n                    ",
          "values": {
            "strings": [
              "[LinkedInWrapper] Session monitoring error dla {account}: {e}"
            ],
            "numbers": [
              60,
              1
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 3311,
          "snippet": "                    \n        except Exception as e:\n            logger.error(f\"[LinkedInWrapper] Session monitoring loop failed dla {account}: {e}\")\n        finally:\n            logger.info(f\"[LinkedInWrapper] Session monitoring stopped dla {account}\")",
          "values": {
            "strings": [
              "[LinkedInWrapper] Session monitoring loop failed dla {account}: {e}",
              "[LinkedInWrapper] Session monitoring stopped dla {account}"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 3313,
          "snippet": "            logger.error(f\"[LinkedInWrapper] Session monitoring loop failed dla {account}: {e}\")\n        finally:\n            logger.info(f\"[LinkedInWrapper] Session monitoring stopped dla {account}\")\n            monitor.monitoring_active = False\n    ",
          "values": {
            "strings": [
              "[LinkedInWrapper] Session monitoring loop failed dla {account}: {e}",
              "[LinkedInWrapper] Session monitoring stopped dla {account}"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 3334,
          "snippet": "            self.session_monitors[account].monitoring_active = False\n        \n        logger.info(f\"[LinkedInWrapper] Stopped session health monitoring dla {account}\")\n        return True\n    ",
          "values": {
            "strings": [
              "[LinkedInWrapper] Stopped session health monitoring dla {account}"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 3367,
          "snippet": "        return {\n            \"wrapper_version\": \"1.0.0\",\n            \"linkedin_module_path\": str(self.linkedin_path),\n            \"cli_script_path\": str(self.cli_script),\n            \"cli_exists\": self.cli_script.exists(),",
          "values": {
            "strings": [
              "wrapper_version",
              "1.0.0",
              "linkedin_module_path",
              "cli_script_path",
              "cli_exists"
            ],
            "numbers": [
              1,
              0,
              0
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 3370,
          "snippet": "            \"cli_script_path\": str(self.cli_script),\n            \"cli_exists\": self.cli_script.exists(),\n            \"module_exists\": self.linkedin_path.exists()\n        }\n",
          "values": {
            "strings": [
              "cli_script_path",
              "cli_exists",
              "module_exists"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 3378,
          "snippet": "    \"\"\"\n    Test basic wrapper functionality\n    Task 7.1 Test: Wrapper poprawnie wykonuje `node scripts/linkedin-cli.js --help` i parsuje output\n    \"\"\"\n    ",
          "values": {
            "strings": [
              "\n    Test basic wrapper functionality\n    Task 7.1 Test: Wrapper poprawnie wykonuje `node scripts/linkedin-cli.js --help` i parsuje output\n    "
            ],
            "numbers": [
              7,
              1
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 3382,
          "snippet": "    \n    try:\n        wrapper = LinkedInModuleWrapper()\n        \n        print(\"🧪 Testing LinkedIn CLI Wrapper...\")",
          "values": {
            "strings": [
              "🧪 Testing LinkedIn CLI Wrapper..."
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 3384,
          "snippet": "        wrapper = LinkedInModuleWrapper()\n        \n        print(\"🧪 Testing LinkedIn CLI Wrapper...\")\n        print(f\"📁 LinkedIn module path: {wrapper.linkedin_path}\")\n        ",
          "values": {
            "strings": [
              "🧪 Testing LinkedIn CLI Wrapper...",
              "📁 LinkedIn module path: {wrapper.linkedin_path}"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 3385,
          "snippet": "        \n        print(\"🧪 Testing LinkedIn CLI Wrapper...\")\n        print(f\"📁 LinkedIn module path: {wrapper.linkedin_path}\")\n        \n        # Test 1: CLI availability",
          "values": {
            "strings": [
              "🧪 Testing LinkedIn CLI Wrapper...",
              "📁 LinkedIn module path: {wrapper.linkedin_path}"
            ],
            "numbers": [
              1
            ]
          }
        }
      ]
    },
    {
      "file": "/Users/hretheum/dev/bezrobocie/vector-wave/publisher/src/orchestrator/image_processor.py",
      "exists": true,
      "hits": [
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 323,
          "snippet": "        logger.info(f\"Finalizing images for platform: {platform}\")\n        \n        if platform == \"ghost\":\n            # Upload to Ghost and replace with Ghost URLs\n            return await self.process_ghost_images(content, image_mapping)",
          "values": {
            "strings": [
              "Finalizing images for platform: {platform}",
              "ghost"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 324,
          "snippet": "        \n        if platform == \"ghost\":\n            # Upload to Ghost and replace with Ghost URLs\n            return await self.process_ghost_images(content, image_mapping)\n        ",
          "values": {
            "strings": [
              "ghost"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "twitter",
          "line": 325,
          "snippet": "        if platform == \"ghost\":\n            # Upload to Ghost and replace with Ghost URLs\n            return await self.process_ghost_images(content, image_mapping)\n        \n        elif platform == \"twitter\":",
          "values": {
            "strings": [
              "ghost",
              "twitter"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "twitter",
          "line": 327,
          "snippet": "            return await self.process_ghost_images(content, image_mapping)\n        \n        elif platform == \"twitter\":\n            # Keep local paths for Twitter media attachment\n            return content.replace(\"LOCAL_IMAGE:\", \"\")",
          "values": {
            "strings": [
              "twitter",
              "LOCAL_IMAGE:"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "twitter",
          "line": 328,
          "snippet": "        \n        elif platform == \"twitter\":\n            # Keep local paths for Twitter media attachment\n            return content.replace(\"LOCAL_IMAGE:\", \"\")\n        ",
          "values": {
            "strings": [
              "twitter",
              "LOCAL_IMAGE:"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 331,
          "snippet": "            return content.replace(\"LOCAL_IMAGE:\", \"\")\n        \n        elif platform == \"linkedin\":\n            # Keep local paths for Presenton processing  \n            return content.replace(\"LOCAL_IMAGE:\", \"\")",
          "values": {
            "strings": [
              "LOCAL_IMAGE:",
              ")\n        \n        elif platform == ",
              ":\n            # Keep local paths for Presenton processing  \n            return content.replace(",
              ", "
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "substack",
          "line": 335,
          "snippet": "            return content.replace(\"LOCAL_IMAGE:\", \"\")\n        \n        elif platform == \"substack\":\n            # Keep local paths - Substack adapter will handle upload\n            return content.replace(\"LOCAL_IMAGE:\", \"\")",
          "values": {
            "strings": [
              "LOCAL_IMAGE:",
              ")\n        \n        elif platform == ",
              ":\n            # Keep local paths - Substack adapter will handle upload\n            return content.replace(",
              ", "
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "substack",
          "line": 336,
          "snippet": "        \n        elif platform == \"substack\":\n            # Keep local paths - Substack adapter will handle upload\n            return content.replace(\"LOCAL_IMAGE:\", \"\")\n        ",
          "values": {
            "strings": [
              "substack",
              "LOCAL_IMAGE:"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 343,
          "snippet": "            return content.replace(\"LOCAL_IMAGE:\", \"\")\n    \n    async def process_ghost_images(self, content: str, image_mapping: Dict[str, str]) -> str:\n        \"\"\"Upload images to Ghost and replace URLs\"\"\"\n        ",
          "values": {
            "strings": [
              "LOCAL_IMAGE:",
              ")\n    \n    async def process_ghost_images(self, content: str, image_mapping: Dict[str, str]) -> str:\n        ",
              "Upload images to Ghost and replace URLs"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 344,
          "snippet": "    \n    async def process_ghost_images(self, content: str, image_mapping: Dict[str, str]) -> str:\n        \"\"\"Upload images to Ghost and replace URLs\"\"\"\n        \n        logger.info(f\"Processing {len(image_mapping)} images for Ghost\")",
          "values": {
            "strings": [
              "Upload images to Ghost and replace URLs",
              "\n        \n        logger.info(f"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 346,
          "snippet": "        \"\"\"Upload images to Ghost and replace URLs\"\"\"\n        \n        logger.info(f\"Processing {len(image_mapping)} images for Ghost\")\n        \n        try:",
          "values": {
            "strings": [
              "Upload images to Ghost and replace URLs",
              "\n        \n        logger.info(f"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 349,
          "snippet": "        \n        try:\n            # Import Ghost client - avoid circular import\n            import sys\n            sys.path.append('/app/src/adapters/ghost')",
          "values": {
            "strings": [
              "/app/src/adapters/ghost"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 351,
          "snippet": "            # Import Ghost client - avoid circular import\n            import sys\n            sys.path.append('/app/src/adapters/ghost')\n            from ghost_client import GhostClient\n            ",
          "values": {
            "strings": [
              "/app/src/adapters/ghost"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 352,
          "snippet": "            import sys\n            sys.path.append('/app/src/adapters/ghost')\n            from ghost_client import GhostClient\n            \n            ghost_client = GhostClient()",
          "values": {
            "strings": [
              "/app/src/adapters/ghost"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 354,
          "snippet": "            from ghost_client import GhostClient\n            \n            ghost_client = GhostClient()\n            updated_content = content\n            ",
          "values": {
            "strings": [],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 360,
          "snippet": "            upload_tasks = []\n            for keyword, local_path in image_mapping.items():\n                upload_tasks.append(self._upload_single_ghost_image(ghost_client, keyword, local_path))\n            \n            upload_results = await asyncio.gather(*upload_tasks, return_exceptions=True)",
          "values": {
            "strings": [],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 369,
          "snippet": "                \n                if isinstance(result, Exception):\n                    logger.error(f\"Ghost upload failed for {keyword}: {result}\")\n                    # Keep local path as fallback\n                    updated_content = updated_content.replace(",
          "values": {
            "strings": [
              "Ghost upload failed for {keyword}: {result}"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 376,
          "snippet": "                    )\n                else:\n                    ghost_url = result\n                    # Replace local path with Ghost URL\n                    updated_content = updated_content.replace(",
          "values": {
            "strings": [],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 377,
          "snippet": "                else:\n                    ghost_url = result\n                    # Replace local path with Ghost URL\n                    updated_content = updated_content.replace(\n                        f\"LOCAL_IMAGE:{local_path}\",",
          "values": {
            "strings": [
              "LOCAL_IMAGE:{local_path}"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 380,
          "snippet": "                    updated_content = updated_content.replace(\n                        f\"LOCAL_IMAGE:{local_path}\",\n                        f'<img src=\"{ghost_url}\" alt=\"{keyword.replace(\"_\", \" \").replace(\"-\", \" \").title()}\">'\n                    )\n                    logger.info(f\"Successfully uploaded {keyword} to Ghost: {ghost_url}\")",
          "values": {
            "strings": [
              "LOCAL_IMAGE:{local_path}",
              "<img src=",
              " alt=",
              ", ",
              ").replace(",
              ", ",
              ").title()}",
              "\n                    )\n                    logger.info(f"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 382,
          "snippet": "                        f'<img src=\"{ghost_url}\" alt=\"{keyword.replace(\"_\", \" \").replace(\"-\", \" \").title()}\">'\n                    )\n                    logger.info(f\"Successfully uploaded {keyword} to Ghost: {ghost_url}\")\n            \n            return updated_content",
          "values": {
            "strings": [
              "<img src=",
              " alt=",
              ", ",
              ").replace(",
              ", ",
              ").title()}",
              "\n                    )\n                    logger.info(f"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 387,
          "snippet": "            \n        except ImportError:\n            logger.error(\"Ghost client not available for image upload\")\n            # Fallback: remove LOCAL_IMAGE markers\n            for keyword, local_path in image_mapping.items():",
          "values": {
            "strings": [
              "Ghost client not available for image upload"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 396,
          "snippet": "            return content\n        except Exception as e:\n            logger.error(f\"Ghost image processing failed: {e}\")\n            # Fallback: remove LOCAL_IMAGE markers\n            for keyword, local_path in image_mapping.items():",
          "values": {
            "strings": [
              "Ghost image processing failed: {e}"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 405,
          "snippet": "            return content\n    \n    async def _upload_single_ghost_image(self, ghost_client, keyword: str, local_path: str) -> str:\n        \"\"\"Upload single image to Ghost\"\"\"\n        ",
          "values": {
            "strings": [
              "Upload single image to Ghost"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 406,
          "snippet": "    \n    async def _upload_single_ghost_image(self, ghost_client, keyword: str, local_path: str) -> str:\n        \"\"\"Upload single image to Ghost\"\"\"\n        \n        if not os.path.exists(local_path):",
          "values": {
            "strings": [
              "Upload single image to Ghost"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 412,
          "snippet": "        \n        try:\n            # Upload to Ghost\n            upload_result = await ghost_client.upload_image(local_path)\n            ",
          "values": {
            "strings": [],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 413,
          "snippet": "        try:\n            # Upload to Ghost\n            upload_result = await ghost_client.upload_image(local_path)\n            \n            if not upload_result or 'images' not in upload_result or not upload_result['images']:",
          "values": {
            "strings": [
              "images",
              "images"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 416,
          "snippet": "            \n            if not upload_result or 'images' not in upload_result or not upload_result['images']:\n                raise Exception(\"Ghost upload returned empty result\")\n            \n            ghost_url = upload_result['images'][0]['url']",
          "values": {
            "strings": [
              "images",
              "images",
              "Ghost upload returned empty result",
              "images",
              "url"
            ],
            "numbers": [
              0
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 418,
          "snippet": "                raise Exception(\"Ghost upload returned empty result\")\n            \n            ghost_url = upload_result['images'][0]['url']\n            return ghost_url\n            ",
          "values": {
            "strings": [
              "Ghost upload returned empty result",
              "images",
              "url"
            ],
            "numbers": [
              0
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 419,
          "snippet": "            \n            ghost_url = upload_result['images'][0]['url']\n            return ghost_url\n            \n        except Exception as e:",
          "values": {
            "strings": [
              "images",
              "url"
            ],
            "numbers": [
              0
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 422,
          "snippet": "            \n        except Exception as e:\n            raise Exception(f\"Ghost upload failed: {e}\")\n    \n    def cleanup_old_images(self, max_age_hours: int = 24):",
          "values": {
            "strings": [
              "Ghost upload failed: {e}"
            ],
            "numbers": [
              24
            ]
          }
        }
      ]
    },
    {
      "file": "/Users/hretheum/dev/bezrobocie/vector-wave/publisher/src/orchestrator/performance_metrics_collector.py",
      "exists": true,
      "hits": [
        {
          "type": "platform_specific",
          "platform": "twitter",
          "line": 130,
          "snippet": "        if os.getenv(\"DOCKER_ENV\"):\n            self.platform_urls = {\n                \"twitter\": \"http://twitter-adapter:8082\",\n                \"ghost\": \"http://ghost-adapter:8082\",\n                \"beehiiv\": \"http://beehiiv-adapter:8084\",",
          "values": {
            "strings": [
              "DOCKER_ENV",
              "twitter",
              "http://twitter-adapter:8082",
              "ghost",
              "http://ghost-adapter:8082",
              "beehiiv",
              "http://beehiiv-adapter:8084"
            ],
            "numbers": [
              8082,
              8082,
              8084
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 131,
          "snippet": "            self.platform_urls = {\n                \"twitter\": \"http://twitter-adapter:8082\",\n                \"ghost\": \"http://ghost-adapter:8082\",\n                \"beehiiv\": \"http://beehiiv-adapter:8084\",\n                \"linkedin\": \"http://linkedin-adapter:8098\"",
          "values": {
            "strings": [
              "twitter",
              "http://twitter-adapter:8082",
              "ghost",
              "http://ghost-adapter:8082",
              "beehiiv",
              "http://beehiiv-adapter:8084",
              "linkedin",
              "http://linkedin-adapter:8098"
            ],
            "numbers": [
              8082,
              8082,
              8084,
              8098
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 132,
          "snippet": "                \"twitter\": \"http://twitter-adapter:8082\",\n                \"ghost\": \"http://ghost-adapter:8082\",\n                \"beehiiv\": \"http://beehiiv-adapter:8084\",\n                \"linkedin\": \"http://linkedin-adapter:8098\"\n            }",
          "values": {
            "strings": [
              "twitter",
              "http://twitter-adapter:8082",
              "ghost",
              "http://ghost-adapter:8082",
              "beehiiv",
              "http://beehiiv-adapter:8084",
              "linkedin",
              "http://linkedin-adapter:8098"
            ],
            "numbers": [
              8082,
              8082,
              8084,
              8098
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 133,
          "snippet": "                \"ghost\": \"http://ghost-adapter:8082\",\n                \"beehiiv\": \"http://beehiiv-adapter:8084\",\n                \"linkedin\": \"http://linkedin-adapter:8098\"\n            }\n        else:",
          "values": {
            "strings": [
              "ghost",
              "http://ghost-adapter:8082",
              "beehiiv",
              "http://beehiiv-adapter:8084",
              "linkedin",
              "http://linkedin-adapter:8098"
            ],
            "numbers": [
              8082,
              8084,
              8098
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "twitter",
          "line": 137,
          "snippet": "        else:\n            self.platform_urls = {\n                \"twitter\": \"http://localhost:8083\",\n                \"ghost\": \"http://localhost:8086\",\n                \"beehiiv\": \"http://localhost:8084\",",
          "values": {
            "strings": [
              "twitter",
              "http://localhost:8083",
              "ghost",
              "http://localhost:8086",
              "beehiiv",
              "http://localhost:8084"
            ],
            "numbers": [
              8083,
              8086,
              8084
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 138,
          "snippet": "            self.platform_urls = {\n                \"twitter\": \"http://localhost:8083\",\n                \"ghost\": \"http://localhost:8086\",\n                \"beehiiv\": \"http://localhost:8084\",\n                \"linkedin\": \"http://localhost:8088\"",
          "values": {
            "strings": [
              "twitter",
              "http://localhost:8083",
              "ghost",
              "http://localhost:8086",
              "beehiiv",
              "http://localhost:8084",
              "linkedin",
              "http://localhost:8088"
            ],
            "numbers": [
              8083,
              8086,
              8084,
              8088
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 139,
          "snippet": "                \"twitter\": \"http://localhost:8083\",\n                \"ghost\": \"http://localhost:8086\",\n                \"beehiiv\": \"http://localhost:8084\",\n                \"linkedin\": \"http://localhost:8088\"\n            }",
          "values": {
            "strings": [
              "twitter",
              "http://localhost:8083",
              "ghost",
              "http://localhost:8086",
              "beehiiv",
              "http://localhost:8084",
              "linkedin",
              "http://localhost:8088"
            ],
            "numbers": [
              8083,
              8086,
              8084,
              8088
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 140,
          "snippet": "                \"ghost\": \"http://localhost:8086\",\n                \"beehiiv\": \"http://localhost:8084\",\n                \"linkedin\": \"http://localhost:8088\"\n            }\n        ",
          "values": {
            "strings": [
              "ghost",
              "http://localhost:8086",
              "beehiiv",
              "http://localhost:8084",
              "linkedin",
              "http://localhost:8088"
            ],
            "numbers": [
              8086,
              8084,
              8088
            ]
          }
        },
        {
          "type": "required_elements",
          "platform": "universal",
          "line": 406,
          "snippet": "        \n        if performance_level == PerformanceLevel.POOR:\n            recommendations.append(\"URGENT: Platform requires immediate attention\")\n            recommendations.append(\"Consider scaling resources or optimizing code\")\n        ",
          "values": {
            "strings": [
              "URGENT: Platform requires immediate attention",
              "Consider scaling resources or optimizing code"
            ],
            "numbers": []
          }
        }
      ]
    },
    {
      "file": "/Users/hretheum/dev/bezrobocie/vector-wave/publisher/src/orchestrator/platform_health_models.py",
      "exists": true,
      "hits": [
        {
          "type": "platform_specific",
          "platform": "twitter",
          "line": 71,
          "snippet": "    # Basic service info\n    status: HealthStatus = Field(..., description=\"Overall health status\")\n    service: str = Field(..., description=\"Service name (e.g., 'twitter-adapter')\")\n    platform: str = Field(..., description=\"Platform name (e.g., 'twitter')\")\n    version: str = Field(default=\"1.0.0\", description=\"Adapter version\")",
          "values": {
            "strings": [
              "Overall health status",
              "Service name (e.g., ",
              ")\n    platform: str = Field(..., description=",
              "twitter",
              ")\n    version: str = Field(default=",
              ", description="
            ],
            "numbers": [
              1,
              0,
              0
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "twitter",
          "line": 72,
          "snippet": "    status: HealthStatus = Field(..., description=\"Overall health status\")\n    service: str = Field(..., description=\"Service name (e.g., 'twitter-adapter')\")\n    platform: str = Field(..., description=\"Platform name (e.g., 'twitter')\")\n    version: str = Field(default=\"1.0.0\", description=\"Adapter version\")\n    timestamp: str = Field(",
          "values": {
            "strings": [
              "Overall health status",
              "Service name (e.g., ",
              ")\n    platform: str = Field(..., description=",
              "twitter",
              ")\n    version: str = Field(default=",
              ", description="
            ],
            "numbers": [
              1,
              0,
              0
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 85,
          "snippet": "    rate_limits: Optional[RateLimitStatus] = Field(default=None, description=\"Rate limit information\")\n    \n    # Session status (for browser-based platforms like LinkedIn)\n    session: Optional[SessionStatus] = Field(default=None, description=\"Session validity status\")\n    ",
          "values": {
            "strings": [
              "Rate limit information",
              "Session validity status"
            ],
            "numbers": []
          }
        }
      ]
    },
    {
      "file": "/Users/hretheum/dev/bezrobocie/vector-wave/publisher/src/orchestrator/test_task_46_error_handling.py",
      "exists": true,
      "hits": [
        {
          "type": "required_elements",
          "platform": "universal",
          "line": 39,
          "snippet": "            print(f\"   Timestamp: {error_data.get('timestamp')}\")\n            \n            # Check required error fields\n            required_fields = ['error_code', 'error_type', 'message', 'timestamp']\n            missing_fields = [field for field in required_fields if field not in error_data]",
          "values": {
            "strings": [
              "   Timestamp: {error_data.get(",
              ")}",
              "error_code",
              "error_type",
              "message",
              "timestamp"
            ],
            "numbers": []
          }
        },
        {
          "type": "required_elements",
          "platform": "universal",
          "line": 40,
          "snippet": "            \n            # Check required error fields\n            required_fields = ['error_code', 'error_type', 'message', 'timestamp']\n            missing_fields = [field for field in required_fields if field not in error_data]\n            ",
          "values": {
            "strings": [
              "error_code",
              "error_type",
              "message",
              "timestamp"
            ],
            "numbers": []
          }
        },
        {
          "type": "required_elements",
          "platform": "universal",
          "line": 41,
          "snippet": "            # Check required error fields\n            required_fields = ['error_code', 'error_type', 'message', 'timestamp']\n            missing_fields = [field for field in required_fields if field not in error_data]\n            \n            if not missing_fields:",
          "values": {
            "strings": [
              "error_code",
              "error_type",
              "message",
              "timestamp"
            ],
            "numbers": []
          }
        },
        {
          "type": "required_elements",
          "platform": "universal",
          "line": 44,
          "snippet": "            \n            if not missing_fields:\n                print(\"   ✅ All required error fields present\")\n                \n                # Check error code format",
          "values": {
            "strings": [
              "   ✅ All required error fields present"
            ],
            "numbers": []
          }
        },
        {
          "type": "required_elements",
          "platform": "universal",
          "line": 70,
          "snippet": "    \n    try:\n        # Test missing required field\n        payload = {\n            \"platforms\": {  # Missing 'topic' field",
          "values": {
            "strings": [
              "platforms",
              "topic"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "twitter",
          "line": 73,
          "snippet": "        payload = {\n            \"platforms\": {  # Missing 'topic' field\n                \"twitter\": {\"enabled\": True}\n            }\n        }",
          "values": {
            "strings": [
              "platforms",
              "topic",
              "twitter",
              "enabled"
            ],
            "numbers": []
          }
        },
        {
          "type": "required_elements",
          "platform": "universal",
          "line": 229,
          "snippet": "            print(f\"   Supported versions: {len(data.get('supported_versions', {}))}\")\n            \n            # Check required fields\n            required_fields = ['current_version', 'supported_versions', 'timestamp']\n            missing_fields = [field for field in required_fields if field not in data]",
          "values": {
            "strings": [
              "   Supported versions: {len(data.get(",
              ", {}))}",
              "current_version",
              "supported_versions",
              "timestamp"
            ],
            "numbers": []
          }
        },
        {
          "type": "required_elements",
          "platform": "universal",
          "line": 230,
          "snippet": "            \n            # Check required fields\n            required_fields = ['current_version', 'supported_versions', 'timestamp']\n            missing_fields = [field for field in required_fields if field not in data]\n            ",
          "values": {
            "strings": [
              "current_version",
              "supported_versions",
              "timestamp"
            ],
            "numbers": []
          }
        },
        {
          "type": "required_elements",
          "platform": "universal",
          "line": 231,
          "snippet": "            # Check required fields\n            required_fields = ['current_version', 'supported_versions', 'timestamp']\n            missing_fields = [field for field in required_fields if field not in data]\n            \n            if not missing_fields:",
          "values": {
            "strings": [
              "current_version",
              "supported_versions",
              "timestamp"
            ],
            "numbers": []
          }
        },
        {
          "type": "required_elements",
          "platform": "universal",
          "line": 395,
          "snippet": "        print(\"✅ Enhanced error handling działa poprawnie\")\n        print()\n        print(\"📋 Task 4.6 Requirements Met:\")\n        print(\"   ✅ Structured error responses z kodami\")\n        print(\"   ✅ Request/response validation\")",
          "values": {
            "strings": [
              "✅ Enhanced error handling działa poprawnie",
              "📋 Task 4.6 Requirements Met:",
              "   ✅ Structured error responses z kodami",
              "   ✅ Request/response validation"
            ],
            "numbers": [
              4,
              6
            ]
          }
        }
      ]
    },
    {
      "file": "/Users/hretheum/dev/bezrobocie/vector-wave/publisher/src/orchestrator/content_processor.py",
      "exists": true,
      "hits": [
        {
          "type": "required_elements",
          "platform": "universal",
          "line": 33,
          "snippet": "    \n    def __init__(self):\n        \"\"\"Initialize content processor with all required clients\"\"\"\n        \n        logger.info(\"🚀 Initializing ContentProcessor...\")",
          "values": {
            "strings": [
              "Initialize content processor with all required clients",
              "\n        \n        logger.info("
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 49,
          "snippet": "            \"image_processing_requests\": 0,\n            \"platform_processing\": {\n                \"linkedin\": 0,\n                \"twitter\": 0,\n                \"ghost\": 0,",
          "values": {
            "strings": [
              "image_processing_requests",
              "platform_processing",
              "linkedin",
              "twitter",
              "ghost"
            ],
            "numbers": [
              0,
              0,
              0,
              0
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 50,
          "snippet": "            \"platform_processing\": {\n                \"linkedin\": 0,\n                \"twitter\": 0,\n                \"ghost\": 0,\n                \"substack\": 0",
          "values": {
            "strings": [
              "platform_processing",
              "linkedin",
              "twitter",
              "ghost",
              "substack"
            ],
            "numbers": [
              0,
              0,
              0,
              0
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 51,
          "snippet": "                \"linkedin\": 0,\n                \"twitter\": 0,\n                \"ghost\": 0,\n                \"substack\": 0\n            }",
          "values": {
            "strings": [
              "linkedin",
              "twitter",
              "ghost",
              "substack"
            ],
            "numbers": [
              0,
              0,
              0,
              0
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "twitter",
          "line": 52,
          "snippet": "                \"twitter\": 0,\n                \"ghost\": 0,\n                \"substack\": 0\n            }\n        }",
          "values": {
            "strings": [
              "twitter",
              "ghost",
              "substack"
            ],
            "numbers": [
              0,
              0,
              0
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 219,
          "snippet": "        Determine if content should be processed through Presenton\n        \n        LinkedIn content uses Presenton when:\n        - Platform is LinkedIn\n        - Content is ready for Presenton (from AI Writing Flow)",
          "values": {
            "strings": [],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 220,
          "snippet": "        \n        LinkedIn content uses Presenton when:\n        - Platform is LinkedIn\n        - Content is ready for Presenton (from AI Writing Flow)\n        - User hasn't forced direct content mode",
          "values": {
            "strings": [],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 225,
          "snippet": "        \"\"\"\n        \n        if platform != \"linkedin\":\n            return False\n        ",
          "values": {
            "strings": [
              "\n        \n        if platform != "
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 230,
          "snippet": "        # Check if user explicitly wants direct content\n        if platform_config.direct_content is True:\n            logger.info(f\"[ContentProcessor] LinkedIn: Direct content mode forced by user\")\n            return False\n        ",
          "values": {
            "strings": [
              "[ContentProcessor] LinkedIn: Direct content mode forced by user"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 236,
          "snippet": "        ready_for_presenton = content_data.get(\"ready_for_presenton\", False)\n        if not ready_for_presenton:\n            logger.info(f\"[ContentProcessor] LinkedIn: Content not ready for Presenton\")\n            return False\n        ",
          "values": {
            "strings": [
              "ready_for_presenton",
              "[ContentProcessor] LinkedIn: Content not ready for Presenton"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 242,
          "snippet": "    \n    async def _process_presenton_content(self, content_data: Dict, config: Dict, platform: str) -> Dict[str, Any]:\n        \"\"\"Process LinkedIn carousel through Presenton\"\"\"\n        \n        start_time = time.time()",
          "values": {
            "strings": [
              "Process LinkedIn carousel through Presenton"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 253,
          "snippet": "            slides_count = config.slides_count or 5\n            template = config.template or \"business\" \n            topic_title = content_data.get(\"topic_title\", \"LinkedIn Carousel\")\n            \n            self.stats[\"presenton_generations\"] += 1",
          "values": {
            "strings": [
              "business",
              "topic_title",
              "LinkedIn Carousel",
              "presenton_generations"
            ],
            "numbers": [
              5,
              1
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 285,
          "snippet": "                pdf_path=presenton_result[\"pdf_path\"],\n                slides_count=presenton_result[\"slide_count\"],\n                ready_for_linkedin=True\n            ).dict()\n            ",
          "values": {
            "strings": [
              "pdf_path",
              "slide_count"
            ],
            "numbers": []
          }
        },
        {
          "type": "required_elements",
          "platform": "universal",
          "line": 292,
          "snippet": "            logger.error(f\"❌ Presenton processing failed: {e}\")\n            \n            # Return error instead of fallback (as per user requirements)\n            return PlatformContentResult(\n                type=\"error\",",
          "values": {
            "strings": [
              "❌ Presenton processing failed: {e}",
              "error"
            ],
            "numbers": []
          }
        }
      ]
    },
    {
      "file": "/Users/hretheum/dev/bezrobocie/vector-wave/publisher/src/orchestrator/test_publish_endpoint.py",
      "exists": true,
      "hits": [
        {
          "type": "platform_specific",
          "platform": "twitter",
          "line": 27,
          "snippet": "        },\n        \"platforms\": {\n            \"twitter\": {\n                \"enabled\": True,\n                \"account_id\": \"main_account\",",
          "values": {
            "strings": [
              "platforms",
              "twitter",
              "enabled",
              "account_id",
              "main_account"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 35,
          "snippet": "                }\n            },\n            \"ghost\": {\n                \"enabled\": True,\n                \"account_id\": \"blog_ai\",",
          "values": {
            "strings": [
              "ghost",
              "enabled",
              "account_id",
              "blog_ai"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "twitter",
          "line": 102,
          "snippet": "        },\n        \"platforms\": {\n            \"twitter\": {\n                \"enabled\": True,\n                \"schedule_time\": schedule_time,",
          "values": {
            "strings": [
              "platforms",
              "twitter",
              "enabled",
              "schedule_time"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "substack",
          "line": 109,
          "snippet": "                }\n            },\n            \"substack\": {\n                \"enabled\": True,\n                \"schedule_time\": schedule_time,",
          "values": {
            "strings": [
              "substack",
              "enabled",
              "schedule_time"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "twitter",
          "line": 163,
          "snippet": "        },\n        \"platforms\": {\n            \"twitter\": {\"enabled\": True}\n        }\n    }",
          "values": {
            "strings": [
              "platforms",
              "twitter",
              "enabled"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "twitter",
          "line": 184,
          "snippet": "        \"platforms\": {\n            \"facebook\": {\"enabled\": True},  # Nieobsługiwana platforma\n            \"twitter\": {\"enabled\": True}\n        }\n    }",
          "values": {
            "strings": [
              "platforms",
              "facebook",
              "enabled",
              "twitter",
              "enabled"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "twitter",
          "line": 205,
          "snippet": "        },\n        \"platforms\": {\n            \"twitter\": {\"enabled\": False},\n            \"ghost\": {\"enabled\": False}\n        }",
          "values": {
            "strings": [
              "platforms",
              "twitter",
              "enabled",
              "ghost",
              "enabled"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "twitter",
          "line": 206,
          "snippet": "        \"platforms\": {\n            \"twitter\": {\"enabled\": False},\n            \"ghost\": {\"enabled\": False}\n        }\n    }",
          "values": {
            "strings": [
              "platforms",
              "twitter",
              "enabled",
              "ghost",
              "enabled"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "twitter",
          "line": 234,
          "snippet": "        },\n        \"platforms\": {\n            \"twitter\": {\n                \"enabled\": True,\n                \"options\": {\"hashtags\": [\"#Test\"]}",
          "values": {
            "strings": [
              "platforms",
              "twitter",
              "enabled",
              "options",
              "hashtags",
              "#Test"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 238,
          "snippet": "                \"options\": {\"hashtags\": [\"#Test\"]}\n            },\n            \"linkedin\": {\n                \"enabled\": True,\n                \"options\": {\"include_pdf\": True}",
          "values": {
            "strings": [
              "options",
              "hashtags",
              "#Test",
              "linkedin",
              "enabled",
              "options",
              "include_pdf"
            ],
            "numbers": []
          }
        },
        {
          "type": "required_elements",
          "platform": "linkedin",
          "line": 240,
          "snippet": "            \"linkedin\": {\n                \"enabled\": True,\n                \"options\": {\"include_pdf\": True}\n            },\n            \"substack\": {",
          "values": {
            "strings": [
              "linkedin",
              "enabled",
              "options",
              "include_pdf",
              "substack"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "substack",
          "line": 242,
          "snippet": "                \"options\": {\"include_pdf\": True}\n            },\n            \"substack\": {\n                \"enabled\": True,\n                \"options\": {\"newsletter_subject\": \"Multi-Platform Test\"}",
          "values": {
            "strings": [
              "options",
              "include_pdf",
              "substack",
              "enabled",
              "options",
              "newsletter_subject",
              "Multi-Platform Test"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 246,
          "snippet": "                \"options\": {\"newsletter_subject\": \"Multi-Platform Test\"}\n            },\n            \"ghost\": {\n                \"enabled\": True,\n                \"options\": {\"content_format\": \"html\", \"featured\": False}",
          "values": {
            "strings": [
              "options",
              "newsletter_subject",
              "Multi-Platform Test",
              "ghost",
              "enabled",
              "options",
              "content_format",
              "html",
              "featured"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 262,
          "snippet": "            # Sprawdź czy wszystkie 4 platformy zostały uwzględnione\n            if len(data['platforms']) == 4:\n                print(\"   ✅ Wszystkie 4 platformy aktywne (twitter, linkedin, substack, ghost)\")\n                return True\n            else:",
          "values": {
            "strings": [
              "platforms",
              "   ✅ Wszystkie 4 platformy aktywne (twitter, linkedin, substack, ghost)"
            ],
            "numbers": [
              4,
              4,
              4
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "twitter",
          "line": 280,
          "snippet": "    payload = {\n        \"topic\": {\"title\": \"Structure Test\"},\n        \"platforms\": {\"twitter\": {\"enabled\": True}}\n    }\n    ",
          "values": {
            "strings": [
              "topic",
              "title",
              "Structure Test",
              "platforms",
              "twitter",
              "enabled"
            ],
            "numbers": []
          }
        },
        {
          "type": "required_elements",
          "platform": "universal",
          "line": 289,
          "snippet": "            \n            # Sprawdź wymagane pola w odpowiedzi\n            required_fields = [\n                'publication_id', 'status', 'platforms', \n                'content_generated', 'ai_writing_flow_used', 'created_at'",
          "values": {
            "strings": [
              "publication_id",
              "status",
              "platforms",
              "content_generated",
              "ai_writing_flow_used",
              "created_at"
            ],
            "numbers": []
          }
        },
        {
          "type": "required_elements",
          "platform": "universal",
          "line": 295,
          "snippet": "            \n            missing_fields = []\n            for field in required_fields:\n                if field not in data:\n                    missing_fields.append(field)",
          "values": {
            "strings": [],
            "numbers": []
          }
        },
        {
          "type": "required_elements",
          "platform": "universal",
          "line": 377,
          "snippet": "        print(\"✅ POST /publish endpoint gotowy\")\n        print()\n        print(\"📋 Task 4.2 Requirements Met:\")\n        print(\"   ✅ Przyjmuje żądania publikacji multi-platform\")\n        print(\"   ✅ Waliduje platformy i strukturę danych\")",
          "values": {
            "strings": [
              "✅ POST /publish endpoint gotowy",
              "📋 Task 4.2 Requirements Met:",
              "   ✅ Przyjmuje żądania publikacji multi-platform",
              "   ✅ Waliduje platformy i strukturę danych"
            ],
            "numbers": [
              4,
              2
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "twitter",
          "line": 403,
          "snippet": "        print(f'   curl -X POST {BASE_URL}/publish \\\\')\n        print('     -H \"Content-Type: application/json\" \\\\')\n        print('     -d \\'{\"topic\":{\"title\":\"Test\"},\"platforms\":{\"twitter\":{\"enabled\":true}}}\\'')\n    \n    return success",
          "values": {
            "strings": [
              "   curl -X POST {BASE_URL}/publish \\\\",
              "     -H ",
              " \\\\",
              "     -d \\",
              "topic",
              "title",
              "Test",
              "platforms",
              "twitter",
              "enabled"
            ],
            "numbers": []
          }
        }
      ]
    },
    {
      "file": "/Users/hretheum/dev/bezrobocie/vector-wave/publisher/src/orchestrator/models.py",
      "exists": true,
      "hits": [
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 24,
          "snippet": "    \"\"\"Configuration for specific platform content generation\"\"\"\n    enabled: bool = Field(default=True, description=\"Whether platform is enabled\")\n    direct_content: Optional[bool] = Field(default=None, description=\"Override LinkedIn prompt mode - True=direct, False=prompt, None=platform default\")\n    slides_count: Optional[int] = Field(default=5, ge=3, le=10, description=\"Number of slides for LinkedIn presentations\")\n    template: Optional[str] = Field(default=\"business\", description=\"Presentation template\")",
          "values": {
            "strings": [
              "Configuration for specific platform content generation",
              "\n    enabled: bool = Field(default=True, description=",
              ")\n    direct_content: Optional[bool] = Field(default=None, description=",
              ")\n    slides_count: Optional[int] = Field(default=5, ge=3, le=10, description=",
              ")\n    template: Optional[str] = Field(default=",
              ", description="
            ],
            "numbers": [
              5,
              3,
              10
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 25,
          "snippet": "    enabled: bool = Field(default=True, description=\"Whether platform is enabled\")\n    direct_content: Optional[bool] = Field(default=None, description=\"Override LinkedIn prompt mode - True=direct, False=prompt, None=platform default\")\n    slides_count: Optional[int] = Field(default=5, ge=3, le=10, description=\"Number of slides for LinkedIn presentations\")\n    template: Optional[str] = Field(default=\"business\", description=\"Presentation template\")\n    custom_params: Optional[Dict[str, Any]] = Field(default={}, description=\"Platform-specific parameters\")",
          "values": {
            "strings": [
              "Whether platform is enabled",
              "Override LinkedIn prompt mode - True=direct, False=prompt, None=platform default",
              "Number of slides for LinkedIn presentations",
              "business",
              "Presentation template",
              "Platform-specific parameters"
            ],
            "numbers": [
              5,
              3,
              10
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 74,
          "snippet": "    pdf_path: Optional[str] = Field(default=None, description=\"PDF file path\")\n    slides_count: Optional[int] = Field(default=None, description=\"Number of slides\")\n    ready_for_linkedin: Optional[bool] = Field(default=None, description=\"Ready for LinkedIn publication\")\n    \n    # Image processing fields",
          "values": {
            "strings": [
              "PDF file path",
              "Number of slides",
              "Ready for LinkedIn publication"
            ],
            "numbers": []
          }
        }
      ]
    },
    {
      "file": "/Users/hretheum/dev/bezrobocie/vector-wave/publisher/src/orchestrator/prometheus_metrics.py",
      "exists": true,
      "hits": []
    },
    {
      "file": "/Users/hretheum/dev/bezrobocie/vector-wave/publisher/src/orchestrator/alert_manager.py",
      "exists": true,
      "hits": [
        {
          "type": "forbidden_phrases",
          "platform": "universal",
          "line": 83,
          "snippet": "        self.webhook_secret = os.getenv(\"ALERT_WEBHOOK_SECRET\")\n        \n        # Rate limiting to avoid spam\n        self.alert_cooldown = {}\n        self.cooldown_duration = int(os.getenv(\"ALERT_COOLDOWN_MINUTES\", \"15\")) * 60  # seconds",
          "values": {
            "strings": [
              "ALERT_WEBHOOK_SECRET",
              "ALERT_COOLDOWN_MINUTES",
              "15"
            ],
            "numbers": [
              15,
              60
            ]
          }
        }
      ]
    },
    {
      "file": "/Users/hretheum/dev/bezrobocie/vector-wave/publisher/src/orchestrator/retry_manager.py",
      "exists": true,
      "hits": [
        {
          "type": "forbidden_phrases",
          "platform": "universal",
          "line": 116,
          "snippet": "        elif any(keyword in error_lower for keyword in ['temporary', 'try again', 'unavailable']):\n            return ErrorType.TEMPORARY_ERROR\n        elif any(keyword in error_lower for keyword in ['invalid', 'unauthorized', 'forbidden', 'not found']):\n            return ErrorType.CLIENT_ERROR\n        ",
          "values": {
            "strings": [
              "temporary",
              "try again",
              "unavailable",
              "invalid",
              "unauthorized",
              "forbidden",
              "not found"
            ],
            "numbers": []
          }
        }
      ]
    },
    {
      "file": "/Users/hretheum/dev/bezrobocie/vector-wave/publisher/src/orchestrator/__init__.py",
      "exists": true,
      "hits": []
    },
    {
      "file": "/Users/hretheum/dev/bezrobocie/vector-wave/publisher/src/orchestrator/automated_recovery_system.py",
      "exists": true,
      "hits": [
        {
          "type": "required_elements",
          "platform": "universal",
          "line": 89,
          "snippet": "    \n    # Conditions\n    required_conditions: Dict[str, Any] = Field(default_factory=dict, description=\"Required conditions\")\n    success_criteria: Dict[str, Any] = Field(default_factory=dict, description=\"Success criteria\")\n    ",
          "values": {
            "strings": [
              "Required conditions",
              "Success criteria"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "twitter",
          "line": 147,
          "snippet": "        # Platform URLs for health checks\n        self.platform_urls = {\n            \"twitter\": \"http://twitter-adapter:8082\" if os.getenv(\"DOCKER_ENV\") else \"http://localhost:8083\",\n            \"ghost\": \"http://ghost-adapter:8082\" if os.getenv(\"DOCKER_ENV\") else \"http://localhost:8086\", \n            \"beehiiv\": \"http://beehiiv-adapter:8084\" if os.getenv(\"DOCKER_ENV\") else \"http://localhost:8084\",",
          "values": {
            "strings": [
              "twitter",
              "http://twitter-adapter:8082",
              "DOCKER_ENV",
              "http://localhost:8083",
              "ghost",
              "http://ghost-adapter:8082",
              "DOCKER_ENV",
              "http://localhost:8086",
              "beehiiv",
              "http://beehiiv-adapter:8084"
            ],
            "numbers": [
              8082,
              8083,
              8082,
              8086,
              8084,
              8084
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 148,
          "snippet": "        self.platform_urls = {\n            \"twitter\": \"http://twitter-adapter:8082\" if os.getenv(\"DOCKER_ENV\") else \"http://localhost:8083\",\n            \"ghost\": \"http://ghost-adapter:8082\" if os.getenv(\"DOCKER_ENV\") else \"http://localhost:8086\", \n            \"beehiiv\": \"http://beehiiv-adapter:8084\" if os.getenv(\"DOCKER_ENV\") else \"http://localhost:8084\",\n            \"linkedin\": \"http://linkedin-adapter:8098\" if os.getenv(\"DOCKER_ENV\") else \"http://localhost:8088\"",
          "values": {
            "strings": [
              "twitter",
              "http://twitter-adapter:8082",
              "DOCKER_ENV",
              "http://localhost:8083",
              "ghost",
              "http://ghost-adapter:8082",
              "DOCKER_ENV",
              "http://localhost:8086",
              "beehiiv",
              "http://beehiiv-adapter:8084"
            ],
            "numbers": [
              8082,
              8083,
              8082,
              8086,
              8084,
              8084,
              8098,
              8088
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 149,
          "snippet": "            \"twitter\": \"http://twitter-adapter:8082\" if os.getenv(\"DOCKER_ENV\") else \"http://localhost:8083\",\n            \"ghost\": \"http://ghost-adapter:8082\" if os.getenv(\"DOCKER_ENV\") else \"http://localhost:8086\", \n            \"beehiiv\": \"http://beehiiv-adapter:8084\" if os.getenv(\"DOCKER_ENV\") else \"http://localhost:8084\",\n            \"linkedin\": \"http://linkedin-adapter:8098\" if os.getenv(\"DOCKER_ENV\") else \"http://localhost:8088\"\n        }",
          "values": {
            "strings": [
              "twitter",
              "http://twitter-adapter:8082",
              "DOCKER_ENV",
              "http://localhost:8083",
              "ghost",
              "http://ghost-adapter:8082",
              "DOCKER_ENV",
              "http://localhost:8086",
              "beehiiv",
              "http://beehiiv-adapter:8084"
            ],
            "numbers": [
              8082,
              8083,
              8082,
              8086,
              8084,
              8084,
              8098,
              8088
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 150,
          "snippet": "            \"ghost\": \"http://ghost-adapter:8082\" if os.getenv(\"DOCKER_ENV\") else \"http://localhost:8086\", \n            \"beehiiv\": \"http://beehiiv-adapter:8084\" if os.getenv(\"DOCKER_ENV\") else \"http://localhost:8084\",\n            \"linkedin\": \"http://linkedin-adapter:8098\" if os.getenv(\"DOCKER_ENV\") else \"http://localhost:8088\"\n        }\n        ",
          "values": {
            "strings": [
              "ghost",
              "http://ghost-adapter:8082",
              "DOCKER_ENV",
              "http://localhost:8086",
              "beehiiv",
              "http://beehiiv-adapter:8084",
              "DOCKER_ENV",
              "http://localhost:8084",
              "linkedin",
              "http://linkedin-adapter:8098"
            ],
            "numbers": [
              8082,
              8086,
              8084,
              8084,
              8098,
              8088
            ]
          }
        },
        {
          "type": "forbidden_phrases",
          "platform": "universal",
          "line": 272,
          "snippet": "            return FailureType.RATE_LIMIT_EXCEEDED\n        \n        if any(pattern in error_lower for pattern in [\"unauthorized\", \"forbidden\", \"expired\", \"invalid token\"]):\n            return FailureType.AUTHENTICATION_FAILED\n        ",
          "values": {
            "strings": [
              "unauthorized",
              "forbidden",
              "expired",
              "invalid token"
            ],
            "numbers": []
          }
        },
        {
          "type": "required_elements",
          "platform": "universal",
          "line": 429,
          "snippet": "            \n            # Check if manual intervention is needed\n            if self._requires_manual_intervention(incident):\n                await self._trigger_manual_intervention(incident)\n    ",
          "values": {
            "strings": [],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 568,
          "snippet": "        \"\"\"Default implementation of waiting for rate limit reset\"\"\"\n        # Wait based on platform-specific rate limit windows\n        if platform == \"twitter\":\n            wait_time = 900  # 15 minutes for Twitter\n        elif platform == \"linkedin\":",
          "values": {
            "strings": [
              "Default implementation of waiting for rate limit reset",
              "\n        # Wait based on platform-specific rate limit windows\n        if platform == ",
              ":\n            wait_time = 900  # 15 minutes for Twitter\n        elif platform == "
            ],
            "numbers": [
              900,
              15
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 569,
          "snippet": "        # Wait based on platform-specific rate limit windows\n        if platform == \"twitter\":\n            wait_time = 900  # 15 minutes for Twitter\n        elif platform == \"linkedin\":\n            wait_time = 3600  # 1 hour for LinkedIn",
          "values": {
            "strings": [
              "twitter",
              "linkedin"
            ],
            "numbers": [
              900,
              15,
              3600,
              1
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 570,
          "snippet": "        if platform == \"twitter\":\n            wait_time = 900  # 15 minutes for Twitter\n        elif platform == \"linkedin\":\n            wait_time = 3600  # 1 hour for LinkedIn\n        else:",
          "values": {
            "strings": [
              "twitter",
              "linkedin"
            ],
            "numbers": [
              900,
              15,
              3600,
              1
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 571,
          "snippet": "            wait_time = 900  # 15 minutes for Twitter\n        elif platform == \"linkedin\":\n            wait_time = 3600  # 1 hour for LinkedIn\n        else:\n            wait_time = 300  # 5 minutes default",
          "values": {
            "strings": [
              "linkedin"
            ],
            "numbers": [
              900,
              15,
              3600,
              1,
              300,
              5
            ]
          }
        },
        {
          "type": "required_elements",
          "platform": "universal",
          "line": 627,
          "snippet": "        return True\n    \n    def _requires_manual_intervention(self, incident: FailureIncident) -> bool:\n        \"\"\"Check if incident requires manual intervention\"\"\"\n        return (",
          "values": {
            "strings": [
              "Check if incident requires manual intervention"
            ],
            "numbers": []
          }
        },
        {
          "type": "required_elements",
          "platform": "universal",
          "line": 628,
          "snippet": "    \n    def _requires_manual_intervention(self, incident: FailureIncident) -> bool:\n        \"\"\"Check if incident requires manual intervention\"\"\"\n        return (\n            incident.recovery_attempts >= incident.max_recovery_attempts or",
          "values": {
            "strings": [
              "Check if incident requires manual intervention"
            ],
            "numbers": []
          }
        },
        {
          "type": "required_elements",
          "platform": "universal",
          "line": 636,
          "snippet": "    async def _trigger_manual_intervention(self, incident: FailureIncident) -> bool:\n        \"\"\"Trigger manual intervention alert\"\"\"\n        logger.critical(f\"Manual intervention required for incident {incident.id}\")\n        \n        # This would typically send alerts via Slack, email, etc.",
          "values": {
            "strings": [
              "Trigger manual intervention alert",
              "\n        logger.critical(f"
            ],
            "numbers": []
          }
        }
      ]
    },
    {
      "file": "/Users/hretheum/dev/bezrobocie/vector-wave/publisher/src/orchestrator/test_task_44_delegation.py",
      "exists": true,
      "hits": [
        {
          "type": "platform_specific",
          "platform": "twitter",
          "line": 16,
          "snippet": "# Konfiguracja testowa\nORCHESTRATOR_URL = \"http://localhost:8085\"  # Orchestrator\nTWITTER_ADAPTER_URL = \"http://localhost:8081\"  # Twitter adapter (mock)\nGHOST_ADAPTER_URL = \"http://localhost:8086\"    # Ghost adapter\n",
          "values": {
            "strings": [
              "http://localhost:8085",
              "http://localhost:8081",
              "http://localhost:8086"
            ],
            "numbers": [
              8085,
              8081,
              8086
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "twitter",
          "line": 17,
          "snippet": "ORCHESTRATOR_URL = \"http://localhost:8085\"  # Orchestrator\nTWITTER_ADAPTER_URL = \"http://localhost:8081\"  # Twitter adapter (mock)\nGHOST_ADAPTER_URL = \"http://localhost:8086\"    # Ghost adapter\n\ndef test_publish_and_delegate_twitter():",
          "values": {
            "strings": [
              "http://localhost:8085",
              "http://localhost:8081",
              "http://localhost:8086"
            ],
            "numbers": [
              8085,
              8081,
              8086
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "twitter",
          "line": 19,
          "snippet": "GHOST_ADAPTER_URL = \"http://localhost:8086\"    # Ghost adapter\n\ndef test_publish_and_delegate_twitter():\n    \"\"\"Test 1: Publikacja i delegowanie do Twitter adaptera\"\"\"\n    print(\"🐦 Test 1: Publikacja i delegowanie do Twitter\")",
          "values": {
            "strings": [
              "http://localhost:8086",
              "Test 1: Publikacja i delegowanie do Twitter adaptera",
              "\n    print("
            ],
            "numbers": [
              8086,
              1,
              1
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "twitter",
          "line": 20,
          "snippet": "\ndef test_publish_and_delegate_twitter():\n    \"\"\"Test 1: Publikacja i delegowanie do Twitter adaptera\"\"\"\n    print(\"🐦 Test 1: Publikacja i delegowanie do Twitter\")\n    ",
          "values": {
            "strings": [
              "Test 1: Publikacja i delegowanie do Twitter adaptera",
              "\n    print("
            ],
            "numbers": [
              1,
              1
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "twitter",
          "line": 21,
          "snippet": "def test_publish_and_delegate_twitter():\n    \"\"\"Test 1: Publikacja i delegowanie do Twitter adaptera\"\"\"\n    print(\"🐦 Test 1: Publikacja i delegowanie do Twitter\")\n    \n    # 1. Publikuj treść na Twitter",
          "values": {
            "strings": [
              "Test 1: Publikacja i delegowanie do Twitter adaptera",
              "\n    print("
            ],
            "numbers": [
              1,
              1,
              1
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "twitter",
          "line": 23,
          "snippet": "    print(\"🐦 Test 1: Publikacja i delegowanie do Twitter\")\n    \n    # 1. Publikuj treść na Twitter\n    payload = {\n        \"topic\": {",
          "values": {
            "strings": [
              "🐦 Test 1: Publikacja i delegowanie do Twitter",
              "topic"
            ],
            "numbers": [
              1,
              1
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "twitter",
          "line": 26,
          "snippet": "    payload = {\n        \"topic\": {\n            \"title\": \"Test Twitter Delegation\",\n            \"description\": \"End-to-end test for Task 4.4\"\n        },",
          "values": {
            "strings": [
              "topic",
              "title",
              "Test Twitter Delegation",
              "description",
              "End-to-end test for Task 4.4"
            ],
            "numbers": [
              4,
              4
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "twitter",
          "line": 30,
          "snippet": "        },\n        \"platforms\": {\n            \"twitter\": {\n                \"enabled\": True,\n                \"options\": {\"hashtags\": [\"#Test\", \"#Task44\"]}",
          "values": {
            "strings": [
              "platforms",
              "twitter",
              "enabled",
              "options",
              "hashtags",
              "#Test",
              "#Task44"
            ],
            "numbers": [
              44
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "twitter",
          "line": 48,
          "snippet": "            data = response.json()\n            publication_id = data[\"publication_id\"]\n            twitter_job_id = data[\"platforms\"][\"twitter\"][\"job_id\"]\n            \n            print(f\"✅ Publikacja utworzona: {publication_id}\")",
          "values": {
            "strings": [
              "publication_id",
              "platforms",
              "twitter",
              "job_id",
              "✅ Publikacja utworzona: {publication_id}"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "twitter",
          "line": 51,
          "snippet": "            \n            print(f\"✅ Publikacja utworzona: {publication_id}\")\n            print(f\"   Twitter job: {twitter_job_id}\")\n            \n            # 2. Sprawdź czy zadanie trafiło do Redis queue",
          "values": {
            "strings": [
              "✅ Publikacja utworzona: {publication_id}",
              "   Twitter job: {twitter_job_id}"
            ],
            "numbers": [
              2
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "twitter",
          "line": 120,
          "snippet": "    # Mock responses for platform adapters\n    mock_responses = {\n        \"twitter\": {\"success\": True, \"id\": \"tweet_12345\", \"url\": \"https://twitter.com/test/status/12345\"},\n        \"ghost\": {\"success\": True, \"id\": \"post_67890\", \"url\": \"https://blog.example.com/test-post\"},\n        \"substack\": {\"success\": True, \"id\": \"newsletter_abc\", \"url\": \"https://test.substack.com/p/test\"}",
          "values": {
            "strings": [
              "twitter",
              "success",
              "id",
              "tweet_12345",
              "url",
              "https://twitter.com/test/status/12345",
              "ghost",
              "success",
              "id",
              "post_67890"
            ],
            "numbers": [
              12345,
              12345,
              67890
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "twitter",
          "line": 121,
          "snippet": "    mock_responses = {\n        \"twitter\": {\"success\": True, \"id\": \"tweet_12345\", \"url\": \"https://twitter.com/test/status/12345\"},\n        \"ghost\": {\"success\": True, \"id\": \"post_67890\", \"url\": \"https://blog.example.com/test-post\"},\n        \"substack\": {\"success\": True, \"id\": \"newsletter_abc\", \"url\": \"https://test.substack.com/p/test\"}\n    }",
          "values": {
            "strings": [
              "twitter",
              "success",
              "id",
              "tweet_12345",
              "url",
              "https://twitter.com/test/status/12345",
              "ghost",
              "success",
              "id",
              "post_67890"
            ],
            "numbers": [
              12345,
              12345,
              67890
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "twitter",
          "line": 122,
          "snippet": "        \"twitter\": {\"success\": True, \"id\": \"tweet_12345\", \"url\": \"https://twitter.com/test/status/12345\"},\n        \"ghost\": {\"success\": True, \"id\": \"post_67890\", \"url\": \"https://blog.example.com/test-post\"},\n        \"substack\": {\"success\": True, \"id\": \"newsletter_abc\", \"url\": \"https://test.substack.com/p/test\"}\n    }\n    ",
          "values": {
            "strings": [
              "twitter",
              "success",
              "id",
              "tweet_12345",
              "url",
              "https://twitter.com/test/status/12345",
              "ghost",
              "success",
              "id",
              "post_67890"
            ],
            "numbers": [
              12345,
              12345,
              67890
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "twitter",
          "line": 154,
          "snippet": "        },\n        \"platforms\": {\n            \"twitter\": {\n                \"enabled\": True,\n                \"options\": {\"hashtags\": [\"#E2E\", \"#Task44\"]}",
          "values": {
            "strings": [
              "platforms",
              "twitter",
              "enabled",
              "options",
              "hashtags",
              "#E2E",
              "#Task44"
            ],
            "numbers": [
              2,
              44
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 158,
          "snippet": "                \"options\": {\"hashtags\": [\"#E2E\", \"#Task44\"]}\n            },\n            \"ghost\": {\n                \"enabled\": True,\n                \"options\": {\"content_format\": \"html\", \"featured\": False}",
          "values": {
            "strings": [
              "options",
              "hashtags",
              "#E2E",
              "#Task44",
              "ghost",
              "enabled",
              "options",
              "content_format",
              "html",
              "featured"
            ],
            "numbers": [
              2,
              44
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "substack",
          "line": 162,
          "snippet": "                \"options\": {\"content_format\": \"html\", \"featured\": False}\n            },\n            \"substack\": {\n                \"enabled\": True,\n                \"options\": {\"newsletter_subject\": \"E2E Test\"}",
          "values": {
            "strings": [
              "options",
              "content_format",
              "html",
              "featured",
              "substack",
              "enabled",
              "options",
              "newsletter_subject",
              "E2E Test"
            ],
            "numbers": [
              2
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "twitter",
          "line": 279,
          "snippet": "    \n    tests = [\n        test_publish_and_delegate_twitter,\n        test_worker_processing,\n        test_adapter_mock_endpoints,",
          "values": {
            "strings": [],
            "numbers": []
          }
        },
        {
          "type": "required_elements",
          "platform": "universal",
          "line": 316,
          "snippet": "        print(\"✅ Delegowanie do adapterów działa poprawnie\")\n        print()\n        print(\"📋 Task 4.4 Requirements Met:\")\n        print(\"   ✅ Worker process konsumuje zadania z Redis\")\n        print(\"   ✅ HTTP client komunikuje się z adapterami\")",
          "values": {
            "strings": [
              "✅ Delegowanie do adapterów działa poprawnie",
              "📋 Task 4.4 Requirements Met:",
              "   ✅ Worker process konsumuje zadania z Redis",
              "   ✅ HTTP client komunikuje się z adapterami"
            ],
            "numbers": [
              4,
              4
            ]
          }
        }
      ]
    },
    {
      "file": "/Users/hretheum/dev/bezrobocie/vector-wave/publisher/src/orchestrator/test_orchestrator.py",
      "exists": true,
      "hits": [
        {
          "type": "required_elements",
          "platform": "universal",
          "line": 225,
          "snippet": "        print(\"✅ Orchestrator szkielet usługi gotowy\")\n        print()\n        print(\"📋 Task 4.1 Requirements Met:\")\n        print(\"   ✅ Usługa uruchamia się w kontenerze\")\n        print(\"   ✅ Health endpoint odpowiada na /health\")",
          "values": {
            "strings": [
              "✅ Orchestrator szkielet usługi gotowy",
              "📋 Task 4.1 Requirements Met:",
              "   ✅ Usługa uruchamia się w kontenerze",
              "   ✅ Health endpoint odpowiada na /health"
            ],
            "numbers": [
              4,
              1
            ]
          }
        }
      ]
    },
    {
      "file": "/Users/hretheum/dev/bezrobocie/vector-wave/publisher/src/orchestrator/redis_queue.py",
      "exists": true,
      "hits": [
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 284,
          "snippet": "                \"total_jobs\": int(stats.get(\"total_jobs\", 0)),\n                \"jobs_by_platform\": {\n                    \"twitter\": int(stats.get(\"jobs_twitter\", 0)),\n                    \"linkedin\": int(stats.get(\"jobs_linkedin\", 0)),\n                    \"substack\": int(stats.get(\"jobs_substack\", 0)),",
          "values": {
            "strings": [
              "total_jobs",
              "total_jobs",
              "jobs_by_platform",
              "twitter",
              "jobs_twitter",
              "linkedin",
              "jobs_linkedin",
              "substack",
              "jobs_substack"
            ],
            "numbers": [
              0,
              0,
              0,
              0
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 285,
          "snippet": "                \"jobs_by_platform\": {\n                    \"twitter\": int(stats.get(\"jobs_twitter\", 0)),\n                    \"linkedin\": int(stats.get(\"jobs_linkedin\", 0)),\n                    \"substack\": int(stats.get(\"jobs_substack\", 0)),\n                    \"ghost\": int(stats.get(\"jobs_ghost\", 0))",
          "values": {
            "strings": [
              "jobs_by_platform",
              "twitter",
              "jobs_twitter",
              "linkedin",
              "jobs_linkedin",
              "substack",
              "jobs_substack",
              "ghost",
              "jobs_ghost"
            ],
            "numbers": [
              0,
              0,
              0,
              0
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 286,
          "snippet": "                    \"twitter\": int(stats.get(\"jobs_twitter\", 0)),\n                    \"linkedin\": int(stats.get(\"jobs_linkedin\", 0)),\n                    \"substack\": int(stats.get(\"jobs_substack\", 0)),\n                    \"ghost\": int(stats.get(\"jobs_ghost\", 0))\n                }",
          "values": {
            "strings": [
              "twitter",
              "jobs_twitter",
              "linkedin",
              "jobs_linkedin",
              "substack",
              "jobs_substack",
              "ghost",
              "jobs_ghost"
            ],
            "numbers": [
              0,
              0,
              0,
              0
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 287,
          "snippet": "                    \"linkedin\": int(stats.get(\"jobs_linkedin\", 0)),\n                    \"substack\": int(stats.get(\"jobs_substack\", 0)),\n                    \"ghost\": int(stats.get(\"jobs_ghost\", 0))\n                }\n            }",
          "values": {
            "strings": [
              "linkedin",
              "jobs_linkedin",
              "substack",
              "jobs_substack",
              "ghost",
              "jobs_ghost"
            ],
            "numbers": [
              0,
              0,
              0
            ]
          }
        }
      ]
    },
    {
      "file": "/Users/hretheum/dev/bezrobocie/vector-wave/publisher/src/orchestrator/session_health_monitor.py",
      "exists": true,
      "hits": [
        {
          "type": "required_elements",
          "platform": "universal",
          "line": 91,
          "snippet": "    \n    # Platform-specific settings\n    requires_manual_login: bool = Field(default=True, description=\"Whether platform requires manual login\")\n    session_duration_hours: Optional[int] = Field(default=None, description=\"Expected session duration\")\n    supports_headless: bool = Field(default=False, description=\"Whether platform supports headless browsing\")",
          "values": {
            "strings": [
              "Whether platform requires manual login",
              "Expected session duration",
              "Whether platform supports headless browsing"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 118,
          "snippet": "        # Platform adapters endpoints\n        self.platform_urls = {\n            \"linkedin\": \"http://localhost:8088\",\n            \"twitter\": \"http://localhost:8083\",   # API-based, no sessions\n            \"ghost\": \"http://localhost:8086\",     # API-based, no sessions  ",
          "values": {
            "strings": [
              "linkedin",
              "http://localhost:8088",
              "twitter",
              "http://localhost:8083",
              "ghost",
              "http://localhost:8086"
            ],
            "numbers": [
              8088,
              8083,
              8086
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 119,
          "snippet": "        self.platform_urls = {\n            \"linkedin\": \"http://localhost:8088\",\n            \"twitter\": \"http://localhost:8083\",   # API-based, no sessions\n            \"ghost\": \"http://localhost:8086\",     # API-based, no sessions  \n            \"beehiiv\": \"http://localhost:8084\"    # API-based, no sessions",
          "values": {
            "strings": [
              "linkedin",
              "http://localhost:8088",
              "twitter",
              "http://localhost:8083",
              "ghost",
              "http://localhost:8086",
              "beehiiv",
              "http://localhost:8084"
            ],
            "numbers": [
              8088,
              8083,
              8086,
              8084
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 120,
          "snippet": "            \"linkedin\": \"http://localhost:8088\",\n            \"twitter\": \"http://localhost:8083\",   # API-based, no sessions\n            \"ghost\": \"http://localhost:8086\",     # API-based, no sessions  \n            \"beehiiv\": \"http://localhost:8084\"    # API-based, no sessions\n        }",
          "values": {
            "strings": [
              "linkedin",
              "http://localhost:8088",
              "twitter",
              "http://localhost:8083",
              "ghost",
              "http://localhost:8086",
              "beehiiv",
              "http://localhost:8084"
            ],
            "numbers": [
              8088,
              8083,
              8086,
              8084
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "twitter",
          "line": 121,
          "snippet": "            \"twitter\": \"http://localhost:8083\",   # API-based, no sessions\n            \"ghost\": \"http://localhost:8086\",     # API-based, no sessions  \n            \"beehiiv\": \"http://localhost:8084\"    # API-based, no sessions\n        }\n        ",
          "values": {
            "strings": [
              "twitter",
              "http://localhost:8083",
              "ghost",
              "http://localhost:8086",
              "beehiiv",
              "http://localhost:8084"
            ],
            "numbers": [
              8083,
              8086,
              8084
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 132,
          "snippet": "        \"\"\"Setup default session configurations for known platforms\"\"\"\n        \n        # LinkedIn - primary browser-based platform\n        self.platform_configs[\"linkedin\"] = PlatformSessionConfig(\n            platform=\"linkedin\",",
          "values": {
            "strings": [
              "Setup default session configurations for known platforms",
              "\n        \n        # LinkedIn - primary browser-based platform\n        self.platform_configs[",
              "] = PlatformSessionConfig(\n            platform="
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 133,
          "snippet": "        \n        # LinkedIn - primary browser-based platform\n        self.platform_configs[\"linkedin\"] = PlatformSessionConfig(\n            platform=\"linkedin\",\n            check_interval_minutes=5,",
          "values": {
            "strings": [
              "linkedin",
              "linkedin"
            ],
            "numbers": [
              5
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 134,
          "snippet": "        # LinkedIn - primary browser-based platform\n        self.platform_configs[\"linkedin\"] = PlatformSessionConfig(\n            platform=\"linkedin\",\n            check_interval_minutes=5,\n            health_threshold=0.7,",
          "values": {
            "strings": [
              "linkedin",
              "linkedin"
            ],
            "numbers": [
              5,
              0,
              7
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 139,
          "snippet": "            expiration_warning_hours=24,\n            expiration_critical_hours=2,\n            auto_refresh=False,  # LinkedIn requires manual login\n            refresh_threshold=0.3,\n            requires_manual_login=True,",
          "values": {
            "strings": [],
            "numbers": [
              24,
              2,
              0,
              3
            ]
          }
        },
        {
          "type": "required_elements",
          "platform": "linkedin",
          "line": 141,
          "snippet": "            auto_refresh=False,  # LinkedIn requires manual login\n            refresh_threshold=0.3,\n            requires_manual_login=True,\n            session_duration_hours=168,  # ~7 days typical\n            supports_headless=True",
          "values": {
            "strings": [],
            "numbers": [
              0,
              3,
              168,
              7
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "twitter",
          "line": 146,
          "snippet": "        )\n        \n        # Twitter - API-based but may have session components\n        self.platform_configs[\"twitter\"] = PlatformSessionConfig(\n            platform=\"twitter\",",
          "values": {
            "strings": [
              "twitter",
              "twitter"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "twitter",
          "line": 147,
          "snippet": "        \n        # Twitter - API-based but may have session components\n        self.platform_configs[\"twitter\"] = PlatformSessionConfig(\n            platform=\"twitter\",\n            check_interval_minutes=15,  # Less frequent for API",
          "values": {
            "strings": [
              "twitter",
              "twitter"
            ],
            "numbers": [
              15
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "twitter",
          "line": 148,
          "snippet": "        # Twitter - API-based but may have session components\n        self.platform_configs[\"twitter\"] = PlatformSessionConfig(\n            platform=\"twitter\",\n            check_interval_minutes=15,  # Less frequent for API\n            health_threshold=0.8,",
          "values": {
            "strings": [
              "twitter",
              "twitter"
            ],
            "numbers": [
              15,
              0,
              8
            ]
          }
        },
        {
          "type": "required_elements",
          "platform": "universal",
          "line": 154,
          "snippet": "            expiration_critical_hours=24,\n            auto_refresh=False,\n            requires_manual_login=False,  # Uses API keys\n            supports_headless=True\n        )",
          "values": {
            "strings": [],
            "numbers": [
              24
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 158,
          "snippet": "        )\n        \n        # Ghost - API-based\n        self.platform_configs[\"ghost\"] = PlatformSessionConfig(\n            platform=\"ghost\", ",
          "values": {
            "strings": [
              "ghost",
              "ghost"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 159,
          "snippet": "        \n        # Ghost - API-based\n        self.platform_configs[\"ghost\"] = PlatformSessionConfig(\n            platform=\"ghost\", \n            check_interval_minutes=30,  # Even less frequent",
          "values": {
            "strings": [
              "ghost",
              "ghost"
            ],
            "numbers": [
              30
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 160,
          "snippet": "        # Ghost - API-based\n        self.platform_configs[\"ghost\"] = PlatformSessionConfig(\n            platform=\"ghost\", \n            check_interval_minutes=30,  # Even less frequent\n            health_threshold=0.9,",
          "values": {
            "strings": [
              "ghost",
              "ghost"
            ],
            "numbers": [
              30,
              0,
              9
            ]
          }
        },
        {
          "type": "required_elements",
          "platform": "universal",
          "line": 166,
          "snippet": "            expiration_critical_hours=24,\n            auto_refresh=False,\n            requires_manual_login=False,\n            supports_headless=True\n        )",
          "values": {
            "strings": [],
            "numbers": [
              24
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "beehiiv",
          "line": 170,
          "snippet": "        )\n        \n        # Beehiiv - API-based\n        self.platform_configs[\"beehiiv\"] = PlatformSessionConfig(\n            platform=\"beehiiv\",",
          "values": {
            "strings": [
              "beehiiv",
              "beehiiv"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "beehiiv",
          "line": 171,
          "snippet": "        \n        # Beehiiv - API-based\n        self.platform_configs[\"beehiiv\"] = PlatformSessionConfig(\n            platform=\"beehiiv\",\n            check_interval_minutes=60,  # Least frequent",
          "values": {
            "strings": [
              "beehiiv",
              "beehiiv"
            ],
            "numbers": [
              60
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "beehiiv",
          "line": 172,
          "snippet": "        # Beehiiv - API-based\n        self.platform_configs[\"beehiiv\"] = PlatformSessionConfig(\n            platform=\"beehiiv\",\n            check_interval_minutes=60,  # Least frequent\n            health_threshold=0.9, ",
          "values": {
            "strings": [
              "beehiiv",
              "beehiiv"
            ],
            "numbers": [
              60,
              0,
              9
            ]
          }
        },
        {
          "type": "required_elements",
          "platform": "universal",
          "line": 178,
          "snippet": "            expiration_critical_hours=168,  # 7 days\n            auto_refresh=False,\n            requires_manual_login=False,\n            supports_headless=True\n        )",
          "values": {
            "strings": [],
            "numbers": [
              168,
              7
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 205,
          "snippet": "            # Call platform-specific session validation\n            async with httpx.AsyncClient(timeout=10.0) as client:\n                if platform == \"linkedin\":\n                    # LinkedIn has comprehensive session validation\n                    url = f\"{self.platform_urls[platform]}/session/validate\"",
          "values": {
            "strings": [
              "linkedin",
              "{self.platform_urls[platform]}/session/validate"
            ],
            "numbers": [
              10,
              0
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 206,
          "snippet": "            async with httpx.AsyncClient(timeout=10.0) as client:\n                if platform == \"linkedin\":\n                    # LinkedIn has comprehensive session validation\n                    url = f\"{self.platform_urls[platform]}/session/validate\"\n                    response = await client.post(url, json={",
          "values": {
            "strings": [
              "linkedin",
              "{self.platform_urls[platform]}/session/validate"
            ],
            "numbers": [
              10,
              0
            ]
          }
        },
        {
          "type": "required_elements",
          "platform": "universal",
          "line": 210,
          "snippet": "                    response = await client.post(url, json={\n                        \"account\": account,\n                        \"include_diagnostics\": True\n                    })\n                    ",
          "values": {
            "strings": [
              "account",
              "include_diagnostics"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 215,
          "snippet": "                    if response.status_code == 200:\n                        data = response.json()\n                        result = self._parse_linkedin_session_response(data, account)\n                    else:\n                        result = SessionValidationResult(",
          "values": {
            "strings": [],
            "numbers": [
              200
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 279,
          "snippet": "            return result\n    \n    def _parse_linkedin_session_response(self, data: Dict[str, Any], account: str) -> SessionValidationResult:\n        \"\"\"Parse LinkedIn session validation response\"\"\"\n        # LinkedIn returns structured session data",
          "values": {
            "strings": [
              "Parse LinkedIn session validation response"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 280,
          "snippet": "    \n    def _parse_linkedin_session_response(self, data: Dict[str, Any], account: str) -> SessionValidationResult:\n        \"\"\"Parse LinkedIn session validation response\"\"\"\n        # LinkedIn returns structured session data\n        is_valid = data.get(\"session_valid\", False)",
          "values": {
            "strings": [
              "Parse LinkedIn session validation response",
              "\n        # LinkedIn returns structured session data\n        is_valid = data.get("
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 281,
          "snippet": "    def _parse_linkedin_session_response(self, data: Dict[str, Any], account: str) -> SessionValidationResult:\n        \"\"\"Parse LinkedIn session validation response\"\"\"\n        # LinkedIn returns structured session data\n        is_valid = data.get(\"session_valid\", False)\n        health_score = data.get(\"health_score\", 0.0)",
          "values": {
            "strings": [
              "Parse LinkedIn session validation response",
              "\n        # LinkedIn returns structured session data\n        is_valid = data.get(",
              ", False)\n        health_score = data.get("
            ],
            "numbers": [
              0,
              0
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 295,
          "snippet": "        \n        return SessionValidationResult(\n            platform=\"linkedin\",\n            account=account,\n            is_valid=is_valid,",
          "values": {
            "strings": [
              "linkedin"
            ],
            "numbers": []
          }
        },
        {
          "type": "required_elements",
          "platform": "universal",
          "line": 437,
          "snippet": "        \n        if result.health_score < config.refresh_threshold:\n            if config.requires_manual_login:\n                recommendations.extend([\n                    \"URGENT: Manual session recreation required\",",
          "values": {
            "strings": [
              "URGENT: Manual session recreation required"
            ],
            "numbers": []
          }
        },
        {
          "type": "required_elements",
          "platform": "universal",
          "line": 439,
          "snippet": "            if config.requires_manual_login:\n                recommendations.extend([\n                    \"URGENT: Manual session recreation required\",\n                    f\"Login to {result.platform} manually\",\n                    \"Verify credentials and account status\",",
          "values": {
            "strings": [
              "URGENT: Manual session recreation required",
              "Login to {result.platform} manually",
              "Verify credentials and account status"
            ],
            "numbers": []
          }
        },
        {
          "type": "required_elements",
          "platform": "universal",
          "line": 466,
          "snippet": "        recommendations = []\n        \n        if config.requires_manual_login:\n            recommendations.extend([\n                f\"Schedule manual login to {result.platform}\",",
          "values": {
            "strings": [
              "Schedule manual login to {result.platform}"
            ],
            "numbers": []
          }
        }
      ]
    },
    {
      "file": "/Users/hretheum/dev/bezrobocie/vector-wave/publisher/src/orchestrator/rate_limit_monitor.py",
      "exists": true,
      "hits": [
        {
          "type": "platform_specific",
          "platform": "twitter",
          "line": 35,
          "snippet": "class PlatformLimits(BaseModel):\n    \"\"\"Platform-specific rate limits configuration\"\"\"\n    platform: str = Field(..., description=\"Platform name (twitter, ghost, beehiiv)\")\n    \n    # Request limits",
          "values": {
            "strings": [
              "Platform-specific rate limits configuration",
              "\n    platform: str = Field(..., description="
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "twitter",
          "line": 134,
          "snippet": "        \"\"\"Setup default rate limits for known platforms\"\"\"\n        \n        # Twitter (via Typefully)\n        self.platform_limits[\"twitter\"] = PlatformLimits(\n            platform=\"twitter\",",
          "values": {
            "strings": [
              "Setup default rate limits for known platforms",
              "\n        \n        # Twitter (via Typefully)\n        self.platform_limits[",
              "] = PlatformLimits(\n            platform="
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "twitter",
          "line": 135,
          "snippet": "        \n        # Twitter (via Typefully)\n        self.platform_limits[\"twitter\"] = PlatformLimits(\n            platform=\"twitter\",\n            requests_per_hour=300,     # Typefully API limit",
          "values": {
            "strings": [
              "twitter",
              "twitter"
            ],
            "numbers": [
              300
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "twitter",
          "line": 136,
          "snippet": "        # Twitter (via Typefully)\n        self.platform_limits[\"twitter\"] = PlatformLimits(\n            platform=\"twitter\",\n            requests_per_hour=300,     # Typefully API limit\n            posts_per_day=50,          # Reasonable daily limit",
          "values": {
            "strings": [
              "twitter",
              "twitter"
            ],
            "numbers": [
              300,
              50
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 144,
          "snippet": "        )\n        \n        # Ghost\n        self.platform_limits[\"ghost\"] = PlatformLimits(\n            platform=\"ghost\", ",
          "values": {
            "strings": [
              "ghost",
              "ghost"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 145,
          "snippet": "        \n        # Ghost\n        self.platform_limits[\"ghost\"] = PlatformLimits(\n            platform=\"ghost\", \n            requests_per_hour=200,     # Ghost recommended limit",
          "values": {
            "strings": [
              "ghost",
              "ghost"
            ],
            "numbers": [
              200
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 146,
          "snippet": "        # Ghost\n        self.platform_limits[\"ghost\"] = PlatformLimits(\n            platform=\"ghost\", \n            requests_per_hour=200,     # Ghost recommended limit\n            posts_per_day=20,          # Reasonable content creation limit",
          "values": {
            "strings": [
              "ghost",
              "ghost"
            ],
            "numbers": [
              200,
              20
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 147,
          "snippet": "        self.platform_limits[\"ghost\"] = PlatformLimits(\n            platform=\"ghost\", \n            requests_per_hour=200,     # Ghost recommended limit\n            posts_per_day=20,          # Reasonable content creation limit\n            posts_per_month=500,       # Monthly limit",
          "values": {
            "strings": [
              "ghost",
              "ghost"
            ],
            "numbers": [
              200,
              20,
              500
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "beehiiv",
          "line": 154,
          "snippet": "        )\n        \n        # Beehiiv\n        self.platform_limits[\"beehiiv\"] = PlatformLimits(\n            platform=\"beehiiv\",",
          "values": {
            "strings": [
              "beehiiv",
              "beehiiv"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "beehiiv",
          "line": 155,
          "snippet": "        \n        # Beehiiv\n        self.platform_limits[\"beehiiv\"] = PlatformLimits(\n            platform=\"beehiiv\",\n            requests_per_hour=1000,    # API requests",
          "values": {
            "strings": [
              "beehiiv",
              "beehiiv"
            ],
            "numbers": [
              1000
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "beehiiv",
          "line": 156,
          "snippet": "        # Beehiiv\n        self.platform_limits[\"beehiiv\"] = PlatformLimits(\n            platform=\"beehiiv\",\n            requests_per_hour=1000,    # API requests\n            posts_per_day=5,           # Newsletter frequency",
          "values": {
            "strings": [
              "beehiiv",
              "beehiiv"
            ],
            "numbers": [
              1000,
              5
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 164,
          "snippet": "        )\n        \n        # LinkedIn\n        self.platform_limits[\"linkedin\"] = PlatformLimits(\n            platform=\"linkedin\",",
          "values": {
            "strings": [
              "linkedin",
              "linkedin"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 165,
          "snippet": "        \n        # LinkedIn\n        self.platform_limits[\"linkedin\"] = PlatformLimits(\n            platform=\"linkedin\",\n            requests_per_hour=100,     # Conservative estimate",
          "values": {
            "strings": [
              "linkedin",
              "linkedin"
            ],
            "numbers": [
              100
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 166,
          "snippet": "        # LinkedIn\n        self.platform_limits[\"linkedin\"] = PlatformLimits(\n            platform=\"linkedin\",\n            requests_per_hour=100,     # Conservative estimate\n            posts_per_day=10,          # LinkedIn posting frequency",
          "values": {
            "strings": [
              "linkedin",
              "linkedin"
            ],
            "numbers": [
              100,
              10
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 168,
          "snippet": "            platform=\"linkedin\",\n            requests_per_hour=100,     # Conservative estimate\n            posts_per_day=10,          # LinkedIn posting frequency\n            posts_per_month=300,       # Monthly limit\n            warning_threshold=75.0,",
          "values": {
            "strings": [
              "linkedin"
            ],
            "numbers": [
              100,
              10,
              300,
              75,
              0
            ]
          }
        },
        {
          "type": "forbidden_phrases",
          "platform": "universal",
          "line": 340,
          "snippet": "            \n            if should_alert:\n                # Check if we already sent this alert recently (avoid spam)\n                recent_alerts = [a for a in self.alerts_sent[platform] \n                               if a.limit_type == limit_type and a.severity == severity",
          "values": {
            "strings": [],
            "numbers": []
          }
        },
        {
          "type": "required_elements",
          "platform": "universal",
          "line": 373,
          "snippet": "        if current_usage >= 90:\n            recommendations.extend([\n                \"IMMEDIATE ACTION REQUIRED - Stop all non-critical operations\",\n                \"Implement aggressive throttling (5x normal delays)\",\n                \"Consider postponing scheduled publications\",",
          "values": {
            "strings": [
              "IMMEDIATE ACTION REQUIRED - Stop all non-critical operations",
              "Implement aggressive throttling (5x normal delays)",
              "Consider postponing scheduled publications"
            ],
            "numbers": [
              90,
              5
            ]
          }
        }
      ]
    },
    {
      "file": "/Users/hretheum/dev/bezrobocie/vector-wave/publisher/src/orchestrator/versioning.py",
      "exists": true,
      "hits": []
    },
    {
      "file": "/Users/hretheum/dev/bezrobocie/vector-wave/publisher/src/orchestrator/test_image_processor.py",
      "exists": true,
      "hits": [
        {
          "type": "platform_specific",
          "platform": "twitter",
          "line": 298,
          "snippet": "    \n    @pytest.mark.asyncio\n    async def test_finalize_for_twitter(self, image_processor):\n        \"\"\"Test Twitter-specific finalization\"\"\"\n        ",
          "values": {
            "strings": [
              "Test Twitter-specific finalization"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "twitter",
          "line": 299,
          "snippet": "    @pytest.mark.asyncio\n    async def test_finalize_for_twitter(self, image_processor):\n        \"\"\"Test Twitter-specific finalization\"\"\"\n        \n        content = \"Text with LOCAL_IMAGE:/path/to/image.jpg content\"",
          "values": {
            "strings": [
              "Test Twitter-specific finalization",
              "\n        \n        content = "
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "twitter",
          "line": 304,
          "snippet": "        mapping = {\"keyword\": \"/path/to/image.jpg\"}\n        \n        result = await image_processor.finalize_for_platform(content, \"twitter\", mapping)\n        \n        assert \"LOCAL_IMAGE:\" not in result",
          "values": {
            "strings": [
              "keyword",
              "/path/to/image.jpg",
              "twitter",
              "LOCAL_IMAGE:"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 310,
          "snippet": "    \n    @pytest.mark.asyncio\n    async def test_finalize_for_linkedin(self, image_processor):\n        \"\"\"Test LinkedIn-specific finalization\"\"\"\n        ",
          "values": {
            "strings": [
              "Test LinkedIn-specific finalization"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 311,
          "snippet": "    @pytest.mark.asyncio\n    async def test_finalize_for_linkedin(self, image_processor):\n        \"\"\"Test LinkedIn-specific finalization\"\"\"\n        \n        content = \"Text with LOCAL_IMAGE:/path/to/image.jpg content\"",
          "values": {
            "strings": [
              "Test LinkedIn-specific finalization",
              "\n        \n        content = "
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 316,
          "snippet": "        mapping = {\"keyword\": \"/path/to/image.jpg\"}\n        \n        result = await image_processor.finalize_for_platform(content, \"linkedin\", mapping)\n        \n        assert \"LOCAL_IMAGE:\" not in result",
          "values": {
            "strings": [
              "keyword",
              "/path/to/image.jpg",
              "linkedin",
              "LOCAL_IMAGE:"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 322,
          "snippet": "    \n    @pytest.mark.asyncio\n    async def test_finalize_for_ghost_no_client(self, image_processor):\n        \"\"\"Test Ghost finalization when client unavailable\"\"\"\n        ",
          "values": {
            "strings": [
              "Test Ghost finalization when client unavailable"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 323,
          "snippet": "    @pytest.mark.asyncio\n    async def test_finalize_for_ghost_no_client(self, image_processor):\n        \"\"\"Test Ghost finalization when client unavailable\"\"\"\n        \n        content = \"Text with LOCAL_IMAGE:/path/to/image.jpg content\"",
          "values": {
            "strings": [
              "Test Ghost finalization when client unavailable",
              "\n        \n        content = "
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 329,
          "snippet": "        \n        with patch('sys.path.append'), \\\n             patch('builtins.__import__', side_effect=ImportError(\"Ghost client not found\")):\n            \n            result = await image_processor.finalize_for_platform(content, \"ghost\", mapping)",
          "values": {
            "strings": [
              "sys.path.append",
              "builtins.__import__",
              "Ghost client not found",
              "ghost"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 331,
          "snippet": "             patch('builtins.__import__', side_effect=ImportError(\"Ghost client not found\")):\n            \n            result = await image_processor.finalize_for_platform(content, \"ghost\", mapping)\n            \n            assert \"LOCAL_IMAGE:\" not in result",
          "values": {
            "strings": [
              "builtins.__import__",
              "Ghost client not found",
              "ghost",
              "LOCAL_IMAGE:"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 409,
          "snippet": "            \n            # Test platform finalization\n            for platform in [\"twitter\", \"linkedin\", \"ghost\"]:\n                final_content = await processor.finalize_for_platform(\n                    updated_content, platform, mapping",
          "values": {
            "strings": [
              "twitter",
              "linkedin",
              "ghost"
            ],
            "numbers": []
          }
        }
      ]
    },
    {
      "file": "/Users/hretheum/dev/bezrobocie/vector-wave/publisher/src/orchestrator/rate_limit_service.py",
      "exists": true,
      "hits": [
        {
          "type": "platform_specific",
          "platform": "twitter",
          "line": 47,
          "snippet": "    def __init__(self):\n        self.platform_urls = {\n            \"twitter\": \"http://localhost:8083\",\n            \"ghost\": \"http://localhost:8086\", \n            \"beehiiv\": \"http://localhost:8084\",",
          "values": {
            "strings": [
              "twitter",
              "http://localhost:8083",
              "ghost",
              "http://localhost:8086",
              "beehiiv",
              "http://localhost:8084"
            ],
            "numbers": [
              8083,
              8086,
              8084
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 48,
          "snippet": "        self.platform_urls = {\n            \"twitter\": \"http://localhost:8083\",\n            \"ghost\": \"http://localhost:8086\", \n            \"beehiiv\": \"http://localhost:8084\",\n            \"linkedin\": \"http://localhost:8088\"",
          "values": {
            "strings": [
              "twitter",
              "http://localhost:8083",
              "ghost",
              "http://localhost:8086",
              "beehiiv",
              "http://localhost:8084",
              "linkedin",
              "http://localhost:8088"
            ],
            "numbers": [
              8083,
              8086,
              8084,
              8088
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 49,
          "snippet": "            \"twitter\": \"http://localhost:8083\",\n            \"ghost\": \"http://localhost:8086\", \n            \"beehiiv\": \"http://localhost:8084\",\n            \"linkedin\": \"http://localhost:8088\"\n        }",
          "values": {
            "strings": [
              "twitter",
              "http://localhost:8083",
              "ghost",
              "http://localhost:8086",
              "beehiiv",
              "http://localhost:8084",
              "linkedin",
              "http://localhost:8088"
            ],
            "numbers": [
              8083,
              8086,
              8084,
              8088
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 50,
          "snippet": "            \"ghost\": \"http://localhost:8086\", \n            \"beehiiv\": \"http://localhost:8084\",\n            \"linkedin\": \"http://localhost:8088\"\n        }\n        self.recent_alerts: List[RateLimitAlert] = []",
          "values": {
            "strings": [
              "ghost",
              "http://localhost:8086",
              "beehiiv",
              "http://localhost:8084",
              "linkedin",
              "http://localhost:8088"
            ],
            "numbers": [
              8086,
              8084,
              8088
            ]
          }
        }
      ]
    },
    {
      "file": "/Users/hretheum/dev/bezrobocie/vector-wave/publisher/src/orchestrator/test_task_45_publication_status.py",
      "exists": true,
      "hits": [
        {
          "type": "platform_specific",
          "platform": "twitter",
          "line": 24,
          "snippet": "        },\n        \"platforms\": {\n            \"twitter\": {\"enabled\": True},\n            \"ghost\": {\"enabled\": True}\n        }",
          "values": {
            "strings": [
              "platforms",
              "twitter",
              "enabled",
              "ghost",
              "enabled"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "twitter",
          "line": 25,
          "snippet": "        \"platforms\": {\n            \"twitter\": {\"enabled\": True},\n            \"ghost\": {\"enabled\": True}\n        }\n    }",
          "values": {
            "strings": [
              "platforms",
              "twitter",
              "enabled",
              "ghost",
              "enabled"
            ],
            "numbers": []
          }
        },
        {
          "type": "required_elements",
          "platform": "universal",
          "line": 59,
          "snippet": "            \n            # Sprawdź strukturę odpowiedzi\n            required_fields = [\n                'publication_id', 'status', 'created_at', 'updated_at',\n                'platforms', 'total_jobs', 'overall_progress'",
          "values": {
            "strings": [
              "publication_id",
              "status",
              "created_at",
              "updated_at",
              "platforms",
              "total_jobs",
              "overall_progress"
            ],
            "numbers": []
          }
        },
        {
          "type": "required_elements",
          "platform": "universal",
          "line": 64,
          "snippet": "            ]\n            \n            missing_fields = [field for field in required_fields if field not in publication]\n            if not missing_fields:\n                print(\"   ✅ Wszystkie wymagane pola obecne\")",
          "values": {
            "strings": [
              "   ✅ Wszystkie wymagane pola obecne"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "twitter",
          "line": 120,
          "snippet": "            },\n            \"platforms\": {\n                \"twitter\": {\"enabled\": True},\n                \"ghost\": {\"enabled\": True},\n                \"substack\": {\"enabled\": True},",
          "values": {
            "strings": [
              "platforms",
              "twitter",
              "enabled",
              "ghost",
              "enabled",
              "substack",
              "enabled"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 121,
          "snippet": "            \"platforms\": {\n                \"twitter\": {\"enabled\": True},\n                \"ghost\": {\"enabled\": True},\n                \"substack\": {\"enabled\": True},\n                \"linkedin\": {\"enabled\": True}",
          "values": {
            "strings": [
              "platforms",
              "twitter",
              "enabled",
              "ghost",
              "enabled",
              "substack",
              "enabled",
              "linkedin",
              "enabled"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 122,
          "snippet": "                \"twitter\": {\"enabled\": True},\n                \"ghost\": {\"enabled\": True},\n                \"substack\": {\"enabled\": True},\n                \"linkedin\": {\"enabled\": True}\n            }",
          "values": {
            "strings": [
              "twitter",
              "enabled",
              "ghost",
              "enabled",
              "substack",
              "enabled",
              "linkedin",
              "enabled"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 123,
          "snippet": "                \"ghost\": {\"enabled\": True},\n                \"substack\": {\"enabled\": True},\n                \"linkedin\": {\"enabled\": True}\n            }\n        }",
          "values": {
            "strings": [
              "ghost",
              "enabled",
              "substack",
              "enabled",
              "linkedin",
              "enabled"
            ],
            "numbers": []
          }
        },
        {
          "type": "required_elements",
          "platform": "universal",
          "line": 202,
          "snippet": "                \n                # Sprawdź wymagane pola job\n                required_job_fields = ['job_id', 'platform', 'status', 'created_at']\n                missing_job_fields = [field for field in required_job_fields if field not in job]\n                ",
          "values": {
            "strings": [
              "job_id",
              "platform",
              "status",
              "created_at"
            ],
            "numbers": []
          }
        },
        {
          "type": "required_elements",
          "platform": "universal",
          "line": 203,
          "snippet": "                # Sprawdź wymagane pola job\n                required_job_fields = ['job_id', 'platform', 'status', 'created_at']\n                missing_job_fields = [field for field in required_job_fields if field not in job]\n                \n                if not missing_job_fields:",
          "values": {
            "strings": [
              "job_id",
              "platform",
              "status",
              "created_at"
            ],
            "numbers": []
          }
        },
        {
          "type": "required_elements",
          "platform": "universal",
          "line": 355,
          "snippet": "        print(\"✅ GET /publication/{id} endpoint działa poprawnie\")\n        print()\n        print(\"📋 Task 4.5 Requirements Met:\")\n        print(\"   ✅ Endpoint zwraca szczegółowy status publikacji\")\n        print(\"   ✅ Prawidłowa struktura odpowiedzi (Pydantic models)\")",
          "values": {
            "strings": [
              "✅ GET /publication/{id} endpoint działa poprawnie",
              "📋 Task 4.5 Requirements Met:",
              "   ✅ Endpoint zwraca szczegółowy status publikacji",
              "   ✅ Prawidłowa struktura odpowiedzi (Pydantic models)"
            ],
            "numbers": [
              4,
              5
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "twitter",
          "line": 381,
          "snippet": "        print(f\"   # Stwórz publikację\")\n        print(f\"   pub_id=$(curl -X POST {BASE_URL}/publish -H 'Content-Type: application/json' \\\\\")\n        print(f\"            -d '{{\\\"topic\\\":{{\\\"title\\\":\\\"Manual Test\\\"}},\\\"platforms\\\":{{\\\"twitter\\\":{{\\\"enabled\\\":true}}}}}}' \\\\\")\n        print(f\"            | jq -r '.publication_id')\")\n        print()",
          "values": {
            "strings": [
              "   # Stwórz publikację",
              "   pub_id=$(curl -X POST {BASE_URL}/publish -H ",
              " \\\\",
              "            -d ",
              "topic\\",
              "title\\",
              "Manual Test\\",
              "platforms\\",
              "twitter\\",
              "enabled\\"
            ],
            "numbers": []
          }
        }
      ]
    },
    {
      "file": "/Users/hretheum/dev/bezrobocie/vector-wave/publisher/src/orchestrator/error_handler.py",
      "exists": true,
      "hits": [
        {
          "type": "required_elements",
          "platform": "universal",
          "line": 22,
          "snippet": "    INTERNAL_SERVER_ERROR = \"API_1000\"\n    INVALID_REQUEST_FORMAT = \"API_1001\"\n    MISSING_REQUIRED_FIELD = \"API_1002\"\n    INVALID_FIELD_VALUE = \"API_1003\"\n    REQUEST_TOO_LARGE = \"API_1004\"",
          "values": {
            "strings": [
              "API_1000",
              "API_1001",
              "API_1002",
              "API_1003",
              "API_1004"
            ],
            "numbers": [
              1000,
              1001,
              1002,
              1003,
              1004
            ]
          }
        },
        {
          "type": "required_elements",
          "platform": "universal",
          "line": 28,
          "snippet": "    \n    # Authentication & Authorization (1100-1199)  \n    AUTHENTICATION_REQUIRED = \"AUTH_1100\"\n    INVALID_API_KEY = \"AUTH_1101\"\n    PERMISSION_DENIED = \"AUTH_1102\"",
          "values": {
            "strings": [
              "AUTH_1100",
              "AUTH_1101",
              "AUTH_1102"
            ],
            "numbers": [
              1100,
              1199,
              1100,
              1101,
              1102
            ]
          }
        },
        {
          "type": "required_elements",
          "platform": "universal",
          "line": 252,
          "snippet": "        exc: Exception,\n        request_id: Optional[str] = None,\n        include_traceback: bool = False\n    ) -> APIError:\n        \"\"\"Handle unexpected exceptions\"\"\"",
          "values": {
            "strings": [
              "Handle unexpected exceptions"
            ],
            "numbers": []
          }
        },
        {
          "type": "required_elements",
          "platform": "universal",
          "line": 260,
          "snippet": "            extra={\n                \"request_id\": request_id,\n                \"traceback\": traceback.format_exc() if include_traceback else None\n            }\n        )",
          "values": {
            "strings": [
              "request_id",
              "traceback"
            ],
            "numbers": []
          }
        },
        {
          "type": "required_elements",
          "platform": "universal",
          "line": 266,
          "snippet": "        # Don't expose internal details in production\n        safe_message = \"An unexpected error occurred\"\n        if include_traceback:  # Development mode\n            safe_message += f\": {str(exc)}\"\n        ",
          "values": {
            "strings": [
              "t expose internal details in production\n        safe_message = ",
              "\n        if include_traceback:  # Development mode\n            safe_message += f"
            ],
            "numbers": []
          }
        }
      ]
    },
    {
      "file": "/Users/hretheum/dev/bezrobocie/vector-wave/publisher/src/orchestrator/test_redis_queue.py",
      "exists": true,
      "hits": [
        {
          "type": "platform_specific",
          "platform": "twitter",
          "line": 51,
          "snippet": "    payload = {\n        \"topic\": {\"title\": \"Redis Test - Immediate\"},\n        \"platforms\": {\"twitter\": {\"enabled\": True}}\n    }\n    ",
          "values": {
            "strings": [
              "topic",
              "title",
              "Redis Test - Immediate",
              "platforms",
              "twitter",
              "enabled"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "twitter",
          "line": 96,
          "snippet": "        \"topic\": {\"title\": \"Redis Test - Scheduled\"},\n        \"platforms\": {\n            \"twitter\": {\n                \"enabled\": True,\n                \"schedule_time\": schedule_time",
          "values": {
            "strings": [
              "topic",
              "title",
              "Redis Test - Scheduled",
              "platforms",
              "twitter",
              "enabled",
              "schedule_time"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "twitter",
          "line": 137,
          "snippet": "        \"topic\": {\"title\": \"Redis Test - Multi-Platform\"},\n        \"platforms\": {\n            \"twitter\": {\"enabled\": True},\n            \"ghost\": {\"enabled\": True},\n            \"substack\": {\"enabled\": True}",
          "values": {
            "strings": [
              "topic",
              "title",
              "Redis Test - Multi-Platform",
              "platforms",
              "twitter",
              "enabled",
              "ghost",
              "enabled",
              "substack",
              "enabled"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "twitter",
          "line": 138,
          "snippet": "        \"platforms\": {\n            \"twitter\": {\"enabled\": True},\n            \"ghost\": {\"enabled\": True},\n            \"substack\": {\"enabled\": True}\n        }",
          "values": {
            "strings": [
              "platforms",
              "twitter",
              "enabled",
              "ghost",
              "enabled",
              "substack",
              "enabled"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "twitter",
          "line": 139,
          "snippet": "            \"twitter\": {\"enabled\": True},\n            \"ghost\": {\"enabled\": True},\n            \"substack\": {\"enabled\": True}\n        }\n    }",
          "values": {
            "strings": [
              "twitter",
              "enabled",
              "ghost",
              "enabled",
              "substack",
              "enabled"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "twitter",
          "line": 156,
          "snippet": "        \n        increases = []\n        for platform in ['twitter', 'ghost', 'substack']:\n            initial = initial_stats.get(platform, 0)\n            after = after_stats.get(platform, 0)",
          "values": {
            "strings": [
              "twitter",
              "ghost",
              "substack"
            ],
            "numbers": [
              0,
              0
            ]
          }
        },
        {
          "type": "required_elements",
          "platform": "universal",
          "line": 231,
          "snippet": "            data = response.json()\n            \n            # Check required fields\n            required_fields = ['queue_manager', 'connected', 'queues', 'statistics']\n            missing_fields = [f for f in required_fields if f not in data]",
          "values": {
            "strings": [
              "queue_manager",
              "connected",
              "queues",
              "statistics"
            ],
            "numbers": []
          }
        },
        {
          "type": "required_elements",
          "platform": "universal",
          "line": 232,
          "snippet": "            \n            # Check required fields\n            required_fields = ['queue_manager', 'connected', 'queues', 'statistics']\n            missing_fields = [f for f in required_fields if f not in data]\n            ",
          "values": {
            "strings": [
              "queue_manager",
              "connected",
              "queues",
              "statistics"
            ],
            "numbers": []
          }
        },
        {
          "type": "required_elements",
          "platform": "universal",
          "line": 233,
          "snippet": "            # Check required fields\n            required_fields = ['queue_manager', 'connected', 'queues', 'statistics']\n            missing_fields = [f for f in required_fields if f not in data]\n            \n            if not missing_fields:",
          "values": {
            "strings": [
              "queue_manager",
              "connected",
              "queues",
              "statistics"
            ],
            "numbers": []
          }
        },
        {
          "type": "required_elements",
          "platform": "universal",
          "line": 236,
          "snippet": "            \n            if not missing_fields:\n                print(\"✅ All required fields present\")\n                \n                # Check queue details",
          "values": {
            "strings": [
              "✅ All required fields present"
            ],
            "numbers": []
          }
        },
        {
          "type": "required_elements",
          "platform": "universal",
          "line": 262,
          "snippet": "                    return False\n            else:\n                print(f\"❌ Missing required fields: {missing_fields}\")\n                return False\n        else:",
          "values": {
            "strings": [
              "❌ Missing required fields: {missing_fields}"
            ],
            "numbers": []
          }
        },
        {
          "type": "required_elements",
          "platform": "universal",
          "line": 346,
          "snippet": "        print(\"✅ Redis queue management gotowy\")\n        print()\n        print(\"📋 Task 4.3 Requirements Met:\")\n        print(\"   ✅ Żądania są kolejkowane w Redis\")\n        print(\"   ✅ Zadania trafiają do odpowiednich kolejek\")",
          "values": {
            "strings": [
              "✅ Redis queue management gotowy",
              "📋 Task 4.3 Requirements Met:",
              "   ✅ Żądania są kolejkowane w Redis",
              "   ✅ Zadania trafiają do odpowiednich kolejek"
            ],
            "numbers": [
              4,
              3
            ]
          }
        }
      ]
    },
    {
      "file": "/Users/hretheum/dev/bezrobocie/vector-wave/publisher/src/orchestrator/demo_orchestrator.py",
      "exists": true,
      "hits": []
    },
    {
      "file": "/Users/hretheum/dev/bezrobocie/vector-wave/publisher/src/orchestrator/redis_worker.py",
      "exists": true,
      "hits": [
        {
          "type": "platform_specific",
          "platform": "twitter",
          "line": 31,
          "snippet": "        # Systemowe: używaj nazw usług w sieci Docker zamiast localhost\n        self.ADAPTER_URLS = {\n            \"twitter\": os.getenv(\"TWITTER_ADAPTER_URL\", \"http://twitter-adapter:8082\"),\n            \"ghost\": os.getenv(\"GHOST_ADAPTER_URL\", \"http://ghost-adapter:8082\"),\n            # Substack zwykle wewnętrzny; zostaw zmienną z sensownym fallbackiem",
          "values": {
            "strings": [
              "twitter",
              "TWITTER_ADAPTER_URL",
              "http://twitter-adapter:8082",
              "ghost",
              "GHOST_ADAPTER_URL",
              "http://ghost-adapter:8082"
            ],
            "numbers": [
              8082,
              8082
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "twitter",
          "line": 32,
          "snippet": "        self.ADAPTER_URLS = {\n            \"twitter\": os.getenv(\"TWITTER_ADAPTER_URL\", \"http://twitter-adapter:8082\"),\n            \"ghost\": os.getenv(\"GHOST_ADAPTER_URL\", \"http://ghost-adapter:8082\"),\n            # Substack zwykle wewnętrzny; zostaw zmienną z sensownym fallbackiem\n            \"substack\": os.getenv(\"SUBSTACK_ADAPTER_URL\", \"http://substack-adapter:8087\"),",
          "values": {
            "strings": [
              "twitter",
              "TWITTER_ADAPTER_URL",
              "http://twitter-adapter:8082",
              "ghost",
              "GHOST_ADAPTER_URL",
              "http://ghost-adapter:8082",
              "substack",
              "SUBSTACK_ADAPTER_URL",
              "http://substack-adapter:8087"
            ],
            "numbers": [
              8082,
              8082,
              8087
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 33,
          "snippet": "            \"twitter\": os.getenv(\"TWITTER_ADAPTER_URL\", \"http://twitter-adapter:8082\"),\n            \"ghost\": os.getenv(\"GHOST_ADAPTER_URL\", \"http://ghost-adapter:8082\"),\n            # Substack zwykle wewnętrzny; zostaw zmienną z sensownym fallbackiem\n            \"substack\": os.getenv(\"SUBSTACK_ADAPTER_URL\", \"http://substack-adapter:8087\"),\n            # LinkedIn przez stały runner na hoście",
          "values": {
            "strings": [
              "twitter",
              "TWITTER_ADAPTER_URL",
              "http://twitter-adapter:8082",
              "ghost",
              "GHOST_ADAPTER_URL",
              "http://ghost-adapter:8082",
              "substack",
              "SUBSTACK_ADAPTER_URL",
              "http://substack-adapter:8087"
            ],
            "numbers": [
              8082,
              8082,
              8087
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 34,
          "snippet": "            \"ghost\": os.getenv(\"GHOST_ADAPTER_URL\", \"http://ghost-adapter:8082\"),\n            # Substack zwykle wewnętrzny; zostaw zmienną z sensownym fallbackiem\n            \"substack\": os.getenv(\"SUBSTACK_ADAPTER_URL\", \"http://substack-adapter:8087\"),\n            # LinkedIn przez stały runner na hoście\n            \"linkedin\": os.getenv(\"LINKEDIN_ADAPTER_URL\", \"http://host.docker.internal:8098\")",
          "values": {
            "strings": [
              "ghost",
              "GHOST_ADAPTER_URL",
              "http://ghost-adapter:8082",
              "substack",
              "SUBSTACK_ADAPTER_URL",
              "http://substack-adapter:8087",
              "linkedin",
              "LINKEDIN_ADAPTER_URL",
              "http://host.docker.internal:8098"
            ],
            "numbers": [
              8082,
              8087,
              8098
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 35,
          "snippet": "            # Substack zwykle wewnętrzny; zostaw zmienną z sensownym fallbackiem\n            \"substack\": os.getenv(\"SUBSTACK_ADAPTER_URL\", \"http://substack-adapter:8087\"),\n            # LinkedIn przez stały runner na hoście\n            \"linkedin\": os.getenv(\"LINKEDIN_ADAPTER_URL\", \"http://host.docker.internal:8098\")\n        }",
          "values": {
            "strings": [
              "substack",
              "SUBSTACK_ADAPTER_URL",
              "http://substack-adapter:8087",
              "linkedin",
              "LINKEDIN_ADAPTER_URL",
              "http://host.docker.internal:8098"
            ],
            "numbers": [
              8087,
              8098
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 36,
          "snippet": "            \"substack\": os.getenv(\"SUBSTACK_ADAPTER_URL\", \"http://substack-adapter:8087\"),\n            # LinkedIn przez stały runner na hoście\n            \"linkedin\": os.getenv(\"LINKEDIN_ADAPTER_URL\", \"http://host.docker.internal:8098\")\n        }\n    ",
          "values": {
            "strings": [
              "substack",
              "SUBSTACK_ADAPTER_URL",
              "http://substack-adapter:8087",
              "linkedin",
              "LINKEDIN_ADAPTER_URL",
              "http://host.docker.internal:8098"
            ],
            "numbers": [
              8087,
              8098
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 277,
          "snippet": "                return\n            \n            # Sprawdź czy adapter jest dostępny (dla LinkedIn pomiń gate i spróbuj publikacji bez healthchecku)\n            adapter_healthy, health_error = (True, None)\n            if platform != \"linkedin\":",
          "values": {
            "strings": [
              "linkedin"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 279,
          "snippet": "            # Sprawdź czy adapter jest dostępny (dla LinkedIn pomiń gate i spróbuj publikacji bez healthchecku)\n            adapter_healthy, health_error = (True, None)\n            if platform != \"linkedin\":\n                adapter_healthy, health_error = await self.platform_client.check_adapter_health(platform)\n            if not adapter_healthy:",
          "values": {
            "strings": [
              "linkedin"
            ],
            "numbers": []
          }
        }
      ]
    },
    {
      "file": "/Users/hretheum/dev/bezrobocie/vector-wave/publisher/src/orchestrator/main.py",
      "exists": true,
      "hits": [
        {
          "type": "required_elements",
          "platform": "universal",
          "line": 82,
          "snippet": ")\n\n# Include rate limit router for Task 8.3\napp.include_router(rate_limit_router)\n",
          "values": {
            "strings": [],
            "numbers": [
              8,
              3
            ]
          }
        },
        {
          "type": "required_elements",
          "platform": "universal",
          "line": 83,
          "snippet": "\n# Include rate limit router for Task 8.3\napp.include_router(rate_limit_router)\n\n# Task 8.4: Session Health Monitoring Routes",
          "values": {
            "strings": [],
            "numbers": [
              8,
              3,
              8,
              4
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 144,
          "snippet": "        raise HTTPException(status_code=503, detail=\"Session health monitor not available\")\n    \n    platforms = [\"linkedin\"]  # Only LinkedIn has browser-based sessions\n    results = {}\n    ",
          "values": {
            "strings": [
              "Session health monitor not available",
              "linkedin"
            ],
            "numbers": [
              503
            ]
          }
        },
        {
          "type": "required_elements",
          "platform": "universal",
          "line": 183,
          "snippet": "    }\n\n# Include session health router\napp.include_router(session_router)\n",
          "values": {
            "strings": [],
            "numbers": []
          }
        },
        {
          "type": "required_elements",
          "platform": "universal",
          "line": 184,
          "snippet": "\n# Include session health router\napp.include_router(session_router)\n\n# Task 8.5: Performance Metrics Routes",
          "values": {
            "strings": [],
            "numbers": [
              8,
              5
            ]
          }
        },
        {
          "type": "required_elements",
          "platform": "universal",
          "line": 301,
          "snippet": "        )\n\n# Include performance metrics router\napp.include_router(performance_router)\n",
          "values": {
            "strings": [],
            "numbers": []
          }
        },
        {
          "type": "required_elements",
          "platform": "universal",
          "line": 302,
          "snippet": "\n# Include performance metrics router\napp.include_router(performance_router)\n\n# Task 8.6: Automated Recovery Routes",
          "values": {
            "strings": [],
            "numbers": [
              8,
              6
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "twitter",
          "line": 407,
          "snippet": "@recovery_router.post(\"/test-failure\")\nasync def simulate_failure(\n    platform: str = \"twitter\",\n    failure_type: str = \"connection_timeout\",\n    error_message: str = \"Connection timed out after 30 seconds\"",
          "values": {
            "strings": [
              "/test-failure",
              "twitter",
              "connection_timeout",
              "Connection timed out after 30 seconds"
            ],
            "numbers": [
              30
            ]
          }
        },
        {
          "type": "required_elements",
          "platform": "universal",
          "line": 470,
          "snippet": "        raise HTTPException(status_code=500, detail=str(e))\n\n# Include recovery router\napp.include_router(recovery_router)\n",
          "values": {
            "strings": [],
            "numbers": [
              500
            ]
          }
        },
        {
          "type": "required_elements",
          "platform": "universal",
          "line": 471,
          "snippet": "\n# Include recovery router\napp.include_router(recovery_router)\n\n# CORS middleware",
          "values": {
            "strings": [],
            "numbers": []
          }
        },
        {
          "type": "required_elements",
          "platform": "universal",
          "line": 551,
          "snippet": "    \"\"\"Handle all other exceptions\"\"\"\n    request_id = getattr(request.state, 'request_id', None)\n    include_traceback = os.getenv(\"DEBUG\", \"false\").lower() == \"true\"\n    \n    api_error = error_handler.handle_generic_exception(",
          "values": {
            "strings": [
              "Handle all other exceptions",
              "\n    request_id = getattr(request.state, ",
              ", None)\n    include_traceback = os.getenv(",
              ", ",
              ").lower() == "
            ],
            "numbers": []
          }
        },
        {
          "type": "required_elements",
          "platform": "universal",
          "line": 554,
          "snippet": "    \n    api_error = error_handler.handle_generic_exception(\n        exc, request_id, include_traceback\n    )\n    ",
          "values": {
            "strings": [],
            "numbers": []
          }
        },
        {
          "type": "max_length",
          "platform": "universal",
          "line": 614,
          "snippet": "# Modele dla POST /publish endpoint\nclass TopicModel(BaseModel):\n    title: str = Field(..., min_length=1, max_length=200)\n    description: Optional[str] = Field(None, max_length=1000)\n    keywords: Optional[List[str]] = []",
          "values": {
            "strings": [],
            "numbers": [
              1,
              200,
              1000
            ]
          }
        },
        {
          "type": "max_length",
          "platform": "universal",
          "line": 615,
          "snippet": "class TopicModel(BaseModel):\n    title: str = Field(..., min_length=1, max_length=200)\n    description: Optional[str] = Field(None, max_length=1000)\n    keywords: Optional[List[str]] = []\n    content_type: Optional[str] = Field(\"THOUGHT_LEADERSHIP\", pattern=\"^(THOUGHT_LEADERSHIP|INDUSTRY_UPDATE|TUTORIAL|ANNOUNCEMENT)$\")",
          "values": {
            "strings": [
              "THOUGHT_LEADERSHIP",
              "^(THOUGHT_LEADERSHIP|INDUSTRY_UPDATE|TUTORIAL|ANNOUNCEMENT)$"
            ],
            "numbers": [
              1,
              200,
              1000
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "twitter",
          "line": 623,
          "snippet": "    schedule_time: Optional[str] = None  # ISO 8601 format\n\nclass TwitterOptions(PlatformOptions):\n    thread_mode: Optional[str] = \"auto\"\n    auto_retweet: Optional[bool] = False",
          "values": {
            "strings": [
              "auto"
            ],
            "numbers": [
              8601
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 627,
          "snippet": "    auto_retweet: Optional[bool] = False\n\nclass LinkedInOptions(PlatformOptions):\n    include_pdf: Optional[bool] = False\n",
          "values": {
            "strings": [],
            "numbers": []
          }
        },
        {
          "type": "required_elements",
          "platform": "linkedin",
          "line": 628,
          "snippet": "\nclass LinkedInOptions(PlatformOptions):\n    include_pdf: Optional[bool] = False\n\nclass SubstackOptions(PlatformOptions):",
          "values": {
            "strings": [],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "substack",
          "line": 630,
          "snippet": "    include_pdf: Optional[bool] = False\n\nclass SubstackOptions(PlatformOptions):\n    newsletter_subject: Optional[str] = None\n    send_to_subscribers: Optional[bool] = True",
          "values": {
            "strings": [],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "beehiiv",
          "line": 634,
          "snippet": "    send_to_subscribers: Optional[bool] = True\n\nclass BeehiivOptions(PlatformOptions):\n    newsletter_subject: Optional[str] = None\n",
          "values": {
            "strings": [],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "twitter",
          "line": 714,
          "snippet": "    adapters_status[\"redis\"] = \"healthy\" if redis_queue.is_connected() else \"unhealthy\"\n    \n    # Twitter Adapter (port 8083)\n    try:\n        # W przyszłości będzie prawdziwe sprawdzanie HTTP",
          "values": {
            "strings": [
              "redis",
              "healthy",
              "unhealthy"
            ],
            "numbers": [
              8083
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "twitter",
          "line": 717,
          "snippet": "    try:\n        # W przyszłości będzie prawdziwe sprawdzanie HTTP\n        adapters_status[\"twitter\"] = \"healthy\"  # Mock na razie\n    except Exception:\n        adapters_status[\"twitter\"] = \"unhealthy\"",
          "values": {
            "strings": [
              "twitter",
              "healthy",
              "twitter",
              "unhealthy"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "twitter",
          "line": 719,
          "snippet": "        adapters_status[\"twitter\"] = \"healthy\"  # Mock na razie\n    except Exception:\n        adapters_status[\"twitter\"] = \"unhealthy\"\n    \n    # Ghost Adapter (port 8086) ",
          "values": {
            "strings": [
              "twitter",
              "healthy",
              "twitter",
              "unhealthy"
            ],
            "numbers": [
              8086
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "twitter",
          "line": 721,
          "snippet": "        adapters_status[\"twitter\"] = \"unhealthy\"\n    \n    # Ghost Adapter (port 8086) \n    try:\n        # W przyszłości będzie prawdziwe sprawdzanie HTTP",
          "values": {
            "strings": [
              "twitter",
              "unhealthy"
            ],
            "numbers": [
              8086
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 724,
          "snippet": "    try:\n        # W przyszłości będzie prawdziwe sprawdzanie HTTP\n        adapters_status[\"ghost\"] = \"healthy\"  # Mock na razie\n    except Exception:\n        adapters_status[\"ghost\"] = \"unhealthy\"",
          "values": {
            "strings": [
              "ghost",
              "healthy",
              "ghost",
              "unhealthy"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "substack",
          "line": 726,
          "snippet": "        adapters_status[\"ghost\"] = \"healthy\"  # Mock na razie\n    except Exception:\n        adapters_status[\"ghost\"] = \"unhealthy\"\n    \n    # Substack Adapter (przez główny system)",
          "values": {
            "strings": [
              "ghost",
              "healthy",
              "ghost",
              "unhealthy"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "substack",
          "line": 728,
          "snippet": "        adapters_status[\"ghost\"] = \"unhealthy\"\n    \n    # Substack Adapter (przez główny system)\n    try:\n        adapters_status[\"substack\"] = \"healthy\"  # Mock na razie",
          "values": {
            "strings": [
              "ghost",
              "unhealthy",
              "substack",
              "healthy"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "substack",
          "line": 730,
          "snippet": "    # Substack Adapter (przez główny system)\n    try:\n        adapters_status[\"substack\"] = \"healthy\"  # Mock na razie\n    except Exception:\n        adapters_status[\"substack\"] = \"unhealthy\"",
          "values": {
            "strings": [
              "substack",
              "healthy",
              "substack",
              "unhealthy"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "substack",
          "line": 732,
          "snippet": "        adapters_status[\"substack\"] = \"healthy\"  # Mock na razie\n    except Exception:\n        adapters_status[\"substack\"] = \"unhealthy\"\n    \n    return HealthResponse(",
          "values": {
            "strings": [
              "substack",
              "healthy",
              "substack",
              "unhealthy"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "twitter",
          "line": 762,
          "snippet": "        },\n        \"supported_platforms\": [\n            \"twitter\",\n            \"substack\", \n            \"ghost\",",
          "values": {
            "strings": [
              "supported_platforms",
              "twitter",
              "substack",
              "ghost"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 763,
          "snippet": "        \"supported_platforms\": [\n            \"twitter\",\n            \"substack\", \n            \"ghost\",\n            \"linkedin\"  # W przyszłości",
          "values": {
            "strings": [
              "supported_platforms",
              "twitter",
              "substack",
              "ghost",
              "linkedin"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 764,
          "snippet": "            \"twitter\",\n            \"substack\", \n            \"ghost\",\n            \"linkedin\"  # W przyszłości\n        ]",
          "values": {
            "strings": [
              "twitter",
              "substack",
              "ghost",
              "linkedin"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 765,
          "snippet": "            \"substack\", \n            \"ghost\",\n            \"linkedin\"  # W przyszłości\n        ]\n    }",
          "values": {
            "strings": [
              "substack",
              "ghost",
              "linkedin"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "twitter",
          "line": 789,
          "snippet": "    # Mock status adapterów - w przyszłości prawdziwe HTTP calls\n    adapters_info = {\n        \"twitter\": {\n            \"status\": \"healthy\",\n            \"endpoint\": \"http://twitter-adapter:8082\",",
          "values": {
            "strings": [
              "twitter",
              "status",
              "healthy",
              "endpoint",
              "http://twitter-adapter:8082"
            ],
            "numbers": [
              8082
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "twitter",
          "line": 791,
          "snippet": "        \"twitter\": {\n            \"status\": \"healthy\",\n            \"endpoint\": \"http://twitter-adapter:8082\",\n            \"last_check\": datetime.now(timezone.utc).isoformat(),\n            \"response_time\": \"50ms\",  # Mock",
          "values": {
            "strings": [
              "twitter",
              "status",
              "healthy",
              "endpoint",
              "http://twitter-adapter:8082",
              "last_check",
              "response_time",
              "50ms"
            ],
            "numbers": [
              8082,
              50
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 796,
          "snippet": "            \"version\": \"1.0.0\"\n        },\n        \"ghost\": {\n            \"status\": \"healthy\", \n            \"endpoint\": \"http://ghost-adapter:8082\",",
          "values": {
            "strings": [
              "version",
              "1.0.0",
              "ghost",
              "status",
              "healthy",
              "endpoint",
              "http://ghost-adapter:8082"
            ],
            "numbers": [
              1,
              0,
              0,
              8082
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 798,
          "snippet": "        \"ghost\": {\n            \"status\": \"healthy\", \n            \"endpoint\": \"http://ghost-adapter:8082\",\n            \"last_check\": datetime.now(timezone.utc).isoformat(),\n            \"response_time\": \"75ms\",  # Mock",
          "values": {
            "strings": [
              "ghost",
              "status",
              "healthy",
              "endpoint",
              "http://ghost-adapter:8082",
              "last_check",
              "response_time",
              "75ms"
            ],
            "numbers": [
              8082,
              75
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "substack",
          "line": 803,
          "snippet": "            \"version\": \"1.0.0\"\n        },\n        \"substack\": {\n            \"status\": \"healthy\",\n            \"endpoint\": \"internal\",  # Substack używa JS adapter",
          "values": {
            "strings": [
              "version",
              "1.0.0",
              "substack",
              "status",
              "healthy",
              "endpoint",
              "internal"
            ],
            "numbers": [
              1,
              0,
              0
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "substack",
          "line": 805,
          "snippet": "        \"substack\": {\n            \"status\": \"healthy\",\n            \"endpoint\": \"internal\",  # Substack używa JS adapter\n            \"last_check\": datetime.now(timezone.utc).isoformat(),\n            \"response_time\": \"120ms\",  # Mock",
          "values": {
            "strings": [
              "substack",
              "status",
              "healthy",
              "endpoint",
              "internal",
              "last_check",
              "response_time",
              "120ms"
            ],
            "numbers": [
              120
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "twitter",
          "line": 829,
          "snippet": "        },\n        \"adapters\": {\n            \"twitter\": {\n                \"endpoint\": os.getenv(\"TWITTER_ADAPTER_URL\", \"http://twitter-adapter:8082\"),\n                \"enabled\": True,",
          "values": {
            "strings": [
              "adapters",
              "twitter",
              "endpoint",
              "TWITTER_ADAPTER_URL",
              "http://twitter-adapter:8082",
              "enabled"
            ],
            "numbers": [
              8082
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "twitter",
          "line": 830,
          "snippet": "        \"adapters\": {\n            \"twitter\": {\n                \"endpoint\": os.getenv(\"TWITTER_ADAPTER_URL\", \"http://twitter-adapter:8082\"),\n                \"enabled\": True,\n                \"timeout\": 30",
          "values": {
            "strings": [
              "adapters",
              "twitter",
              "endpoint",
              "TWITTER_ADAPTER_URL",
              "http://twitter-adapter:8082",
              "enabled",
              "timeout"
            ],
            "numbers": [
              8082,
              30
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 834,
          "snippet": "                \"timeout\": 30\n            },\n            \"ghost\": {\n                \"endpoint\": os.getenv(\"GHOST_ADAPTER_URL\", \"http://ghost-adapter:8082\"),  \n                \"enabled\": True,",
          "values": {
            "strings": [
              "timeout",
              "ghost",
              "endpoint",
              "GHOST_ADAPTER_URL",
              "http://ghost-adapter:8082",
              "enabled"
            ],
            "numbers": [
              30,
              8082
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "ghost",
          "line": 835,
          "snippet": "            },\n            \"ghost\": {\n                \"endpoint\": os.getenv(\"GHOST_ADAPTER_URL\", \"http://ghost-adapter:8082\"),  \n                \"enabled\": True,\n                \"timeout\": 30",
          "values": {
            "strings": [
              "ghost",
              "endpoint",
              "GHOST_ADAPTER_URL",
              "http://ghost-adapter:8082",
              "enabled",
              "timeout"
            ],
            "numbers": [
              8082,
              30
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "substack",
          "line": 839,
          "snippet": "                \"timeout\": 30\n            },\n            \"substack\": {\n                \"endpoint\": \"internal\",  # JS adapter\n                \"enabled\": True,",
          "values": {
            "strings": [
              "timeout",
              "substack",
              "endpoint",
              "internal",
              "enabled"
            ],
            "numbers": [
              30
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 864,
          "snippet": "    \n    # Validate supported platforms\n    supported_platforms = {\"twitter\", \"ghost\", \"substack\", \"linkedin\"}\n    platform_jobs = {}\n    ",
          "values": {
            "strings": [
              "twitter",
              "ghost",
              "substack",
              "linkedin"
            ],
            "numbers": []
          }
        },
        {
          "type": "required_elements",
          "platform": "universal",
          "line": 928,
          "snippet": "        raise OrchestratorException(\n            error_code=ErrorCode.INVALID_REQUEST_FORMAT,\n            message=\"No enabled platforms found in request. At least one platform must be enabled.\",\n            severity=ErrorSeverity.LOW\n        )",
          "values": {
            "strings": [
              "No enabled platforms found in request. At least one platform must be enabled."
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "twitter",
          "line": 982,
          "snippet": "        # Update adapter health metrics\n        adapters = {\n            \"twitter\": (\"http://localhost:8083\", True),\n            \"ghost\": (\"http://localhost:8086\", True), \n            \"substack\": (\"http://localhost:8087\", False),  # Not implemented yet",
          "values": {
            "strings": [
              "twitter",
              "http://localhost:8083",
              "ghost",
              "http://localhost:8086",
              "substack",
              "http://localhost:8087"
            ],
            "numbers": [
              8083,
              8086,
              8087
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 983,
          "snippet": "        adapters = {\n            \"twitter\": (\"http://localhost:8083\", True),\n            \"ghost\": (\"http://localhost:8086\", True), \n            \"substack\": (\"http://localhost:8087\", False),  # Not implemented yet\n            # Prefer local runner for LinkedIn permanent bypass of CAPTCHA",
          "values": {
            "strings": [
              "twitter",
              "http://localhost:8083",
              "ghost",
              "http://localhost:8086",
              "substack",
              "http://localhost:8087"
            ],
            "numbers": [
              8083,
              8086,
              8087
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 984,
          "snippet": "            \"twitter\": (\"http://localhost:8083\", True),\n            \"ghost\": (\"http://localhost:8086\", True), \n            \"substack\": (\"http://localhost:8087\", False),  # Not implemented yet\n            # Prefer local runner for LinkedIn permanent bypass of CAPTCHA\n            \"linkedin\": (os.getenv(\"LINKEDIN_ADAPTER_URL\", \"http://localhost:8098\"), True)",
          "values": {
            "strings": [
              "twitter",
              "http://localhost:8083",
              "ghost",
              "http://localhost:8086",
              "substack",
              "http://localhost:8087",
              "linkedin",
              "LINKEDIN_ADAPTER_URL",
              "http://localhost:8098"
            ],
            "numbers": [
              8083,
              8086,
              8087,
              8098
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 985,
          "snippet": "            \"ghost\": (\"http://localhost:8086\", True), \n            \"substack\": (\"http://localhost:8087\", False),  # Not implemented yet\n            # Prefer local runner for LinkedIn permanent bypass of CAPTCHA\n            \"linkedin\": (os.getenv(\"LINKEDIN_ADAPTER_URL\", \"http://localhost:8098\"), True)\n        }",
          "values": {
            "strings": [
              "ghost",
              "http://localhost:8086",
              "substack",
              "http://localhost:8087",
              "linkedin",
              "LINKEDIN_ADAPTER_URL",
              "http://localhost:8098"
            ],
            "numbers": [
              8086,
              8087,
              8098
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 986,
          "snippet": "            \"substack\": (\"http://localhost:8087\", False),  # Not implemented yet\n            # Prefer local runner for LinkedIn permanent bypass of CAPTCHA\n            \"linkedin\": (os.getenv(\"LINKEDIN_ADAPTER_URL\", \"http://localhost:8098\"), True)\n        }\n        ",
          "values": {
            "strings": [
              "substack",
              "http://localhost:8087",
              "linkedin",
              "LINKEDIN_ADAPTER_URL",
              "http://localhost:8098"
            ],
            "numbers": [
              8087,
              8098
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "twitter",
          "line": 1283,
          "snippet": "    try:\n        alert_type = request_data.get(\"type\", \"platform_down\")\n        platform = request_data.get(\"platform\", \"twitter\")\n        severity = request_data.get(\"severity\", \"high\")\n        ",
          "values": {
            "strings": [
              "type",
              "platform_down",
              "platform",
              "twitter",
              "severity",
              "high"
            ],
            "numbers": []
          }
        },
        {
          "type": "required_elements",
          "platform": "universal",
          "line": 1397,
          "snippet": "                    },\n                    \"platform_config\": request.platforms[platform].dict(),\n                    \"processed_content\": content_data,  # Enhanced: processed content included\n                    \"enhanced_mode\": True,\n                    \"schedule_time\": request.scheduled_time,",
          "values": {
            "strings": [
              "platform_config",
              "processed_content",
              "enhanced_mode",
              "schedule_time"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 1454,
          "snippet": "                    summary[\"presentation_id\"] = content_data.get(\"presentation_id\")\n                    summary[\"slides_count\"] = content_data.get(\"slides_count\")\n                    summary[\"ready_for_linkedin\"] = content_data.get(\"ready_for_linkedin\")\n                \n                if content_data.get(\"images\"):",
          "values": {
            "strings": [
              "presentation_id",
              "presentation_id",
              "slides_count",
              "slides_count",
              "ready_for_linkedin",
              "ready_for_linkedin",
              "images"
            ],
            "numbers": []
          }
        }
      ]
    },
    {
      "file": "/Users/hretheum/dev/bezrobocie/vector-wave/publisher/src/orchestrator/enhanced_main.py",
      "exists": true,
      "hits": [
        {
          "type": "max_length",
          "platform": "universal",
          "line": 23,
          "snippet": "# Enhanced models for image processing\nclass EnhancedTopic(BaseModel):\n    title: str = Field(..., min_length=1, max_length=200)\n    description: str = Field(..., min_length=1, max_length=1000)\n    keywords: Optional[List[str]] = []",
          "values": {
            "strings": [],
            "numbers": [
              1,
              200,
              1,
              1000
            ]
          }
        },
        {
          "type": "max_length",
          "platform": "universal",
          "line": 24,
          "snippet": "class EnhancedTopic(BaseModel):\n    title: str = Field(..., min_length=1, max_length=200)\n    description: str = Field(..., min_length=1, max_length=1000)\n    keywords: Optional[List[str]] = []\n    content_type: Optional[str] = Field(\"THOUGHT_LEADERSHIP\", pattern=\"^(THOUGHT_LEADERSHIP|INDUSTRY_UPDATE|TUTORIAL|ANNOUNCEMENT)$\")",
          "values": {
            "strings": [
              "THOUGHT_LEADERSHIP",
              "^(THOUGHT_LEADERSHIP|INDUSTRY_UPDATE|TUTORIAL|ANNOUNCEMENT)$"
            ],
            "numbers": [
              1,
              200,
              1,
              1000
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 128,
          "snippet": "        \n        # Step 2: Process each platform with finalized images\n        supported_platforms = {\"twitter\", \"ghost\", \"substack\", \"linkedin\"}\n        \n        for platform_name, platform_config in request.platforms.items():",
          "values": {
            "strings": [
              "twitter",
              "ghost",
              "substack",
              "linkedin"
            ],
            "numbers": [
              2
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "twitter",
          "line": 265,
          "snippet": "    \n    content = test_content.get(\"content\", \"\")\n    platform = test_content.get(\"platform\", \"twitter\")\n    \n    if not content:",
          "values": {
            "strings": [
              "content",
              ")\n    platform = test_content.get(",
              ", "
            ],
            "numbers": []
          }
        },
        {
          "type": "required_elements",
          "platform": "universal",
          "line": 268,
          "snippet": "    \n    if not content:\n        raise HTTPException(status_code=400, detail=\"Content is required\")\n    \n    try:",
          "values": {
            "strings": [
              "Content is required"
            ],
            "numbers": [
              400
            ]
          }
        },
        {
          "type": "required_elements",
          "platform": "universal",
          "line": 316,
          "snippet": "        raise HTTPException(status_code=500, detail=str(e))\n\n# Update root endpoint to include enhanced features\n@base_app.get(\"/enhanced\")\nasync def enhanced_root():",
          "values": {
            "strings": [
              "/enhanced"
            ],
            "numbers": [
              500
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "twitter",
          "line": 351,
          "snippet": "        },\n        \"supported_platforms\": [\n            \"twitter\",\n            \"ghost\", \n            \"substack\",",
          "values": {
            "strings": [
              "supported_platforms",
              "twitter",
              "ghost",
              "substack"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 352,
          "snippet": "        \"supported_platforms\": [\n            \"twitter\",\n            \"ghost\", \n            \"substack\",\n            \"linkedin\"  # Future",
          "values": {
            "strings": [
              "supported_platforms",
              "twitter",
              "ghost",
              "substack",
              "linkedin"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 353,
          "snippet": "            \"twitter\",\n            \"ghost\", \n            \"substack\",\n            \"linkedin\"  # Future\n        ],",
          "values": {
            "strings": [
              "twitter",
              "ghost",
              "substack",
              "linkedin"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 354,
          "snippet": "            \"ghost\", \n            \"substack\",\n            \"linkedin\"  # Future\n        ],\n        \"current_stats\": processor_stats,",
          "values": {
            "strings": [
              "ghost",
              "substack",
              "linkedin",
              "current_stats"
            ],
            "numbers": []
          }
        }
      ]
    },
    {
      "file": "/Users/hretheum/dev/bezrobocie/vector-wave/publisher/src/orchestrator/demo_publish_endpoint.py",
      "exists": true,
      "hits": [
        {
          "type": "platform_specific",
          "platform": "twitter",
          "line": 27,
          "snippet": "        },\n        \"platforms\": {\n            \"twitter\": {\n                \"enabled\": True,\n                \"account_id\": \"main_account\",",
          "values": {
            "strings": [
              "platforms",
              "twitter",
              "enabled",
              "account_id",
              "main_account"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "beehiiv",
          "line": 36,
          "snippet": "                }\n            },\n            \"beehiiv\": {\n                \"enabled\": True,\n                \"account_id\": \"newsletter_ai\",",
          "values": {
            "strings": [
              "beehiiv",
              "enabled",
              "account_id",
              "newsletter_ai"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 115,
          "snippet": "        },\n        \"platforms\": {\n            \"linkedin\": {\n                \"enabled\": True,\n                \"account_id\": \"production\",",
          "values": {
            "strings": [
              "platforms",
              "linkedin",
              "enabled",
              "account_id",
              "production"
            ],
            "numbers": []
          }
        },
        {
          "type": "required_elements",
          "platform": "universal",
          "line": 120,
          "snippet": "                \"schedule_time\": tomorrow_2pm.isoformat(),\n                \"options\": {\n                    \"include_pdf\": True,\n                    \"hashtags\": [\"#AI\", \"#WeeklyRoundup\", \"#Innovation\"]\n                }",
          "values": {
            "strings": [
              "schedule_time",
              "options",
              "include_pdf",
              "hashtags",
              "#AI",
              "#WeeklyRoundup",
              "#Innovation"
            ],
            "numbers": [
              2
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "twitter",
          "line": 124,
          "snippet": "                }\n            },\n            \"twitter\": {\n                \"enabled\": True,\n                \"account_id\": \"main_account\", ",
          "values": {
            "strings": [
              "twitter",
              "enabled",
              "account_id",
              "main_account"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "substack",
          "line": 133,
          "snippet": "                }\n            },\n            \"substack\": {\n                \"enabled\": True,\n                \"account_id\": \"newsletter_ai\",",
          "values": {
            "strings": [
              "substack",
              "enabled",
              "account_id",
              "newsletter_ai"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "twitter",
          "line": 187,
          "snippet": "        },\n        \"platforms\": {\n            \"twitter\": {\n                \"enabled\": True,\n                \"options\": {",
          "values": {
            "strings": [
              "platforms",
              "twitter",
              "enabled",
              "options"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 194,
          "snippet": "                }\n            },\n            \"linkedin\": {\n                \"enabled\": True,\n                \"options\": {",
          "values": {
            "strings": [
              "linkedin",
              "enabled",
              "options"
            ],
            "numbers": []
          }
        },
        {
          "type": "required_elements",
          "platform": "universal",
          "line": 197,
          "snippet": "                \"enabled\": True,\n                \"options\": {\n                    \"include_pdf\": True,\n                    \"hashtags\": [\"#AI\", \"#ContentMarketing\", \"#Innovation\"]\n                }",
          "values": {
            "strings": [
              "enabled",
              "options",
              "include_pdf",
              "hashtags",
              "#AI",
              "#ContentMarketing",
              "#Innovation"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "substack",
          "line": 201,
          "snippet": "                }\n            },\n            \"substack\": {\n                \"enabled\": True,\n                \"options\": {",
          "values": {
            "strings": [
              "substack",
              "enabled",
              "options"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "beehiiv",
          "line": 208,
          "snippet": "                }\n            },\n            \"beehiiv\": {\n                \"enabled\": True,\n                \"options\": {",
          "values": {
            "strings": [
              "beehiiv",
              "enabled",
              "options"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "twitter",
          "line": 260,
          "snippet": "        },\n        \"platforms\": {\n            \"twitter\": {\"enabled\": True}\n        }\n    }",
          "values": {
            "strings": [
              "platforms",
              "twitter",
              "enabled"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "twitter",
          "line": 302,
          "snippet": "        \"topic\": {\"title\": \"Test\"},\n        \"platforms\": {\n            \"twitter\": {\"enabled\": False},\n            \"beehiiv\": {\"enabled\": False}\n        }",
          "values": {
            "strings": [
              "topic",
              "title",
              "Test",
              "platforms",
              "twitter",
              "enabled",
              "beehiiv",
              "enabled"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "twitter",
          "line": 303,
          "snippet": "        \"platforms\": {\n            \"twitter\": {\"enabled\": False},\n            \"beehiiv\": {\"enabled\": False}\n        }\n    }",
          "values": {
            "strings": [
              "platforms",
              "twitter",
              "enabled",
              "beehiiv",
              "enabled"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "twitter",
          "line": 324,
          "snippet": "    payload = {\n        \"topic\": {\"title\": \"Performance Test\"},\n        \"platforms\": {\"twitter\": {\"enabled\": True}}\n    }\n    ",
          "values": {
            "strings": [
              "topic",
              "title",
              "Performance Test",
              "platforms",
              "twitter",
              "enabled"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "twitter",
          "line": 428,
          "snippet": "    print(f'  curl -X POST {BASE_URL}/publish \\\\')\n    print('    -H \"Content-Type: application/json\" \\\\')\n    print('    -d \\'{\"topic\":{\"title\":\"Quick Test\"},\"platforms\":{\"twitter\":{\"enabled\":true}}}\\'')\n\nif __name__ == \"__main__\":",
          "values": {
            "strings": [
              "  curl -X POST {BASE_URL}/publish \\\\",
              "    -H ",
              " \\\\",
              "    -d \\",
              "topic",
              "title",
              "Quick Test",
              "platforms",
              "twitter",
              "enabled"
            ],
            "numbers": []
          }
        }
      ]
    },
    {
      "file": "/Users/hretheum/dev/bezrobocie/vector-wave/publisher/src/orchestrator/clients/__init__.py",
      "exists": true,
      "hits": []
    },
    {
      "file": "/Users/hretheum/dev/bezrobocie/vector-wave/publisher/src/orchestrator/clients/presenton_client.py",
      "exists": true,
      "hits": [
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 16,
          "snippet": "\nclass PresentonClient:\n    \"\"\"Client for Presenton microservice - LinkedIn carousel presentation generator\"\"\"\n    \n    def __init__(self, base_url: str = None, timeout: int = 120):",
          "values": {
            "strings": [
              "Client for Presenton microservice - LinkedIn carousel presentation generator"
            ],
            "numbers": [
              120
            ]
          }
        },
        {
          "type": "required_elements",
          "platform": "universal",
          "line": 89,
          "snippet": "                \n                # Validate response\n                required_fields = [\"presentation_id\", \"pptx_url\", \"pdf_path\", \"slide_count\"]\n                for field in required_fields:\n                    if field not in result:",
          "values": {
            "strings": [
              "presentation_id",
              "pptx_url",
              "pdf_path",
              "slide_count"
            ],
            "numbers": []
          }
        },
        {
          "type": "required_elements",
          "platform": "universal",
          "line": 90,
          "snippet": "                # Validate response\n                required_fields = [\"presentation_id\", \"pptx_url\", \"pdf_path\", \"slide_count\"]\n                for field in required_fields:\n                    if field not in result:\n                        raise Exception(f\"Invalid Presenton response - missing field: {field}\")",
          "values": {
            "strings": [
              "presentation_id",
              "pptx_url",
              "pdf_path",
              "slide_count",
              "Invalid Presenton response - missing field: {field}"
            ],
            "numbers": []
          }
        }
      ]
    },
    {
      "file": "/Users/hretheum/dev/bezrobocie/vector-wave/publisher/src/orchestrator/clients/ai_writing_flow_client.py",
      "exists": true,
      "hits": [
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 156,
          "snippet": "            raise Exception(f\"AI Writing Flow generation failed: {e}\")\n    \n    async def generate_linkedin_prompt(\n        self,\n        topic: Dict[str, Any],",
          "values": {
            "strings": [
              "AI Writing Flow generation failed: {e}"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 163,
          "snippet": "    ) -> Dict[str, Any]:\n        \"\"\"\n        Generate LinkedIn carousel prompt using specialized endpoint\n        \n        Args:",
          "values": {
            "strings": [],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 171,
          "snippet": "            \n        Returns:\n            LinkedIn prompt generation result\n        \"\"\"\n        ",
          "values": {
            "strings": [],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 175,
          "snippet": "        \n        try:\n            logger.info(f\"🎯 AI Writing Flow LinkedIn prompt generation: {topic.get('title', 'Unknown')}\")\n            \n            payload = {",
          "values": {
            "strings": [
              "🎯 AI Writing Flow LinkedIn prompt generation: {topic.get(",
              ", ",
              ")}"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 186,
          "snippet": "            session = await self._get_session()\n            response = await session.post(\n                f\"{self.base_url}/generate/linkedin-prompt\",\n                json=payload\n            )",
          "values": {
            "strings": [
              "{self.base_url}/generate/linkedin-prompt"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 192,
          "snippet": "            if response.status_code == 503:\n                error_detail = response.json().get(\"detail\", \"Service unavailable\")\n                logger.error(f\"❌ AI Writing Flow LinkedIn service unavailable: {error_detail}\")\n                raise Exception(f\"AI Writing Flow LinkedIn service unavailable: {error_detail}\")\n            ",
          "values": {
            "strings": [
              "detail",
              "Service unavailable",
              "❌ AI Writing Flow LinkedIn service unavailable: {error_detail}",
              "AI Writing Flow LinkedIn service unavailable: {error_detail}"
            ],
            "numbers": [
              503
            ]
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 193,
          "snippet": "                error_detail = response.json().get(\"detail\", \"Service unavailable\")\n                logger.error(f\"❌ AI Writing Flow LinkedIn service unavailable: {error_detail}\")\n                raise Exception(f\"AI Writing Flow LinkedIn service unavailable: {error_detail}\")\n            \n            response.raise_for_status()",
          "values": {
            "strings": [
              "detail",
              "Service unavailable",
              "❌ AI Writing Flow LinkedIn service unavailable: {error_detail}",
              "AI Writing Flow LinkedIn service unavailable: {error_detail}"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 201,
          "snippet": "            ready_for_presenton = result.get('ready_for_presenton', False)\n            \n            logger.info(f\"✅ LinkedIn prompt generation successful!\")\n            logger.info(f\"   Slides Count: {result.get('slides_count')}\")\n            logger.info(f\"   Prompt Length: {prompt_length} chars\")",
          "values": {
            "strings": [
              "ready_for_presenton",
              "✅ LinkedIn prompt generation successful!",
              "   Slides Count: {result.get(",
              ")}",
              "   Prompt Length: {prompt_length} chars"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 209,
          "snippet": "            \n        except httpx.RequestError as e:\n            logger.error(f\"❌ LinkedIn prompt request failed - connection error: {e}\")\n            raise Exception(f\"Failed to connect to AI Writing Flow for LinkedIn: {e}\")\n        except httpx.HTTPStatusError as e:",
          "values": {
            "strings": [
              "❌ LinkedIn prompt request failed - connection error: {e}",
              "Failed to connect to AI Writing Flow for LinkedIn: {e}"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 210,
          "snippet": "        except httpx.RequestError as e:\n            logger.error(f\"❌ LinkedIn prompt request failed - connection error: {e}\")\n            raise Exception(f\"Failed to connect to AI Writing Flow for LinkedIn: {e}\")\n        except httpx.HTTPStatusError as e:\n            logger.error(f\"❌ LinkedIn prompt request failed - HTTP {e.response.status_code}\")",
          "values": {
            "strings": [
              "❌ LinkedIn prompt request failed - connection error: {e}",
              "Failed to connect to AI Writing Flow for LinkedIn: {e}",
              "❌ LinkedIn prompt request failed - HTTP {e.response.status_code}"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 212,
          "snippet": "            raise Exception(f\"Failed to connect to AI Writing Flow for LinkedIn: {e}\")\n        except httpx.HTTPStatusError as e:\n            logger.error(f\"❌ LinkedIn prompt request failed - HTTP {e.response.status_code}\")\n            try:\n                error_detail = e.response.json()",
          "values": {
            "strings": [
              "Failed to connect to AI Writing Flow for LinkedIn: {e}",
              "❌ LinkedIn prompt request failed - HTTP {e.response.status_code}"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 215,
          "snippet": "            try:\n                error_detail = e.response.json()\n                raise Exception(f\"AI Writing Flow LinkedIn error ({e.response.status_code}): {error_detail.get('detail', 'Unknown error')}\")\n            except:\n                raise Exception(f\"AI Writing Flow LinkedIn HTTP error: {e.response.status_code}\")",
          "values": {
            "strings": [
              "AI Writing Flow LinkedIn error ({e.response.status_code}): {error_detail.get(",
              ", ",
              ")}",
              "AI Writing Flow LinkedIn HTTP error: {e.response.status_code}"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 217,
          "snippet": "                raise Exception(f\"AI Writing Flow LinkedIn error ({e.response.status_code}): {error_detail.get('detail', 'Unknown error')}\")\n            except:\n                raise Exception(f\"AI Writing Flow LinkedIn HTTP error: {e.response.status_code}\")\n        except Exception as e:\n            logger.error(f\"❌ LinkedIn prompt generation failed: {e}\")",
          "values": {
            "strings": [
              "AI Writing Flow LinkedIn error ({e.response.status_code}): {error_detail.get(",
              ", ",
              ")}",
              "AI Writing Flow LinkedIn HTTP error: {e.response.status_code}",
              "❌ LinkedIn prompt generation failed: {e}"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 219,
          "snippet": "                raise Exception(f\"AI Writing Flow LinkedIn HTTP error: {e.response.status_code}\")\n        except Exception as e:\n            logger.error(f\"❌ LinkedIn prompt generation failed: {e}\")\n            raise Exception(f\"LinkedIn prompt generation failed: {e}\")\n    ",
          "values": {
            "strings": [
              "AI Writing Flow LinkedIn HTTP error: {e.response.status_code}",
              "❌ LinkedIn prompt generation failed: {e}",
              "LinkedIn prompt generation failed: {e}"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 220,
          "snippet": "        except Exception as e:\n            logger.error(f\"❌ LinkedIn prompt generation failed: {e}\")\n            raise Exception(f\"LinkedIn prompt generation failed: {e}\")\n    \n    async def get_metrics(self) -> Dict[str, Any]:",
          "values": {
            "strings": [
              "❌ LinkedIn prompt generation failed: {e}",
              "LinkedIn prompt generation failed: {e}"
            ],
            "numbers": []
          }
        },
        {
          "type": "platform_specific",
          "platform": "linkedin",
          "line": 252,
          "snippet": "        except Exception as e:\n            logger.warning(f\"⚠️ Failed to get supported platforms: {e}\")\n            return [\"linkedin\", \"twitter\", \"ghost\", \"substack\"]  # Default fallback\n    \n    async def close(self):",
          "values": {
            "strings": [
              "⚠️ Failed to get supported platforms: {e}",
              "linkedin",
              "twitter",
              "ghost",
              "substack"
            ],
            "numbers": []
          }
        }
      ]
    }
  ],
  "total_hits": 3923
}