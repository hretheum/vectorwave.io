version: "3.9"

name: vector-wave

networks:
  vector-wave:
    driver: bridge

volumes:
  chroma_data:
  topic_manager_data:
  vikunja_data:
  wekan_db:

services:
  chromadb:
    image: chromadb/chroma:0.5.3
    environment:
      - CHROMA_SERVER_HOST=0.0.0.0
      - CHROMA_SERVER_HTTP_PORT=8000
    ports:
      - "8000:8000"
    volumes:
      - chroma_data:/chroma/chroma
    healthcheck:
      test: ["CMD", "wget", "-q", "-O", "-", "http://localhost:8000/api/v2/heartbeat"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 20s
    networks: [vector-wave]

  redis:
    image: redis:7-alpine
    command: ["redis-server", "--appendonly", "yes"]
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 20s
      timeout: 5s
      retries: 5
      start_period: 10s
    networks: [vector-wave]

  editorial-service:
    build: ./editorial-service
    environment:
      - ENVIRONMENT=development
      - LOG_LEVEL=debug
      - CHROMADB_HOST=chromadb
      - CHROMADB_PORT=8000
      - REDIS_URL=redis://redis:6379
      - SERVICE_PORT=8040
    depends_on:
      chromadb:
        condition: service_started
    ports:
      - "8040:8040"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8040/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 20s
    networks: [vector-wave]

  crewai-orchestrator:
    build: ./crewai-orchestrator
    environment:
      - EDITORIAL_SERVICE_URL=http://editorial-service:8040
      - HARVESTER_URL=http://harvester:8043
      - AI_WRITING_FLOW_URL=http://ai-writing-flow-service:8044
      - TRIAGE_POLICY_PATH=/app/config/triage_policy.yaml
      - TRIAGE_POLICY_SCHEMA_PATH=/app/config/triage_policy.schema.json
      - REDIS_URL=redis://redis:6379
    depends_on:
      editorial-service:
        condition: service_started
    ports:
      - "8042:8042"
    healthcheck:
      test: ["CMD", "wget", "-q", "-O", "-", "http://localhost:8042/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 20s
    networks: [vector-wave]

  topic-manager:
    build: ./topic-manager
    environment:
      - SERVICE_PORT=8041
      - CHROMADB_HOST=chromadb
      - CHROMADB_PORT=8000
      - EMBEDDINGS_PROVIDER=${EMBEDDINGS_PROVIDER:-openai}
      - OPENAI_API_KEY=${OPENAI_API_KEY:-}
      - OPENAI_EMBEDDING_MODEL=${OPENAI_EMBEDDING_MODEL:-text-embedding-3-small}
      - TOPIC_MANAGER_DB=/data/topics.db
      - INDEX_REINDEX_CRON=*/10 * * * *
    ports:
      - "8041:8041"
    healthcheck:
      test: ["CMD", "wget", "-q", "-O", "-", "http://localhost:8041/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    networks: [vector-wave]
    volumes:
      - topic_manager_data:/data

  publishing-orchestrator:
    profiles: ["publishing"]
    build: ./kolegium/publishing-orchestrator
    depends_on:
      editorial-service:
        condition: service_started
    networks: [vector-wave]
    ports:
      - "8085:8080"
    environment:
      - EDITORIAL_SERVICE_URL=http://editorial-service:8040
      - AI_WRITING_FLOW_URL=http://ai-writing-flow-service:8044
      - GAMMA_PPT_URL=http://gamma-ppt-generator:8003
      - PRESENTON_URL=http://presenton:8089
      - LINKEDIN_PPT_GENERATOR_URL=http://linkedin-ppt:8002
      - TYPEFULLY_API_KEY=${TYPEFULLY_API_KEY}
      - GAMMA_ENABLED=true

  linkedin-ppt:
    profiles: ["publishing"]
    build: ./kolegium/linkedin_ppt_generator
    networks: [vector-wave]
    ports:
      - "8002:8002"
    environment:
      - PRESENTON_SERVICE_URL=http://presenton:8089

  presenton:
    profiles: ["publishing"]
    build: ./presenton
    networks: [vector-wave]
    ports:
      - "8089:8089"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8089/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 20s

  analytics-service:
    profiles: ["analytics"]
    build: ./kolegium/analytics-service
    environment:
      - ENVIRONMENT=development
      - LOG_LEVEL=debug
      - CHROMADB_URL=http://chromadb:8000
      - SERVICE_PORT=8081
    depends_on:
      chromadb:
        condition: service_healthy
    ports:
      - "8081:8081"
    networks: [vector-wave]

  ai-writing-flow-service:
    build: ./ai-writing-flow-service
    environment:
      - HOST=0.0.0.0
      - PORT=8044
    ports:
      - "8044:8044"
    healthcheck:
      test: ["CMD", "wget", "-q", "-O", "-", "http://localhost:8044/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 20s
    networks: [vector-wave]

  harvester:
    profiles: ["harvester"]
    build:
      context: ./harvester
      dockerfile: Dockerfile
    container_name: trend-harvester
    env_file:
      - .env
    ports:
      - "8043:8043"
    volumes:
      - ./harvester/src:/home/appuser/app/src
    environment:
      - EDITORIAL_SERVICE_URL=http://editorial-service:8040
      - TOPIC_MANAGER_URL=http://topic-manager:8041
      - CHROMADB_HOST=chromadb
      - CHROMADB_PORT=8000
      - HARVEST_FETCH_LIMIT=${HARVEST_FETCH_LIMIT:-50}
      - SELECTIVE_PROFILE_THRESHOLD=${SELECTIVE_PROFILE_THRESHOLD:-0.7}
      - SELECTIVE_NOVELTY_THRESHOLD=${SELECTIVE_NOVELTY_THRESHOLD:-0.8}
    depends_on:
      - chromadb
      - editorial-service
      - topic-manager
    networks:
      - vector-wave
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8043/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: unless-stopped

  gamma-ppt-generator:
    profiles: ["gamma"]
    build: ./kolegium/gamma-ppt-generator
    env_file:
      - /Users/hretheum/dev/bezrobocie/vector-wave/.env
    ports:
      - "8003:8003"
    networks: [vector-wave]

  vikunja:
    profiles: ["kanban"]
    image: vikunja/vikunja:latest
    container_name: vikunja
    ports:
      - "3456:3456"
    environment:
      VIKUNJA_DATABASE_TYPE: sqlite
      VIKUNJA_DATABASE_PATH: /app/vikunja/files/vikunja.db
      VIKUNJA_SERVICE_JWTSECRET: ${VIKUNJA_JWTSECRET:-changeme-dev}
      VIKUNJA_SERVICE_ENABLEREGISTRATION: "true"
    volumes:
      - vikunja_data:/app/vikunja/files
    restart: unless-stopped
    user: "0:0"

  # Wekan stack (MongoDB + Wekan) — alternatywny Kanban zarządzalny przez API
  wekandb:
    profiles: ["kanban"]
    image: mongo:5.0
    container_name: wekandb
    volumes:
      - wekan_db:/data/db
    networks: [vector-wave]
    restart: unless-stopped

  wekan:
    profiles: ["kanban"]
    image: ghcr.io/wekan/wekan:latest
    container_name: wekan
    depends_on:
      - wekandb
    environment:
      - MONGO_URL=mongodb://wekandb:27017/wekan
      - ROOT_URL=http://localhost:8090
      - WITH_API=true
      - ADMIN_USER=vw-admin
      - ADMIN_PASS=VectorWave!123
      - ADMIN_EMAIL=vw-admin@example.com
    ports:
      - "8090:8080"
    networks: [vector-wave]
    restart: unless-stopped

